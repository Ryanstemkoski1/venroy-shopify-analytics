import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core"
export type Maybe<T> = T | null
export type InputMaybe<T> = T | null | undefined
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never }
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends " $fragmentName" | "__typename" ? T[P] : never
    }
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
  ID: { input: string; output: string }
  String: { input: string; output: string }
  Boolean: { input: boolean; output: boolean }
  Int: { input: number; output: number }
  Float: { input: number; output: number }
  ARN: { input: string; output: string }
  BigInt: { input: string; output: string }
  Color: { input: string; output: string }
  Date: { input: string; output: string }
  DateTime: { input: string; output: string }
  Decimal: { input: number; output: number }
  FormattedString: { input: string; output: string }
  HTML: { input: string; output: string }
  JSON: { input: Record<string, unknown>; output: Record<string, unknown> }
  Money: { input: string; output: string }
  StorefrontID: { input: string; output: string }
  URL: { input: string; output: string }
  UnsignedInt64: { input: string; output: string }
  UtcOffset: { input: string; output: string }
}

/** A checkout that was abandoned by the customer. */
export interface ShopifyAbandonedCheckout
  extends ShopifyNavigable,
    ShopifyNode {
  __typename?: "AbandonedCheckout"
  /** The URL for the buyer to recover their checkout. */
  abandonedCheckoutUrl: Scalars["URL"]["output"]
  /**
   * The billing address provided by the buyer.
   * Null if the user did not provide a billing address.
   */
  billingAddress?: Maybe<ShopifyMailingAddress>
  /**
   * The date and time when the buyer completed the checkout.
   * Null if the checkout has not been completed.
   */
  completedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The date and time when the checkout was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** A list of extra information that has been added to the checkout. */
  customAttributes: Array<ShopifyAttribute>
  /**
   * The customer who created this checkout.
   * May be null if the checkout was created from a draft order or via an app.
   */
  customer?: Maybe<ShopifyCustomer>
  /** A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars["String"]["output"]
  /** The discount codes entered by the buyer at checkout. */
  discountCodes: Array<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** A list of the line items in this checkout. */
  lineItems: ShopifyAbandonedCheckoutLineItemConnection
  /**
   * The number of products in the checkout.
   * @deprecated Use [AbandonedCheckoutLineItem.quantity](https://shopify.dev/api/admin-graphql/unstable/objects/AbandonedCheckoutLineItem#field-quantity) instead.
   */
  lineItemsQuantity: Scalars["Int"]["output"]
  /** Unique merchant-facing identifier for the checkout. */
  name: Scalars["String"]["output"]
  /** A merchant-facing note added to the checkout. Not visible to the buyer. */
  note: Scalars["String"]["output"]
  /**
   * The shipping address to where the line items will be shipped.
   * Null if the user did not provide a shipping address.
   */
  shippingAddress?: Maybe<ShopifyMailingAddress>
  /** The sum of all items in the checkout, including discounts but excluding shipping, taxes and tips. */
  subtotalPriceSet: ShopifyMoneyBag
  /** Individual taxes charged on the checkout. */
  taxLines: Array<ShopifyTaxLine>
  /** Whether taxes are included in line item and shipping line prices. */
  taxesIncluded: Scalars["Boolean"]["output"]
  /** The total amount of discounts to be applied. */
  totalDiscountSet: ShopifyMoneyBag
  /** The total duties applied to the checkout. */
  totalDutiesSet?: Maybe<ShopifyMoneyBag>
  /** The sum of the prices of all line items in the checkout. */
  totalLineItemsPriceSet: ShopifyMoneyBag
  /** The sum of all items in the checkout, including discounts, shipping, taxes, and tips. */
  totalPriceSet: ShopifyMoneyBag
  /** The total tax applied to the checkout. */
  totalTaxSet?: Maybe<ShopifyMoneyBag>
  /** The date and time when the checkout was most recently updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** A checkout that was abandoned by the customer. */
export interface ShopifyAbandonedCheckoutLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple AbandonedCheckouts. */
export interface ShopifyAbandonedCheckoutConnection {
  __typename?: "AbandonedCheckoutConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyAbandonedCheckoutEdge>
  /** A list of nodes that are contained in AbandonedCheckoutEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyAbandonedCheckout>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one AbandonedCheckout and a cursor during pagination. */
export interface ShopifyAbandonedCheckoutEdge {
  __typename?: "AbandonedCheckoutEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of AbandonedCheckoutEdge. */
  node: ShopifyAbandonedCheckout
}

/** A single line item in an abandoned checkout. */
export interface ShopifyAbandonedCheckoutLineItem extends ShopifyNode {
  __typename?: "AbandonedCheckoutLineItem"
  /** A list of line item components for this line item. */
  components?: Maybe<Array<ShopifyAbandonedCheckoutLineItemComponent>>
  /** A list of extra information that has been added to the line item. */
  customAttributes: Array<ShopifyAttribute>
  /** Discount allocations that have been applied on the line item. */
  discountAllocations: ShopifyDiscountAllocationConnection
  /** Final total price for the entire quantity of this line item, including discounts. */
  discountedTotalPriceSet: ShopifyMoneyBag
  /** The total price for the entire quantity of this line item, after all discounts are applied, at both the line item and code-based line item level. */
  discountedTotalPriceWithCodeDiscount: ShopifyMoneyBag
  /** The price of a single variant unit after discounts are applied at the line item level, in shop and presentment currencies. */
  discountedUnitPriceSet: ShopifyMoneyBag
  /** The price of a single variant unit after all discounts are applied, at both the line item and code-based line item level. */
  discountedUnitPriceWithCodeDiscount: ShopifyMoneyBag
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * The image associated with the line item's variant or product.
   * NULL if the line item has no product, or if neither the variant nor the product have an image.
   */
  image?: Maybe<ShopifyImage>
  /** Original total price for the entire quantity of this line item, before discounts. */
  originalTotalPriceSet: ShopifyMoneyBag
  /** Original price for a single unit of this line item, before discounts. */
  originalUnitPriceSet: ShopifyMoneyBag
  /**
   * Product for this line item.
   * NULL for custom line items and products that were deleted after checkout began.
   */
  product?: Maybe<ShopifyProduct>
  /** The quantity of the line item. */
  quantity: Scalars["Int"]["output"]
  /** SKU for the inventory item associated with the variant, if any. */
  sku?: Maybe<Scalars["String"]["output"]>
  /** Title of the line item. Defaults to the product's title. */
  title?: Maybe<Scalars["String"]["output"]>
  /**
   * Product variant for this line item.
   * NULL for custom line items and variants that were deleted after checkout began.
   */
  variant?: Maybe<ShopifyProductVariant>
  /**
   * Title of the variant for this line item.
   * NULL for custom line items and products that don't have distinct variants.
   */
  variantTitle?: Maybe<Scalars["String"]["output"]>
}

/** A single line item in an abandoned checkout. */
export interface ShopifyAbandonedCheckoutLineItemDiscountAllocationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The list of line item components that belong to a line item. */
export interface ShopifyAbandonedCheckoutLineItemComponent {
  __typename?: "AbandonedCheckoutLineItemComponent"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * The variant image associated with the line item component.
   * NULL if the variant associated doesn't have an image.
   */
  image?: Maybe<ShopifyImage>
  /** The quantity of the line item component. */
  quantity: Scalars["Int"]["output"]
  /** Title of the line item component. */
  title: Scalars["String"]["output"]
  /** The name of the variant. */
  variantTitle?: Maybe<Scalars["String"]["output"]>
}

/** An auto-generated type for paginating through multiple AbandonedCheckoutLineItems. */
export interface ShopifyAbandonedCheckoutLineItemConnection {
  __typename?: "AbandonedCheckoutLineItemConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyAbandonedCheckoutLineItemEdge>
  /** A list of nodes that are contained in AbandonedCheckoutLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyAbandonedCheckoutLineItem>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one AbandonedCheckoutLineItem and a cursor during pagination. */
export interface ShopifyAbandonedCheckoutLineItemEdge {
  __typename?: "AbandonedCheckoutLineItemEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of AbandonedCheckoutLineItemEdge. */
  node: ShopifyAbandonedCheckoutLineItem
}

/** The set of valid sort keys for the AbandonedCheckout query. */
export type ShopifyAbandonedCheckoutSortKeys =
  /** Sort by the `checkout_id` value. */
  | "CHECKOUT_ID"
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `customer_name` value. */
  | "CUSTOMER_NAME"
  /** Sort by the `id` value. */
  | "ID"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  /** Sort by the `total_price` value. */
  | "TOTAL_PRICE"
  | "%future added value"

/** A browse, cart, or checkout that was abandoned by a customer. */
export interface ShopifyAbandonment extends ShopifyNode {
  __typename?: "Abandonment"
  /** The abandonment payload for the abandoned checkout. */
  abandonedCheckoutPayload?: Maybe<ShopifyAbandonedCheckout>
  /** The abandonment type. */
  abandonmentType: ShopifyAbandonmentAbandonmentType
  /** The app associated with an abandoned checkout. */
  app: ShopifyApp
  /** Permalink to the cart page. */
  cartUrl?: Maybe<Scalars["URL"]["output"]>
  /** The date and time when the abandonment was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The customer who abandoned this event. */
  customer: ShopifyCustomer
  /** Whether the customer has a draft order since this abandonment has been abandoned. */
  customerHasNoDraftOrderSinceAbandonment: Scalars["Boolean"]["output"]
  /** Whether the customer has completed an order since this checkout has been abandoned. */
  customerHasNoOrderSinceAbandonment: Scalars["Boolean"]["output"]
  /** The number of days since the last abandonment email was sent to the customer. */
  daysSinceLastAbandonmentEmail: Scalars["Int"]["output"]
  /** When the email was sent, if that's the case. */
  emailSentAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The email state (e.g., sent or not sent). */
  emailState?: Maybe<ShopifyAbandonmentEmailState>
  /** The number of hours since the customer has last abandoned a checkout. */
  hoursSinceLastAbandonedCheckout?: Maybe<Scalars["Float"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Whether the products in abandonment are available. */
  inventoryAvailable: Scalars["Boolean"]["output"]
  /** Whether the abandonment event comes from a custom storefront channel. */
  isFromCustomStorefront: Scalars["Boolean"]["output"]
  /** Whether the abandonment event comes from the Online Store sales channel. */
  isFromOnlineStore: Scalars["Boolean"]["output"]
  /** Whether the abandonment event comes from the Shop app sales channel. */
  isFromShopApp: Scalars["Boolean"]["output"]
  /** Whether the abandonment event comes from Shop Pay. */
  isFromShopPay: Scalars["Boolean"]["output"]
  /** Whether the customer didn't complete another most significant step since this abandonment. */
  isMostSignificantAbandonment: Scalars["Boolean"]["output"]
  /** The date for the latest browse abandonment. */
  lastBrowseAbandonmentDate: Scalars["DateTime"]["output"]
  /** The date for the latest cart abandonment. */
  lastCartAbandonmentDate: Scalars["DateTime"]["output"]
  /** The date for the latest checkout abandonment. */
  lastCheckoutAbandonmentDate: Scalars["DateTime"]["output"]
  /** The most recent step type. */
  mostRecentStep: ShopifyAbandonmentAbandonmentType
  /** The products added to the cart during the customer abandoned visit. */
  productsAddedToCart: ShopifyCustomerVisitProductInfoConnection
  /** The products viewed during the customer abandoned visit. */
  productsViewed: ShopifyCustomerVisitProductInfoConnection
  /** The date and time when the visit started. */
  visitStartedAt?: Maybe<Scalars["DateTime"]["output"]>
}

/** A browse, cart, or checkout that was abandoned by a customer. */
export interface ShopifyAbandonmentProductsAddedToCartArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A browse, cart, or checkout that was abandoned by a customer. */
export interface ShopifyAbandonmentProductsViewedArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Specifies the abandonment type. */
export type ShopifyAbandonmentAbandonmentType =
  /** The abandonment event is an abandoned browse. */
  | "BROWSE"
  /** The abandonment event is an abandoned cart. */
  | "CART"
  /** The abandonment event is an abandoned checkout. */
  | "CHECKOUT"
  | "%future added value"

/** Specifies the delivery state of a marketing activity. */
export type ShopifyAbandonmentDeliveryState =
  /** The marketing activity action has not yet been sent. */
  | "NOT_SENT"
  /** The marketing activity action has been scheduled for later delivery. */
  | "SCHEDULED"
  /** The marketing activity action has been sent. */
  | "SENT"
  | "%future added value"

/** Specifies the email state. */
export type ShopifyAbandonmentEmailState =
  /** The email has not yet been sent. */
  | "NOT_SENT"
  /** The email has been scheduled for later delivery. */
  | "SCHEDULED"
  /** The email has been sent. */
  | "SENT"
  | "%future added value"

/** Return type for `abandonmentEmailStateUpdate` mutation. */
export interface ShopifyAbandonmentEmailStateUpdatePayload {
  __typename?: "AbandonmentEmailStateUpdatePayload"
  /** The updated abandonment. */
  abandonment?: Maybe<ShopifyAbandonment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyAbandonmentEmailStateUpdateUserError>
}

/** An error that occurs during the execution of `AbandonmentEmailStateUpdate`. */
export interface ShopifyAbandonmentEmailStateUpdateUserError
  extends ShopifyDisplayableError {
  __typename?: "AbandonmentEmailStateUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyAbandonmentEmailStateUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `AbandonmentEmailStateUpdateUserError`. */
export type ShopifyAbandonmentEmailStateUpdateUserErrorCode =
  /** Unable to find an Abandonment for the provided ID. */
  "ABANDONMENT_NOT_FOUND" | "%future added value"

/** Return type for `abandonmentUpdateActivitiesDeliveryStatuses` mutation. */
export interface ShopifyAbandonmentUpdateActivitiesDeliveryStatusesPayload {
  __typename?: "AbandonmentUpdateActivitiesDeliveryStatusesPayload"
  /** The updated abandonment. */
  abandonment?: Maybe<ShopifyAbandonment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyAbandonmentUpdateActivitiesDeliveryStatusesUserError>
}

/** An error that occurs during the execution of `AbandonmentUpdateActivitiesDeliveryStatuses`. */
export interface ShopifyAbandonmentUpdateActivitiesDeliveryStatusesUserError
  extends ShopifyDisplayableError {
  __typename?: "AbandonmentUpdateActivitiesDeliveryStatusesUserError"
  /** The error code. */
  code?: Maybe<ShopifyAbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `AbandonmentUpdateActivitiesDeliveryStatusesUserError`. */
export type ShopifyAbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode =
  /** Unable to find an Abandonment for the provided ID. */
  | "ABANDONMENT_NOT_FOUND"
  /** Unable to find delivery status info for the provided ID. */
  | "DELIVERY_STATUS_INFO_NOT_FOUND"
  /** Unable to find a marketing activity for the provided ID. */
  | "MARKETING_ACTIVITY_NOT_FOUND"
  | "%future added value"

/** The permission required to access a Shopify Admin API or Storefront API resource for a shop. Merchants grant access scopes that are requested by applications. */
export interface ShopifyAccessScope {
  __typename?: "AccessScope"
  /** A description of the actions that the access scope allows an app to perform. */
  description: Scalars["String"]["output"]
  /** A readable string that represents the access scope. The string usually follows the format `{action}_{resource}`. `{action}` is `read` or `write`, and `{resource}` is the resource that the action can be performed on. `{action}` and `{resource}` are separated by an underscore. For example, `read_orders` or `write_products`. */
  handle: Scalars["String"]["output"]
}

/** Possible account types that a staff member can have. */
export type ShopifyAccountType =
  /** The account of a partner who collaborates with the merchant. */
  | "COLLABORATOR"
  /** The account of a partner collaborator team member. */
  | "COLLABORATOR_TEAM_MEMBER"
  /** The user has not yet accepted the invitation to create an account. */
  | "INVITED"
  /** The user has not yet accepted the invitation to become the store owner. */
  | "INVITED_STORE_OWNER"
  /** The account can access the Shopify admin. */
  | "REGULAR"
  /** The admin has not yet accepted the request to create a collaborator account. */
  | "REQUESTED"
  /** The account cannot access the Shopify admin. */
  | "RESTRICTED"
  /** The account can be signed into via a SAML provider. */
  | "SAML"
  | "%future added value"

/** Represents an operation publishing all products to a publication. */
export interface ShopifyAddAllProductsOperation
  extends ShopifyNode,
    ShopifyResourceOperation {
  __typename?: "AddAllProductsOperation"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The count of processed rows, summing imported, failed, and skipped rows. */
  processedRowCount?: Maybe<Scalars["Int"]["output"]>
  /** Represents a rows objects within this background operation. */
  rowCount?: Maybe<ShopifyRowCount>
  /** The status of this operation. */
  status: ShopifyResourceOperationStatus
}

/** The additional fees that have been applied to the order. */
export interface ShopifyAdditionalFee extends ShopifyNode {
  __typename?: "AdditionalFee"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The name of the additional fee. */
  name: Scalars["String"]["output"]
  /** The price of the additional fee. */
  price: ShopifyMoneyBag
  /** A list of taxes charged on the additional fee. */
  taxLines: Array<ShopifyTaxLine>
}

/** A sale associated with an additional fee charge. */
export interface ShopifyAdditionalFeeSale extends ShopifySale {
  __typename?: "AdditionalFeeSale"
  /** The type of order action that the sale represents. */
  actionType: ShopifySaleActionType
  /** The additional fees for the associated sale. */
  additionalFee: ShopifySaleAdditionalFee
  /** The unique ID for the sale. */
  id: Scalars["ID"]["output"]
  /** The line type assocated with the sale. */
  lineType: ShopifySaleLineType
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars["Int"]["output"]>
  /** All individual taxes associated with the sale. */
  taxes: Array<ShopifySaleTax>
  /** The total sale amount after taxes and discounts. */
  totalAmount: ShopifyMoneyBag
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: ShopifyMoneyBag
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: ShopifyMoneyBag
  /** The total amount of taxes for the sale. */
  totalTaxAmount: ShopifyMoneyBag
}

/** A sale associated with an order price adjustment. */
export interface ShopifyAdjustmentSale extends ShopifySale {
  __typename?: "AdjustmentSale"
  /** The type of order action that the sale represents. */
  actionType: ShopifySaleActionType
  /** The unique ID for the sale. */
  id: Scalars["ID"]["output"]
  /** The line type assocated with the sale. */
  lineType: ShopifySaleLineType
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars["Int"]["output"]>
  /** All individual taxes associated with the sale. */
  taxes: Array<ShopifySaleTax>
  /** The total sale amount after taxes and discounts. */
  totalAmount: ShopifyMoneyBag
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: ShopifyMoneyBag
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: ShopifyMoneyBag
  /** The total amount of taxes for the sale. */
  totalTaxAmount: ShopifyMoneyBag
}

/** The set of valid sort keys for the Adjustments query. */
export type ShopifyAdjustmentsSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `time` value. */
  | "TIME"
  | "%future added value"

/**
 * Represents a discount configuration that applies to all items in a customer's cart without restriction. This object enables store-wide promotions that affect every product equally.
 *
 * For example, a "Sitewide 10% Off Everything" sale would target all items, ensuring that every product in the customer's cart receives the promotional discount regardless of category or collection.
 *
 * This universal targeting approach simplifies promotional campaigns and provides customers with clear, straightforward savings across the entire product catalog.
 */
export interface ShopifyAllDiscountItems {
  __typename?: "AllDiscountItems"
  /** Whether all items are eligible for the discount. This value always returns `true`. */
  allItems: Scalars["Boolean"]["output"]
}

/** The Android mobile platform application. */
export interface ShopifyAndroidApplication {
  __typename?: "AndroidApplication"
  /** Whether Android App Links are supported by this app. */
  appLinksEnabled: Scalars["Boolean"]["output"]
  /** The Android application ID. */
  applicationId?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The SHA256 fingerprints of the app's signing certificate. */
  sha256CertFingerprints: Array<Scalars["String"]["output"]>
}

/**
 * A version of the API, as defined by [Shopify API versioning](https://shopify.dev/api/usage/versioning).
 * Versions are commonly referred to by their handle (for example, `2021-10`).
 */
export interface ShopifyApiVersion {
  __typename?: "ApiVersion"
  /** The human-readable name of the version. */
  displayName: Scalars["String"]["output"]
  /** The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or `unstable` handle. */
  handle: Scalars["String"]["output"]
  /** Whether the version is actively supported by Shopify. Supported API versions are guaranteed to be stable. Unsupported API versions include unstable, release candidate, and end-of-life versions that are marked as unsupported. For more information, refer to [Versioning](https://shopify.dev/api/usage/versioning). */
  supported: Scalars["Boolean"]["output"]
}

/** A Shopify application. */
export interface ShopifyApp extends ShopifyNode {
  __typename?: "App"
  /** A unique application API identifier. */
  apiKey: Scalars["String"]["output"]
  /** App store page URL of the app. */
  appStoreAppUrl?: Maybe<Scalars["URL"]["output"]>
  /** App store page URL of the developer who created the app. */
  appStoreDeveloperUrl?: Maybe<Scalars["URL"]["output"]>
  /** All requestable access scopes available to the app. */
  availableAccessScopes: Array<ShopifyAccessScope>
  /** Banner image for the app. */
  banner: ShopifyImage
  /** Description of the app. */
  description?: Maybe<Scalars["String"]["output"]>
  /** The name of the app developer. */
  developerName?: Maybe<Scalars["String"]["output"]>
  /** The type of app developer. */
  developerType: ShopifyAppDeveloperType
  /**
   * Website of the developer who created the app.
   * @deprecated Use `appStoreDeveloperUrl` instead.
   */
  developerUrl: Scalars["URL"]["output"]
  /** Whether the app uses the Embedded App SDK. */
  embedded: Scalars["Boolean"]["output"]
  /** Requirements that must be met before the app can be installed. */
  failedRequirements: Array<ShopifyFailedRequirement>
  /** A list of app features that are shown in the Shopify App Store listing. */
  features: Array<Scalars["String"]["output"]>
  /** Feedback from this app about the store. */
  feedback?: Maybe<ShopifyAppFeedback>
  /** Handle of the app. */
  handle?: Maybe<Scalars["String"]["output"]>
  /** Icon that represents the app. */
  icon: ShopifyImage
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Webpage where you can install the app, if app requires explicit user permission. */
  installUrl?: Maybe<Scalars["URL"]["output"]>
  /**
   * Corresponding AppInstallation for this shop and App.
   * Returns null if the App is not installed.
   */
  installation?: Maybe<ShopifyAppInstallation>
  /** Whether the app is the [post purchase](https://shopify.dev/apps/checkout/post-purchase) app in use. */
  isPostPurchaseAppInUse: Scalars["Boolean"]["output"]
  /**
   * Webpage that the app starts in.
   * @deprecated Use AppInstallation.launchUrl instead
   */
  launchUrl: Scalars["URL"]["output"]
  /**
   * Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.
   * @deprecated Use AppInstallation.navigationItems instead
   */
  navigationItems: Array<ShopifyNavigationItem>
  /** The optional scopes requested by the app. Lists the optional access scopes the app has declared in its configuration. These scopes are optionally requested by the app after installation. */
  optionalAccessScopes: Array<ShopifyAccessScope>
  /** Whether the app was previously installed on the current shop. */
  previouslyInstalled: Scalars["Boolean"]["output"]
  /** Detailed information about the app pricing. */
  pricingDetails?: Maybe<Scalars["String"]["output"]>
  /** Summary of the app pricing details. */
  pricingDetailsSummary: Scalars["String"]["output"]
  /** Link to app privacy policy. */
  privacyPolicyUrl?: Maybe<Scalars["URL"]["output"]>
  /** The public category for the app. */
  publicCategory: ShopifyAppPublicCategory
  /** Whether the app is published to the Shopify App Store. */
  published: Scalars["Boolean"]["output"]
  /** The access scopes requested by the app. Lists the access scopes the app has declared in its configuration. Merchant must grant approval to these scopes for the app to be installed. */
  requestedAccessScopes: Array<ShopifyAccessScope>
  /** Screenshots of the app. */
  screenshots: Array<ShopifyImage>
  /** Whether the app was developed by Shopify. */
  shopifyDeveloped: Scalars["Boolean"]["output"]
  /** Name of the app. */
  title: Scalars["String"]["output"]
  /**
   * Message that appears when the app is uninstalled. For example:
   * By removing this app, you will no longer be able to publish products to MySocialSite or view this app in your Shopify admin. You can re-enable this channel at any time.
   */
  uninstallMessage: Scalars["String"]["output"]
  /**
   * Webpage where you can uninstall the app.
   * @deprecated Use AppInstallation.uninstallUrl instead
   */
  uninstallUrl?: Maybe<Scalars["URL"]["output"]>
  /** The webhook API version for the app. */
  webhookApiVersion: Scalars["String"]["output"]
}

/** A catalog that defines the publication associated with an app. */
export interface ShopifyAppCatalog extends ShopifyCatalog, ShopifyNode {
  __typename?: "AppCatalog"
  /** The apps associated with the catalog. */
  apps: ShopifyAppConnection
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Most recent catalog operations. */
  operations: Array<ShopifyResourceOperation>
  /** The price list associated with the catalog. */
  priceList?: Maybe<ShopifyPriceList>
  /** A group of products and collections that's published to a catalog. */
  publication?: Maybe<ShopifyPublication>
  /** The status of the catalog. */
  status: ShopifyCatalogStatus
  /** The name of the catalog. */
  title: Scalars["String"]["output"]
}

/** A catalog that defines the publication associated with an app. */
export interface ShopifyAppCatalogAppsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple Apps. */
export interface ShopifyAppConnection {
  __typename?: "AppConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyAppEdge>
  /** A list of nodes that are contained in AppEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyApp>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify. */
export interface ShopifyAppCredit extends ShopifyNode {
  __typename?: "AppCredit"
  /** The amount that can be used towards future app purchases in Shopify. */
  amount: ShopifyMoneyV2
  /** The date and time when the app credit was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The description of the app credit. */
  description: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Whether the app credit is a test transaction. */
  test: Scalars["Boolean"]["output"]
}

/** An auto-generated type for paginating through multiple AppCredits. */
export interface ShopifyAppCreditConnection {
  __typename?: "AppCreditConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyAppCreditEdge>
  /** A list of nodes that are contained in AppCreditEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyAppCredit>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one AppCredit and a cursor during pagination. */
export interface ShopifyAppCreditEdge {
  __typename?: "AppCreditEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of AppCreditEdge. */
  node: ShopifyAppCredit
}

/** Possible types of app developer. */
export type ShopifyAppDeveloperType =
  /** Indicates the app developer works directly for a Merchant. */
  | "MERCHANT"
  /** Indicates the app developer is a Partner. */
  | "PARTNER"
  /** Indicates the app developer is Shopify. */
  | "SHOPIFY"
  /** Indicates the app developer is unknown. It is not categorized as any of the other developer types. */
  | "UNKNOWN"
  | "%future added value"

/**
 * The details about the app extension that's providing the
 * [discount type](https://help.shopify.com/manual/discounts/discount-types).
 * This information includes the app extension's name and
 * [client ID](https://shopify.dev/docs/apps/build/authentication-authorization/client-secrets),
 * [App Bridge configuration](https://shopify.dev/docs/api/app-bridge),
 * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations),
 * [function ID](https://shopify.dev/docs/apps/build/functions/input-output/metafields-for-input-queries),
 * and other metadata about the discount type, including the discount type's name and description.
 */
export interface ShopifyAppDiscountType {
  __typename?: "AppDiscountType"
  /**
   * The name of the app extension that's providing the
   * [discount type](https://help.shopify.com/manual/discounts/discount-types).
   */
  app: ShopifyApp
  /**
   * The [App Bridge configuration](https://shopify.dev/docs/api/app-bridge)
   * for the [discount type](https://help.shopify.com/manual/discounts/discount-types).
   */
  appBridge: ShopifyFunctionsAppBridge
  /**
   * The [client ID](https://shopify.dev/docs/apps/build/authentication-authorization/client-secrets)
   * of the app extension that's providing the [discount type](https://help.shopify.com/manual/discounts/discount-types).
   */
  appKey: Scalars["String"]["output"]
  /**
   * A description of the
   * [discount type](https://help.shopify.com/manual/discounts/discount-types)
   * provided by the app extension.
   */
  description?: Maybe<Scalars["String"]["output"]>
  /**
   * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that's used to control how discounts can be combined.
   * @deprecated Use `discountClasses` instead.
   */
  discountClass: ShopifyDiscountClass
  /**
   * The list of [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that this app extension supports.
   */
  discountClasses: Array<ShopifyDiscountClass>
  /**
   * The
   * [function ID](https://shopify.dev/docs/apps/build/functions/input-output/metafields-for-input-queries)
   * associated with the app extension providing the
   * [discount type](https://help.shopify.com/manual/discounts/discount-types).
   */
  functionId: Scalars["String"]["output"]
  /**
   * The type of line item on an order that the
   * [discount type](https://help.shopify.com/manual/discounts/discount-types) applies to.
   * Valid values: `SHIPPING_LINE` and `LINE_ITEM`.
   * @deprecated Use `discountClasses` instead.
   */
  targetType: ShopifyDiscountApplicationTargetType
  /**
   * The name of the [discount type](https://help.shopify.com/manual/discounts/discount-types)
   * that the app extension is providing.
   */
  title: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple AppDiscountTypes. */
export interface ShopifyAppDiscountTypeConnection {
  __typename?: "AppDiscountTypeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyAppDiscountTypeEdge>
  /** A list of nodes that are contained in AppDiscountTypeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyAppDiscountType>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one AppDiscountType and a cursor during pagination. */
export interface ShopifyAppDiscountTypeEdge {
  __typename?: "AppDiscountTypeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of AppDiscountTypeEdge. */
  node: ShopifyAppDiscountType
}

/** An auto-generated type which holds one App and a cursor during pagination. */
export interface ShopifyAppEdge {
  __typename?: "AppEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of AppEdge. */
  node: ShopifyApp
}

/**
 * Reports the status of shops and their resources and displays this information
 * within Shopify admin. AppFeedback is used to notify merchants about steps they need to take
 * to set up an app on their store.
 */
export interface ShopifyAppFeedback {
  __typename?: "AppFeedback"
  /** The application associated to the feedback. */
  app: ShopifyApp
  /** The date and time when the app feedback was generated. */
  feedbackGeneratedAt: Scalars["DateTime"]["output"]
  /** A link to where merchants can resolve errors. */
  link?: Maybe<ShopifyLink>
  /** The feedback message presented to the merchant. */
  messages: Array<ShopifyUserError>
  /** Conveys the state of the feedback and whether it requires merchant action or not. */
  state: ShopifyResourceFeedbackState
}

/** Represents an installed application on a shop. */
export interface ShopifyAppInstallation
  extends ShopifyHasMetafields,
    ShopifyNode {
  __typename?: "AppInstallation"
  /** The access scopes granted to the application by a merchant during installation. */
  accessScopes: Array<ShopifyAccessScope>
  /** The active application subscriptions billed to the shop on a recurring basis. */
  activeSubscriptions: Array<ShopifyAppSubscription>
  /** All subscriptions created for a shop. */
  allSubscriptions: ShopifyAppSubscriptionConnection
  /** Application which is installed. */
  app: ShopifyApp
  /**
   * Channel associated with the installed application.
   * @deprecated Use `publication` instead.
   */
  channel?: Maybe<ShopifyChannel>
  /** Credits that can be used towards future app purchases. */
  credits: ShopifyAppCreditConnection
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The URL to launch the application. */
  launchUrl: Scalars["URL"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** One-time purchases to a shop. */
  oneTimePurchases: ShopifyAppPurchaseOneTimeConnection
  /** The publication associated with the installed application. */
  publication?: Maybe<ShopifyPublication>
  /** The records that track the externally-captured revenue for the app. The records are used for revenue attribution purposes. */
  revenueAttributionRecords: ShopifyAppRevenueAttributionRecordConnection
  /**
   * Subscriptions charge to a shop on a recurring basis.
   * @deprecated Use `activeSubscriptions` instead.
   */
  subscriptions: Array<ShopifyAppSubscription>
  /** The URL to uninstall the application. */
  uninstallUrl?: Maybe<Scalars["URL"]["output"]>
}

/** Represents an installed application on a shop. */
export interface ShopifyAppInstallationAllSubscriptionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyAppSubscriptionSortKeys>
}

/** Represents an installed application on a shop. */
export interface ShopifyAppInstallationCreditsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyAppTransactionSortKeys>
}

/** Represents an installed application on a shop. */
export interface ShopifyAppInstallationMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** Represents an installed application on a shop. */
export interface ShopifyAppInstallationMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents an installed application on a shop. */
export interface ShopifyAppInstallationOneTimePurchasesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyAppTransactionSortKeys>
}

/** Represents an installed application on a shop. */
export interface ShopifyAppInstallationRevenueAttributionRecordsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyAppRevenueAttributionRecordSortKeys>
}

/**
 * The possible categories of an app installation, based on their purpose
 * or the environment they can run in.
 */
export type ShopifyAppInstallationCategory =
  /** Apps that serve as channels through which sales are made, such as the online store. */
  | "CHANNEL"
  /** Apps that can be used in the POS mobile client. */
  | "POS_EMBEDDED"
  | "%future added value"

/** An auto-generated type for paginating through multiple AppInstallations. */
export interface ShopifyAppInstallationConnection {
  __typename?: "AppInstallationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyAppInstallationEdge>
  /** A list of nodes that are contained in AppInstallationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyAppInstallation>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one AppInstallation and a cursor during pagination. */
export interface ShopifyAppInstallationEdge {
  __typename?: "AppInstallationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of AppInstallationEdge. */
  node: ShopifyAppInstallation
}

/** The levels of privacy of an app installation. */
export type ShopifyAppInstallationPrivacy =
  | "PRIVATE"
  | "PUBLIC"
  | "%future added value"

/** The set of valid sort keys for the AppInstallation query. */
export type ShopifyAppInstallationSortKeys =
  /** Sort by the `app_title` value. */
  | "APP_TITLE"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `installed_at` value. */
  | "INSTALLED_AT"
  | "%future added value"

/**
 * The pricing model for the app subscription.
 * The pricing model input can be either `appRecurringPricingDetails` or `appUsagePricingDetails`.
 */
export interface ShopifyAppPlanInput {
  /** The pricing details for recurring billing. */
  appRecurringPricingDetails?: InputMaybe<ShopifyAppRecurringPricingInput>
  /** The pricing details for usage-based billing. */
  appUsagePricingDetails?: InputMaybe<ShopifyAppUsagePricingInput>
}

/** The app plan that the merchant is subscribed to. */
export interface ShopifyAppPlanV2 {
  __typename?: "AppPlanV2"
  /** The plan billed to a shop on a recurring basis. */
  pricingDetails: ShopifyAppPricingDetails
}

/**
 * The information about the price that's charged to a shop every plan period.
 * The concrete type can be `AppRecurringPricing` for recurring billing or `AppUsagePricing` for usage-based billing.
 */
export type ShopifyAppPricingDetails =
  | ShopifyAppRecurringPricing
  | ShopifyAppUsagePricing

/** The frequency at which the shop is billed for an app subscription. */
export type ShopifyAppPricingInterval =
  /** The app subscription bills the shop annually. */
  | "ANNUAL"
  /** The app subscription bills the shop every 30 days. */
  | "EVERY_30_DAYS"
  | "%future added value"

/** The public-facing category for an app. */
export type ShopifyAppPublicCategory =
  /** The app's public category is [custom](https://shopify.dev/apps/distribution#capabilities-and-requirements). */
  | "CUSTOM"
  /** The app's public category is other. An app is in this category if it's not classified under any of the other app types (private, public, or custom). */
  | "OTHER"
  /** The app's public category is [private](https://shopify.dev/apps/distribution#deprecated-app-types). */
  | "PRIVATE"
  /** The app's public category is [public](https://shopify.dev/apps/distribution#capabilities-and-requirements). */
  | "PUBLIC"
  | "%future added value"

/** Services and features purchased once by the store. */
export interface ShopifyAppPurchase {
  /** The date and time when the app purchase occurred. */
  createdAt: Scalars["DateTime"]["output"]
  /** The name of the app purchase. */
  name: Scalars["String"]["output"]
  /** The amount to be charged to the store for the app purchase. */
  price: ShopifyMoneyV2
  /** The status of the app purchase. */
  status: ShopifyAppPurchaseStatus
  /** Whether the app purchase is a test transaction. */
  test: Scalars["Boolean"]["output"]
}

/** Services and features purchased once by a store. */
export interface ShopifyAppPurchaseOneTime
  extends ShopifyAppPurchase,
    ShopifyNode {
  __typename?: "AppPurchaseOneTime"
  /** The date and time when the app purchase occurred. */
  createdAt: Scalars["DateTime"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The name of the app purchase. */
  name: Scalars["String"]["output"]
  /** The amount to be charged to the store for the app purchase. */
  price: ShopifyMoneyV2
  /** The status of the app purchase. */
  status: ShopifyAppPurchaseStatus
  /** Whether the app purchase is a test transaction. */
  test: Scalars["Boolean"]["output"]
}

/** An auto-generated type for paginating through multiple AppPurchaseOneTimes. */
export interface ShopifyAppPurchaseOneTimeConnection {
  __typename?: "AppPurchaseOneTimeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyAppPurchaseOneTimeEdge>
  /** A list of nodes that are contained in AppPurchaseOneTimeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyAppPurchaseOneTime>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `appPurchaseOneTimeCreate` mutation. */
export interface ShopifyAppPurchaseOneTimeCreatePayload {
  __typename?: "AppPurchaseOneTimeCreatePayload"
  /** The newly created app one-time purchase. */
  appPurchaseOneTime?: Maybe<ShopifyAppPurchaseOneTime>
  /**
   * The URL that the merchant can access to approve or decline the newly created app one-time purchase.
   *
   * If the merchant declines, then the merchant is redirected to the app and receives a notification message stating that the charge was declined.
   * If the merchant approves and they're successfully invoiced, then the state of the charge changes from `pending` to `active`.
   *
   * You get paid after the charge is activated.
   */
  confirmationUrl?: Maybe<Scalars["URL"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination. */
export interface ShopifyAppPurchaseOneTimeEdge {
  __typename?: "AppPurchaseOneTimeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of AppPurchaseOneTimeEdge. */
  node: ShopifyAppPurchaseOneTime
}

/**
 * The approval status of the app purchase.
 *
 * The merchant is charged for the purchase immediately after approval, and the status changes to `active`.
 * If the payment fails, then the app purchase remains `pending`.
 *
 * Purchases start as `pending` and can change to: `active`, `declined`, `expired`. After a purchase changes, it
 * remains in that final state.
 */
export type ShopifyAppPurchaseStatus =
  /** The app purchase has been approved by the merchant and is ready to be activated by the app. App purchases created through the GraphQL Admin API are activated upon approval. */
  | "ACCEPTED"
  /** The app purchase was approved by the merchant and has been activated by the app. Active app purchases are charged to the merchant and are paid out to the partner. */
  | "ACTIVE"
  /** The app purchase was declined by the merchant. */
  | "DECLINED"
  /** The app purchase was not accepted within two days of being created. */
  | "EXPIRED"
  /** The app purchase is pending approval by the merchant. */
  | "PENDING"
  | "%future added value"

/**
 * The pricing information about a subscription app.
 * The object contains an interval (the frequency at which the shop is billed for an app subscription) and
 * a price (the amount to be charged to the subscribing shop at each interval).
 */
export interface ShopifyAppRecurringPricing {
  __typename?: "AppRecurringPricing"
  /** The discount applied to the subscription for a given number of billing intervals. */
  discount?: Maybe<ShopifyAppSubscriptionDiscount>
  /** The frequency at which the subscribing shop is billed for an app subscription. */
  interval: ShopifyAppPricingInterval
  /** The app store pricing plan handle. */
  planHandle?: Maybe<Scalars["String"]["output"]>
  /** The amount and currency to be charged to the subscribing shop every billing interval. */
  price: ShopifyMoneyV2
}

/** Instructs the app subscription to generate a fixed charge on a recurring basis. The frequency is specified by the billing interval. */
export interface ShopifyAppRecurringPricingInput {
  /** The discount applied to the subscription for a given number of billing intervals. */
  discount?: InputMaybe<ShopifyAppSubscriptionDiscountInput>
  /** How often the app subscription generates a charge. */
  interval?: InputMaybe<ShopifyAppPricingInterval>
  /** The amount to be charged to the store every billing interval. */
  price: ShopifyMoneyInput
}

/** Represents app revenue that was captured externally by the partner. */
export interface ShopifyAppRevenueAttributionRecord extends ShopifyNode {
  __typename?: "AppRevenueAttributionRecord"
  /** The financial amount captured in this attribution. */
  amount: ShopifyMoneyV2
  /** The timestamp when the financial amount was captured. */
  capturedAt: Scalars["DateTime"]["output"]
  /** The timestamp at which this revenue attribution was issued. */
  createdAt: Scalars["DateTime"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * The unique value submitted during the creation of the app revenue attribution record.
   * For more information, refer to
   * [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
   */
  idempotencyKey: Scalars["String"]["output"]
  /** Indicates whether this is a test submission. */
  test: Scalars["Boolean"]["output"]
  /** The type of revenue attribution. */
  type: ShopifyAppRevenueAttributionType
}

/** An auto-generated type for paginating through multiple AppRevenueAttributionRecords. */
export interface ShopifyAppRevenueAttributionRecordConnection {
  __typename?: "AppRevenueAttributionRecordConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyAppRevenueAttributionRecordEdge>
  /** A list of nodes that are contained in AppRevenueAttributionRecordEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyAppRevenueAttributionRecord>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination. */
export interface ShopifyAppRevenueAttributionRecordEdge {
  __typename?: "AppRevenueAttributionRecordEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of AppRevenueAttributionRecordEdge. */
  node: ShopifyAppRevenueAttributionRecord
}

/** The set of valid sort keys for the AppRevenueAttributionRecord query. */
export type ShopifyAppRevenueAttributionRecordSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  | "%future added value"

/** Represents the billing types of revenue attribution. */
export type ShopifyAppRevenueAttributionType =
  /** App purchase related revenue collection. */
  | "APPLICATION_PURCHASE"
  /** App subscription revenue collection. */
  | "APPLICATION_SUBSCRIPTION"
  /** App usage-based revenue collection. */
  | "APPLICATION_USAGE"
  /** Other app revenue collection type. */
  | "OTHER"
  | "%future added value"

/** Represents an error that happens while revoking a granted scope. */
export interface ShopifyAppRevokeAccessScopesAppRevokeScopeError
  extends ShopifyDisplayableError {
  __typename?: "AppRevokeAccessScopesAppRevokeScopeError"
  /** The error code. */
  code?: Maybe<ShopifyAppRevokeAccessScopesAppRevokeScopeErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `AppRevokeAccessScopesAppRevokeScopeError`. */
export type ShopifyAppRevokeAccessScopesAppRevokeScopeErrorCode =
  /** The application cannot be found. */
  | "APPLICATION_CANNOT_BE_FOUND"
  /** App is not installed on shop. */
  | "APP_NOT_INSTALLED"
  /** Already granted implied scopes cannot be revoked. */
  | "CANNOT_REVOKE_IMPLIED_SCOPES"
  /** Required scopes cannot be revoked. */
  | "CANNOT_REVOKE_REQUIRED_SCOPES"
  /** Cannot revoke optional scopes that haven't been declared. */
  | "CANNOT_REVOKE_UNDECLARED_SCOPES"
  /** No app found on the access token. */
  | "MISSING_SOURCE_APP"
  /** The requested list of scopes to revoke includes invalid handles. */
  | "UNKNOWN_SCOPES"
  | "%future added value"

/** Return type for `appRevokeAccessScopes` mutation. */
export interface ShopifyAppRevokeAccessScopesPayload {
  __typename?: "AppRevokeAccessScopesPayload"
  /** The list of scope handles that have been revoked. */
  revoked?: Maybe<Array<ShopifyAccessScope>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyAppRevokeAccessScopesAppRevokeScopeError>
}

/** Provides users access to services and/or features for a duration of time. */
export interface ShopifyAppSubscription extends ShopifyNode {
  __typename?: "AppSubscription"
  /** The date and time when the app subscription was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The date and time when the current app subscription period ends. Returns `null` if the subscription isn't active. */
  currentPeriodEnd?: Maybe<Scalars["DateTime"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The plans attached to the app subscription. */
  lineItems: Array<ShopifyAppSubscriptionLineItem>
  /** The name of the app subscription. */
  name: Scalars["String"]["output"]
  /** The URL that the merchant is redirected to after approving the app subscription. */
  returnUrl: Scalars["URL"]["output"]
  /** The status of the app subscription. */
  status: ShopifyAppSubscriptionStatus
  /** Specifies whether the app subscription is a test transaction. */
  test: Scalars["Boolean"]["output"]
  /** The number of free trial days, starting at the subscription's creation date, by which billing is delayed. */
  trialDays: Scalars["Int"]["output"]
}

/** Return type for `appSubscriptionCancel` mutation. */
export interface ShopifyAppSubscriptionCancelPayload {
  __typename?: "AppSubscriptionCancelPayload"
  /** The cancelled app subscription. */
  appSubscription?: Maybe<ShopifyAppSubscription>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type for paginating through multiple AppSubscriptions. */
export interface ShopifyAppSubscriptionConnection {
  __typename?: "AppSubscriptionConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyAppSubscriptionEdge>
  /** A list of nodes that are contained in AppSubscriptionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyAppSubscription>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `appSubscriptionCreate` mutation. */
export interface ShopifyAppSubscriptionCreatePayload {
  __typename?: "AppSubscriptionCreatePayload"
  /** The newly-created app subscription. */
  appSubscription?: Maybe<ShopifyAppSubscription>
  /** The URL pointing to the page where the merchant approves or declines the charges for an app subscription. */
  confirmationUrl?: Maybe<Scalars["URL"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Discount applied to the recurring pricing portion of a subscription. */
export interface ShopifyAppSubscriptionDiscount {
  __typename?: "AppSubscriptionDiscount"
  /**
   * The total number of billing intervals to which the discount will be applied.
   * The discount will be applied to an indefinite number of billing intervals if this value is blank.
   */
  durationLimitInIntervals?: Maybe<Scalars["Int"]["output"]>
  /** The price of the subscription after the discount is applied. */
  priceAfterDiscount: ShopifyMoneyV2
  /** The remaining number of billing intervals to which the discount will be applied. */
  remainingDurationInIntervals?: Maybe<Scalars["Int"]["output"]>
  /** The value of the discount applied every billing interval. */
  value: ShopifyAppSubscriptionDiscountValue
}

/** The fixed amount value of a discount. */
export interface ShopifyAppSubscriptionDiscountAmount {
  __typename?: "AppSubscriptionDiscountAmount"
  /** The fixed amount value of a discount. */
  amount: ShopifyMoneyV2
}

/** The input fields to specify a discount to the recurring pricing portion of a subscription over a number of billing intervals. */
export interface ShopifyAppSubscriptionDiscountInput {
  /**
   * The total number of billing intervals to which the discount will be applied. Must be greater than 0.
   * The discount will be applied to an indefinite number of billing intervals if this value is left blank.
   */
  durationLimitInIntervals?: InputMaybe<Scalars["Int"]["input"]>
  /** The value to be discounted every billing interval. */
  value?: InputMaybe<ShopifyAppSubscriptionDiscountValueInput>
}

/** The percentage value of a discount. */
export interface ShopifyAppSubscriptionDiscountPercentage {
  __typename?: "AppSubscriptionDiscountPercentage"
  /** The percentage value of a discount. */
  percentage: Scalars["Float"]["output"]
}

/** The value of the discount. */
export type ShopifyAppSubscriptionDiscountValue =
  | ShopifyAppSubscriptionDiscountAmount
  | ShopifyAppSubscriptionDiscountPercentage

/** The input fields to specify the value discounted every billing interval. */
export interface ShopifyAppSubscriptionDiscountValueInput {
  /** The monetary value of a discount. */
  amount?: InputMaybe<Scalars["Decimal"]["input"]>
  /** The percentage value of a discount. */
  percentage?: InputMaybe<Scalars["Float"]["input"]>
}

/** An auto-generated type which holds one AppSubscription and a cursor during pagination. */
export interface ShopifyAppSubscriptionEdge {
  __typename?: "AppSubscriptionEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of AppSubscriptionEdge. */
  node: ShopifyAppSubscription
}

/** The plan attached to an app subscription. */
export interface ShopifyAppSubscriptionLineItem {
  __typename?: "AppSubscriptionLineItem"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The pricing model for the app subscription. */
  plan: ShopifyAppPlanV2
  /** A list of the store's usage records for a usage pricing plan. */
  usageRecords: ShopifyAppUsageRecordConnection
}

/** The plan attached to an app subscription. */
export interface ShopifyAppSubscriptionLineItemUsageRecordsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyAppUsageRecordSortKeys>
}

/** The input fields to add more than one pricing plan to an app subscription. */
export interface ShopifyAppSubscriptionLineItemInput {
  /** The pricing model for the app subscription. */
  plan: ShopifyAppPlanInput
}

/** Return type for `appSubscriptionLineItemUpdate` mutation. */
export interface ShopifyAppSubscriptionLineItemUpdatePayload {
  __typename?: "AppSubscriptionLineItemUpdatePayload"
  /** The updated app subscription. */
  appSubscription?: Maybe<ShopifyAppSubscription>
  /** The URL where the merchant approves or declines the updated app subscription line item. */
  confirmationUrl?: Maybe<Scalars["URL"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The replacement behavior when creating an app subscription for a merchant with an already existing app subscription. */
export type ShopifyAppSubscriptionReplacementBehavior =
  /** Cancels the merchant's current app subscription immediately and replaces it with the newly created app subscription. */
  | "APPLY_IMMEDIATELY"
  /** Defers canceling the merchant's current app subscription and applying the newly created app subscription until the start of the next billing cycle. This value is ignored if the new app subscription is using a different currency than the current app subscription, in which case the new app subscription is applied immediately. */
  | "APPLY_ON_NEXT_BILLING_CYCLE"
  /**
   * Cancels the merchant's current app subscription immediately and replaces it with the newly created app subscription, with the exception of
   * the following scenarios where replacing the current app subscription will be deferred until the start of the next billing cycle.
   * 1) The current app subscription is annual and the newly created app subscription is annual, using the same currency, but is of a lesser value.
   * 2) The current app subscription is annual and the newly created app subscription is monthly and using the same currency.
   * 3) The current app subscription and the newly created app subscription are identical except for the `discount` value.
   */
  | "STANDARD"
  | "%future added value"

/** The set of valid sort keys for the AppSubscription query. */
export type ShopifyAppSubscriptionSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  | "%future added value"

/** The status of the app subscription. */
export type ShopifyAppSubscriptionStatus =
  /** The app subscription has been approved by the merchant and is ready to be activated by the app. */
  | "ACCEPTED"
  /** The app subscription has been approved by the merchant. Active app subscriptions are billed to the shop. After payment, partners receive payouts. */
  | "ACTIVE"
  /** The app subscription was cancelled by the app. This could be caused by the app being uninstalled, a new app subscription being activated, or a direct cancellation by the app. This is a terminal state. */
  | "CANCELLED"
  /** The app subscription was declined by the merchant. This is a terminal state. */
  | "DECLINED"
  /** The app subscription wasn't approved by the merchant within two days of being created. This is a terminal state. */
  | "EXPIRED"
  /** The app subscription is on hold due to non-payment. The subscription re-activates after payments resume. */
  | "FROZEN"
  /** The app subscription is pending approval by the merchant. */
  | "PENDING"
  | "%future added value"

/** Return type for `appSubscriptionTrialExtend` mutation. */
export interface ShopifyAppSubscriptionTrialExtendPayload {
  __typename?: "AppSubscriptionTrialExtendPayload"
  /** The app subscription that had its trial extended. */
  appSubscription?: Maybe<ShopifyAppSubscription>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyAppSubscriptionTrialExtendUserError>
}

/** An error that occurs during the execution of `AppSubscriptionTrialExtend`. */
export interface ShopifyAppSubscriptionTrialExtendUserError
  extends ShopifyDisplayableError {
  __typename?: "AppSubscriptionTrialExtendUserError"
  /** The error code. */
  code?: Maybe<ShopifyAppSubscriptionTrialExtendUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `AppSubscriptionTrialExtendUserError`. */
export type ShopifyAppSubscriptionTrialExtendUserErrorCode =
  /** The app subscription isn't active. */
  | "SUBSCRIPTION_NOT_ACTIVE"
  /** The app subscription wasn't found. */
  | "SUBSCRIPTION_NOT_FOUND"
  /** The trial isn't active. */
  | "TRIAL_NOT_ACTIVE"
  | "%future added value"

/** The set of valid sort keys for the AppTransaction query. */
export type ShopifyAppTransactionSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  | "%future added value"

/** Represents an error that happens while uninstalling an app. */
export interface ShopifyAppUninstallAppUninstallError
  extends ShopifyDisplayableError {
  __typename?: "AppUninstallAppUninstallError"
  /** The error code. */
  code?: Maybe<ShopifyAppUninstallAppUninstallErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `AppUninstallAppUninstallError`. */
export type ShopifyAppUninstallAppUninstallErrorCode =
  /** The app cannot be found. */
  | "APP_NOT_FOUND"
  /** The app is not installed. */
  | "APP_NOT_INSTALLED"
  /** An error occurred while uninstalling the app. */
  | "APP_UNINSTALL_ERROR"
  /** User does not have sufficient permissions to uninstall this app. */
  | "USER_PERMISSIONS_INSUFFICIENT"
  | "%future added value"

/** Return type for `appUninstall` mutation. */
export interface ShopifyAppUninstallPayload {
  __typename?: "AppUninstallPayload"
  /** The uninstalled app. */
  app?: Maybe<ShopifyApp>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyAppUninstallAppUninstallError>
}

/**
 * Defines a usage pricing model for the app subscription.
 * These charges are variable based on how much the merchant uses the app.
 */
export interface ShopifyAppUsagePricing {
  __typename?: "AppUsagePricing"
  /** The total usage records for interval. */
  balanceUsed: ShopifyMoneyV2
  /**
   * The capped amount prevents the merchant from being charged for any usage over that amount during a billing period.
   * This prevents billing from exceeding a maximum threshold over the duration of the billing period.
   * For the merchant to continue using the app after exceeding a capped amount, they would need to agree to a new usage charge.
   */
  cappedAmount: ShopifyMoneyV2
  /** The frequency with which the app usage records are billed. */
  interval: ShopifyAppPricingInterval
  /**
   * The terms and conditions for app usage pricing.
   * Must be present in order to create usage charges.
   * The terms are presented to the merchant when they approve an app's usage charges.
   */
  terms: Scalars["String"]["output"]
}

/** The input fields to issue arbitrary charges for app usage associated with a subscription. */
export interface ShopifyAppUsagePricingInput {
  /** The maximum amount of usage charges that can be incurred within a subscription billing interval. */
  cappedAmount: ShopifyMoneyInput
  /** The terms and conditions for app usage. These terms stipulate the pricing model for the charges that an app creates. */
  terms: Scalars["String"]["input"]
}

/** Store usage for app subscriptions with usage pricing. */
export interface ShopifyAppUsageRecord extends ShopifyNode {
  __typename?: "AppUsageRecord"
  /** The date and time when the usage record was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The description of the app usage record. */
  description: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** A unique key generated by the client to avoid duplicate charges. */
  idempotencyKey?: Maybe<Scalars["String"]["output"]>
  /** The price of the usage record. */
  price: ShopifyMoneyV2
  /** Defines the usage pricing plan the merchant is subscribed to. */
  subscriptionLineItem: ShopifyAppSubscriptionLineItem
}

/** An auto-generated type for paginating through multiple AppUsageRecords. */
export interface ShopifyAppUsageRecordConnection {
  __typename?: "AppUsageRecordConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyAppUsageRecordEdge>
  /** A list of nodes that are contained in AppUsageRecordEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyAppUsageRecord>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `appUsageRecordCreate` mutation. */
export interface ShopifyAppUsageRecordCreatePayload {
  __typename?: "AppUsageRecordCreatePayload"
  /** The newly created app usage record. */
  appUsageRecord?: Maybe<ShopifyAppUsageRecord>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type which holds one AppUsageRecord and a cursor during pagination. */
export interface ShopifyAppUsageRecordEdge {
  __typename?: "AppUsageRecordEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of AppUsageRecordEdge. */
  node: ShopifyAppUsageRecord
}

/** The set of valid sort keys for the AppUsageRecord query. */
export type ShopifyAppUsageRecordSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  | "%future added value"

/** The Apple mobile platform application. */
export interface ShopifyAppleApplication {
  __typename?: "AppleApplication"
  /** The iOS App Clip application ID. */
  appClipApplicationId?: Maybe<Scalars["String"]["output"]>
  /** Whether iOS App Clips are enabled for this app. */
  appClipsEnabled: Scalars["Boolean"]["output"]
  /** The iOS App ID. */
  appId?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Whether iOS shared web credentials are enabled for this app. */
  sharedWebCredentialsEnabled: Scalars["Boolean"]["output"]
  /** Whether iOS Universal Links are supported by this app. */
  universalLinksEnabled: Scalars["Boolean"]["output"]
}

/** An article in the blogging system. */
export interface ShopifyArticle
  extends ShopifyHasEvents,
    ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyHasPublishedTranslations,
    ShopifyNavigable,
    ShopifyNode {
  __typename?: "Article"
  /** The name of the author of the article. */
  author?: Maybe<ShopifyArticleAuthor>
  /** The blog containing the article. */
  blog: ShopifyBlog
  /** The text of the article's body, complete with HTML markup. */
  body: Scalars["HTML"]["output"]
  /** List of the article's comments. */
  comments: ShopifyCommentConnection
  /** Count of comments. Limited to a maximum of 10000 by default. */
  commentsCount?: Maybe<ShopifyCount>
  /** The date and time (ISO 8601 format) when the article was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars["String"]["output"]
  /** The paginated list of events associated with the host subject. */
  events: ShopifyEventConnection
  /**
   * A unique, human-friendly string for the article that's automatically generated from the article's title.
   * The handle is used in the article's URL.
   */
  handle: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The image associated with the article. */
  image?: Maybe<ShopifyImage>
  /** Whether or not the article is visible. */
  isPublished: Scalars["Boolean"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /**
   * The date and time (ISO 8601 format) when the article became or will become visible.
   * Returns null when the article isn't visible.
   */
  publishedAt?: Maybe<Scalars["DateTime"]["output"]>
  /**
   * A summary of the article, which can include HTML markup.
   * The summary is used by the online store theme to display the article on other pages, such as the home page or the main blog page.
   */
  summary?: Maybe<Scalars["HTML"]["output"]>
  /**
   * A comma-separated list of tags.
   * Tags are additional short descriptors formatted as a string of comma-separated values.
   */
  tags: Array<Scalars["String"]["output"]>
  /**
   * The name of the template an article is using if it's using an alternate template.
   * If an article is using the default `article.liquid` template, then the value returned is `null`.
   */
  templateSuffix?: Maybe<Scalars["String"]["output"]>
  /** The title of the article. */
  title: Scalars["String"]["output"]
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
  /** The date and time (ISO 8601 format) when the article was last updated. */
  updatedAt?: Maybe<Scalars["DateTime"]["output"]>
}

/** An article in the blogging system. */
export interface ShopifyArticleCommentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An article in the blogging system. */
export interface ShopifyArticleCommentsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
}

/** An article in the blogging system. */
export interface ShopifyArticleEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/** An article in the blogging system. */
export interface ShopifyArticleMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** An article in the blogging system. */
export interface ShopifyArticleMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/** An article in the blogging system. */
export interface ShopifyArticleMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An article in the blogging system. */
export interface ShopifyArticleTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/** Represents an article author in an Article. */
export interface ShopifyArticleAuthor {
  __typename?: "ArticleAuthor"
  /** The author's full name. */
  name: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple ArticleAuthors. */
export interface ShopifyArticleAuthorConnection {
  __typename?: "ArticleAuthorConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyArticleAuthorEdge>
  /** A list of nodes that are contained in ArticleAuthorEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyArticleAuthor>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ArticleAuthor and a cursor during pagination. */
export interface ShopifyArticleAuthorEdge {
  __typename?: "ArticleAuthorEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ArticleAuthorEdge. */
  node: ShopifyArticleAuthor
}

/** The input fields of a blog when an article is created or updated. */
export interface ShopifyArticleBlogInput {
  /** The title of the blog. */
  title: Scalars["String"]["input"]
}

/** An auto-generated type for paginating through multiple Articles. */
export interface ShopifyArticleConnection {
  __typename?: "ArticleConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyArticleEdge>
  /** A list of nodes that are contained in ArticleEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyArticle>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields to create an article. */
export interface ShopifyArticleCreateInput {
  /** The name of the author of the article. */
  author: ShopifyAuthorInput
  /** The ID of the blog containing the article. */
  blogId?: InputMaybe<Scalars["ID"]["input"]>
  /** The text of the article's body, complete with HTML markup. */
  body?: InputMaybe<Scalars["HTML"]["input"]>
  /**
   * A unique, human-friendly string for the article that's automatically generated from the article's title.
   * The handle is used in the article's URL.
   */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** The image associated with the article. */
  image?: InputMaybe<ShopifyArticleImageInput>
  /** Whether or not the article should be visible. */
  isPublished?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The input fields to create or update a metafield. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The date and time (ISO 8601 format) when the article should become visible. */
  publishDate?: InputMaybe<Scalars["DateTime"]["input"]>
  /**
   * A summary of the article, which can include HTML markup.
   * The summary is used by the online store theme to display the article on other pages, such as the home page or the main blog page.
   */
  summary?: InputMaybe<Scalars["HTML"]["input"]>
  /**
   * A comma-separated list of tags.
   * Tags are additional short descriptors formatted as a string of comma-separated values.
   */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
  /**
   * The suffix of the template that's used to render the page.
   * If the value is an empty string or `null`, then the default article template is used.
   */
  templateSuffix?: InputMaybe<Scalars["String"]["input"]>
  /** The title of the article. */
  title: Scalars["String"]["input"]
}

/** Return type for `articleCreate` mutation. */
export interface ShopifyArticleCreatePayload {
  __typename?: "ArticleCreatePayload"
  /** The article that was created. */
  article?: Maybe<ShopifyArticle>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyArticleCreateUserError>
}

/** An error that occurs during the execution of `ArticleCreate`. */
export interface ShopifyArticleCreateUserError extends ShopifyDisplayableError {
  __typename?: "ArticleCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyArticleCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ArticleCreateUserError`. */
export type ShopifyArticleCreateUserErrorCode =
  /** Can't create an article author if both author name and user ID are supplied. */
  | "AMBIGUOUS_AUTHOR"
  /** Can't create a blog from input if a blog ID is supplied. */
  | "AMBIGUOUS_BLOG"
  /** Can't create an article if both author name and user ID are blank. */
  | "AUTHOR_FIELD_REQUIRED"
  /** User must exist if a user ID is supplied. */
  | "AUTHOR_MUST_EXIST"
  /** The input value is blank. */
  | "BLANK"
  /** Must reference or create a blog when creating an article. */
  | "BLOG_REFERENCE_REQUIRED"
  /** The input value is invalid. */
  | "INVALID"
  /** Can’t set isPublished to true and also set a future publish date. */
  | "INVALID_PUBLISH_DATE"
  /** The metafield type is invalid. */
  | "INVALID_TYPE"
  /** The value is invalid for the metafield type or for the definition options. */
  | "INVALID_VALUE"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too long. */
  | "TOO_LONG"
  /** Image upload failed. */
  | "UPLOAD_FAILED"
  | "%future added value"

/** Return type for `articleDelete` mutation. */
export interface ShopifyArticleDeletePayload {
  __typename?: "ArticleDeletePayload"
  /** The ID of the deleted article. */
  deletedArticleId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyArticleDeleteUserError>
}

/** An error that occurs during the execution of `ArticleDelete`. */
export interface ShopifyArticleDeleteUserError extends ShopifyDisplayableError {
  __typename?: "ArticleDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyArticleDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ArticleDeleteUserError`. */
export type ShopifyArticleDeleteUserErrorCode =
  /** The record with the ID used as the input value couldn't be found. */
  "NOT_FOUND" | "%future added value"

/** An auto-generated type which holds one Article and a cursor during pagination. */
export interface ShopifyArticleEdge {
  __typename?: "ArticleEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ArticleEdge. */
  node: ShopifyArticle
}

/** The input fields for an image associated with an article. */
export interface ShopifyArticleImageInput {
  /** A word or phrase to share the nature or contents of an image. */
  altText?: InputMaybe<Scalars["String"]["input"]>
  /** The URL of the image. */
  url?: InputMaybe<Scalars["String"]["input"]>
}

/** The set of valid sort keys for the Article query. */
export type ShopifyArticleSortKeys =
  /** Sort by the `author` value. */
  | "AUTHOR"
  /** Sort by the `blog_title` value. */
  | "BLOG_TITLE"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `published_at` value. */
  | "PUBLISHED_AT"
  /** Sort by the `title` value. */
  | "TITLE"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** Possible sort of tags. */
export type ShopifyArticleTagSort =
  /** Sort alphabetically.. */
  | "ALPHABETICAL"
  /** Sort by popularity, starting with the most popular tag. */
  | "POPULAR"
  | "%future added value"

/** The input fields to update an article. */
export interface ShopifyArticleUpdateInput {
  /** The name of the author of the article. */
  author?: InputMaybe<ShopifyAuthorInput>
  /** The ID of the blog containing the article. */
  blogId?: InputMaybe<Scalars["ID"]["input"]>
  /** The text of the article's body, complete with HTML markup. */
  body?: InputMaybe<Scalars["HTML"]["input"]>
  /**
   * A unique, human-friendly string for the article that's automatically generated from the article's title.
   * The handle is used in the article's URL.
   */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** The image associated with the article. */
  image?: InputMaybe<ShopifyArticleImageInput>
  /** Whether or not the article should be visible. */
  isPublished?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The input fields to create or update a metafield. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The date and time (ISO 8601 format) when the article should become visible. */
  publishDate?: InputMaybe<Scalars["DateTime"]["input"]>
  /**
   * Whether a redirect is required after a new handle has been provided.
   * If `true`, then the old handle is redirected to the new one automatically.
   */
  redirectNewHandle?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * A summary of the article, which can include HTML markup.
   * The summary is used by the online store theme to display the article on other pages, such as the home page or the main blog page.
   */
  summary?: InputMaybe<Scalars["HTML"]["input"]>
  /**
   * A comma-separated list of tags.
   * Tags are additional short descriptors formatted as a string of comma-separated values.
   */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
  /**
   * The suffix of the template that's used to render the page.
   * If the value is an empty string or `null`, then the default article template is used.
   */
  templateSuffix?: InputMaybe<Scalars["String"]["input"]>
  /** The title of the article. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `articleUpdate` mutation. */
export interface ShopifyArticleUpdatePayload {
  __typename?: "ArticleUpdatePayload"
  /** The article that was updated. */
  article?: Maybe<ShopifyArticle>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyArticleUpdateUserError>
}

/** An error that occurs during the execution of `ArticleUpdate`. */
export interface ShopifyArticleUpdateUserError extends ShopifyDisplayableError {
  __typename?: "ArticleUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyArticleUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ArticleUpdateUserError`. */
export type ShopifyArticleUpdateUserErrorCode =
  /** Can't update an article author if both author name and user ID are supplied. */
  | "AMBIGUOUS_AUTHOR"
  /** Can't create a blog from input if a blog ID is supplied. */
  | "AMBIGUOUS_BLOG"
  /** User must exist if a user ID is supplied. */
  | "AUTHOR_MUST_EXIST"
  /** The input value is blank. */
  | "BLANK"
  /** The input value is invalid. */
  | "INVALID"
  /** Can’t set isPublished to true and also set a future publish date. */
  | "INVALID_PUBLISH_DATE"
  /** The metafield type is invalid. */
  | "INVALID_TYPE"
  /** The value is invalid for the metafield type or for the definition options. */
  | "INVALID_VALUE"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too long. */
  | "TOO_LONG"
  /** Image upload failed. */
  | "UPLOAD_FAILED"
  | "%future added value"

/**
 * A custom property. Attributes are used to store additional information about a Shopify resource, such as
 * products, customers, or orders. Attributes are stored as key-value pairs.
 *
 * For example, a list of attributes might include whether a customer is a first-time buyer (`"customer_first_order": "true"`),
 * whether an order is gift-wrapped (`"gift_wrapped": "true"`), a preferred delivery date
 * (`"preferred_delivery_date": "2025-10-01"`), the discount applied (`"loyalty_discount_applied": "10%"`), and any
 * notes provided by the customer (`"customer_notes": "Please leave at the front door"`).
 */
export interface ShopifyAttribute {
  __typename?: "Attribute"
  /** The key or name of the attribute. For example, `"customer_first_order"`. */
  key: Scalars["String"]["output"]
  /** The value of the attribute. For example, `"true"`. */
  value?: Maybe<Scalars["String"]["output"]>
}

/** The input fields for an attribute. */
export interface ShopifyAttributeInput {
  /** Key or name of the attribute. */
  key: Scalars["String"]["input"]
  /** Value of the attribute. */
  value: Scalars["String"]["input"]
}

/** The intended audience for the order status page. */
export type ShopifyAudience =
  /** Intended for customer notifications. */
  | "CUSTOMERVIEW"
  /** Intended for merchant wanting to preview the order status page. Should be used immediately after querying. */
  | "MERCHANTVIEW"
  | "%future added value"

/** The input fields for an author. Either the `name` or `user_id` fields can be supplied, but never both. */
export interface ShopifyAuthorInput {
  /** The author's full name. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of a staff member's account. */
  userId?: InputMaybe<Scalars["ID"]["input"]>
}

/** Automatic discount applications capture the intentions of a discount that was automatically applied. */
export interface ShopifyAutomaticDiscountApplication
  extends ShopifyDiscountApplication {
  __typename?: "AutomaticDiscountApplication"
  /** The method by which the discount's value is applied to its entitled items. */
  allocationMethod: ShopifyDiscountApplicationAllocationMethod
  /**
   * An ordered index that can be used to identify the discount application and indicate the precedence
   * of the discount application for calculations.
   */
  index: Scalars["Int"]["output"]
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: ShopifyDiscountApplicationTargetSelection
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: ShopifyDiscountApplicationTargetType
  /** The title of the discount application. */
  title: Scalars["String"]["output"]
  /** The value of the discount application. */
  value: ShopifyPricingValue
}

/** The set of valid sort keys for the AutomaticDiscount query. */
export type ShopifyAutomaticDiscountSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  | "%future added value"

/** Represents an object containing all information for channels available to a shop. */
export interface ShopifyAvailableChannelDefinitionsByChannel {
  __typename?: "AvailableChannelDefinitionsByChannel"
  /** The channel definitions for channels installed on a shop. */
  channelDefinitions: Array<ShopifyChannelDefinition>
  /** The name of the channel. */
  channelName: Scalars["String"]["output"]
}

/** The input fields for updating a backup region with exactly one required option. */
export interface ShopifyBackupRegionUpdateInput {
  /** A country code for the backup region. */
  countryCode: ShopifyCountryCode
}

/** Return type for `backupRegionUpdate` mutation. */
export interface ShopifyBackupRegionUpdatePayload {
  __typename?: "BackupRegionUpdatePayload"
  /** Returns the updated backup region. */
  backupRegion?: Maybe<ShopifyMarketRegion>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketUserError>
}

/** The possible types for a badge. */
export type ShopifyBadgeType =
  /** This badge has type `attention`. */
  | "ATTENTION"
  /** This badge has type `critical`. */
  | "CRITICAL"
  /** This badge has type `default`. */
  | "DEFAULT"
  /** This badge has type `info`. */
  | "INFO"
  /** This badge has type `success`. */
  | "SUCCESS"
  /** This badge has type `warning`. */
  | "WARNING"
  | "%future added value"

/** The set of valid sort keys for the BalanceTransaction query. */
export type ShopifyBalanceTransactionSortKeys =
  /** Sort by the `amount` value. */
  | "AMOUNT"
  /** Sort by the `fee` value. */
  | "FEE"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `net` value. */
  | "NET"
  /** Sort by the `order_name` value. */
  | "ORDER_NAME"
  /** Sort by the `payment_method_name` value. */
  | "PAYMENT_METHOD_NAME"
  /** Sort by the `payout_date` value. */
  | "PAYOUT_DATE"
  /** Sort by the `payout_status` value. */
  | "PAYOUT_STATUS"
  /** Sort by the `processed_at` value. */
  | "PROCESSED_AT"
  /** Sort by the `transaction_type` value. */
  | "TRANSACTION_TYPE"
  | "%future added value"

/** The valid types of actions a user should be able to perform in an financial app. */
export type ShopifyBankingFinanceAppAccess =
  /** Indication that the user has blocked money movement due to MFA disabled. */
  | "MONEY_MOVEMENT_BLOCKED_MFA"
  /** Indication that the user has restricted money movement. */
  | "MONEY_MOVEMENT_RESTRICTED"
  /** Ability to perform actions that moves money. */
  | "MOVE_MONEY"
  /** Read access in the financial app. */
  | "READ_ACCESS"
  | "%future added value"

/** Generic payment details that are related to a transaction. */
export interface ShopifyBasePaymentDetails {
  /** The name of payment method used by the buyer. */
  paymentMethodName?: Maybe<Scalars["String"]["output"]>
}

/**
 * Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or
 * the addition of a product.
 *
 * ### General events
 *
 * | Action | Description  |
 * |---|---|
 * | `create` | The item was created. |
 * | `destroy` | The item was destroyed. |
 * | `published` | The item was published. |
 * | `unpublished` | The item was unpublished. |
 * | `update` | The item was updated.  |
 *
 * ### Order events
 *
 * Order events can be divided into the following categories:
 *
 * - *Authorization*: Includes whether the authorization succeeded, failed, or is pending.
 * - *Capture*: Includes whether the capture succeeded, failed, or is pending.
 * - *Email*: Includes confirmation or cancellation of the order, as well as shipping.
 * - *Fulfillment*: Includes whether the fulfillment succeeded, failed, or is pending. Also includes cancellation, restocking, and fulfillment updates.
 * - *Order*: Includess the placement, confirmation, closing, re-opening, and cancellation of the order.
 * - *Refund*: Includes whether the refund succeeded, failed, or is pending.
 * - *Sale*: Includes whether the sale succeeded, failed, or is pending.
 * - *Void*: Includes whether the void succeeded, failed, or is pending.
 *
 * | Action  | Message  | Description  |
 * |---|---|---|
 * | `authorization_failure` | The customer, unsuccessfully, tried to authorize: `{money_amount}`. | Authorization failed. The funds cannot be captured. |
 * | `authorization_pending` | Authorization for `{money_amount}` is pending. | Authorization pending. |
 * | `authorization_success` | The customer successfully authorized us to capture: `{money_amount}`. | Authorization was successful and the funds are available for capture. |
 * | `cancelled` | Order was cancelled by `{shop_staff_name}`. | The order was cancelled. |
 * | `capture_failure` | We failed to capture: `{money_amount}`. | The capture failed. The funds cannot be transferred to the shop. |
 * | `capture_pending` | Capture for `{money_amount}` is pending. | The capture is in process. The funds are not yet available to the shop. |
 * | `capture_success` | We successfully captured: `{money_amount}` | The capture was successful and the funds are now available to the shop. |
 * | `closed` | Order was closed. | The order was closed. |
 * | `confirmed` | Received a new order: `{order_number}` by `{customer_name}`. | The order was confirmed. |
 * | `fulfillment_cancelled` | We cancelled `{number_of_line_items}` from being fulfilled by the third party fulfillment service. | Fulfillment for one or more of the line_items failed. |
 * | `fulfillment_pending` | We submitted `{number_of_line_items}` to the third party service. | One or more of the line_items has been assigned to a third party service for fulfillment. |
 * | `fulfillment_success` | We successfully fulfilled line_items. | Fulfillment was successful for one or more line_items. |
 * | `mail_sent` | `{message_type}` email was sent to the customer. | An email was sent to the customer. |
 * | `placed` | Order was placed. | An order was placed by the customer. |
 * | `re_opened` | Order was re-opened. | An order was re-opened. |
 * | `refund_failure` | We failed to refund `{money_amount}`. | The refund failed. The funds are still with the shop. |
 * | `refund_pending` | Refund of `{money_amount}` is still pending. | The refund is in process. The funds are still with shop. |
 * | `refund_success` | We successfully refunded `{money_amount}`. | The refund was successful. The funds have been transferred to the customer. |
 * | `restock_line_items` | We restocked `{number_of_line_items}`. |	One or more of the order's line items have been restocked. |
 * | `sale_failure` | The customer failed to pay `{money_amount}`. | The sale failed. The funds are not available to the shop. |
 * | `sale_pending` | The `{money_amount}` is pending. | The sale is in process. The funds are not yet available to the shop. |
 * | `sale_success` | We successfully captured `{money_amount}`. | The sale was successful. The funds are now with the shop. |
 * | `update` | `{order_number}` was updated. | The order was updated. |
 * | `void_failure` | We failed to void the authorization. | Voiding the authorization failed. The authorization is still valid. |
 * | `void_pending` | Authorization void is pending. | Voiding the authorization is in process. The authorization is still valid. |
 * | `void_success` | We successfully voided the authorization. | Voiding the authorization was successful. The authorization is no longer valid. |
 */
export interface ShopifyBasicEvent extends ShopifyEvent, ShopifyNode {
  __typename?: "BasicEvent"
  /** The action that occured. */
  action: Scalars["String"]["output"]
  /** Provides additional content for collapsible timeline events. */
  additionalContent?: Maybe<Scalars["JSON"]["output"]>
  /** Provides additional data for event consumers. */
  additionalData?: Maybe<Scalars["JSON"]["output"]>
  /** The name of the app that created the event. */
  appTitle?: Maybe<Scalars["String"]["output"]>
  /** Refers to a certain event and its resources. */
  arguments?: Maybe<Scalars["JSON"]["output"]>
  /** Whether the event was created by an app. */
  attributeToApp: Scalars["Boolean"]["output"]
  /** Whether the event was caused by an admin user. */
  attributeToUser: Scalars["Boolean"]["output"]
  /** The entity which performed the action that generated the event. */
  author?: Maybe<Scalars["String"]["output"]>
  /** The date and time when the event was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** Whether the event is critical. */
  criticalAlert: Scalars["Boolean"]["output"]
  /** Whether this event has additional content. */
  hasAdditionalContent: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Human readable text that describes the event. */
  message: Scalars["FormattedString"]["output"]
  /** Human readable text that supports the event message. */
  secondaryMessage?: Maybe<Scalars["FormattedString"]["output"]>
  /**
   * The resource that generated the event. To see a list of possible types,
   * refer to [HasEvents](https://shopify.dev/docs/api/admin-graphql/unstable/interfaces/HasEvents#implemented-in).
   */
  subject?: Maybe<ShopifyHasEvents>
  /** The ID of the resource that generated the event. */
  subjectId: Scalars["ID"]["output"]
  /** The type of the resource that generated the event. */
  subjectType: ShopifyEventSubjectType
}

/** Represents an error that happens during the execution of a billing attempt mutation. */
export interface ShopifyBillingAttemptUserError
  extends ShopifyDisplayableError {
  __typename?: "BillingAttemptUserError"
  /** The error code. */
  code?: Maybe<ShopifyBillingAttemptUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `BillingAttemptUserError`. */
export type ShopifyBillingAttemptUserErrorCode =
  /** Billing cycle charge attempt made more than 24 hours before the billing cycle `billingAttemptExpectedDate`. */
  | "BILLING_CYCLE_CHARGE_BEFORE_EXPECTED_DATE"
  /** Billing cycle must not be skipped. */
  | "BILLING_CYCLE_SKIPPED"
  /** The input value is blank. */
  | "BLANK"
  /** Subscription contract does not exist. */
  | "CONTRACT_NOT_FOUND"
  /** Subscription contract cannot be billed if paused. */
  | "CONTRACT_PAUSED"
  /** Subscription contract cannot be billed once terminated. */
  | "CONTRACT_TERMINATED"
  /** Subscription contract is under review. */
  | "CONTRACT_UNDER_REVIEW"
  /** Billing cycle selector cannot select billing cycle outside of index range. */
  | "CYCLE_INDEX_OUT_OF_RANGE"
  /** Billing cycle selector cannot select billing cycle outside of start date range. */
  | "CYCLE_START_DATE_OUT_OF_RANGE"
  /** The input value is invalid. */
  | "INVALID"
  /** Origin time cannot be before the contract creation time. */
  | "ORIGIN_TIME_BEFORE_CONTRACT_CREATION"
  /** Origin time needs to be within the selected billing cycle's start and end at date. */
  | "ORIGIN_TIME_OUT_OF_RANGE"
  /** Billing cycle selector cannot select upcoming billing cycle past limit. */
  | "UPCOMING_CYCLE_LIMIT_EXCEEDED"
  | "%future added value"

/**
 * Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
 * to be used as a type of magazine or newsletter for the shop, with content that changes over time.
 */
export interface ShopifyBlog
  extends ShopifyHasEvents,
    ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyHasPublishedTranslations,
    ShopifyNode {
  __typename?: "Blog"
  /** List of the blog's articles. */
  articles: ShopifyArticleConnection
  /** Count of articles. Limited to a maximum of 10000 by default. */
  articlesCount?: Maybe<ShopifyCount>
  /** Indicates whether readers can post comments to the blog and if comments are moderated or not. */
  commentPolicy: ShopifyCommentPolicy
  /** The date and time when the blog was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The paginated list of events associated with the host subject. */
  events: ShopifyEventConnection
  /** FeedBurner provider details. Any blogs that aren't already integrated with FeedBurner can't use the service. */
  feed?: Maybe<ShopifyBlogFeed>
  /**
   * A unique, human-friendly string for the blog. If no handle is specified, a handle will be generated automatically from the blog title.
   * The handle is customizable and is used by the Liquid templating language to refer to the blog.
   */
  handle: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** A list of tags associated with the 200 most recent blog articles. */
  tags: Array<Scalars["String"]["output"]>
  /**
   * The name of the template a blog is using if it's using an alternate template.
   * Returns `null` if a blog is using the default blog.liquid template.
   */
  templateSuffix?: Maybe<Scalars["String"]["output"]>
  /** The title of the blog. */
  title: Scalars["String"]["output"]
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
  /** The date and time when the blog was update. */
  updatedAt?: Maybe<Scalars["DateTime"]["output"]>
}

/**
 * Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
 * to be used as a type of magazine or newsletter for the shop, with content that changes over time.
 */
export interface ShopifyBlogArticlesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
 * to be used as a type of magazine or newsletter for the shop, with content that changes over time.
 */
export interface ShopifyBlogArticlesCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
}

/**
 * Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
 * to be used as a type of magazine or newsletter for the shop, with content that changes over time.
 */
export interface ShopifyBlogEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/**
 * Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
 * to be used as a type of magazine or newsletter for the shop, with content that changes over time.
 */
export interface ShopifyBlogMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
 * to be used as a type of magazine or newsletter for the shop, with content that changes over time.
 */
export interface ShopifyBlogMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/**
 * Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
 * to be used as a type of magazine or newsletter for the shop, with content that changes over time.
 */
export interface ShopifyBlogMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
 * to be used as a type of magazine or newsletter for the shop, with content that changes over time.
 */
export interface ShopifyBlogTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/** An auto-generated type for paginating through multiple Blogs. */
export interface ShopifyBlogConnection {
  __typename?: "BlogConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyBlogEdge>
  /** A list of nodes that are contained in BlogEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyBlog>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields to create a blog. */
export interface ShopifyBlogCreateInput {
  /** Indicates whether readers can post comments to the blog and whether comments are moderated. */
  commentPolicy?: InputMaybe<ShopifyCommentPolicy>
  /**
   * A unique, human-friendly string for the blog. If no handle is specified, a handle will be generated automatically from the blog title.
   * The handle is customizable and is used by the Liquid templating language to refer to the blog.
   */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** Attaches additional metadata to a store's resources. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /**
   * The name of the template a blog is using if it's using an alternate template.
   * Returns `null` if a blog is using the default blog.liquid template.
   */
  templateSuffix?: InputMaybe<Scalars["String"]["input"]>
  /** The title of the blog. */
  title: Scalars["String"]["input"]
}

/** Return type for `blogCreate` mutation. */
export interface ShopifyBlogCreatePayload {
  __typename?: "BlogCreatePayload"
  /** The blog that was created. */
  blog?: Maybe<ShopifyBlog>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBlogCreateUserError>
}

/** An error that occurs during the execution of `BlogCreate`. */
export interface ShopifyBlogCreateUserError extends ShopifyDisplayableError {
  __typename?: "BlogCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyBlogCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `BlogCreateUserError`. */
export type ShopifyBlogCreateUserErrorCode =
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** The input value is invalid. */
  | "INVALID"
  /** The metafield type is invalid. */
  | "INVALID_TYPE"
  /** The value is invalid for the metafield type or for the definition options. */
  | "INVALID_VALUE"
  /** The input value is too long. */
  | "TOO_LONG"
  | "%future added value"

/** Return type for `blogDelete` mutation. */
export interface ShopifyBlogDeletePayload {
  __typename?: "BlogDeletePayload"
  /** The ID of the deleted blog. */
  deletedBlogId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBlogDeleteUserError>
}

/** An error that occurs during the execution of `BlogDelete`. */
export interface ShopifyBlogDeleteUserError extends ShopifyDisplayableError {
  __typename?: "BlogDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyBlogDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `BlogDeleteUserError`. */
export type ShopifyBlogDeleteUserErrorCode =
  /** The record with the ID used as the input value couldn't be found. */
  "NOT_FOUND" | "%future added value"

/** An auto-generated type which holds one Blog and a cursor during pagination. */
export interface ShopifyBlogEdge {
  __typename?: "BlogEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of BlogEdge. */
  node: ShopifyBlog
}

/** FeedBurner provider details. Any blogs that aren't already integrated with FeedBurner can't use the service. */
export interface ShopifyBlogFeed {
  __typename?: "BlogFeed"
  /** Blog feed provider url. */
  location: Scalars["URL"]["output"]
  /** Blog feed provider path. */
  path: Scalars["String"]["output"]
}

/** The set of valid sort keys for the Blog query. */
export type ShopifyBlogSortKeys =
  /** Sort by the `handle` value. */
  | "HANDLE"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `title` value. */
  | "TITLE"
  | "%future added value"

/** The input fields to update a blog. */
export interface ShopifyBlogUpdateInput {
  /** Indicates whether readers can post comments to the blog and whether comments are moderated. */
  commentPolicy?: InputMaybe<ShopifyCommentPolicy>
  /**
   * A unique, human-friendly string for the blog. If no handle is specified, a handle will be generated automatically from the blog title.
   * The handle is customizable and is used by the Liquid templating language to refer to the blog.
   */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** Attaches additional metadata to a store's resources. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** Whether to redirect blog posts automatically. */
  redirectArticles?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * Whether a redirect is required after a new handle has been provided.
   * If `true`, then the old handle is redirected to the new one automatically.
   */
  redirectNewHandle?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * The name of the template a blog is using if it's using an alternate template.
   * Returns `null` if a blog is using the default blog.liquid template.
   */
  templateSuffix?: InputMaybe<Scalars["String"]["input"]>
  /** The title of the blog. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `blogUpdate` mutation. */
export interface ShopifyBlogUpdatePayload {
  __typename?: "BlogUpdatePayload"
  /** The blog that was updated. */
  blog?: Maybe<ShopifyBlog>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBlogUpdateUserError>
}

/** An error that occurs during the execution of `BlogUpdate`. */
export interface ShopifyBlogUpdateUserError extends ShopifyDisplayableError {
  __typename?: "BlogUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyBlogUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `BlogUpdateUserError`. */
export type ShopifyBlogUpdateUserErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** The input value is invalid. */
  | "INVALID"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** The input value is too long. */
  | "TOO_LONG"
  | "%future added value"

/** Possible error codes that can be returned by `BulkMutationUserError`. */
export type ShopifyBulkMutationErrorCode =
  /** There was a problem reading the JSONL file. This error might be intermittent, so you can try performing the same query again. */
  | "INTERNAL_FILE_SERVER_ERROR"
  /** The operation did not run because the mutation is invalid. Check your mutation syntax and try again. */
  | "INVALID_MUTATION"
  /** The JSONL file submitted via the `stagedUploadsCreate` mutation is invalid. Update the file and try again. */
  | "INVALID_STAGED_UPLOAD_FILE"
  /** The JSONL file could not be found. Try [uploading the file](https://shopify.dev/api/usage/bulk-operations/imports#generate-the-uploaded-url-and-parameters) again, and check that you've entered the URL correctly for the `stagedUploadPath` mutation argument. */
  | "NO_SUCH_FILE"
  /** The operation did not run because another bulk mutation is already running. [Wait for the operation to finish](https://shopify.dev/api/usage/bulk-operations/imports#wait-for-the-operation-to-finish) before retrying this operation. */
  | "OPERATION_IN_PROGRESS"
  | "%future added value"

/** Represents an error that happens during execution of a bulk mutation. */
export interface ShopifyBulkMutationUserError extends ShopifyDisplayableError {
  __typename?: "BulkMutationUserError"
  /** The error code. */
  code?: Maybe<ShopifyBulkMutationErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/**
 * An asynchronous long-running operation to fetch data in bulk or to bulk import data.
 *
 * Bulk operations are created using the `bulkOperationRunQuery` or `bulkOperationRunMutation` mutation. After
 * they are created, clients should poll the `status` field for updates. When `COMPLETED`, the `url` field contains
 * a link to the data in [JSONL](http://jsonlines.org/) format.
 *
 * Refer to the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.
 */
export interface ShopifyBulkOperation extends ShopifyNode {
  __typename?: "BulkOperation"
  /** When the bulk operation was successfully completed. */
  completedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** When the bulk operation was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** Error code for failed operations. */
  errorCode?: Maybe<ShopifyBulkOperationErrorCode>
  /** File size in bytes of the file in the `url` field. */
  fileSize?: Maybe<Scalars["UnsignedInt64"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * A running count of all the objects processed.
   * For example, when fetching all the products and their variants, this field counts both products and variants.
   * This field can be used to track operation progress.
   */
  objectCount: Scalars["UnsignedInt64"]["output"]
  /**
   * The URL that points to the partial or incomplete response data (in [JSONL](http://jsonlines.org/) format) that was returned by a failed operation.
   * The URL expires 7 days after the operation fails. Returns `null` when there's no data available.
   */
  partialDataUrl?: Maybe<Scalars["URL"]["output"]>
  /** GraphQL query document specified in `bulkOperationRunQuery`. */
  query: Scalars["String"]["output"]
  /**
   * A running count of all the objects that are processed at the root of the query.
   * For example, when fetching all the products and their variants, this field only counts products.
   * This field can be used to track operation progress.
   */
  rootObjectCount: Scalars["UnsignedInt64"]["output"]
  /** Status of the bulk operation. */
  status: ShopifyBulkOperationStatus
  /** The bulk operation's type. */
  type: ShopifyBulkOperationType
  /**
   * The URL that points to the response data in [JSONL](http://jsonlines.org/) format.
   * The URL expires 7 days after the operation completes.
   */
  url?: Maybe<Scalars["URL"]["output"]>
}

/** Return type for `bulkOperationCancel` mutation. */
export interface ShopifyBulkOperationCancelPayload {
  __typename?: "BulkOperationCancelPayload"
  /** The bulk operation to be canceled. */
  bulkOperation?: Maybe<ShopifyBulkOperation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Error codes for failed bulk operations. */
export type ShopifyBulkOperationErrorCode =
  /**
   * The provided operation `query` returned access denied due to missing
   * [access scopes](https://shopify.dev/api/usage/access-scopes).
   * Review the requested object permissions and execute the query as a normal non-bulk GraphQL request to see more details.
   */
  | "ACCESS_DENIED"
  /**
   * The operation resulted in partial or incomplete data due to internal server errors during execution.
   * These errors might be intermittent, so you can try performing the same query again.
   */
  | "INTERNAL_SERVER_ERROR"
  /**
   * The operation resulted in partial or incomplete data due to query timeouts during execution.
   * In some cases, timeouts can be avoided by modifying your `query` to select fewer fields.
   */
  | "TIMEOUT"
  | "%future added value"

/** Return type for `bulkOperationRunMutation` mutation. */
export interface ShopifyBulkOperationRunMutationPayload {
  __typename?: "BulkOperationRunMutationPayload"
  /** The newly created bulk operation. */
  bulkOperation?: Maybe<ShopifyBulkOperation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBulkMutationUserError>
}

/** Return type for `bulkOperationRunQuery` mutation. */
export interface ShopifyBulkOperationRunQueryPayload {
  __typename?: "BulkOperationRunQueryPayload"
  /** The newly created bulk operation. */
  bulkOperation?: Maybe<ShopifyBulkOperation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBulkOperationUserError>
}

/** The valid values for the status of a bulk operation. */
export type ShopifyBulkOperationStatus =
  /** The bulk operation has been canceled. */
  | "CANCELED"
  /**
   * Cancelation has been initiated on the bulk operation. There may be a short delay from when a cancelation
   * starts until the operation is actually canceled.
   */
  | "CANCELING"
  /** The bulk operation has successfully completed. */
  | "COMPLETED"
  /** The bulk operation has been created. */
  | "CREATED"
  /** The bulk operation URL has expired. */
  | "EXPIRED"
  /**
   * The bulk operation has failed. For information on why the operation failed, use
   * [BulkOperation.errorCode](https://shopify.dev/api/admin-graphql/latest/enums/bulkoperationerrorcode).
   */
  | "FAILED"
  /** The bulk operation is runnning. */
  | "RUNNING"
  | "%future added value"

/** The valid values for the bulk operation's type. */
export type ShopifyBulkOperationType =
  /** The bulk operation is a mutation. */
  | "MUTATION"
  /** The bulk operation is a query. */
  | "QUERY"
  | "%future added value"

/** Represents an error in the input of a mutation. */
export interface ShopifyBulkOperationUserError extends ShopifyDisplayableError {
  __typename?: "BulkOperationUserError"
  /** The error code. */
  code?: Maybe<ShopifyBulkOperationUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `BulkOperationUserError`. */
export type ShopifyBulkOperationUserErrorCode =
  /** The input value is invalid. */
  | "INVALID"
  /** A bulk operation is already in progress. */
  | "OPERATION_IN_PROGRESS"
  | "%future added value"

/** Return type for `bulkProductResourceFeedbackCreate` mutation. */
export interface ShopifyBulkProductResourceFeedbackCreatePayload {
  __typename?: "BulkProductResourceFeedbackCreatePayload"
  /** The feedback that's created. */
  feedback?: Maybe<Array<ShopifyProductResourceFeedback>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBulkProductResourceFeedbackCreateUserError>
}

/** An error that occurs during the execution of `BulkProductResourceFeedbackCreate`. */
export interface ShopifyBulkProductResourceFeedbackCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "BulkProductResourceFeedbackCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyBulkProductResourceFeedbackCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `BulkProductResourceFeedbackCreateUserError`. */
export type ShopifyBulkProductResourceFeedbackCreateUserErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** The input value is invalid. */
  | "INVALID"
  /** The input value should be less than or equal to the maximum value allowed. */
  | "LESS_THAN_OR_EQUAL_TO"
  /** The operation was attempted on too many feedback objects. The maximum number of feedback objects that you can operate on is 50. */
  | "MAXIMUM_FEEDBACK_LIMIT_EXCEEDED"
  /** The feedback for a later version of this resource was already accepted. */
  | "OUTDATED_FEEDBACK"
  /** The input value needs to be blank. */
  | "PRESENT"
  /** The product wasn't found or isn't available to the channel. */
  | "PRODUCT_NOT_FOUND"
  | "%future added value"

/** The input fields representing the components of a bundle line item. */
export interface ShopifyBundlesDraftOrderBundleLineItemComponentInput {
  /** The quantity of the bundle component. */
  quantity: Scalars["Int"]["input"]
  /**
   * The UUID of the bundle component. Must be unique and consistent across requests.
   * This field is mandatory in order to manipulate drafts with bundles.
   */
  uuid?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of the product variant corresponding to the bundle component. */
  variantId?: InputMaybe<Scalars["ID"]["input"]>
}

/** Represents the Bundles feature configuration for the shop. */
export interface ShopifyBundlesFeature {
  __typename?: "BundlesFeature"
  /** Whether a shop is configured properly to sell bundles. */
  eligibleForBundles: Scalars["Boolean"]["output"]
  /** The reason why a shop is not eligible for bundles. */
  ineligibilityReason?: Maybe<Scalars["String"]["output"]>
  /** Whether a shop has any fixed bundle products or has a cartTransform function installed. */
  sellsBundles: Scalars["Boolean"]["output"]
}

/** Possible error codes that can be returned by `BusinessCustomerUserError`. */
export type ShopifyBusinessCustomerErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** Deleting the resource failed. */
  | "FAILED_TO_DELETE"
  /** An internal error occurred. */
  | "INTERNAL_ERROR"
  /** The input value is invalid. */
  | "INVALID"
  /** The input is invalid. */
  | "INVALID_INPUT"
  /** The number of resources exceeded the limit. */
  | "LIMIT_REACHED"
  /** The input is empty. */
  | "NO_INPUT"
  /** Missing a required field. */
  | "REQUIRED"
  /** The resource wasn't found. */
  | "RESOURCE_NOT_FOUND"
  /** The input value is already taken. */
  | "TAKEN"
  /** The field value is too long. */
  | "TOO_LONG"
  /** Unexpected type. */
  | "UNEXPECTED_TYPE"
  | "%future added value"

/** An error that happens during the execution of a business customer mutation. */
export interface ShopifyBusinessCustomerUserError
  extends ShopifyDisplayableError {
  __typename?: "BusinessCustomerUserError"
  /** The error code. */
  code?: Maybe<ShopifyBusinessCustomerErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Represents a merchant's Business Entity. */
export interface ShopifyBusinessEntity extends ShopifyNode {
  __typename?: "BusinessEntity"
  /** The address of the merchant's Business Entity. */
  address: ShopifyBusinessEntityAddress
  /** Whether the Business Entity is archived from the shop. */
  archived: Scalars["Boolean"]["output"]
  /** The name of the company associated with the merchant's Business Entity. */
  companyName?: Maybe<Scalars["String"]["output"]>
  /** The display name of the merchant's Business Entity. */
  displayName: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Whether it's the merchant's primary Business Entity. */
  primary: Scalars["Boolean"]["output"]
  /** Shopify Payments account information, including balances and payouts. */
  shopifyPaymentsAccount?: Maybe<ShopifyShopifyPaymentsAccount>
}

/** Represents the address of a merchant's Business Entity. */
export interface ShopifyBusinessEntityAddress {
  __typename?: "BusinessEntityAddress"
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars["String"]["output"]>
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: Maybe<Scalars["String"]["output"]>
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars["String"]["output"]>
  /** The country code of the merchant's Business Entity. */
  countryCode: ShopifyCountryCode
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars["String"]["output"]>
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars["String"]["output"]>
}

/** Settings describing the behavior of checkout for a B2B buyer. */
export interface ShopifyBuyerExperienceConfiguration {
  __typename?: "BuyerExperienceConfiguration"
  /** Whether to checkout to draft order for merchant review. */
  checkoutToDraft: Scalars["Boolean"]["output"]
  /** The portion required to be paid at checkout. */
  deposit?: Maybe<ShopifyDepositConfiguration>
  /** Whether to allow customers to use editable shipping addresses. */
  editableShippingAddress: Scalars["Boolean"]["output"]
  /**
   * Whether a buyer must pay at checkout or they can also choose to pay
   * later using net terms.
   * @deprecated Please use `checkoutToDraft`(must be false) and `paymentTermsTemplate`(must be nil) to derive this instead.
   */
  payNowOnly: Scalars["Boolean"]["output"]
  /** Represents the merchant configured payment terms. */
  paymentTermsTemplate?: Maybe<ShopifyPaymentTermsTemplate>
}

/** The input fields specifying the behavior of checkout for a B2B buyer. */
export interface ShopifyBuyerExperienceConfigurationInput {
  /** Whether to checkout to draft order for merchant review. */
  checkoutToDraft?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The input fields configuring the deposit a B2B buyer. */
  deposit?: InputMaybe<ShopifyDepositInput>
  /** Whether to allow customers to edit their shipping address at checkout. */
  editableShippingAddress?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Represents the merchant configured payment terms. */
  paymentTermsTemplateId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The input fields for a buyer signal. */
export interface ShopifyBuyerSignalInput {
  /** The country code of the buyer. */
  countryCode: ShopifyCountryCode
}

/** The input fields for exchange line items on a calculated return. */
export interface ShopifyCalculateExchangeLineItemInput {
  /** The discount to be applied to the exchange line item. */
  appliedDiscount?: InputMaybe<ShopifyExchangeLineItemAppliedDiscountInput>
  /** The quantity of the item to be added. */
  quantity: Scalars["Int"]["input"]
  /** The ID of the product variant to be added to the order as part of an exchange. */
  variantId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The input fields to calculate return amounts associated with an order. */
export interface ShopifyCalculateReturnInput {
  /** The exchange line items to add to the order. */
  exchangeLineItems?: InputMaybe<Array<ShopifyCalculateExchangeLineItemInput>>
  /** The ID of the order that will be returned. */
  orderId: Scalars["ID"]["input"]
  /** The line items from the order to include in the return. */
  returnLineItems?: InputMaybe<Array<ShopifyCalculateReturnLineItemInput>>
  /** The return shipping fee associated with the return. */
  returnShippingFee?: InputMaybe<ShopifyReturnShippingFeeInput>
}

/** The input fields for return line items on a calculated return. */
export interface ShopifyCalculateReturnLineItemInput {
  /** The ID of the fulfillment line item to be returned. */
  fulfillmentLineItemId: Scalars["ID"]["input"]
  /** The quantity of the item to be returned. */
  quantity: Scalars["Int"]["input"]
  /** The restocking fee for the return line item. */
  restockingFee?: InputMaybe<ShopifyRestockingFeeInput>
}

/** A discount that is automatically applied to an order that is being edited. */
export interface ShopifyCalculatedAutomaticDiscountApplication
  extends ShopifyCalculatedDiscountApplication {
  __typename?: "CalculatedAutomaticDiscountApplication"
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: ShopifyDiscountApplicationAllocationMethod
  /** The level at which the discount was applied. */
  appliedTo: ShopifyDiscountApplicationLevel
  /** The description of discount application. Indicates the reason why the discount was applied. */
  description?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: ShopifyDiscountApplicationTargetSelection
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: ShopifyDiscountApplicationTargetType
  /** The value of the discount application. */
  value: ShopifyPricingValue
}

/** An amount discounting the line that has been allocated by an associated discount application. */
export interface ShopifyCalculatedDiscountAllocation {
  __typename?: "CalculatedDiscountAllocation"
  /** The money amount that's allocated by the discount application in shop and presentment currencies. */
  allocatedAmountSet: ShopifyMoneyBag
  /** The discount that the allocated amount originated from. */
  discountApplication: ShopifyCalculatedDiscountApplication
}

/** A [discount application](https://shopify.dev/api/admin-graphql/latest/interfaces/discountapplication) involved in order editing that might be newly added or have new changes applied. */
export interface ShopifyCalculatedDiscountApplication {
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: ShopifyDiscountApplicationAllocationMethod
  /** The level at which the discount was applied. */
  appliedTo: ShopifyDiscountApplicationLevel
  /** The description of discount application. Indicates the reason why the discount was applied. */
  description?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: ShopifyDiscountApplicationTargetSelection
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: ShopifyDiscountApplicationTargetType
  /** The value of the discount application. */
  value: ShopifyPricingValue
}

/** An auto-generated type for paginating through multiple CalculatedDiscountApplications. */
export interface ShopifyCalculatedDiscountApplicationConnection {
  __typename?: "CalculatedDiscountApplicationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCalculatedDiscountApplicationEdge>
  /** A list of nodes that are contained in CalculatedDiscountApplicationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCalculatedDiscountApplication>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one CalculatedDiscountApplication and a cursor during pagination. */
export interface ShopifyCalculatedDiscountApplicationEdge {
  __typename?: "CalculatedDiscountApplicationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CalculatedDiscountApplicationEdge. */
  node: ShopifyCalculatedDiscountApplication
}

/** A discount code that is applied to an order that is being edited. */
export interface ShopifyCalculatedDiscountCodeApplication
  extends ShopifyCalculatedDiscountApplication {
  __typename?: "CalculatedDiscountCodeApplication"
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: ShopifyDiscountApplicationAllocationMethod
  /** The level at which the discount was applied. */
  appliedTo: ShopifyDiscountApplicationLevel
  /** The string identifying the discount code that was used at the time of application. */
  code: Scalars["String"]["output"]
  /** The description of discount application. Indicates the reason why the discount was applied. */
  description?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: ShopifyDiscountApplicationTargetSelection
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: ShopifyDiscountApplicationTargetType
  /** The value of the discount application. */
  value: ShopifyPricingValue
}

/** The calculated fields for a draft order. */
export interface ShopifyCalculatedDraftOrder {
  __typename?: "CalculatedDraftOrder"
  /**
   * Whether or not to accept automatic discounts on the draft order during calculation.
   * If false, only discount codes and custom draft order discounts (see `appliedDiscount`) will be applied.
   * If true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.
   */
  acceptAutomaticDiscounts?: Maybe<Scalars["Boolean"]["output"]>
  /** The list of alerts raised while calculating. */
  alerts: Array<ShopifyResourceAlert>
  /** Whether all variant prices have been overridden. */
  allVariantPricesOverridden: Scalars["Boolean"]["output"]
  /** Whether any variant prices have been overridden. */
  anyVariantPricesOverridden: Scalars["Boolean"]["output"]
  /** The custom order-level discount applied. */
  appliedDiscount?: Maybe<ShopifyDraftOrderAppliedDiscount>
  /**
   * The available shipping rates.
   * Requires a customer with a valid shipping address and at least one line item.
   */
  availableShippingRates: Array<ShopifyShippingRate>
  /** Whether the billing address matches the shipping address. */
  billingAddressMatchesShippingAddress: Scalars["Boolean"]["output"]
  /** The shop currency used for calculation. */
  currencyCode: ShopifyCurrencyCode
  /** The customer who will be sent an invoice. */
  customer?: Maybe<ShopifyCustomer>
  /** All discount codes applied. */
  discountCodes: Array<Scalars["String"]["output"]>
  /** The list of the line items in the calculated draft order. */
  lineItems: Array<ShopifyCalculatedDraftOrderLineItem>
  /**
   * A subtotal of the line items and corresponding discounts,
   * excluding include shipping charges, shipping discounts, taxes, or order discounts.
   */
  lineItemsSubtotalPrice: ShopifyMoneyBag
  /**
   * The name of the selected market.
   * @deprecated This field is now incompatible with Markets.
   */
  marketName: Scalars["String"]["output"]
  /**
   * The selected country code that determines the pricing.
   * @deprecated This field is now incompatible with Markets.
   */
  marketRegionCountryCode: ShopifyCountryCode
  /** The assigned phone number. */
  phone?: Maybe<Scalars["String"]["output"]>
  /** The list of platform discounts applied. */
  platformDiscounts: Array<ShopifyDraftOrderPlatformDiscount>
  /** The payment currency used for calculation. */
  presentmentCurrencyCode: ShopifyCurrencyCode
  /** The purchasing entity. */
  purchasingEntity?: Maybe<ShopifyPurchasingEntity>
  /** The line item containing the shipping information and costs. */
  shippingLine?: Maybe<ShopifyShippingLine>
  /**
   * The subtotal, in shop currency, of the line items and their discounts, excluding shipping charges, shipping discounts, and taxes.
   * @deprecated Use `subtotalPriceSet` instead.
   */
  subtotalPrice: Scalars["Money"]["output"]
  /** The subtotal, of the line items and their discounts, excluding shipping charges, shipping discounts, and taxes. */
  subtotalPriceSet: ShopifyMoneyBag
  /** The list of of taxes lines charged for each line item and shipping line. */
  taxLines: Array<ShopifyTaxLine>
  /** Whether the line item prices include taxes. */
  taxesIncluded: Scalars["Boolean"]["output"]
  /** Total discounts. */
  totalDiscountsSet: ShopifyMoneyBag
  /** Total price of line items. */
  totalLineItemsPriceSet: ShopifyMoneyBag
  /**
   * The total price, in shop currency, includes taxes, shipping charges, and discounts.
   * @deprecated Use `totalPriceSet` instead.
   */
  totalPrice: Scalars["Money"]["output"]
  /** The total price, includes taxes, shipping charges, and discounts. */
  totalPriceSet: ShopifyMoneyBag
  /**
   * The sum of individual line item quantities.
   * If the draft order has bundle items, this is the sum containing the quantities of individual items in the bundle.
   */
  totalQuantityOfLineItems: Scalars["Int"]["output"]
  /**
   * The total shipping price in shop currency.
   * @deprecated Use `totalShippingPriceSet` instead.
   */
  totalShippingPrice: Scalars["Money"]["output"]
  /** The total shipping price. */
  totalShippingPriceSet: ShopifyMoneyBag
  /**
   * The total tax in shop currency.
   * @deprecated Use `totalTaxSet` instead.
   */
  totalTax: Scalars["Money"]["output"]
  /** The total tax. */
  totalTaxSet: ShopifyMoneyBag
  /**
   * Fingerprint of the current cart.
   * In order to have bundles work, the fingerprint must be passed to
   * each request as it was previously returned, unmodified.
   */
  transformerFingerprint?: Maybe<Scalars["String"]["output"]>
  /** The list of warnings raised while calculating. */
  warnings: Array<ShopifyDraftOrderWarning>
}

/** The calculated line item for a draft order. */
export interface ShopifyCalculatedDraftOrderLineItem {
  __typename?: "CalculatedDraftOrderLineItem"
  /** The custom applied discount. */
  appliedDiscount?: Maybe<ShopifyDraftOrderAppliedDiscount>
  /**
   * The `discountedTotal` divided by `quantity`,
   * equal to the average value of the line item price per unit after discounts are applied.
   * This value doesn't include discounts applied to the entire draft order.
   */
  approximateDiscountedUnitPriceSet: ShopifyMoneyBag
  /**
   * The bundle components of the draft order line item.
   * @deprecated Use `components` instead.
   */
  bundleComponents: Array<ShopifyCalculatedDraftOrderLineItem>
  /** The components of the draft order line item. */
  components: Array<ShopifyCalculatedDraftOrderLineItem>
  /** Whether the line item is custom (`true`) or contains a product variant (`false`). */
  custom: Scalars["Boolean"]["output"]
  /** A list of attributes that represent custom features or special requests. */
  customAttributes: Array<ShopifyAttribute>
  /** The list of additional information (metafields) with the associated types. */
  customAttributesV2: Array<ShopifyTypedAttribute>
  /** The total price with discounts applied. */
  discountedTotal: ShopifyMoneyV2
  /** The total price with discounts applied. */
  discountedTotalSet: ShopifyMoneyBag
  /**
   * The unit price with discounts applied.
   * @deprecated Use `approximateDiscountedUnitPriceSet` instead.
   */
  discountedUnitPrice: ShopifyMoneyV2
  /**
   * The unit price with discounts applied.
   * @deprecated Use `approximateDiscountedUnitPriceSet` instead.
   */
  discountedUnitPriceSet: ShopifyMoneyBag
  /**
   * Name of the service provider who fulfilled the order.
   *
   * Valid values are either **manual** or the name of the provider.
   * For example, **amazon**, **shipwire**.
   *
   * Deleted fulfillment services will return null.
   */
  fulfillmentService?: Maybe<ShopifyFulfillmentService>
  /** The image associated with the draft order line item. */
  image?: Maybe<ShopifyImage>
  /** Whether the line item represents the purchase of a gift card. */
  isGiftCard: Scalars["Boolean"]["output"]
  /** The name of the product. */
  name: Scalars["String"]["output"]
  /** The total price, excluding discounts, equal to the original unit price multiplied by quantity. */
  originalTotal: ShopifyMoneyV2
  /** The total price excluding discounts, equal to the original unit price multiplied by quantity. */
  originalTotalSet: ShopifyMoneyBag
  /** The line item price without any discounts applied. */
  originalUnitPrice: ShopifyMoneyV2
  /** The price without any discounts applied. */
  originalUnitPriceSet: ShopifyMoneyBag
  /** The original custom line item input price. */
  originalUnitPriceWithCurrency?: Maybe<ShopifyMoneyV2>
  /** The price override for the line item. */
  priceOverride?: Maybe<ShopifyMoneyV2>
  /** The product for the line item. */
  product?: Maybe<ShopifyProduct>
  /**
   * The quantity of items. For a bundle item, this is the quantity of bundles,
   * not the quantity of items contained in the bundles themselves.
   */
  quantity: Scalars["Int"]["output"]
  /** Whether physical shipping is required for the variant. */
  requiresShipping: Scalars["Boolean"]["output"]
  /** The SKU number of the product variant. */
  sku?: Maybe<Scalars["String"]["output"]>
  /** Whether the variant is taxable. */
  taxable: Scalars["Boolean"]["output"]
  /** The title of the product or variant. This field only applies to custom line items. */
  title: Scalars["String"]["output"]
  /** The total value of the discount. */
  totalDiscount: ShopifyMoneyV2
  /** The total discount amount. */
  totalDiscountSet: ShopifyMoneyBag
  /**
   * The UUID of the draft order line item. Must be unique and consistent across requests.
   * This field is mandatory in order to manipulate drafts with bundles.
   */
  uuid: Scalars["String"]["output"]
  /** The product variant for the line item. */
  variant?: Maybe<ShopifyProductVariant>
  /** The name of the variant. */
  variantTitle?: Maybe<Scalars["String"]["output"]>
  /** The name of the vendor who created the product variant. */
  vendor?: Maybe<Scalars["String"]["output"]>
  /** The weight unit and value. */
  weight?: Maybe<ShopifyWeight>
}

/** A calculated exchange line item. */
export interface ShopifyCalculatedExchangeLineItem {
  __typename?: "CalculatedExchangeLineItem"
  /** The discounts that have been allocated onto the line item by discount applications. */
  calculatedDiscountAllocations: Array<ShopifyCalculatedDiscountAllocation>
  /** The unit price of the exchange line item after discounts. */
  discountedUnitPriceSet: ShopifyMoneyBag
  /** A globally-unique ID. */
  id?: Maybe<Scalars["ID"]["output"]>
  /** The original unit price of the exchange line item before discounts. */
  originalUnitPriceSet: ShopifyMoneyBag
  /** The quantity being exchanged. */
  quantity: Scalars["Int"]["output"]
  /** The calculated subtotal set of the exchange line item, including discounts. */
  subtotalSet: ShopifyMoneyBag
  /** The total tax of the exchange line item. */
  totalTaxSet: ShopifyMoneyBag
  /** The variant being exchanged. */
  variant?: Maybe<ShopifyProductVariant>
}

/** A line item involved in order editing that may be newly added or have new changes applied. */
export interface ShopifyCalculatedLineItem {
  __typename?: "CalculatedLineItem"
  /** The discounts that have been allocated onto the line item by discount applications. */
  calculatedDiscountAllocations: Array<ShopifyCalculatedDiscountAllocation>
  /** A list of attributes that represent custom features or special requests. */
  customAttributes: Array<ShopifyAttribute>
  /**
   * The discounts that have been allocated onto the line item by discount applications.
   * @deprecated Use `calculatedDiscountAllocations` instead.
   */
  discountAllocations: Array<ShopifyDiscountAllocation>
  /** The price of a single quantity of the line item with line item discounts applied, in shop and presentment currencies. Discounts applied to the entire order aren't included in this price. */
  discountedUnitPriceSet: ShopifyMoneyBag
  /** The total number of items that can be edited. */
  editableQuantity: Scalars["Int"]["output"]
  /** The editable quantity prior to any changes made in the current edit. */
  editableQuantityBeforeChanges: Scalars["Int"]["output"]
  /** The total price of editable lines in shop and presentment currencies. */
  editableSubtotalSet: ShopifyMoneyBag
  /** Whether the calculated line item has a staged discount. */
  hasStagedLineItemDiscount: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The image object associated to the line item's variant. */
  image?: Maybe<ShopifyImage>
  /** The variant unit price in shop and presentment currencies, without any discounts applied. */
  originalUnitPriceSet: ShopifyMoneyBag
  /** The total number of items. */
  quantity: Scalars["Int"]["output"]
  /** Whether the line item can be restocked or not. */
  restockable: Scalars["Boolean"]["output"]
  /** Whether the changes on the line item will result in a restock. */
  restocking: Scalars["Boolean"]["output"]
  /** The variant SKU number. */
  sku?: Maybe<Scalars["String"]["output"]>
  /** A list of changes that affect this line item. */
  stagedChanges: Array<ShopifyOrderStagedChange>
  /** The title of the product. */
  title: Scalars["String"]["output"]
  /** The total price of uneditable lines in shop and presentment currencies. */
  uneditableSubtotalSet: ShopifyMoneyBag
  /**
   * The product variant associated with this line item. The value is null for custom line items and items where
   * the variant has been deleted.
   */
  variant?: Maybe<ShopifyProductVariant>
  /** The title of the variant. */
  variantTitle?: Maybe<Scalars["String"]["output"]>
}

/** An auto-generated type for paginating through multiple CalculatedLineItems. */
export interface ShopifyCalculatedLineItemConnection {
  __typename?: "CalculatedLineItemConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCalculatedLineItemEdge>
  /** A list of nodes that are contained in CalculatedLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCalculatedLineItem>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one CalculatedLineItem and a cursor during pagination. */
export interface ShopifyCalculatedLineItemEdge {
  __typename?: "CalculatedLineItemEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CalculatedLineItemEdge. */
  node: ShopifyCalculatedLineItem
}

/** Represents a discount that was manually created for an order that is being edited. */
export interface ShopifyCalculatedManualDiscountApplication
  extends ShopifyCalculatedDiscountApplication {
  __typename?: "CalculatedManualDiscountApplication"
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: ShopifyDiscountApplicationAllocationMethod
  /** The level at which the discount was applied. */
  appliedTo: ShopifyDiscountApplicationLevel
  /** The description of discount application. Indicates the reason why the discount was applied. */
  description?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: ShopifyDiscountApplicationTargetSelection
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: ShopifyDiscountApplicationTargetType
  /** The value of the discount application. */
  value: ShopifyPricingValue
}

/** An order with edits applied but not saved. */
export interface ShopifyCalculatedOrder extends ShopifyNode {
  __typename?: "CalculatedOrder"
  /** Returns only the new discount applications being added to the order in the current edit. */
  addedDiscountApplications: ShopifyCalculatedDiscountApplicationConnection
  /** Returns only the new line items being added to the order during the current edit. */
  addedLineItems: ShopifyCalculatedLineItemConnection
  /** Amount of the order-level discount (doesn't contain any line item discounts) in shop and presentment currencies. */
  cartDiscountAmountSet?: Maybe<ShopifyMoneyBag>
  /**
   * Whether the changes have been applied and saved to the order.
   * @deprecated CalculatedOrder for committed order edits is being deprecated, and this field will also be removed in a future version.  See [changelog](https://shopify.dev/changelog/deprecation-notice-calculatedorder-for-committed-order-edits) for more details.
   */
  committed: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * Returns all items on the order that existed before starting the edit.
   * Will include any changes that have been made.
   * Will not include line items added during the current edit.
   */
  lineItems: ShopifyCalculatedLineItemConnection
  /** The HTML of the customer notification for the order edit. */
  notificationPreviewHtml?: Maybe<Scalars["HTML"]["output"]>
  /** The customer notification title. */
  notificationPreviewTitle: Scalars["String"]["output"]
  /** The order without any changes applied. */
  originalOrder: ShopifyOrder
  /**
   * Returns the shipping lines on the order that existed before starting the edit.
   * Will include any changes that have been made as well as shipping lines added during the current edit.
   * Returns only the first 250 shipping lines.
   */
  shippingLines: Array<ShopifyCalculatedShippingLine>
  /** List of changes made to the order during the current edit. */
  stagedChanges: ShopifyOrderStagedChangeConnection
  /** The sum of the quantities for the line items that contribute to the order's subtotal. */
  subtotalLineItemsQuantity: Scalars["Int"]["output"]
  /** The subtotal of the line items, in shop and presentment currencies, after all the discounts are applied.  The subtotal doesn't include shipping.  The subtotal includes taxes for taxes-included orders and excludes taxes for taxes-excluded orders. */
  subtotalPriceSet?: Maybe<ShopifyMoneyBag>
  /** Taxes charged for the line item. */
  taxLines: Array<ShopifyTaxLine>
  /** Total price of the order less the total amount received from the customer in shop and presentment currencies. */
  totalOutstandingSet: ShopifyMoneyBag
  /** Total amount of the order (includes taxes and discounts) in shop and presentment currencies. */
  totalPriceSet: ShopifyMoneyBag
}

/** An order with edits applied but not saved. */
export interface ShopifyCalculatedOrderAddedDiscountApplicationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An order with edits applied but not saved. */
export interface ShopifyCalculatedOrderAddedLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An order with edits applied but not saved. */
export interface ShopifyCalculatedOrderLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An order with edits applied but not saved. */
export interface ShopifyCalculatedOrderStagedChangesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The calculated costs of handling a return line item.
 * Typically, this would cover the costs of inspecting, repackaging, and restocking the item.
 */
export interface ShopifyCalculatedRestockingFee
  extends ShopifyCalculatedReturnFee {
  __typename?: "CalculatedRestockingFee"
  /** The calculated amount of the return fee, in shop and presentment currencies. */
  amountSet: ShopifyMoneyBag
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The value of the fee as a percentage. */
  percentage: Scalars["Float"]["output"]
}

/** A calculated return. */
export interface ShopifyCalculatedReturn {
  __typename?: "CalculatedReturn"
  /** A list of calculated exchange line items. */
  exchangeLineItems: Array<ShopifyCalculatedExchangeLineItem>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** A list of calculated return line items. */
  returnLineItems: Array<ShopifyCalculatedReturnLineItem>
  /** The calculated return shipping fee. */
  returnShippingFee?: Maybe<ShopifyCalculatedReturnShippingFee>
}

/** A calculated return fee. */
export interface ShopifyCalculatedReturnFee {
  /** The calculated amount of the return fee, in shop and presentment currencies. */
  amountSet: ShopifyMoneyBag
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
}

/** A calculated return line item. */
export interface ShopifyCalculatedReturnLineItem {
  __typename?: "CalculatedReturnLineItem"
  /** The fulfillment line item from which items are returned. */
  fulfillmentLineItem: ShopifyFulfillmentLineItem
  /** A globally-unique ID. */
  id?: Maybe<Scalars["ID"]["output"]>
  /** The quantity being returned. */
  quantity: Scalars["Int"]["output"]
  /** The restocking fee of the return line item. */
  restockingFee?: Maybe<ShopifyCalculatedRestockingFee>
  /** The subtotal of the return line item before order discounts. */
  subtotalBeforeOrderDiscountsSet: ShopifyMoneyBag
  /** The subtotal of the return line item. */
  subtotalSet: ShopifyMoneyBag
  /** The total tax of the return line item. */
  totalTaxSet: ShopifyMoneyBag
}

/** The calculated cost of the return shipping. */
export interface ShopifyCalculatedReturnShippingFee
  extends ShopifyCalculatedReturnFee {
  __typename?: "CalculatedReturnShippingFee"
  /** The calculated amount of the return fee, in shop and presentment currencies. */
  amountSet: ShopifyMoneyBag
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
}

/** A discount created by a Shopify script for an order that is being edited. */
export interface ShopifyCalculatedScriptDiscountApplication
  extends ShopifyCalculatedDiscountApplication {
  __typename?: "CalculatedScriptDiscountApplication"
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: ShopifyDiscountApplicationAllocationMethod
  /** The level at which the discount was applied. */
  appliedTo: ShopifyDiscountApplicationLevel
  /** The description of discount application. Indicates the reason why the discount was applied. */
  description?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: ShopifyDiscountApplicationTargetSelection
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: ShopifyDiscountApplicationTargetType
  /** The value of the discount application. */
  value: ShopifyPricingValue
}

/** A shipping line item involved in order editing that may be newly added or have new changes applied. */
export interface ShopifyCalculatedShippingLine {
  __typename?: "CalculatedShippingLine"
  /** A globally-unique ID. */
  id?: Maybe<Scalars["ID"]["output"]>
  /** The price of the shipping line when sold and before applying discounts. This field includes taxes if `Order.taxesIncluded` is true. Otherwise, this field doesn't include taxes for the shipping line. */
  price: ShopifyMoneyBag
  /** The staged status of the shipping line. */
  stagedStatus: ShopifyCalculatedShippingLineStagedStatus
  /** The title of the shipping line. */
  title: Scalars["String"]["output"]
}

/** Represents the staged status of a CalculatedShippingLine on a CalculatedOrder. */
export type ShopifyCalculatedShippingLineStagedStatus =
  /** The shipping line was added as part of the current order edit. */
  | "ADDED"
  /** The shipping line has no staged changes associated with it. */
  | "NONE"
  /** The shipping line was removed as part of the current order edit. */
  | "REMOVED"
  | "%future added value"

/** Card payment details related to a transaction. */
export interface ShopifyCardPaymentDetails extends ShopifyBasePaymentDetails {
  __typename?: "CardPaymentDetails"
  /** The response code from the address verification system (AVS). The code is always a single letter. */
  avsResultCode?: Maybe<Scalars["String"]["output"]>
  /** The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card. This is made up of the first few digits of the credit card number. */
  bin?: Maybe<Scalars["String"]["output"]>
  /** The name of the company that issued the customer's credit card. */
  company?: Maybe<Scalars["String"]["output"]>
  /** The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly. The code is a single letter or empty string. */
  cvvResultCode?: Maybe<Scalars["String"]["output"]>
  /** The month in which the used credit card expires. */
  expirationMonth?: Maybe<Scalars["Int"]["output"]>
  /** The year in which the used credit card expires. */
  expirationYear?: Maybe<Scalars["Int"]["output"]>
  /** The holder of the credit card. */
  name?: Maybe<Scalars["String"]["output"]>
  /** The customer's credit card number, with most of the leading digits redacted. */
  number?: Maybe<Scalars["String"]["output"]>
  /** The name of payment method used by the buyer. */
  paymentMethodName?: Maybe<Scalars["String"]["output"]>
  /** Digital wallet used for the payment. */
  wallet?: Maybe<ShopifyDigitalWallet>
}

/** Return type for `carrierServiceCreate` mutation. */
export interface ShopifyCarrierServiceCreatePayload {
  __typename?: "CarrierServiceCreatePayload"
  /** The created carrier service. */
  carrierService?: Maybe<ShopifyDeliveryCarrierService>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCarrierServiceCreateUserError>
}

/** An error that occurs during the execution of `CarrierServiceCreate`. */
export interface ShopifyCarrierServiceCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "CarrierServiceCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyCarrierServiceCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CarrierServiceCreateUserError`. */
export type ShopifyCarrierServiceCreateUserErrorCode =
  /** Carrier service creation failed. */
  "CARRIER_SERVICE_CREATE_FAILED" | "%future added value"

/** Return type for `carrierServiceDelete` mutation. */
export interface ShopifyCarrierServiceDeletePayload {
  __typename?: "CarrierServiceDeletePayload"
  /** The ID of the deleted carrier service. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCarrierServiceDeleteUserError>
}

/** An error that occurs during the execution of `CarrierServiceDelete`. */
export interface ShopifyCarrierServiceDeleteUserError
  extends ShopifyDisplayableError {
  __typename?: "CarrierServiceDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyCarrierServiceDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CarrierServiceDeleteUserError`. */
export type ShopifyCarrierServiceDeleteUserErrorCode =
  /** Carrier service deletion failed. */
  "CARRIER_SERVICE_DELETE_FAILED" | "%future added value"

/** The set of valid sort keys for the CarrierService query. */
export type ShopifyCarrierServiceSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** Return type for `carrierServiceUpdate` mutation. */
export interface ShopifyCarrierServiceUpdatePayload {
  __typename?: "CarrierServiceUpdatePayload"
  /** The updated carrier service. */
  carrierService?: Maybe<ShopifyDeliveryCarrierService>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCarrierServiceUpdateUserError>
}

/** An error that occurs during the execution of `CarrierServiceUpdate`. */
export interface ShopifyCarrierServiceUpdateUserError
  extends ShopifyDisplayableError {
  __typename?: "CarrierServiceUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyCarrierServiceUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CarrierServiceUpdateUserError`. */
export type ShopifyCarrierServiceUpdateUserErrorCode =
  /** Carrier service update failed. */
  "CARRIER_SERVICE_UPDATE_FAILED" | "%future added value"

/** A Cart Transform Function to create [Customized Bundles.](https://shopify.dev/docs/apps/selling-strategies/bundles/add-a-customized-bundle). */
export interface ShopifyCartTransform
  extends ShopifyHasMetafields,
    ShopifyNode {
  __typename?: "CartTransform"
  /** Whether a run failure will block cart and checkout operations. */
  blockOnFailure: Scalars["Boolean"]["output"]
  /** The ID for the Cart Transform function. */
  functionId: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
}

/** A Cart Transform Function to create [Customized Bundles.](https://shopify.dev/docs/apps/selling-strategies/bundles/add-a-customized-bundle). */
export interface ShopifyCartTransformMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** A Cart Transform Function to create [Customized Bundles.](https://shopify.dev/docs/apps/selling-strategies/bundles/add-a-customized-bundle). */
export interface ShopifyCartTransformMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple CartTransforms. */
export interface ShopifyCartTransformConnection {
  __typename?: "CartTransformConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCartTransformEdge>
  /** A list of nodes that are contained in CartTransformEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCartTransform>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `cartTransformCreate` mutation. */
export interface ShopifyCartTransformCreatePayload {
  __typename?: "CartTransformCreatePayload"
  /** The newly created cart transform function. */
  cartTransform?: Maybe<ShopifyCartTransform>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCartTransformCreateUserError>
}

/** An error that occurs during the execution of `CartTransformCreate`. */
export interface ShopifyCartTransformCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "CartTransformCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyCartTransformCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CartTransformCreateUserError`. */
export type ShopifyCartTransformCreateUserErrorCode =
  /** A cart transform function already exists for the provided function_id. */
  | "FUNCTION_ALREADY_REGISTERED"
  /** Function does not implement the required interface for this cart_transform function. */
  | "FUNCTION_DOES_NOT_IMPLEMENT"
  /** No Shopify Function found for provided function_id. */
  | "FUNCTION_NOT_FOUND"
  /** Failed to create cart transform due to invalid input. */
  | "INPUT_INVALID"
  /** Could not create or update metafields. */
  | "INVALID_METAFIELDS"
  | "%future added value"

/** Return type for `cartTransformDelete` mutation. */
export interface ShopifyCartTransformDeletePayload {
  __typename?: "CartTransformDeletePayload"
  /** The globally-unique ID for the deleted cart transform. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCartTransformDeleteUserError>
}

/** An error that occurs during the execution of `CartTransformDelete`. */
export interface ShopifyCartTransformDeleteUserError
  extends ShopifyDisplayableError {
  __typename?: "CartTransformDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyCartTransformDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CartTransformDeleteUserError`. */
export type ShopifyCartTransformDeleteUserErrorCode =
  /** Could not find cart transform for provided id. */
  | "NOT_FOUND"
  /** Unauthorized app scope. */
  | "UNAUTHORIZED_APP_SCOPE"
  | "%future added value"

/** An auto-generated type which holds one CartTransform and a cursor during pagination. */
export interface ShopifyCartTransformEdge {
  __typename?: "CartTransformEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CartTransformEdge. */
  node: ShopifyCartTransform
}

/** Represents the cart transform feature configuration for the shop. */
export interface ShopifyCartTransformEligibleOperations {
  __typename?: "CartTransformEligibleOperations"
  /** The shop is eligible for expand operations. */
  expandOperation: Scalars["Boolean"]["output"]
  /** The shop is eligible for merge operations. */
  mergeOperation: Scalars["Boolean"]["output"]
  /** The shop is eligible for update operations. */
  updateOperation: Scalars["Boolean"]["output"]
}

/** Represents the cart transform feature configuration for the shop. */
export interface ShopifyCartTransformFeature {
  __typename?: "CartTransformFeature"
  /** The cart transform operations eligible for the shop. */
  eligibleOperations: ShopifyCartTransformEligibleOperations
}

/** The rounding adjustment applied to total payment or refund received for an Order involving cash payments. */
export interface ShopifyCashRoundingAdjustment {
  __typename?: "CashRoundingAdjustment"
  /** The rounding adjustment that can be applied to totalReceived for an Order involving cash payments in shop and presentment currencies. Could be a positive or negative value. Value is 0 if there's no rounding, or for non-cash payments. */
  paymentSet: ShopifyMoneyBag
  /** The rounding adjustment that can be applied to totalRefunded for an Order involving cash payments in shop and presentment currencies. Could be a positive or negative value. Value is 0 if there's no rounding, or for non-cash refunds. */
  refundSet: ShopifyMoneyBag
}

/** Tracks an adjustment to the cash in a cash tracking session for a point of sale device over the course of a shift. */
export interface ShopifyCashTrackingAdjustment extends ShopifyNode {
  __typename?: "CashTrackingAdjustment"
  /** The amount of cash being added or removed. */
  cash: ShopifyMoneyV2
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The note entered when the adjustment was made. */
  note?: Maybe<Scalars["String"]["output"]>
  /** The staff member who made the adjustment. */
  staffMember: ShopifyStaffMember
  /** The time when the adjustment was made. */
  time: Scalars["DateTime"]["output"]
}

/** An auto-generated type for paginating through multiple CashTrackingAdjustments. */
export interface ShopifyCashTrackingAdjustmentConnection {
  __typename?: "CashTrackingAdjustmentConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCashTrackingAdjustmentEdge>
  /** A list of nodes that are contained in CashTrackingAdjustmentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCashTrackingAdjustment>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one CashTrackingAdjustment and a cursor during pagination. */
export interface ShopifyCashTrackingAdjustmentEdge {
  __typename?: "CashTrackingAdjustmentEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CashTrackingAdjustmentEdge. */
  node: ShopifyCashTrackingAdjustment
}

/** Tracks the balance in a cash drawer for a point of sale device over the course of a shift. */
export interface ShopifyCashTrackingSession extends ShopifyNode {
  __typename?: "CashTrackingSession"
  /** The adjustments made to the cash drawer during this session. */
  adjustments: ShopifyCashTrackingAdjustmentConnection
  /** Whether this session is tracking cash payments. */
  cashTrackingEnabled: Scalars["Boolean"]["output"]
  /** The cash transactions made during this session. */
  cashTransactions: ShopifyOrderTransactionConnection
  /** The counted cash balance when the session was closed. */
  closingBalance?: Maybe<ShopifyMoneyV2>
  /** The note entered when the session was closed. */
  closingNote?: Maybe<Scalars["String"]["output"]>
  /** The user who closed the session. */
  closingStaffMember?: Maybe<ShopifyStaffMember>
  /** When the session was closed. */
  closingTime?: Maybe<Scalars["DateTime"]["output"]>
  /** The expected balance at the end of the session or the expected current balance for sessions that are still open. */
  expectedBalance: ShopifyMoneyV2
  /** The amount that was expected to be in the cash drawer at the end of the session, calculated after the session was closed. */
  expectedClosingBalance?: Maybe<ShopifyMoneyV2>
  /** The amount expected to be in the cash drawer based on the previous session. */
  expectedOpeningBalance?: Maybe<ShopifyMoneyV2>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The location of the point of sale device during this session. */
  location?: Maybe<ShopifyLocation>
  /** The net cash sales made for the duration of this cash tracking session. */
  netCashSales: ShopifyMoneyV2
  /** The counted cash balance when the session was opened. */
  openingBalance: ShopifyMoneyV2
  /** The note entered when the session was opened. */
  openingNote?: Maybe<Scalars["String"]["output"]>
  /** The user who opened the session. */
  openingStaffMember?: Maybe<ShopifyStaffMember>
  /** When the session was opened. */
  openingTime: Scalars["DateTime"]["output"]
  /** The register name for the point of sale device that this session is tracking cash for. */
  registerName: Scalars["String"]["output"]
  /** The sum of all adjustments made during the session, excluding the final adjustment. */
  totalAdjustments?: Maybe<ShopifyMoneyV2>
  /** The sum of all cash refunds for the duration of this cash tracking session. */
  totalCashRefunds: ShopifyMoneyV2
  /** The sum of all cash sales for the duration of this cash tracking session. */
  totalCashSales: ShopifyMoneyV2
  /** The total discrepancy for the session including starting and ending. */
  totalDiscrepancy?: Maybe<ShopifyMoneyV2>
}

/** Tracks the balance in a cash drawer for a point of sale device over the course of a shift. */
export interface ShopifyCashTrackingSessionAdjustmentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyAdjustmentsSortKeys>
}

/** Tracks the balance in a cash drawer for a point of sale device over the course of a shift. */
export interface ShopifyCashTrackingSessionCashTransactionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCashTrackingSessionTransactionsSortKeys>
}

/** An auto-generated type for paginating through multiple CashTrackingSessions. */
export interface ShopifyCashTrackingSessionConnection {
  __typename?: "CashTrackingSessionConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCashTrackingSessionEdge>
  /** A list of nodes that are contained in CashTrackingSessionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCashTrackingSession>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one CashTrackingSession and a cursor during pagination. */
export interface ShopifyCashTrackingSessionEdge {
  __typename?: "CashTrackingSessionEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CashTrackingSessionEdge. */
  node: ShopifyCashTrackingSession
}

/** The set of valid sort keys for the CashTrackingSessionTransactions query. */
export type ShopifyCashTrackingSessionTransactionsSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `processed_at` value. */
  | "PROCESSED_AT"
  | "%future added value"

/** The set of valid sort keys for the CashTrackingSessions query. */
export type ShopifyCashTrackingSessionsSortKeys =
  /** Sort by the `closing_time_asc` value. */
  | "CLOSING_TIME_ASC"
  /** Sort by the `closing_time_desc` value. */
  | "CLOSING_TIME_DESC"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `opening_time_asc` value. */
  | "OPENING_TIME_ASC"
  /** Sort by the `opening_time_desc` value. */
  | "OPENING_TIME_DESC"
  /** Sort by the `total_discrepancy_asc` value. */
  | "TOTAL_DISCREPANCY_ASC"
  /** Sort by the `total_discrepancy_desc` value. */
  | "TOTAL_DISCREPANCY_DESC"
  | "%future added value"

/**
 * A list of products with publishing and pricing information.
 * A catalog can be associated with a specific context, such as a [`Market`](https://shopify.dev/api/admin-graphql/current/objects/market), [`CompanyLocation`](https://shopify.dev/api/admin-graphql/current/objects/companylocation), or [`App`](https://shopify.dev/api/admin-graphql/current/objects/app).
 */
export interface ShopifyCatalog {
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Most recent catalog operations. */
  operations: Array<ShopifyResourceOperation>
  /** The price list associated with the catalog. */
  priceList?: Maybe<ShopifyPriceList>
  /** A group of products and collections that's published to a catalog. */
  publication?: Maybe<ShopifyPublication>
  /** The status of the catalog. */
  status: ShopifyCatalogStatus
  /** The name of the catalog. */
  title: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple Catalogs. */
export interface ShopifyCatalogConnection {
  __typename?: "CatalogConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCatalogEdge>
  /** A list of nodes that are contained in CatalogEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCatalog>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields for the context in which the catalog's publishing and pricing rules apply. */
export interface ShopifyCatalogContextInput {
  /** The IDs of the company locations to associate to the catalog. */
  companyLocationIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The IDs of the markets to associate to the catalog. */
  marketIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** Return type for `catalogContextUpdate` mutation. */
export interface ShopifyCatalogContextUpdatePayload {
  __typename?: "CatalogContextUpdatePayload"
  /** The updated catalog. */
  catalog?: Maybe<ShopifyCatalog>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCatalogUserError>
}

/** The input fields required to create a catalog. */
export interface ShopifyCatalogCreateInput {
  /** The context associated with the catalog. */
  context: ShopifyCatalogContextInput
  /** The ID of the price list to associate to the catalog. */
  priceListId?: InputMaybe<Scalars["ID"]["input"]>
  /** The ID of the publication to associate to the catalog. */
  publicationId?: InputMaybe<Scalars["ID"]["input"]>
  /** The status of the catalog. */
  status: ShopifyCatalogStatus
  /** The name of the catalog. */
  title: Scalars["String"]["input"]
}

/** Return type for `catalogCreate` mutation. */
export interface ShopifyCatalogCreatePayload {
  __typename?: "CatalogCreatePayload"
  /** The newly created catalog. */
  catalog?: Maybe<ShopifyCatalog>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCatalogUserError>
}

/** A catalog csv operation represents a CSV file import. */
export interface ShopifyCatalogCsvOperation
  extends ShopifyNode,
    ShopifyResourceOperation {
  __typename?: "CatalogCsvOperation"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The count of processed rows, summing imported, failed, and skipped rows. */
  processedRowCount?: Maybe<Scalars["Int"]["output"]>
  /** Represents a rows objects within this background operation. */
  rowCount?: Maybe<ShopifyRowCount>
  /** The status of this operation. */
  status: ShopifyResourceOperationStatus
}

/** Return type for `catalogDelete` mutation. */
export interface ShopifyCatalogDeletePayload {
  __typename?: "CatalogDeletePayload"
  /** The ID of the deleted catalog. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCatalogUserError>
}

/** An auto-generated type which holds one Catalog and a cursor during pagination. */
export interface ShopifyCatalogEdge {
  __typename?: "CatalogEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CatalogEdge. */
  node: ShopifyCatalog
}

/** The set of valid sort keys for the Catalog query. */
export type ShopifyCatalogSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  /** Sort by the `title` value. */
  | "TITLE"
  /** Sort by the `type` value. */
  | "TYPE"
  | "%future added value"

/** The state of a catalog. */
export type ShopifyCatalogStatus =
  /** The catalog is active. */
  | "ACTIVE"
  /** The catalog is archived. */
  | "ARCHIVED"
  /** The catalog is in draft. */
  | "DRAFT"
  | "%future added value"

/** The associated catalog's type. */
export type ShopifyCatalogType =
  /** Catalogs belonging to apps. */
  | "APP"
  /** Catalogs belonging to company locations. */
  | "COMPANY_LOCATION"
  /** Catalogs belonging to markets. */
  | "MARKET"
  /** Not associated to a catalog. */
  | "NONE"
  | "%future added value"

/** The input fields used to update a catalog. */
export interface ShopifyCatalogUpdateInput {
  /** The context associated with the catalog. */
  context?: InputMaybe<ShopifyCatalogContextInput>
  /** The ID of the price list to associate to the catalog. */
  priceListId?: InputMaybe<Scalars["ID"]["input"]>
  /** The ID of the publication to associate to the catalog. */
  publicationId?: InputMaybe<Scalars["ID"]["input"]>
  /** The status of the catalog. */
  status?: InputMaybe<ShopifyCatalogStatus>
  /** The name of the catalog. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `catalogUpdate` mutation. */
export interface ShopifyCatalogUpdatePayload {
  __typename?: "CatalogUpdatePayload"
  /** The updated catalog. */
  catalog?: Maybe<ShopifyCatalog>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCatalogUserError>
}

/** Defines errors encountered while managing a catalog. */
export interface ShopifyCatalogUserError extends ShopifyDisplayableError {
  __typename?: "CatalogUserError"
  /** The error code. */
  code?: Maybe<ShopifyCatalogUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CatalogUserError`. */
export type ShopifyCatalogUserErrorCode =
  /** An app catalog cannot be assigned to a price list. */
  | "APP_CATALOG_PRICE_LIST_ASSIGNMENT"
  /** The input value is blank. */
  | "BLANK"
  /** The catalog can't be associated with more than one market. */
  | "CANNOT_ADD_MORE_THAN_ONE_MARKET"
  /** Cannot create a catalog for an app. */
  | "CANNOT_CREATE_APP_CATALOG"
  /** Cannot create a catalog for a market. */
  | "CANNOT_CREATE_MARKET_CATALOG"
  /** Cannot delete a catalog for an app. */
  | "CANNOT_DELETE_APP_CATALOG"
  /** Cannot delete a catalog for a market. */
  | "CANNOT_DELETE_MARKET_CATALOG"
  /** Cannot modify a catalog for an app. */
  | "CANNOT_MODIFY_APP_CATALOG"
  /** Cannot modify a catalog for a market. */
  | "CANNOT_MODIFY_MARKET_CATALOG"
  /** Quantity price breaks can be associated only with company location catalogs or catalogs associated with compatible markets. */
  | "CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_PRICE_BREAKS"
  /** Quantity rules can be associated only with company location catalogs or catalogs associated with compatible markets. */
  | "CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES"
  /** Catalog failed to save. */
  | "CATALOG_FAILED_TO_SAVE"
  /** The catalog wasn't found. */
  | "CATALOG_NOT_FOUND"
  /** A company location catalog outside of a supported plan can only have an archived status. */
  | "COMPANY_LOCATION_CATALOG_STATUS_PLAN"
  /** The company location could not be found. */
  | "COMPANY_LOCATION_NOT_FOUND"
  /** Context driver already assigned to this catalog. */
  | "CONTEXT_ALREADY_ASSIGNED_TO_CATALOG"
  /** Cannot save the catalog because the catalog limit for the context was reached. */
  | "CONTEXT_CATALOG_LIMIT_REACHED"
  /** The arguments `contextsToAdd` and `contextsToRemove` must match existing catalog context type. */
  | "CONTEXT_DRIVER_MISMATCH"
  /** A country catalog cannot be assigned to a price list. */
  | "COUNTRY_CATALOG_PRICE_LIST_ASSIGNMENT"
  /** A country price list cannot be assigned to a catalog. */
  | "COUNTRY_PRICE_LIST_ASSIGNMENT"
  /** The input value is invalid. */
  | "INVALID"
  /** The catalog context type is invalid. */
  | "INVALID_CATALOG_CONTEXT_TYPE"
  /** Cannot change context to specified type. */
  | "INVALID_CONTEXT_CHANGE"
  /** The managed country belongs to another catalog. */
  | "MANAGED_COUNTRY_BELONGS_TO_ANOTHER_CATALOG"
  /** The catalog's market and price list currencies do not match. */
  | "MARKET_AND_PRICE_LIST_CURRENCY_MISMATCH"
  /** A market catalog must have an active status. */
  | "MARKET_CATALOG_STATUS"
  /** Market not found. */
  | "MARKET_NOT_FOUND"
  /** Market already belongs to another catalog. */
  | "MARKET_TAKEN"
  /** Must provide exactly one context type. */
  | "MUST_PROVIDE_EXACTLY_ONE_CONTEXT_TYPE"
  /** Price list failed to save. */
  | "PRICE_LIST_FAILED_TO_SAVE"
  /** The price list is currently being modified. Please try again later. */
  | "PRICE_LIST_LOCKED"
  /** A price list cannot be assigned to the primary market. */
  | "PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET"
  /** Price list not found. */
  | "PRICE_LIST_NOT_FOUND"
  /** Publication not found. */
  | "PUBLICATION_NOT_FOUND"
  /** Must have `contexts_to_add` or `contexts_to_remove` argument. */
  | "REQUIRES_CONTEXTS_TO_ADD_OR_REMOVE"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too long. */
  | "TOO_LONG"
  /** The input value is too short. */
  | "TOO_SHORT"
  /** Managing this catalog is not supported by your plan. */
  | "UNPERMITTED_ENTITLEMENTS_MARKET_CATALOGS"
  /** Can't perform this action on a catalog of this type. */
  | "UNSUPPORTED_CATALOG_ACTION"
  | "%future added value"

/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export interface ShopifyChannel extends ShopifyNode {
  __typename?: "Channel"
  /** The underlying app used by the channel. */
  app: ShopifyApp
  /** The collection publications for the list of collections published to the channel. */
  collectionPublicationsV3: ShopifyResourcePublicationConnection
  /** The list of collections published to the channel. */
  collections: ShopifyCollectionConnection
  /**
   * The unique identifier for the channel.
   * @deprecated Use `id` instead.
   */
  handle: Scalars["String"]["output"]
  /** Whether the collection is available to the channel. */
  hasCollection: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The name of the channel. */
  name: Scalars["String"]["output"]
  /**
   * The menu items for the channel, which also appear as submenu items in the left navigation sidebar in the Shopify admin.
   * @deprecated Use [AppInstallation.navigationItems](
   *           https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-navigationitems) instead.
   */
  navigationItems: Array<ShopifyNavigationItem>
  /**
   * Home page for the channel.
   * @deprecated Use [AppInstallation.launchUrl](
   *           https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-launchurl) instead.
   */
  overviewPath?: Maybe<Scalars["URL"]["output"]>
  /**
   * The product publications for the products published to the channel.
   * @deprecated Use `productPublicationsV3` instead.
   */
  productPublications: ShopifyProductPublicationConnection
  /** The product publications for the list of products published to the channel. */
  productPublicationsV3: ShopifyResourcePublicationConnection
  /** The list of products published to the channel. */
  products: ShopifyProductConnection
  /**
   * Retrieves the total count of products that are currently published to a specific sales channel. This provides a quick way to understand channel inventory without fetching the full product list.
   *
   * For example, when building channel management dashboards, you can display how many products are available in each channel like "150 products in Online Store" or "75 products in Facebook Shop."
   *
   * Use `ChannelProductsCount` to:
   * - Display inventory summaries in channel management interfaces
   * - Monitor product distribution across sales channels
   * - Validate channel setup and product availability
   *
   * The count reflects only published products and updates as merchants add or remove products from channels.
   *
   * Learn more about [sales channels](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel). Limited to a maximum of 10000 by default.
   */
  productsCount?: Maybe<ShopifyCount>
  /** Whether the channel supports future publishing. */
  supportsFuturePublishing: Scalars["Boolean"]["output"]
}

/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export interface ShopifyChannelCollectionPublicationsV3Args {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export interface ShopifyChannelCollectionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export interface ShopifyChannelHasCollectionArgs {
  id: Scalars["ID"]["input"]
}

/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export interface ShopifyChannelProductPublicationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export interface ShopifyChannelProductPublicationsV3Args {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export interface ShopifyChannelProductsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 */
export interface ShopifyChannelProductsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
}

/** An auto-generated type for paginating through multiple Channels. */
export interface ShopifyChannelConnection {
  __typename?: "ChannelConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyChannelEdge>
  /** A list of nodes that are contained in ChannelEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyChannel>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/**
 * A channel definition represents channels surfaces on the platform.
 * A channel definition can be a platform or a subsegment of it such as Facebook Home, Instagram Live, Instagram Shops, or WhatsApp chat.
 */
export interface ShopifyChannelDefinition extends ShopifyNode {
  __typename?: "ChannelDefinition"
  /** Name of the channel that this sub channel belongs to. */
  channelName: Scalars["String"]["output"]
  /** Unique string used as a public identifier for the channel definition. */
  handle: Scalars["String"]["output"]
  /** The unique ID for the channel definition. */
  id: Scalars["ID"]["output"]
  /** Whether this channel definition represents a marketplace. */
  isMarketplace: Scalars["Boolean"]["output"]
  /** Name of the sub channel (e.g. Online Store, Instagram Shopping, TikTok Live). */
  subChannelName: Scalars["String"]["output"]
  /**
   * Icon displayed when showing the channel in admin.
   * @deprecated Use App.icon instead
   */
  svgIcon?: Maybe<Scalars["String"]["output"]>
}

/** An auto-generated type which holds one Channel and a cursor during pagination. */
export interface ShopifyChannelEdge {
  __typename?: "ChannelEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ChannelEdge. */
  node: ShopifyChannel
}

/** Contains the information for a given sales channel. */
export interface ShopifyChannelInformation extends ShopifyNode {
  __typename?: "ChannelInformation"
  /** The app associated with the channel. */
  app: ShopifyApp
  /** The channel definition associated with the channel. */
  channelDefinition?: Maybe<ShopifyChannelDefinition>
  /** The unique ID for the channel. */
  channelId: Scalars["ID"]["output"]
  /** The publishing destination display name or channel name. */
  displayName?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
}

/**
 * The settings of checkout visual customizations.
 *
 * To learn more about updating checkout branding settings, refer to the
 * [checkoutBrandingUpsert](https://shopify.dev/api/admin-graphql/unstable/mutations/checkoutBrandingUpsert) mutation.
 */
export interface ShopifyCheckoutBranding {
  __typename?: "CheckoutBranding"
  /** The customizations that apply to specific components or areas of the user interface. */
  customizations?: Maybe<ShopifyCheckoutBrandingCustomizations>
  /**
   * The design system allows you to set values that represent specific attributes
   * of your brand like color and font. These attributes are used throughout the user
   * interface. This brings consistency and allows you to easily make broad design changes.
   */
  designSystem?: Maybe<ShopifyCheckoutBrandingDesignSystem>
}

/** The container background style. */
export type ShopifyCheckoutBrandingBackground =
  /** The Base background style. */
  | "BASE"
  /** The Subdued background style. */
  | "SUBDUED"
  /** The Transparent background style. */
  | "TRANSPARENT"
  | "%future added value"

/** Possible values for the background style. */
export type ShopifyCheckoutBrandingBackgroundStyle =
  /** The None background style. */
  | "NONE"
  /** The Solid background style. */
  | "SOLID"
  | "%future added value"

/** Possible values for the border. */
export type ShopifyCheckoutBrandingBorder =
  /** The Block End border. */
  | "BLOCK_END"
  /** The Full border. */
  | "FULL"
  /** The None border. */
  | "NONE"
  | "%future added value"

/** The container border style. */
export type ShopifyCheckoutBrandingBorderStyle =
  /** The Base border style. */
  | "BASE"
  /** The Dashed border style. */
  | "DASHED"
  /** The Dotted border style. */
  | "DOTTED"
  | "%future added value"

/** The container border width. */
export type ShopifyCheckoutBrandingBorderWidth =
  /** The Base border width. */
  | "BASE"
  /** The Large border width. */
  | "LARGE"
  /** The Large 100 border width. */
  | "LARGE_100"
  /** The Large 200 border width. */
  | "LARGE_200"
  | "%future added value"

/** The buttons customizations. */
export interface ShopifyCheckoutBrandingButton {
  __typename?: "CheckoutBrandingButton"
  /** The background style used for buttons. */
  background?: Maybe<ShopifyCheckoutBrandingBackgroundStyle>
  /** The block padding used for buttons. */
  blockPadding?: Maybe<ShopifyCheckoutBrandingSpacing>
  /** The border used for buttons. */
  border?: Maybe<ShopifyCheckoutBrandingSimpleBorder>
  /** The corner radius used for buttons. */
  cornerRadius?: Maybe<ShopifyCheckoutBrandingCornerRadius>
  /** The inline padding used for buttons. */
  inlinePadding?: Maybe<ShopifyCheckoutBrandingSpacing>
  /** The typography used for buttons. */
  typography?: Maybe<ShopifyCheckoutBrandingTypographyStyle>
}

/** Colors for buttons. */
export interface ShopifyCheckoutBrandingButtonColorRoles {
  __typename?: "CheckoutBrandingButtonColorRoles"
  /** The color of accented objects (links and focused state). */
  accent?: Maybe<Scalars["String"]["output"]>
  /** The color of the background. */
  background?: Maybe<Scalars["String"]["output"]>
  /** The color of borders. */
  border?: Maybe<Scalars["String"]["output"]>
  /** The decorative color for highlighting specific parts of the user interface. */
  decorative?: Maybe<Scalars["String"]["output"]>
  /** The colors of the button on hover. */
  hover?: Maybe<ShopifyCheckoutBrandingColorRoles>
  /** The color of icons. */
  icon?: Maybe<Scalars["String"]["output"]>
  /** The color of text. */
  text?: Maybe<Scalars["String"]["output"]>
}

/** The input fields to set colors for buttons. */
export interface ShopifyCheckoutBrandingButtonColorRolesInput {
  /** The color of accented objects (links and focused state). */
  accent?: InputMaybe<Scalars["String"]["input"]>
  /** The color of the background. */
  background?: InputMaybe<Scalars["String"]["input"]>
  /** The color of borders. */
  border?: InputMaybe<Scalars["String"]["input"]>
  /** The decorative color for highlighting specific parts of the user interface. */
  decorative?: InputMaybe<Scalars["String"]["input"]>
  /** The colors of the button on hover. */
  hover?: InputMaybe<ShopifyCheckoutBrandingColorRolesInput>
  /** The color of icons. */
  icon?: InputMaybe<Scalars["String"]["input"]>
  /** The color of text. */
  text?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields used to update the buttons customizations. */
export interface ShopifyCheckoutBrandingButtonInput {
  /** The background style used for buttons. */
  background?: InputMaybe<ShopifyCheckoutBrandingBackgroundStyle>
  /** The block padding used for buttons. */
  blockPadding?: InputMaybe<ShopifyCheckoutBrandingSpacing>
  /** The border used for buttons. */
  border?: InputMaybe<ShopifyCheckoutBrandingSimpleBorder>
  /** The corner radius used for buttons. */
  cornerRadius?: InputMaybe<ShopifyCheckoutBrandingCornerRadius>
  /** The inline padding used for buttons. */
  inlinePadding?: InputMaybe<ShopifyCheckoutBrandingSpacing>
  /** The typography style used for buttons. */
  typography?: InputMaybe<ShopifyCheckoutBrandingTypographyStyleInput>
}

/** The customizations for the breadcrumbs that represent a buyer's journey to the checkout. */
export interface ShopifyCheckoutBrandingBuyerJourney {
  __typename?: "CheckoutBrandingBuyerJourney"
  /** An option to display or hide the breadcrumbs that represent the buyer's journey on 3-page checkout. */
  visibility?: Maybe<ShopifyCheckoutBrandingVisibility>
}

/** The input fields for updating breadcrumb customizations, which represent the buyer's journey to checkout. */
export interface ShopifyCheckoutBrandingBuyerJourneyInput {
  /** The visibility customizations for updating breadcrumbs, which represent the buyer's journey to checkout. */
  visibility?: InputMaybe<ShopifyCheckoutBrandingVisibility>
}

/** The customizations that you can make to cart links at checkout. */
export interface ShopifyCheckoutBrandingCartLink {
  __typename?: "CheckoutBrandingCartLink"
  /** Whether the cart link is visible at checkout. */
  visibility?: Maybe<ShopifyCheckoutBrandingVisibility>
}

/** Possible values for the cart link content type for the header. */
export type ShopifyCheckoutBrandingCartLinkContentType =
  /** The checkout header content type icon value. */
  | "ICON"
  /** The checkout header content type image value. */
  | "IMAGE"
  /** The checkout header content type text value. */
  | "TEXT"
  | "%future added value"

/** The input fields for updating the cart link customizations at checkout. */
export interface ShopifyCheckoutBrandingCartLinkInput {
  /** The input to update the visibility of cart links in checkout. This hides the cart icon on one-page and the cart link in the breadcrumbs/buyer journey on three-page checkout. */
  visibility?: InputMaybe<ShopifyCheckoutBrandingVisibility>
}

/** The checkboxes customizations. */
export interface ShopifyCheckoutBrandingCheckbox {
  __typename?: "CheckoutBrandingCheckbox"
  /** The corner radius used for checkboxes. */
  cornerRadius?: Maybe<ShopifyCheckoutBrandingCornerRadius>
}

/** The input fields used to update the checkboxes customizations. */
export interface ShopifyCheckoutBrandingCheckboxInput {
  /** The corner radius used for checkboxes. */
  cornerRadius?: InputMaybe<ShopifyCheckoutBrandingCornerRadius>
}

/** The choice list customizations. */
export interface ShopifyCheckoutBrandingChoiceList {
  __typename?: "CheckoutBrandingChoiceList"
  /** The settings that apply to the 'group' variant of ChoiceList. */
  group?: Maybe<ShopifyCheckoutBrandingChoiceListGroup>
}

/** The settings that apply to the 'group' variant of ChoiceList. */
export interface ShopifyCheckoutBrandingChoiceListGroup {
  __typename?: "CheckoutBrandingChoiceListGroup"
  /** The spacing between UI elements in the list. */
  spacing?: Maybe<ShopifyCheckoutBrandingSpacingKeyword>
}

/** The input fields to update the settings that apply to the 'group' variant of ChoiceList. */
export interface ShopifyCheckoutBrandingChoiceListGroupInput {
  /** The spacing between UI elements in the list. */
  spacing?: InputMaybe<ShopifyCheckoutBrandingSpacingKeyword>
}

/** The input fields to use to update the choice list customizations. */
export interface ShopifyCheckoutBrandingChoiceListInput {
  /** The settings that apply to the 'group' variant of ChoiceList. */
  group?: InputMaybe<ShopifyCheckoutBrandingChoiceListGroupInput>
}

/** A set of colors for customizing the overall look and feel of the checkout. */
export interface ShopifyCheckoutBrandingColorGlobal {
  __typename?: "CheckoutBrandingColorGlobal"
  /** A color used for interaction, like links and focus states. */
  accent?: Maybe<Scalars["String"]["output"]>
  /**
   * A color that's strongly associated with the merchant. Currently used for
   * primary buttons, for example **Pay now**, and secondary buttons, for example **Buy again**.
   */
  brand?: Maybe<Scalars["String"]["output"]>
  /** A semantic color used for components that communicate critical content. For example, a blocking error such as the requirement to enter a valid credit card number. */
  critical?: Maybe<Scalars["String"]["output"]>
  /** A color used to highlight certain areas of the user interface. For example, the [`Text`](https://shopify.dev/docs/api/checkout-ui-extensions/latest/components/titles-and-text/text#textprops-propertydetail-appearance) component. */
  decorative?: Maybe<Scalars["String"]["output"]>
  /** A semantic color used for components that communicate general, informative content. */
  info?: Maybe<Scalars["String"]["output"]>
  /** A semantic color used for components that communicate successful actions or a positive state. */
  success?: Maybe<Scalars["String"]["output"]>
  /** A semantic color used for components that display content that requires attention. For example, something that might be wrong, but not blocking. */
  warning?: Maybe<Scalars["String"]["output"]>
}

/** The input fields to customize the overall look and feel of the checkout. */
export interface ShopifyCheckoutBrandingColorGlobalInput {
  /** A color used for interaction, like links and focus states. */
  accent?: InputMaybe<Scalars["String"]["input"]>
  /**
   * A color that's strongly associated with the merchant. Currently used for
   * primary buttons, such as **Pay now**, and secondary buttons, such as **Buy again**.
   */
  brand?: InputMaybe<Scalars["String"]["input"]>
  /** A semantic color used for components that communicate critical content. For example, a blocking error such as the requirement to enter a valid credit card number. */
  critical?: InputMaybe<Scalars["String"]["input"]>
  /** A color used to highlight certain areas of the user interface. For example, the [`Text`](https://shopify.dev/docs/api/checkout-ui-extensions/latest/components/titles-and-text/text#textprops-propertydetail-appearance) component. */
  decorative?: InputMaybe<Scalars["String"]["input"]>
  /** A semantic color used for components that communicate general, informative content. */
  info?: InputMaybe<Scalars["String"]["input"]>
  /** A semantic color used for components that communicate successful actions or a positive state. */
  success?: InputMaybe<Scalars["String"]["input"]>
  /** A semantic color used for components that display content that requires attention. For example, something that might be wrong, but not blocking. */
  warning?: InputMaybe<Scalars["String"]["input"]>
}

/** A group of colors used together on a surface. */
export interface ShopifyCheckoutBrandingColorRoles {
  __typename?: "CheckoutBrandingColorRoles"
  /** The color of accented objects (links and focused state). */
  accent?: Maybe<Scalars["String"]["output"]>
  /** The color of the background. */
  background?: Maybe<Scalars["String"]["output"]>
  /** The color of borders. */
  border?: Maybe<Scalars["String"]["output"]>
  /** The decorative color for highlighting specific parts of the user interface. */
  decorative?: Maybe<Scalars["String"]["output"]>
  /** The color of icons. */
  icon?: Maybe<Scalars["String"]["output"]>
  /** The color of text. */
  text?: Maybe<Scalars["String"]["output"]>
}

/** The input fields for a group of colors used together on a surface. */
export interface ShopifyCheckoutBrandingColorRolesInput {
  /** The color of accented objects (links and focused state). */
  accent?: InputMaybe<Scalars["String"]["input"]>
  /** The color of the background. */
  background?: InputMaybe<Scalars["String"]["input"]>
  /** The color of borders. */
  border?: InputMaybe<Scalars["String"]["input"]>
  /** The decorative color for highlighting specific parts of the user interface. */
  decorative?: InputMaybe<Scalars["String"]["input"]>
  /** The color of icons. */
  icon?: InputMaybe<Scalars["String"]["input"]>
  /** The color of text. */
  text?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * A base set of color customizations that's applied to an area of Checkout, from which every component
 * pulls its colors.
 */
export interface ShopifyCheckoutBrandingColorScheme {
  __typename?: "CheckoutBrandingColorScheme"
  /** The main colors of a scheme. Used for the surface background, text, links, and more. */
  base?: Maybe<ShopifyCheckoutBrandingColorRoles>
  /** The colors of form controls, such as the [`TextField`](https://shopify.dev/docs/api/checkout-ui-extensions/latest/components/forms/textfield) and [`ChoiceList`](https://shopify.dev/docs/api/checkout-ui-extensions/latest/components/forms/choicelist) components. */
  control?: Maybe<ShopifyCheckoutBrandingControlColorRoles>
  /** The colors of the primary button. For example, the main payment, or **Pay now** button. */
  primaryButton?: Maybe<ShopifyCheckoutBrandingButtonColorRoles>
  /** The colors of the secondary button, which is used for secondary actions. For example, **Buy again**. */
  secondaryButton?: Maybe<ShopifyCheckoutBrandingButtonColorRoles>
}

/**
 * The input fields for a base set of color customizations that's applied to an area of Checkout, from which
 * every component pulls its colors.
 */
export interface ShopifyCheckoutBrandingColorSchemeInput {
  /** The main colors of a scheme. Used for the surface background, text, links, and more. */
  base?: InputMaybe<ShopifyCheckoutBrandingColorRolesInput>
  /** The colors of form controls, such as the [`TextField`](https://shopify.dev/docs/api/checkout-ui-extensions/latest/components/forms/textfield) and [`ChoiceList`](https://shopify.dev/docs/api/checkout-ui-extensions/latest/components/forms/choicelist) components. */
  control?: InputMaybe<ShopifyCheckoutBrandingControlColorRolesInput>
  /** The colors of the primary button. For example, the main payment, or **Pay now** button. */
  primaryButton?: InputMaybe<ShopifyCheckoutBrandingButtonColorRolesInput>
  /** The colors of the secondary button, which is used for secondary actions. For example, **Buy again**. */
  secondaryButton?: InputMaybe<ShopifyCheckoutBrandingButtonColorRolesInput>
}

/** The possible color schemes. */
export type ShopifyCheckoutBrandingColorSchemeSelection =
  /** The COLOR_SCHEME1 color scheme selection. */
  | "COLOR_SCHEME1"
  /** The COLOR_SCHEME2 color scheme selection. */
  | "COLOR_SCHEME2"
  /** The COLOR_SCHEME3 color scheme selection. */
  | "COLOR_SCHEME3"
  /** The COLOR_SCHEME4 color scheme selection. */
  | "COLOR_SCHEME4"
  /** The TRANSPARENT color scheme selection. */
  | "TRANSPARENT"
  | "%future added value"

/** The color schemes. */
export interface ShopifyCheckoutBrandingColorSchemes {
  __typename?: "CheckoutBrandingColorSchemes"
  /** The primary scheme. By default, it’s used for the main area of the interface. */
  scheme1?: Maybe<ShopifyCheckoutBrandingColorScheme>
  /** The secondary scheme. By default, it’s used for secondary areas, like Checkout’s Order Summary. */
  scheme2?: Maybe<ShopifyCheckoutBrandingColorScheme>
  /** An extra scheme available to customize more surfaces, components or specific states of the user interface. */
  scheme3?: Maybe<ShopifyCheckoutBrandingColorScheme>
  /** An extra scheme available to customize more surfaces, components or specific states of the user interface. */
  scheme4?: Maybe<ShopifyCheckoutBrandingColorScheme>
}

/** The input fields for the color schemes. */
export interface ShopifyCheckoutBrandingColorSchemesInput {
  /** The primary scheme. By default, it’s used for the main area of the interface. */
  scheme1?: InputMaybe<ShopifyCheckoutBrandingColorSchemeInput>
  /** The secondary scheme. By default, it’s used for secondary areas, like Checkout’s Order Summary. */
  scheme2?: InputMaybe<ShopifyCheckoutBrandingColorSchemeInput>
  /** An extra scheme available to customize more surfaces, components or specific states of the user interface. */
  scheme3?: InputMaybe<ShopifyCheckoutBrandingColorSchemeInput>
  /** An extra scheme available to customize more surfaces, components or specific states of the user interface. */
  scheme4?: InputMaybe<ShopifyCheckoutBrandingColorSchemeInput>
}

/** The possible colors. */
export type ShopifyCheckoutBrandingColorSelection =
  /** Transparent color selection. */
  "TRANSPARENT" | "%future added value"

/** The color settings for global colors and color schemes. */
export interface ShopifyCheckoutBrandingColors {
  __typename?: "CheckoutBrandingColors"
  /** A group of global colors for customizing the overall look and feel of the user interface. */
  global?: Maybe<ShopifyCheckoutBrandingColorGlobal>
  /** A set of color schemes which apply to different areas of the user interface. */
  schemes?: Maybe<ShopifyCheckoutBrandingColorSchemes>
}

/** The input fields used to update the color settings for global colors and color schemes. */
export interface ShopifyCheckoutBrandingColorsInput {
  /** The input to update global colors for customizing the overall look and feel of the user interface. */
  global?: InputMaybe<ShopifyCheckoutBrandingColorGlobalInput>
  /** The input to define color schemes which apply to different areas of the user interface. */
  schemes?: InputMaybe<ShopifyCheckoutBrandingColorSchemesInput>
}

/** The container's divider customizations. */
export interface ShopifyCheckoutBrandingContainerDivider {
  __typename?: "CheckoutBrandingContainerDivider"
  /** The divider style. */
  borderStyle?: Maybe<ShopifyCheckoutBrandingBorderStyle>
  /** The divider width. */
  borderWidth?: Maybe<ShopifyCheckoutBrandingBorderWidth>
  /** The divider visibility. */
  visibility?: Maybe<ShopifyCheckoutBrandingVisibility>
}

/** The input fields used to update a container's divider customizations. */
export interface ShopifyCheckoutBrandingContainerDividerInput {
  /** The divider style. */
  borderStyle?: InputMaybe<ShopifyCheckoutBrandingBorderStyle>
  /** The divider width. */
  borderWidth?: InputMaybe<ShopifyCheckoutBrandingBorderWidth>
  /** The divider visibility. */
  visibility?: InputMaybe<ShopifyCheckoutBrandingVisibility>
}

/** The content container customizations. */
export interface ShopifyCheckoutBrandingContent {
  __typename?: "CheckoutBrandingContent"
  /** The content container's divider style and visibility. */
  divider?: Maybe<ShopifyCheckoutBrandingContainerDivider>
}

/** The input fields used to update the content container customizations. */
export interface ShopifyCheckoutBrandingContentInput {
  /** Divider style and visibility on the content container. */
  divider?: InputMaybe<ShopifyCheckoutBrandingContainerDividerInput>
}

/** The form controls customizations. */
export interface ShopifyCheckoutBrandingControl {
  __typename?: "CheckoutBrandingControl"
  /** The border used for form controls. */
  border?: Maybe<ShopifyCheckoutBrandingSimpleBorder>
  /** Set to TRANSPARENT to define transparent form controls. If null, form controls inherit colors from their scheme settings (for example, the main section inherits from `design_system.colors.schemes.scheme1.control` by default). Note that usage of the `customizations.control.color` setting to customize the form control color is deprecated. */
  color?: Maybe<ShopifyCheckoutBrandingColorSelection>
  /** The corner radius used for form controls. */
  cornerRadius?: Maybe<ShopifyCheckoutBrandingCornerRadius>
  /** The label position used for form controls. */
  labelPosition?: Maybe<ShopifyCheckoutBrandingLabelPosition>
}

/** Colors for form controls. */
export interface ShopifyCheckoutBrandingControlColorRoles {
  __typename?: "CheckoutBrandingControlColorRoles"
  /** The color of accented objects (links and focused state). */
  accent?: Maybe<Scalars["String"]["output"]>
  /** The color of the background. */
  background?: Maybe<Scalars["String"]["output"]>
  /** The color of borders. */
  border?: Maybe<Scalars["String"]["output"]>
  /** The decorative color for highlighting specific parts of the user interface. */
  decorative?: Maybe<Scalars["String"]["output"]>
  /** The color of icons. */
  icon?: Maybe<Scalars["String"]["output"]>
  /** The colors of selected controls. */
  selected?: Maybe<ShopifyCheckoutBrandingColorRoles>
  /** The color of text. */
  text?: Maybe<Scalars["String"]["output"]>
}

/** The input fields to define colors for form controls. */
export interface ShopifyCheckoutBrandingControlColorRolesInput {
  /** The color of accented objects (links and focused state). */
  accent?: InputMaybe<Scalars["String"]["input"]>
  /** The color of the background. */
  background?: InputMaybe<Scalars["String"]["input"]>
  /** The color of borders. */
  border?: InputMaybe<Scalars["String"]["input"]>
  /** The decorative color for highlighting specific parts of the user interface. */
  decorative?: InputMaybe<Scalars["String"]["input"]>
  /** The color of icons. */
  icon?: InputMaybe<Scalars["String"]["input"]>
  /** The colors of selected controls. */
  selected?: InputMaybe<ShopifyCheckoutBrandingColorRolesInput>
  /** The color of text. */
  text?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields used to update the form controls customizations. */
export interface ShopifyCheckoutBrandingControlInput {
  /** The border used for form controls. */
  border?: InputMaybe<ShopifyCheckoutBrandingSimpleBorder>
  /** Set to TRANSPARENT to define transparent form controls. If null, form controls inherit colors from their scheme settings (for example, the main section inherits from `design_system.colors.schemes.scheme1.control` by default). Note that usage of the `customizations.control.color` setting to customize the form control color is deprecated. */
  color?: InputMaybe<ShopifyCheckoutBrandingColorSelection>
  /** The corner radius used for form controls. */
  cornerRadius?: InputMaybe<ShopifyCheckoutBrandingCornerRadius>
  /** The label position used for form controls. */
  labelPosition?: InputMaybe<ShopifyCheckoutBrandingLabelPosition>
}

/**
 * The options for customizing the corner radius of checkout-related objects. Examples include the primary
 * button, the name text fields and the sections within the main area (if they have borders).
 * Refer to this complete [list](https://shopify.dev/docs/api/admin-graphql/latest/enums/CheckoutBrandingCornerRadius#fieldswith)
 * for objects with customizable corner radii.
 *
 * The design system defines the corner radius pixel size for each option. Modify the defaults by setting the
 * [designSystem.cornerRadius](https://shopify.dev/docs/api/admin-graphql/latest/input-objects/CheckoutBrandingDesignSystemInput#field-checkoutbrandingdesignsysteminput-cornerradius)
 * input fields.
 */
export type ShopifyCheckoutBrandingCornerRadius =
  /** The corner radius with a pixel value defined by designSystem.cornerRadius.base. */
  | "BASE"
  /** The corner radius with a pixel value defined by designSystem.cornerRadius.large. */
  | "LARGE"
  /** The 0px corner radius (square corners). */
  | "NONE"
  /** The corner radius with a pixel value defined by designSystem.cornerRadius.small. */
  | "SMALL"
  | "%future added value"

/** Define the pixel size of corner radius options. */
export interface ShopifyCheckoutBrandingCornerRadiusVariables {
  __typename?: "CheckoutBrandingCornerRadiusVariables"
  /** The value in pixels for base corner radii. Example: 5. */
  base?: Maybe<Scalars["Int"]["output"]>
  /** The value in pixels for large corner radii. Example: 10. */
  large?: Maybe<Scalars["Int"]["output"]>
  /** The value in pixels for small corner radii. Example: 3. */
  small?: Maybe<Scalars["Int"]["output"]>
}

/** The input fields used to update the corner radius variables. */
export interface ShopifyCheckoutBrandingCornerRadiusVariablesInput {
  /** The value in pixels for base corner radii. It should be greater than zero. Example: 5. */
  base?: InputMaybe<Scalars["Int"]["input"]>
  /** The value in pixels for large corner radii. It should be greater than zero. Example: 10. */
  large?: InputMaybe<Scalars["Int"]["input"]>
  /** The value in pixels for small corner radii. It should be greater than zero. Example: 3. */
  small?: InputMaybe<Scalars["Int"]["input"]>
}

/** A custom font. */
export interface ShopifyCheckoutBrandingCustomFont
  extends ShopifyCheckoutBrandingFont {
  __typename?: "CheckoutBrandingCustomFont"
  /** Globally unique ID reference to the custom font file. */
  genericFileId?: Maybe<Scalars["ID"]["output"]>
  /** The font sources. */
  sources?: Maybe<Scalars["String"]["output"]>
  /** The font weight. */
  weight?: Maybe<Scalars["Int"]["output"]>
}

/** The input fields required to update a custom font group. */
export interface ShopifyCheckoutBrandingCustomFontGroupInput {
  /** The base font. */
  base: ShopifyCheckoutBrandingCustomFontInput
  /** The bold font. */
  bold: ShopifyCheckoutBrandingCustomFontInput
  /** The font loading strategy. */
  loadingStrategy?: InputMaybe<ShopifyCheckoutBrandingFontLoadingStrategy>
}

/** The input fields required to update a font. */
export interface ShopifyCheckoutBrandingCustomFontInput {
  /**
   * A globally-unique ID for a font file uploaded via the Files api.
   * Allowed font types are .woff and .woff2.
   */
  genericFileId: Scalars["ID"]["input"]
  /** The font weight. Its value should be between 100 and 900. */
  weight: Scalars["Int"]["input"]
}

/** The customizations that apply to specific components or areas of the user interface. */
export interface ShopifyCheckoutBrandingCustomizations {
  __typename?: "CheckoutBrandingCustomizations"
  /** The customizations for the breadcrumbs that represent a buyer's journey to the checkout. */
  buyerJourney?: Maybe<ShopifyCheckoutBrandingBuyerJourney>
  /** The checkout cart link customizations. For example, by setting the visibility field to `HIDDEN`, you can hide the cart icon in the header for one-page checkout, and the cart link in breadcrumbs in three-page checkout. */
  cartLink?: Maybe<ShopifyCheckoutBrandingCartLink>
  /** The checkboxes customizations. */
  checkbox?: Maybe<ShopifyCheckoutBrandingCheckbox>
  /** The choice list customizations. */
  choiceList?: Maybe<ShopifyCheckoutBrandingChoiceList>
  /** The content container customizations. */
  content?: Maybe<ShopifyCheckoutBrandingContent>
  /** The form controls customizations. */
  control?: Maybe<ShopifyCheckoutBrandingControl>
  /** The customizations for the page, content, main, and order summary dividers. For example, by setting the borderStyle to `DOTTED`, you can make these dividers render as dotted lines. */
  divider?: Maybe<ShopifyCheckoutBrandingDividerStyle>
  /** The express checkout customizations. */
  expressCheckout?: Maybe<ShopifyCheckoutBrandingExpressCheckout>
  /** The favicon image. */
  favicon?: Maybe<ShopifyCheckoutBrandingImage>
  /** The footer customizations. */
  footer?: Maybe<ShopifyCheckoutBrandingFooter>
  /** The global customizations. */
  global?: Maybe<ShopifyCheckoutBrandingGlobal>
  /** The header customizations. */
  header?: Maybe<ShopifyCheckoutBrandingHeader>
  /** The Heading Level 1 customizations. */
  headingLevel1?: Maybe<ShopifyCheckoutBrandingHeadingLevel>
  /** The Heading Level 2 customizations. */
  headingLevel2?: Maybe<ShopifyCheckoutBrandingHeadingLevel>
  /** The Heading Level 3 customizations. */
  headingLevel3?: Maybe<ShopifyCheckoutBrandingHeadingLevel>
  /** The main area customizations. */
  main?: Maybe<ShopifyCheckoutBrandingMain>
  /** The merchandise thumbnails customizations. */
  merchandiseThumbnail?: Maybe<ShopifyCheckoutBrandingMerchandiseThumbnail>
  /** The order summary customizations. */
  orderSummary?: Maybe<ShopifyCheckoutBrandingOrderSummary>
  /** The primary buttons customizations. */
  primaryButton?: Maybe<ShopifyCheckoutBrandingButton>
  /** The secondary buttons customizations. */
  secondaryButton?: Maybe<ShopifyCheckoutBrandingButton>
  /** The selects customizations. */
  select?: Maybe<ShopifyCheckoutBrandingSelect>
  /** The text fields customizations. */
  textField?: Maybe<ShopifyCheckoutBrandingTextField>
}

/** The input fields used to update the components customizations. */
export interface ShopifyCheckoutBrandingCustomizationsInput {
  /** The customizations for the breadcrumbs that represent a buyer's journey to the checkout. */
  buyerJourney?: InputMaybe<ShopifyCheckoutBrandingBuyerJourneyInput>
  /** The input for checkout cart link customizations. For example, by setting the visibility field to `HIDDEN`, you can hide the cart icon in the header for one-page checkout, and the cart link in breadcrumbs in three-page checkout. */
  cartLink?: InputMaybe<ShopifyCheckoutBrandingCartLinkInput>
  /** The checkboxes customizations. */
  checkbox?: InputMaybe<ShopifyCheckoutBrandingCheckboxInput>
  /** The choice list customizations. */
  choiceList?: InputMaybe<ShopifyCheckoutBrandingChoiceListInput>
  /** The content container customizations. */
  content?: InputMaybe<ShopifyCheckoutBrandingContentInput>
  /** The form controls customizations. */
  control?: InputMaybe<ShopifyCheckoutBrandingControlInput>
  /** The input for the page, content, main, and order summary dividers customizations. For example, by setting the borderStyle to `DOTTED`, you can make these dividers render as dotted lines. */
  divider?: InputMaybe<ShopifyCheckoutBrandingDividerStyleInput>
  /** The express checkout customizations. */
  expressCheckout?: InputMaybe<ShopifyCheckoutBrandingExpressCheckoutInput>
  /** The favicon image (must be of PNG format). */
  favicon?: InputMaybe<ShopifyCheckoutBrandingImageInput>
  /** The footer customizations. */
  footer?: InputMaybe<ShopifyCheckoutBrandingFooterInput>
  /** The global customizations. */
  global?: InputMaybe<ShopifyCheckoutBrandingGlobalInput>
  /** The header customizations. */
  header?: InputMaybe<ShopifyCheckoutBrandingHeaderInput>
  /** The Heading Level 1 customizations. */
  headingLevel1?: InputMaybe<ShopifyCheckoutBrandingHeadingLevelInput>
  /** The Heading Level 2 customizations. */
  headingLevel2?: InputMaybe<ShopifyCheckoutBrandingHeadingLevelInput>
  /** The Heading Level 3 customizations. */
  headingLevel3?: InputMaybe<ShopifyCheckoutBrandingHeadingLevelInput>
  /** The main area customizations. */
  main?: InputMaybe<ShopifyCheckoutBrandingMainInput>
  /** The merchandise thumbnails customizations. */
  merchandiseThumbnail?: InputMaybe<ShopifyCheckoutBrandingMerchandiseThumbnailInput>
  /** The order summary customizations. */
  orderSummary?: InputMaybe<ShopifyCheckoutBrandingOrderSummaryInput>
  /** The primary buttons customizations. */
  primaryButton?: InputMaybe<ShopifyCheckoutBrandingButtonInput>
  /** The secondary buttons customizations. */
  secondaryButton?: InputMaybe<ShopifyCheckoutBrandingButtonInput>
  /** The selects customizations. */
  select?: InputMaybe<ShopifyCheckoutBrandingSelectInput>
  /** The text fields customizations. */
  textField?: InputMaybe<ShopifyCheckoutBrandingTextFieldInput>
}

/**
 * The design system allows you to set values that represent specific attributes
 * of your brand like color and font. These attributes are used throughout the user
 * interface. This brings consistency and allows you to easily make broad design changes.
 */
export interface ShopifyCheckoutBrandingDesignSystem {
  __typename?: "CheckoutBrandingDesignSystem"
  /** The color settings for global colors and color schemes. */
  colors?: Maybe<ShopifyCheckoutBrandingColors>
  /** The corner radius variables. */
  cornerRadius?: Maybe<ShopifyCheckoutBrandingCornerRadiusVariables>
  /** The typography. */
  typography?: Maybe<ShopifyCheckoutBrandingTypography>
}

/** The input fields used to update the design system. */
export interface ShopifyCheckoutBrandingDesignSystemInput {
  /** The color settings for global colors and color schemes. */
  colors?: InputMaybe<ShopifyCheckoutBrandingColorsInput>
  /** The corner radius variables. */
  cornerRadius?: InputMaybe<ShopifyCheckoutBrandingCornerRadiusVariablesInput>
  /** The typography. */
  typography?: InputMaybe<ShopifyCheckoutBrandingTypographyInput>
}

/** The customizations for the page, content, main, and order summary dividers. */
export interface ShopifyCheckoutBrandingDividerStyle {
  __typename?: "CheckoutBrandingDividerStyle"
  /** The border style for the divider. */
  borderStyle?: Maybe<ShopifyCheckoutBrandingBorderStyle>
  /** The border width for the divider. */
  borderWidth?: Maybe<ShopifyCheckoutBrandingBorderWidth>
}

/** The input fields used to update the page, content, main and order summary dividers customizations. */
export interface ShopifyCheckoutBrandingDividerStyleInput {
  /** The border style for the divider. */
  borderStyle?: InputMaybe<ShopifyCheckoutBrandingBorderStyle>
  /** The border width for the divider. */
  borderWidth?: InputMaybe<ShopifyCheckoutBrandingBorderWidth>
}

/** The Express Checkout customizations. */
export interface ShopifyCheckoutBrandingExpressCheckout {
  __typename?: "CheckoutBrandingExpressCheckout"
  /** The Express Checkout buttons customizations. */
  button?: Maybe<ShopifyCheckoutBrandingExpressCheckoutButton>
}

/** The Express Checkout button customizations. */
export interface ShopifyCheckoutBrandingExpressCheckoutButton {
  __typename?: "CheckoutBrandingExpressCheckoutButton"
  /** The corner radius used for the Express Checkout buttons. */
  cornerRadius?: Maybe<ShopifyCheckoutBrandingCornerRadius>
}

/** The input fields to use to update the express checkout customizations. */
export interface ShopifyCheckoutBrandingExpressCheckoutButtonInput {
  /** The corner radius used for Express Checkout buttons. */
  cornerRadius?: InputMaybe<ShopifyCheckoutBrandingCornerRadius>
}

/** The input fields to use to update the Express Checkout customizations. */
export interface ShopifyCheckoutBrandingExpressCheckoutInput {
  /** The Express Checkout buttons customizations. */
  button?: InputMaybe<ShopifyCheckoutBrandingExpressCheckoutButtonInput>
}

/** A font. */
export interface ShopifyCheckoutBrandingFont {
  /** The font sources. */
  sources?: Maybe<Scalars["String"]["output"]>
  /** The font weight. */
  weight?: Maybe<Scalars["Int"]["output"]>
}

/**
 * A font group. To learn more about updating fonts, refer to the
 * [checkoutBrandingUpsert](https://shopify.dev/api/admin-graphql/unstable/mutations/checkoutBrandingUpsert)
 * mutation and the checkout branding [tutorial](https://shopify.dev/docs/apps/checkout/styling).
 */
export interface ShopifyCheckoutBrandingFontGroup {
  __typename?: "CheckoutBrandingFontGroup"
  /** The base font. */
  base?: Maybe<ShopifyCheckoutBrandingFont>
  /** The bold font. */
  bold?: Maybe<ShopifyCheckoutBrandingFont>
  /** The font loading strategy. */
  loadingStrategy?: Maybe<ShopifyCheckoutBrandingFontLoadingStrategy>
  /** The font group name. */
  name?: Maybe<Scalars["String"]["output"]>
}

/**
 * The input fields used to update a font group. To learn more about updating fonts, refer to the
 * [checkoutBrandingUpsert](https://shopify.dev/api/admin-graphql/unstable/mutations/checkoutBrandingUpsert)
 * mutation and the checkout branding [tutorial](https://shopify.dev/docs/apps/checkout/styling).
 */
export interface ShopifyCheckoutBrandingFontGroupInput {
  /** A custom font group. */
  customFontGroup?: InputMaybe<ShopifyCheckoutBrandingCustomFontGroupInput>
  /** A Shopify font group. */
  shopifyFontGroup?: InputMaybe<ShopifyCheckoutBrandingShopifyFontGroupInput>
}

/**
 * The font loading strategy determines how a font face is displayed after it is loaded or failed to load.
 * For more information: https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display.
 */
export type ShopifyCheckoutBrandingFontLoadingStrategy =
  /** The font display strategy is defined by the browser user agent. */
  | "AUTO"
  /** Gives the font face a short block period and an infinite swap period. */
  | "BLOCK"
  /** Gives the font face an extremely small block period and a short swap period. */
  | "FALLBACK"
  /** Gives the font face an extremely small block period and no swap period. */
  | "OPTIONAL"
  /** Gives the font face an extremely small block period and an infinite swap period. */
  | "SWAP"
  | "%future added value"

/** The font size. */
export interface ShopifyCheckoutBrandingFontSize {
  __typename?: "CheckoutBrandingFontSize"
  /** The base font size. */
  base?: Maybe<Scalars["Float"]["output"]>
  /** The scale ratio used to derive all font sizes such as small and large. */
  ratio?: Maybe<Scalars["Float"]["output"]>
}

/** The input fields used to update the font size. */
export interface ShopifyCheckoutBrandingFontSizeInput {
  /** The base font size. Its value should be between 12.0 and 18.0. */
  base?: InputMaybe<Scalars["Float"]["input"]>
  /** The scale ratio used to derive all font sizes such as small and large. Its value should be between 1.0 and 1.4. */
  ratio?: InputMaybe<Scalars["Float"]["input"]>
}

/** A container for the footer section customizations. */
export interface ShopifyCheckoutBrandingFooter {
  __typename?: "CheckoutBrandingFooter"
  /** The footer alignment. */
  alignment?: Maybe<ShopifyCheckoutBrandingFooterAlignment>
  /** The selected color scheme of the footer container. */
  colorScheme?: Maybe<ShopifyCheckoutBrandingColorSchemeSelection>
  /** The footer content settings. */
  content?: Maybe<ShopifyCheckoutBrandingFooterContent>
  /** The divided setting. */
  divided?: Maybe<Scalars["Boolean"]["output"]>
  /** The padding of the footer container. */
  padding?: Maybe<ShopifyCheckoutBrandingSpacingKeyword>
  /** The footer position. */
  position?: Maybe<ShopifyCheckoutBrandingFooterPosition>
}

/** Possible values for the footer alignment. */
export type ShopifyCheckoutBrandingFooterAlignment =
  /** The checkout footer alignment Center value. */
  | "CENTER"
  /** The checkout footer alignment End value. */
  | "END"
  /** The checkout footer alignment Start value. */
  | "START"
  | "%future added value"

/** The footer content customizations. */
export interface ShopifyCheckoutBrandingFooterContent {
  __typename?: "CheckoutBrandingFooterContent"
  /** The visibility settings for footer content. */
  visibility?: Maybe<ShopifyCheckoutBrandingVisibility>
}

/** The input fields for footer content customizations. */
export interface ShopifyCheckoutBrandingFooterContentInput {
  /** The visibility settings for footer content. */
  visibility?: InputMaybe<ShopifyCheckoutBrandingVisibility>
}

/** The input fields when mutating the checkout footer settings. */
export interface ShopifyCheckoutBrandingFooterInput {
  /** The footer alignment settings. You can set the footer native content alignment to the left, center, or right. */
  alignment?: InputMaybe<ShopifyCheckoutBrandingFooterAlignment>
  /** The selected color scheme of the footer container. */
  colorScheme?: InputMaybe<ShopifyCheckoutBrandingColorSchemeSelection>
  /** The input field for setting the footer content customizations. */
  content?: InputMaybe<ShopifyCheckoutBrandingFooterContentInput>
  /** The divided setting. */
  divided?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The padding of the footer container. */
  padding?: InputMaybe<ShopifyCheckoutBrandingSpacingKeyword>
  /** The input field for setting the footer position customizations. */
  position?: InputMaybe<ShopifyCheckoutBrandingFooterPosition>
}

/** Possible values for the footer position. */
export type ShopifyCheckoutBrandingFooterPosition =
  /** The End footer position. */
  | "END"
  /** The Inline footer position. */
  | "INLINE"
  | "%future added value"

/** The global customizations. */
export interface ShopifyCheckoutBrandingGlobal {
  __typename?: "CheckoutBrandingGlobal"
  /**
   * The global corner radius setting that overrides all other [corner radius](https://shopify.dev/docs/api/admin-graphql/latest/enums/CheckoutBrandingCornerRadius)
   * customizations.
   */
  cornerRadius?: Maybe<ShopifyCheckoutBrandingGlobalCornerRadius>
  /** The global typography customizations. */
  typography?: Maybe<ShopifyCheckoutBrandingTypographyStyleGlobal>
}

/**
 * Possible choices to override corner radius customizations on all applicable objects. Note that this selection
 * can only be used to set the override to `NONE` (0px).
 *
 * For more customizations options, set the [corner radius](https://shopify.dev/docs/api/admin-graphql/latest/enums/CheckoutBrandingCornerRadius)
 * selection on specific objects while leaving the global corner radius unset.
 */
export type ShopifyCheckoutBrandingGlobalCornerRadius =
  /** Set the global corner radius override to 0px (square corners). */
  "NONE" | "%future added value"

/** The input fields used to update the global customizations. */
export interface ShopifyCheckoutBrandingGlobalInput {
  /**
   * Select a global corner radius setting that overrides all other [corner radii](https://shopify.dev/docs/api/admin-graphql/latest/enums/CheckoutBrandingCornerRadius)
   * customizations.
   */
  cornerRadius?: InputMaybe<ShopifyCheckoutBrandingGlobalCornerRadius>
  /** The global typography customizations. */
  typography?: InputMaybe<ShopifyCheckoutBrandingTypographyStyleGlobalInput>
}

/** The header customizations. */
export interface ShopifyCheckoutBrandingHeader {
  __typename?: "CheckoutBrandingHeader"
  /** The header alignment. */
  alignment?: Maybe<ShopifyCheckoutBrandingHeaderAlignment>
  /** The background image of the header. */
  banner?: Maybe<ShopifyCheckoutBrandingImage>
  /** The cart link customizations for 1-page checkout. This field allows to customize the cart icon that renders by default on 1-page checkout. */
  cartLink?: Maybe<ShopifyCheckoutBrandingHeaderCartLink>
  /** The selected color scheme of the header container. */
  colorScheme?: Maybe<ShopifyCheckoutBrandingColorSchemeSelection>
  /** The divided setting. */
  divided?: Maybe<Scalars["Boolean"]["output"]>
  /** The store logo. */
  logo?: Maybe<ShopifyCheckoutBrandingLogo>
  /** The padding of the header container. */
  padding?: Maybe<ShopifyCheckoutBrandingSpacingKeyword>
  /** The header position. */
  position?: Maybe<ShopifyCheckoutBrandingHeaderPosition>
}

/** The possible header alignments. */
export type ShopifyCheckoutBrandingHeaderAlignment =
  /** Center alignment. */
  | "CENTER"
  /** End alignment. */
  | "END"
  /** Start alignment. */
  | "START"
  | "%future added value"

/** The header cart link customizations. */
export interface ShopifyCheckoutBrandingHeaderCartLink {
  __typename?: "CheckoutBrandingHeaderCartLink"
  /** The content type for the header back to cart link in 1-page checkout. Setting this to image will render the custom image provided using the image field on the header cart_link object. If no image is provided, the default cart icon will be used. */
  contentType?: Maybe<ShopifyCheckoutBrandingCartLinkContentType>
  /** The image that's used for the header back to cart link in 1-page checkout when the content type is set to image. */
  image?: Maybe<ShopifyImage>
}

/** The input fields for header cart link customizations. */
export interface ShopifyCheckoutBrandingHeaderCartLinkInput {
  /** The input for the content type for the header back to cart link in 1-page checkout. Setting this to image will render the custom image provided using the image field on the header cart_link object. If no image is provided, the default cart icon will be used. */
  contentType?: InputMaybe<ShopifyCheckoutBrandingCartLinkContentType>
  /** The input for the image that's used for the header back to cart link in 1-page checkout when the content type is set to image. */
  image?: InputMaybe<ShopifyCheckoutBrandingImageInput>
}

/** The input fields used to update the header customizations. */
export interface ShopifyCheckoutBrandingHeaderInput {
  /** The header alignment. */
  alignment?: InputMaybe<ShopifyCheckoutBrandingHeaderAlignment>
  /** The background image of the header (must not be of SVG format). */
  banner?: InputMaybe<ShopifyCheckoutBrandingImageInput>
  /** The input for cart link customizations for 1-page checkout. This field allows to customize the cart icon that renders by default on 1-page checkout. */
  cartLink?: InputMaybe<ShopifyCheckoutBrandingHeaderCartLinkInput>
  /** The selected color scheme of the header container. */
  colorScheme?: InputMaybe<ShopifyCheckoutBrandingColorSchemeSelection>
  /** The divided setting. */
  divided?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The store logo. */
  logo?: InputMaybe<ShopifyCheckoutBrandingLogoInput>
  /** The padding of the header container. */
  padding?: InputMaybe<ShopifyCheckoutBrandingSpacingKeyword>
  /** The header position. */
  position?: InputMaybe<ShopifyCheckoutBrandingHeaderPosition>
}

/** The possible header positions. */
export type ShopifyCheckoutBrandingHeaderPosition =
  /** Inline position. */
  | "INLINE"
  /** Secondary inline position. */
  | "INLINE_SECONDARY"
  /** Start position. */
  | "START"
  | "%future added value"

/** The heading level customizations. */
export interface ShopifyCheckoutBrandingHeadingLevel {
  __typename?: "CheckoutBrandingHeadingLevel"
  /** The typography customizations used for headings. */
  typography?: Maybe<ShopifyCheckoutBrandingTypographyStyle>
}

/** The input fields for heading level customizations. */
export interface ShopifyCheckoutBrandingHeadingLevelInput {
  /** The typography customizations used for headings. */
  typography?: InputMaybe<ShopifyCheckoutBrandingTypographyStyleInput>
}

/** A checkout branding image. */
export interface ShopifyCheckoutBrandingImage {
  __typename?: "CheckoutBrandingImage"
  /** The image details. */
  image?: Maybe<ShopifyImage>
}

/** The input fields used to update a checkout branding image uploaded via the Files API. */
export interface ShopifyCheckoutBrandingImageInput {
  /** A globally-unique ID. */
  mediaImageId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The input fields used to upsert the checkout branding settings. */
export interface ShopifyCheckoutBrandingInput {
  /** The customizations that apply to specific components or areas of the user interface. */
  customizations?: InputMaybe<ShopifyCheckoutBrandingCustomizationsInput>
  /**
   * The design system allows you to set values that represent specific attributes
   * of your brand like color and font. These attributes are used throughout the user
   * interface. This brings consistency and allows you to easily make broad design changes.
   */
  designSystem?: InputMaybe<ShopifyCheckoutBrandingDesignSystemInput>
}

/** Possible values for the label position. */
export type ShopifyCheckoutBrandingLabelPosition =
  /** The Inside label position. */
  | "INSIDE"
  /** The Outside label position. */
  | "OUTSIDE"
  | "%future added value"

/** The store logo customizations. */
export interface ShopifyCheckoutBrandingLogo {
  __typename?: "CheckoutBrandingLogo"
  /** The logo image. */
  image?: Maybe<ShopifyImage>
  /** The maximum width of the logo. */
  maxWidth?: Maybe<Scalars["Int"]["output"]>
  /** The visibility of the logo. */
  visibility?: Maybe<ShopifyCheckoutBrandingVisibility>
}

/** The input fields used to update the logo customizations. */
export interface ShopifyCheckoutBrandingLogoInput {
  /** The logo image (must not be of SVG format). */
  image?: InputMaybe<ShopifyCheckoutBrandingImageInput>
  /** The maximum width of the logo. */
  maxWidth?: InputMaybe<Scalars["Int"]["input"]>
  /** The visibility of the logo. */
  visibility?: InputMaybe<ShopifyCheckoutBrandingVisibility>
}

/** The main container customizations. */
export interface ShopifyCheckoutBrandingMain {
  __typename?: "CheckoutBrandingMain"
  /** The background image of the main container. */
  backgroundImage?: Maybe<ShopifyCheckoutBrandingImage>
  /** The selected color scheme of the main container. */
  colorScheme?: Maybe<ShopifyCheckoutBrandingColorSchemeSelection>
  /** The main container's divider style and visibility. */
  divider?: Maybe<ShopifyCheckoutBrandingContainerDivider>
  /** The settings for the main sections. */
  section?: Maybe<ShopifyCheckoutBrandingMainSection>
}

/** The input fields used to update the main container customizations. */
export interface ShopifyCheckoutBrandingMainInput {
  /** The background image of the main container (must not be of SVG format). */
  backgroundImage?: InputMaybe<ShopifyCheckoutBrandingImageInput>
  /** The selected color scheme for the main container of the checkout. */
  colorScheme?: InputMaybe<ShopifyCheckoutBrandingColorSchemeSelection>
  /** Divider style and visibility on the main container. */
  divider?: InputMaybe<ShopifyCheckoutBrandingContainerDividerInput>
  /** The settings for the main sections. */
  section?: InputMaybe<ShopifyCheckoutBrandingMainSectionInput>
}

/** The main sections customizations. */
export interface ShopifyCheckoutBrandingMainSection {
  __typename?: "CheckoutBrandingMainSection"
  /** The background style of the main sections. */
  background?: Maybe<ShopifyCheckoutBrandingBackground>
  /** The border for the main sections. */
  border?: Maybe<ShopifyCheckoutBrandingSimpleBorder>
  /** The border style of the main sections. */
  borderStyle?: Maybe<ShopifyCheckoutBrandingBorderStyle>
  /** The border width of the main sections. */
  borderWidth?: Maybe<ShopifyCheckoutBrandingBorderWidth>
  /** The selected color scheme of the main sections. */
  colorScheme?: Maybe<ShopifyCheckoutBrandingColorSchemeSelection>
  /** The corner radius of the main sections. */
  cornerRadius?: Maybe<ShopifyCheckoutBrandingCornerRadius>
  /** The padding of the main sections. */
  padding?: Maybe<ShopifyCheckoutBrandingSpacingKeyword>
  /** The shadow of the main sections. */
  shadow?: Maybe<ShopifyCheckoutBrandingShadow>
}

/** The input fields used to update the main sections customizations. */
export interface ShopifyCheckoutBrandingMainSectionInput {
  /** The background style of the main sections. */
  background?: InputMaybe<ShopifyCheckoutBrandingBackground>
  /** The border for the main sections. */
  border?: InputMaybe<ShopifyCheckoutBrandingSimpleBorder>
  /** The border style of the main sections. */
  borderStyle?: InputMaybe<ShopifyCheckoutBrandingBorderStyle>
  /** The border width of the main sections. */
  borderWidth?: InputMaybe<ShopifyCheckoutBrandingBorderWidth>
  /** The selected color scheme for the main sections. */
  colorScheme?: InputMaybe<ShopifyCheckoutBrandingColorSchemeSelection>
  /** The corner radius of the main sections. */
  cornerRadius?: InputMaybe<ShopifyCheckoutBrandingCornerRadius>
  /** The padding of the main sections. */
  padding?: InputMaybe<ShopifyCheckoutBrandingSpacingKeyword>
  /** The shadow of the main sections. */
  shadow?: InputMaybe<ShopifyCheckoutBrandingShadow>
}

/** The merchandise thumbnails customizations. */
export interface ShopifyCheckoutBrandingMerchandiseThumbnail {
  __typename?: "CheckoutBrandingMerchandiseThumbnail"
  /** The settings for the merchandise thumbnail badge. */
  badge?: Maybe<ShopifyCheckoutBrandingMerchandiseThumbnailBadge>
  /** The border used for merchandise thumbnails. */
  border?: Maybe<ShopifyCheckoutBrandingSimpleBorder>
  /** The corner radius used for merchandise thumbnails. */
  cornerRadius?: Maybe<ShopifyCheckoutBrandingCornerRadius>
  /** The property used to customize how the product image fits within merchandise thumbnails. */
  fit?: Maybe<ShopifyCheckoutBrandingObjectFit>
}

/** The merchandise thumbnail badges customizations. */
export interface ShopifyCheckoutBrandingMerchandiseThumbnailBadge {
  __typename?: "CheckoutBrandingMerchandiseThumbnailBadge"
  /** The background used for merchandise thumbnail badges. */
  background?: Maybe<ShopifyCheckoutBrandingMerchandiseThumbnailBadgeBackground>
}

/** The merchandise thumbnail badge background. */
export type ShopifyCheckoutBrandingMerchandiseThumbnailBadgeBackground =
  /** The Accent background. */
  | "ACCENT"
  /** The Base background. */
  | "BASE"
  | "%future added value"

/** The input fields used to update the merchandise thumbnail badges customizations. */
export interface ShopifyCheckoutBrandingMerchandiseThumbnailBadgeInput {
  /** The background used for merchandise thumbnail badges. */
  background?: InputMaybe<ShopifyCheckoutBrandingMerchandiseThumbnailBadgeBackground>
}

/** The input fields used to update the merchandise thumbnails customizations. */
export interface ShopifyCheckoutBrandingMerchandiseThumbnailInput {
  /** The settings for the merchandise thumbnail badge. */
  badge?: InputMaybe<ShopifyCheckoutBrandingMerchandiseThumbnailBadgeInput>
  /** The border used for merchandise thumbnails. */
  border?: InputMaybe<ShopifyCheckoutBrandingSimpleBorder>
  /** The corner radius used for merchandise thumbnails. */
  cornerRadius?: InputMaybe<ShopifyCheckoutBrandingCornerRadius>
  /** The property used to customize how the product image fits within merchandise thumbnails. */
  fit?: InputMaybe<ShopifyCheckoutBrandingObjectFit>
}

/** Possible values for object fit. */
export type ShopifyCheckoutBrandingObjectFit =
  /** The Contain value for fit. The image is scaled to maintain its aspect ratio while fitting within the containing box. The entire image is made to fill the box, while preserving its aspect ratio, so the image will be "letterboxed" if its aspect ratio does not match the aspect ratio of the box. This is the default value. */
  | "CONTAIN"
  /** The Cover value for fit. The image is sized to maintain its aspect ratio while filling the entire containing box. If the image’s aspect ratio does not match the aspect ratio of the containing box, then the object will be clipped to fit. */
  | "COVER"
  | "%future added value"

/** The order summary customizations. */
export interface ShopifyCheckoutBrandingOrderSummary {
  __typename?: "CheckoutBrandingOrderSummary"
  /** The background image of the order summary container. */
  backgroundImage?: Maybe<ShopifyCheckoutBrandingImage>
  /** The selected color scheme of the order summary container. */
  colorScheme?: Maybe<ShopifyCheckoutBrandingColorSchemeSelection>
  /** The order summary container's divider style and visibility. */
  divider?: Maybe<ShopifyCheckoutBrandingContainerDivider>
  /** The settings for the order summary sections. */
  section?: Maybe<ShopifyCheckoutBrandingOrderSummarySection>
}

/** The input fields used to update the order summary container customizations. */
export interface ShopifyCheckoutBrandingOrderSummaryInput {
  /** The background image of the order summary container (must not be of SVG format). */
  backgroundImage?: InputMaybe<ShopifyCheckoutBrandingImageInput>
  /** The selected color scheme for the order summary container of the checkout. */
  colorScheme?: InputMaybe<ShopifyCheckoutBrandingColorSchemeSelection>
  /** Divider style and visibility on the order summary container. */
  divider?: InputMaybe<ShopifyCheckoutBrandingContainerDividerInput>
  /** The settings for the order summary sections. */
  section?: InputMaybe<ShopifyCheckoutBrandingOrderSummarySectionInput>
}

/** The order summary sections customizations. */
export interface ShopifyCheckoutBrandingOrderSummarySection {
  __typename?: "CheckoutBrandingOrderSummarySection"
  /** The background style of the order summary sections. */
  background?: Maybe<ShopifyCheckoutBrandingBackground>
  /** The border for the order summary sections. */
  border?: Maybe<ShopifyCheckoutBrandingSimpleBorder>
  /** The border style of the order summary sections. */
  borderStyle?: Maybe<ShopifyCheckoutBrandingBorderStyle>
  /** The border width of the order summary sections. */
  borderWidth?: Maybe<ShopifyCheckoutBrandingBorderWidth>
  /** The selected color scheme of the order summary sections. */
  colorScheme?: Maybe<ShopifyCheckoutBrandingColorSchemeSelection>
  /** The corner radius of the order summary sections. */
  cornerRadius?: Maybe<ShopifyCheckoutBrandingCornerRadius>
  /** The padding of the order summary sections. */
  padding?: Maybe<ShopifyCheckoutBrandingSpacingKeyword>
  /** The shadow of the order summary sections. */
  shadow?: Maybe<ShopifyCheckoutBrandingShadow>
}

/** The input fields used to update the order summary sections customizations. */
export interface ShopifyCheckoutBrandingOrderSummarySectionInput {
  /** The background style of the order summary sections. */
  background?: InputMaybe<ShopifyCheckoutBrandingBackground>
  /** The border for the order summary sections. */
  border?: InputMaybe<ShopifyCheckoutBrandingSimpleBorder>
  /** The border style of the order summary sections. */
  borderStyle?: InputMaybe<ShopifyCheckoutBrandingBorderStyle>
  /** The border width of the order summary sections. */
  borderWidth?: InputMaybe<ShopifyCheckoutBrandingBorderWidth>
  /** The selected color scheme for the order summary sections. */
  colorScheme?: InputMaybe<ShopifyCheckoutBrandingColorSchemeSelection>
  /** The corner radius of the order summary sections. */
  cornerRadius?: InputMaybe<ShopifyCheckoutBrandingCornerRadius>
  /** The padding of the order summary sections. */
  padding?: InputMaybe<ShopifyCheckoutBrandingSpacingKeyword>
  /** The shadow of the order summary sections. */
  shadow?: InputMaybe<ShopifyCheckoutBrandingShadow>
}

/** The selects customizations. */
export interface ShopifyCheckoutBrandingSelect {
  __typename?: "CheckoutBrandingSelect"
  /** The border used for selects. */
  border?: Maybe<ShopifyCheckoutBrandingBorder>
  /** The typography customizations used for selects. */
  typography?: Maybe<ShopifyCheckoutBrandingTypographyStyle>
}

/** The input fields used to update the selects customizations. */
export interface ShopifyCheckoutBrandingSelectInput {
  /** The border used for selects. */
  border?: InputMaybe<ShopifyCheckoutBrandingBorder>
  /** The typography customizations used for selects. */
  typography?: InputMaybe<ShopifyCheckoutBrandingTypographyStyleInput>
}

/** The container shadow. */
export type ShopifyCheckoutBrandingShadow =
  /** The Base shadow. */
  | "BASE"
  /** The Large 100 shadow. */
  | "LARGE_100"
  /** The Large 200 shadow. */
  | "LARGE_200"
  /** The Small 100 shadow. */
  | "SMALL_100"
  /** The Small 200 shadow. */
  | "SMALL_200"
  | "%future added value"

/** A Shopify font. */
export interface ShopifyCheckoutBrandingShopifyFont
  extends ShopifyCheckoutBrandingFont {
  __typename?: "CheckoutBrandingShopifyFont"
  /** The font sources. */
  sources?: Maybe<Scalars["String"]["output"]>
  /** The font weight. */
  weight?: Maybe<Scalars["Int"]["output"]>
}

/** The input fields used to update a Shopify font group. */
export interface ShopifyCheckoutBrandingShopifyFontGroupInput {
  /** The base font weight. */
  baseWeight?: InputMaybe<Scalars["Int"]["input"]>
  /** The bold font weight. */
  boldWeight?: InputMaybe<Scalars["Int"]["input"]>
  /** The font loading strategy. */
  loadingStrategy?: InputMaybe<ShopifyCheckoutBrandingFontLoadingStrategy>
  /** The Shopify font name from [the list of available fonts](https://shopify.dev/themes/architecture/settings/fonts#available-fonts), such as `Alegreya Sans` or `Anonymous Pro`. */
  name: Scalars["String"]["input"]
}

/** Possible values for the simple border. */
export type ShopifyCheckoutBrandingSimpleBorder =
  /** The Full simple border. */
  | "FULL"
  /** The None simple border. */
  | "NONE"
  | "%future added value"

/** Possible values for the spacing. */
export type ShopifyCheckoutBrandingSpacing =
  /** The Base spacing. */
  | "BASE"
  /** The Extra Loose spacing. */
  | "EXTRA_LOOSE"
  /** The Extra Tight spacing. */
  | "EXTRA_TIGHT"
  /** The Loose spacing. */
  | "LOOSE"
  /** The None spacing. */
  | "NONE"
  /** The Tight spacing. */
  | "TIGHT"
  | "%future added value"

/** The spacing between UI elements. */
export type ShopifyCheckoutBrandingSpacingKeyword =
  /** The Base spacing. */
  | "BASE"
  /** The Large spacing. */
  | "LARGE"
  /** The Large 100 spacing. */
  | "LARGE_100"
  /** The Large 200 spacing. */
  | "LARGE_200"
  /** The Large 300 spacing. */
  | "LARGE_300"
  /** The Large 400 spacing. */
  | "LARGE_400"
  /** The Large 500 spacing. */
  | "LARGE_500"
  /** The None spacing. */
  | "NONE"
  /** The Small spacing. */
  | "SMALL"
  /** The Small 100 spacing. */
  | "SMALL_100"
  /** The Small 200 spacing. */
  | "SMALL_200"
  /** The Small 300 spacing. */
  | "SMALL_300"
  /** The Small 400 spacing. */
  | "SMALL_400"
  /** The Small 500 spacing. */
  | "SMALL_500"
  | "%future added value"

/** The text fields customizations. */
export interface ShopifyCheckoutBrandingTextField {
  __typename?: "CheckoutBrandingTextField"
  /** The border used for text fields. */
  border?: Maybe<ShopifyCheckoutBrandingBorder>
  /** The typography customizations used for text fields. */
  typography?: Maybe<ShopifyCheckoutBrandingTypographyStyle>
}

/** The input fields used to update the text fields customizations. */
export interface ShopifyCheckoutBrandingTextFieldInput {
  /** The border used for text fields. */
  border?: InputMaybe<ShopifyCheckoutBrandingBorder>
  /** The typography customizations used for text fields. */
  typography?: InputMaybe<ShopifyCheckoutBrandingTypographyStyleInput>
}

/**
 * The typography settings used for checkout-related text. Use these settings to customize the
 * font family and size for primary and secondary text elements.
 *
 * Refer to the [typography tutorial](https://shopify.dev/docs/apps/checkout/styling/customize-typography)
 * for further information on typography customization.
 */
export interface ShopifyCheckoutBrandingTypography {
  __typename?: "CheckoutBrandingTypography"
  /** A font group used for most components such as text, buttons and form controls. */
  primary?: Maybe<ShopifyCheckoutBrandingFontGroup>
  /** A font group used for heading components by default. */
  secondary?: Maybe<ShopifyCheckoutBrandingFontGroup>
  /** The font size design system (base size in pixels and scaling between different sizes). */
  size?: Maybe<ShopifyCheckoutBrandingFontSize>
}

/** The font selection. */
export type ShopifyCheckoutBrandingTypographyFont =
  /** The primary font. */
  | "PRIMARY"
  /** The secondary font. */
  | "SECONDARY"
  | "%future added value"

/**
 * The input fields used to update the typography. Refer to the [typography tutorial](https://shopify.dev/docs/apps/checkout/styling/customize-typography)
 * for more information on how to set these fields.
 */
export interface ShopifyCheckoutBrandingTypographyInput {
  /** A font group used for most components such as text, buttons and form controls. */
  primary?: InputMaybe<ShopifyCheckoutBrandingFontGroupInput>
  /** A font group used for heading components by default. */
  secondary?: InputMaybe<ShopifyCheckoutBrandingFontGroupInput>
  /** The font size. */
  size?: InputMaybe<ShopifyCheckoutBrandingFontSizeInput>
}

/** Possible values for the typography kerning. */
export type ShopifyCheckoutBrandingTypographyKerning =
  /** Base or default kerning. */
  | "BASE"
  /** Extra loose kerning, leaving even more space in between characters. */
  | "EXTRA_LOOSE"
  /** Loose kerning, leaving more space than the default in between characters. */
  | "LOOSE"
  | "%future added value"

/** Possible values for the typography letter case. */
export type ShopifyCheckoutBrandingTypographyLetterCase =
  /** All letters are is lower case. */
  | "LOWER"
  /** No letter casing applied. */
  | "NONE"
  /** Capitalize the first letter of each word. */
  | "TITLE"
  /** All letters are uppercase. */
  | "UPPER"
  | "%future added value"

/**
 * Possible choices for the font size.
 *
 * Note that the value in pixels of these settings can be customized with the
 * [typography size](https://shopify.dev/docs/api/admin-graphql/latest/input-objects/CheckoutBrandingFontSizeInput)
 * object. Refer to the [typography tutorial](https://shopify.dev/docs/apps/checkout/styling/customize-typography)
 * for more information.
 */
export type ShopifyCheckoutBrandingTypographySize =
  /** The base font size. Example: 14px. */
  | "BASE"
  /** The extra extra large font size. Example: 24px. */
  | "EXTRA_EXTRA_LARGE"
  /** The extra large font size. Example: 21px. */
  | "EXTRA_LARGE"
  /** The extra small font size. Example: 10px. */
  | "EXTRA_SMALL"
  /** The large font size. Example: 19px. */
  | "LARGE"
  /** The medium font size. Example: 16px. */
  | "MEDIUM"
  /** The small font size. Example: 12px. */
  | "SMALL"
  | "%future added value"

/** The typography customizations. */
export interface ShopifyCheckoutBrandingTypographyStyle {
  __typename?: "CheckoutBrandingTypographyStyle"
  /** The font. */
  font?: Maybe<ShopifyCheckoutBrandingTypographyFont>
  /** The kerning. */
  kerning?: Maybe<ShopifyCheckoutBrandingTypographyKerning>
  /** The letter case. */
  letterCase?: Maybe<ShopifyCheckoutBrandingTypographyLetterCase>
  /** The font size. */
  size?: Maybe<ShopifyCheckoutBrandingTypographySize>
  /** The font weight. */
  weight?: Maybe<ShopifyCheckoutBrandingTypographyWeight>
}

/** The global typography customizations. */
export interface ShopifyCheckoutBrandingTypographyStyleGlobal {
  __typename?: "CheckoutBrandingTypographyStyleGlobal"
  /** The kerning. */
  kerning?: Maybe<ShopifyCheckoutBrandingTypographyKerning>
  /** The letter case. */
  letterCase?: Maybe<ShopifyCheckoutBrandingTypographyLetterCase>
}

/** The input fields used to update the global typography customizations. */
export interface ShopifyCheckoutBrandingTypographyStyleGlobalInput {
  /** The kerning. */
  kerning?: InputMaybe<ShopifyCheckoutBrandingTypographyKerning>
  /** The letter case. */
  letterCase?: InputMaybe<ShopifyCheckoutBrandingTypographyLetterCase>
}

/** The input fields used to update the typography customizations. */
export interface ShopifyCheckoutBrandingTypographyStyleInput {
  /** The font. */
  font?: InputMaybe<ShopifyCheckoutBrandingTypographyFont>
  /** The kerning. */
  kerning?: InputMaybe<ShopifyCheckoutBrandingTypographyKerning>
  /** The letter case. */
  letterCase?: InputMaybe<ShopifyCheckoutBrandingTypographyLetterCase>
  /** The font size. */
  size?: InputMaybe<ShopifyCheckoutBrandingTypographySize>
  /** The font weight. */
  weight?: InputMaybe<ShopifyCheckoutBrandingTypographyWeight>
}

/** Possible values for the font weight. */
export type ShopifyCheckoutBrandingTypographyWeight =
  /** The base weight. */
  | "BASE"
  /** The bold weight. */
  | "BOLD"
  | "%future added value"

/** Return type for `checkoutBrandingUpsert` mutation. */
export interface ShopifyCheckoutBrandingUpsertPayload {
  __typename?: "CheckoutBrandingUpsertPayload"
  /** Returns the new checkout branding settings. */
  checkoutBranding?: Maybe<ShopifyCheckoutBranding>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCheckoutBrandingUpsertUserError>
}

/** An error that occurs during the execution of `CheckoutBrandingUpsert`. */
export interface ShopifyCheckoutBrandingUpsertUserError
  extends ShopifyDisplayableError {
  __typename?: "CheckoutBrandingUpsertUserError"
  /** The error code. */
  code?: Maybe<ShopifyCheckoutBrandingUpsertUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CheckoutBrandingUpsertUserError`. */
export type ShopifyCheckoutBrandingUpsertUserErrorCode =
  /** Unexpected internal error happened. */
  "INTERNAL_ERROR" | "%future added value"

/** Possible visibility states. */
export type ShopifyCheckoutBrandingVisibility =
  /** The Hidden visibility setting. */
  | "HIDDEN"
  /** The Visible visibility setting. */
  | "VISIBLE"
  | "%future added value"

/** A checkout profile defines the branding settings and the UI extensions for a store's checkout. A checkout profile could be published or draft. A store might have at most one published checkout profile, which is used to render their live checkout. The store could also have multiple draft profiles that were created, previewed, and published using the admin checkout editor. */
export interface ShopifyCheckoutProfile extends ShopifyNode {
  __typename?: "CheckoutProfile"
  /** The date and time when the checkout profile was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The date and time when the checkout profile was last edited. */
  editedAt: Scalars["DateTime"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Whether the checkout profile is published or not. */
  isPublished: Scalars["Boolean"]["output"]
  /** The profile name. */
  name: Scalars["String"]["output"]
  /** Whether the checkout profile Thank You Page and Order Status Page are actively using extensibility or not. */
  typOspPagesActive: Scalars["Boolean"]["output"]
  /** The date and time when the checkout profile was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** An auto-generated type for paginating through multiple CheckoutProfiles. */
export interface ShopifyCheckoutProfileConnection {
  __typename?: "CheckoutProfileConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCheckoutProfileEdge>
  /** A list of nodes that are contained in CheckoutProfileEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCheckoutProfile>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one CheckoutProfile and a cursor during pagination. */
export interface ShopifyCheckoutProfileEdge {
  __typename?: "CheckoutProfileEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CheckoutProfileEdge. */
  node: ShopifyCheckoutProfile
}

/** The set of valid sort keys for the CheckoutProfile query. */
export type ShopifyCheckoutProfileSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `edited_at` value. */
  | "EDITED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `is_published` value. */
  | "IS_PUBLISHED"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** The input fields for adding products to the Combined Listing. */
export interface ShopifyChildProductRelationInput {
  /** The ID of the child product. */
  childProductId: Scalars["ID"]["input"]
  /** The parent option values. */
  selectedParentOptionValues: Array<ShopifySelectedVariantOptionInput>
}

/** The set of valid sort keys for the CodeDiscount query. */
export type ShopifyCodeDiscountSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `ends_at` value. */
  | "ENDS_AT"
  /** Sort by the `id` value. */
  | "ID"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  /** Sort by the `starts_at` value. */
  | "STARTS_AT"
  /** Sort by the `title` value. */
  | "TITLE"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollection
  extends ShopifyHasEvents,
    ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyHasPublishedTranslations,
    ShopifyNode,
    ShopifyPublishable {
  __typename?: "Collection"
  /**
   * The number of
   * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
   * that a resource is published to, without
   * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
   */
  availablePublicationsCount?: Maybe<ShopifyCount>
  /** A single-line, text-only description of the collection, stripped of any HTML tags and formatting that were included in the description. */
  description: Scalars["String"]["output"]
  /** The description of the collection, including any HTML tags and formatting. This content is typically displayed to customers, such as on an online store, depending on the theme. */
  descriptionHtml: Scalars["HTML"]["output"]
  /** The paginated list of events associated with the host subject. */
  events: ShopifyEventConnection
  /** Information about the collection that's provided through resource feedback. */
  feedback?: Maybe<ShopifyResourceFeedback>
  /**
   * A unique string that identifies the collection. If a handle isn't specified when a collection is created, it's automatically generated from the collection's original title, and typically includes words from the title separated by hyphens. For example, a collection that was created with the title `Summer Catalog 2022` might have the handle `summer-catalog-2022`.
   *
   * If the title is changed, the handle doesn't automatically change.
   *
   * The handle can be used in themes by the Liquid templating language to refer to the collection, but using the ID is preferred because it never changes.
   */
  handle: Scalars["String"]["output"]
  /** Whether the collection includes the specified product. */
  hasProduct: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The image associated with the collection. */
  image?: Maybe<ShopifyImage>
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** The products that are included in the collection. */
  products: ShopifyProductConnection
  /** The number of products in the collection. */
  productsCount?: Maybe<ShopifyCount>
  /**
   * The number of
   * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
   * that a resource is published to, without
   * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
   * @deprecated Use `resourcePublicationsCount` instead.
   */
  publicationCount: Scalars["Int"]["output"]
  /**
   * The channels where the collection is published.
   * @deprecated Use `resourcePublications` instead.
   */
  publications: ShopifyCollectionPublicationConnection
  /**
   * Whether the resource is published to a specific channel.
   * @deprecated Use `publishedOnPublication` instead.
   */
  publishedOnChannel: Scalars["Boolean"]["output"]
  /**
   * Whether the resource is published to a
   * [channel](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel).
   * For example, the resource might be published to the online store channel.
   * @deprecated Use `publishedOnCurrentPublication` instead.
   */
  publishedOnCurrentChannel: Scalars["Boolean"]["output"]
  /**
   * Whether the resource is published to the app's
   * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
   * For example, the resource might be published to the app's online store channel.
   */
  publishedOnCurrentPublication: Scalars["Boolean"]["output"]
  /**
   * Whether the resource is published to a specified
   * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
   */
  publishedOnPublication: Scalars["Boolean"]["output"]
  /**
   * The list of resources that are published to a
   * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
   */
  resourcePublications: ShopifyResourcePublicationConnection
  /**
   * The number of
   * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
   * that a resource is published to, without
   * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
   */
  resourcePublicationsCount?: Maybe<ShopifyCount>
  /**
   * The list of resources that are either published or staged to be published to a
   * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
   */
  resourcePublicationsV2: ShopifyResourcePublicationV2Connection
  /** For a smart (automated) collection, specifies the rules that determine whether a product is included. */
  ruleSet?: Maybe<ShopifyCollectionRuleSet>
  /** If the default SEO fields for page title and description have been modified, contains the modified information. */
  seo: ShopifySeo
  /** The order in which the products in the collection are displayed by default in the Shopify admin and in sales channels, such as an online store. */
  sortOrder: ShopifyCollectionSortOrder
  /**
   * The Storefront GraphQL API ID of the `Collection`.
   *
   * As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
   * @deprecated Use `id` instead.
   */
  storefrontId: Scalars["StorefrontID"]["output"]
  /** The suffix of the Liquid template being used to show the collection in an online store. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid` template. */
  templateSuffix?: Maybe<Scalars["String"]["output"]>
  /** The name of the collection. It's displayed in the Shopify admin and is typically displayed in sales channels, such as an online store. */
  title: Scalars["String"]["output"]
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
  /**
   * The list of channels that the resource is not published to.
   * @deprecated Use `unpublishedPublications` instead.
   */
  unpublishedChannels: ShopifyChannelConnection
  /**
   * The list of [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
   * that the resource isn't published to.
   */
  unpublishedPublications: ShopifyPublicationConnection
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified. */
  updatedAt: Scalars["DateTime"]["output"]
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionDescriptionArgs {
  truncateAt?: InputMaybe<Scalars["Int"]["input"]>
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionHasProductArgs {
  id: Scalars["ID"]["input"]
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionProductsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyProductCollectionSortKeys>
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionPublicationCountArgs {
  onlyPublished?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionPublicationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  onlyPublished?: InputMaybe<Scalars["Boolean"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionPublishedOnChannelArgs {
  channelId: Scalars["ID"]["input"]
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionPublishedOnPublicationArgs {
  publicationId: Scalars["ID"]["input"]
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionResourcePublicationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  onlyPublished?: InputMaybe<Scalars["Boolean"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionResourcePublicationsCountArgs {
  onlyPublished?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionResourcePublicationsV2Args {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  catalogType?: InputMaybe<ShopifyCatalogType>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  onlyPublished?: InputMaybe<Scalars["Boolean"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionUnpublishedChannelsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Collection` object represents a group of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that merchants can organize to make their stores easier to browse and help customers find related products.
 * Collections serve as the primary way to categorize and display products across
 * [online stores](https://shopify.dev/docs/apps/build/online-store),
 * [sales channels](https://shopify.dev/docs/apps/build/sales-channels), and marketing campaigns.
 *
 * There are two types of collections:
 *
 * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
 * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically included in the collection.
 *
 * The `Collection` object provides information to:
 *
 * - Organize products by category, season, or promotion.
 * - Automate product grouping using rules (for example, by tag, type, or price).
 * - Configure product sorting and display order (for example, alphabetical, best-selling, price, or manual).
 * - Manage collection visibility and publication across sales channels.
 * - Add rich descriptions, images, and metadata to enhance discovery.
 *
 * > Note:
 * > Collections are unpublished by default. To make them available to customers,
 * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
 * mutation after creation.
 *
 * Collections can be displayed in a store with Shopify's theme system through [Liquid templates](https://shopify.dev/docs/storefronts/themes/architecture/templates/collection)
 * and can be customized with [template suffixes](https://shopify.dev/docs/storefronts/themes/architecture/templates/alternate-templates)
 * for unique layouts. They also support advanced features like translated content, resource feedback,
 * and contextual publication for location-based catalogs.
 *
 * Learn about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
 */
export interface ShopifyCollectionUnpublishedPublicationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `collectionAddProducts` mutation. */
export interface ShopifyCollectionAddProductsPayload {
  __typename?: "CollectionAddProductsPayload"
  /** The updated collection. Returns `null` if an error is raised. */
  collection?: Maybe<ShopifyCollection>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `collectionAddProductsV2` mutation. */
export interface ShopifyCollectionAddProductsV2Payload {
  __typename?: "CollectionAddProductsV2Payload"
  /** The asynchronous job adding the products. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCollectionAddProductsV2UserError>
}

/** An error that occurs during the execution of `CollectionAddProductsV2`. */
export interface ShopifyCollectionAddProductsV2UserError
  extends ShopifyDisplayableError {
  __typename?: "CollectionAddProductsV2UserError"
  /** The error code. */
  code?: Maybe<ShopifyCollectionAddProductsV2UserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CollectionAddProductsV2UserError`. */
export type ShopifyCollectionAddProductsV2UserErrorCode =
  /** Can't manually add products to a smart collection. */
  | "CANT_ADD_TO_SMART_COLLECTION"
  /** Collection doesn't exist. */
  | "COLLECTION_DOES_NOT_EXIST"
  | "%future added value"

/** An auto-generated type for paginating through multiple Collections. */
export interface ShopifyCollectionConnection {
  __typename?: "CollectionConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCollectionEdge>
  /** A list of nodes that are contained in CollectionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCollection>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `collectionCreate` mutation. */
export interface ShopifyCollectionCreatePayload {
  __typename?: "CollectionCreatePayload"
  /** The collection that has been created. */
  collection?: Maybe<ShopifyCollection>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields for specifying the collection to delete. */
export interface ShopifyCollectionDeleteInput {
  /** The ID of the collection to be deleted. */
  id: Scalars["ID"]["input"]
}

/** Return type for `collectionDelete` mutation. */
export interface ShopifyCollectionDeletePayload {
  __typename?: "CollectionDeletePayload"
  /** The ID of the collection that was deleted. Returns `null` if the collection doesn't exist. */
  deletedCollectionId?: Maybe<Scalars["ID"]["output"]>
  /** The shop associated with the collection. */
  shop: ShopifyShop
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type which holds one Collection and a cursor during pagination. */
export interface ShopifyCollectionEdge {
  __typename?: "CollectionEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CollectionEdge. */
  node: ShopifyCollection
}

/** The input fields for identifying a collection. */
export interface ShopifyCollectionIdentifierInput {
  /** The [custom ID](https://shopify.dev/docs/apps/build/custom-data/metafields/working-with-custom-ids) of the collection. */
  customId?: InputMaybe<ShopifyUniqueMetafieldValueInput>
  /** The handle of the collection. */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of the collection. */
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** The input fields required to create a collection. */
export interface ShopifyCollectionInput {
  /** The description of the collection, in HTML format. */
  descriptionHtml?: InputMaybe<Scalars["String"]["input"]>
  /** A unique human-friendly string for the collection. Automatically generated from the collection's title. */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** Specifies the collection to update or create a new collection if absent. Required for updating a collection. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** The image associated with the collection. */
  image?: InputMaybe<ShopifyImageInput>
  /** The metafields to associate with the collection. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** Initial list of collection products. Only valid with `collectionCreate` and without rules. */
  products?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /**
   * Indicates whether a redirect is required after a new handle has been provided.
   * If true, then the old handle is redirected to the new one automatically.
   */
  redirectNewHandle?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The rules used to assign products to the collection. */
  ruleSet?: InputMaybe<ShopifyCollectionRuleSetInput>
  /** SEO information for the collection. */
  seo?: InputMaybe<ShopifySeoInput>
  /** The order in which the collection's products are sorted. */
  sortOrder?: InputMaybe<ShopifyCollectionSortOrder>
  /** The theme template used when viewing the collection in a store. */
  templateSuffix?: InputMaybe<Scalars["String"]["input"]>
  /** The title of the collection. Required for creating a new collection. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * Represents the publication status and settings for a collection across different sales channels. This tracks where collections are published, when they were published, and any channel-specific configuration.
 *
 * For example, a "Holiday Gifts" collection might be published to the online store and Facebook Shop but not to the POS channel, with different publication dates for each channel based on marketing strategy.
 *
 * Use `CollectionPublication` to:
 * - Track collection visibility across multiple sales channels
 * - Manage channel-specific collection settings and availability
 * - Monitor publication history and timing for collections
 * - Control where collections appear in customer-facing channels
 * - Implement channel-specific collection management workflows
 *
 * Each publication record includes the channel information, publication status, and timing details. This enables merchants to control collection visibility strategically across their sales channels.
 *
 * Collections can have different publication settings per channel, allowing for targeted marketing and inventory management. For instance, wholesale collections might only be published to B2B channels while retail collections appear in consumer-facing channels.
 *
 * The publication system integrates with Shopify's broader channel management, ensuring collections appear consistently across the merchant's sales ecosystem while respecting channel-specific rules and permissions.
 *
 * Learn more about [sales channel management](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
 */
export interface ShopifyCollectionPublication {
  __typename?: "CollectionPublication"
  /**
   * The channel where the collection will be published.
   * @deprecated Use `publication` instead.
   */
  channel: ShopifyChannel
  /** The collection to be published on the publication. */
  collection: ShopifyCollection
  /** Whether the publication is published or not. */
  isPublished: Scalars["Boolean"]["output"]
  /** The publication where the collection will be published. */
  publication: ShopifyPublication
  /** The date that the publication was or is going to be published. */
  publishDate: Scalars["DateTime"]["output"]
}

/** An auto-generated type for paginating through multiple CollectionPublications. */
export interface ShopifyCollectionPublicationConnection {
  __typename?: "CollectionPublicationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCollectionPublicationEdge>
  /** A list of nodes that are contained in CollectionPublicationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCollectionPublication>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one CollectionPublication and a cursor during pagination. */
export interface ShopifyCollectionPublicationEdge {
  __typename?: "CollectionPublicationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CollectionPublicationEdge. */
  node: ShopifyCollectionPublication
}

/** The input fields for publications to which a collection will be published. */
export interface ShopifyCollectionPublicationInput {
  /** The ID of the publication. */
  publicationId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The input fields for specifying a collection to publish and the sales channels to publish it to. */
export interface ShopifyCollectionPublishInput {
  /** The channels where the collection will be published. */
  collectionPublications: Array<ShopifyCollectionPublicationInput>
  /** The collection to create or update publications for. */
  id: Scalars["ID"]["input"]
}

/** Return type for `collectionPublish` mutation. */
export interface ShopifyCollectionPublishPayload {
  __typename?: "CollectionPublishPayload"
  /** The published collection. */
  collection?: Maybe<ShopifyCollection>
  /** The channels where the collection has been published. */
  collectionPublications?: Maybe<Array<ShopifyCollectionPublication>>
  /** The shop associated with the collection. */
  shop: ShopifyShop
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `collectionRemoveProducts` mutation. */
export interface ShopifyCollectionRemoveProductsPayload {
  __typename?: "CollectionRemoveProductsPayload"
  /** The asynchronous job removing the products. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `collectionReorderProducts` mutation. */
export interface ShopifyCollectionReorderProductsPayload {
  __typename?: "CollectionReorderProductsPayload"
  /** The asynchronous job reordering the products. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Represents at rule that's used to assign products to a collection. */
export interface ShopifyCollectionRule {
  __typename?: "CollectionRule"
  /** The attribute that the rule focuses on. For example, `title` or `product_type`. */
  column: ShopifyCollectionRuleColumn
  /** The value that the operator is applied to. For example, `Hats`. */
  condition: Scalars["String"]["output"]
  /** The value that the operator is applied to. */
  conditionObject?: Maybe<ShopifyCollectionRuleConditionObject>
  /** The type of operator that the rule is based on. For example, `equals`, `contains`, or `not_equals`. */
  relation: ShopifyCollectionRuleRelation
}

/** Specifies the taxonomy category to used for the condition. */
export interface ShopifyCollectionRuleCategoryCondition {
  __typename?: "CollectionRuleCategoryCondition"
  /** The taxonomy category used as condition. */
  value: ShopifyTaxonomyCategory
}

/** Specifies the attribute of a product being used to populate the smart collection. */
export type ShopifyCollectionRuleColumn =
  /**
   * An attribute evaluated based on the `compare_at_price` attribute of the product's variants.
   * With `is_set` relation, the rule matches products with at least one variant with `compare_at_price` set.
   * With `is_not_set` relation, the rule matches matches products with at least one variant with `compare_at_price` not set.
   */
  | "IS_PRICE_REDUCED"
  /**
   * This rule type is designed to dynamically include products in a smart collection based on their category id.
   * When a specific product category is set as a condition, this rule will match products that are directly assigned to the specified category.
   */
  | "PRODUCT_CATEGORY_ID"
  /**
   * This rule type is designed to dynamically include products in a smart collection based on their category id.
   * When a specific product category is set as a condition, this rule will not only match products that are
   * directly assigned to the specified category but also include any products categorized under any descendant of that category.
   */
  | "PRODUCT_CATEGORY_ID_WITH_DESCENDANTS"
  /** This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true. */
  | "PRODUCT_METAFIELD_DEFINITION"
  /** The [`product_taxonomy_node_id`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-Product.fields.productCategory) attribute. */
  | "PRODUCT_TAXONOMY_NODE_ID"
  /** The [`tag`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-Product.fields.tags) attribute. */
  | "TAG"
  /** The [`title`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-Product.fields.title) attribute. */
  | "TITLE"
  /** The [`type`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-Product.fields.productType) attribute. */
  | "TYPE"
  /** The [`variant_compare_at_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-ProductVariant.fields.compareAtPrice) attribute. */
  | "VARIANT_COMPARE_AT_PRICE"
  /** The [`variant_inventory`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-ProductVariant.fields.inventoryQuantity) attribute. */
  | "VARIANT_INVENTORY"
  /** This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true. */
  | "VARIANT_METAFIELD_DEFINITION"
  /** The [`variant_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-ProductVariant.fields.price) attribute. */
  | "VARIANT_PRICE"
  /** The [`variant_title`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-ProductVariant.fields.title) attribute. */
  | "VARIANT_TITLE"
  /** The [`variant_weight`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-ProductVariant.fields.inventoryItem.measurement.weight) attribute. */
  | "VARIANT_WEIGHT"
  /** The [`vendor`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-Product.fields.vendor) attribute. */
  | "VENDOR"
  | "%future added value"

/** Specifies object for the condition of the rule. */
export type ShopifyCollectionRuleConditionObject =
  | ShopifyCollectionRuleCategoryCondition
  | ShopifyCollectionRuleMetafieldCondition
  | ShopifyCollectionRuleProductCategoryCondition
  | ShopifyCollectionRuleTextCondition

/**
 * Defines the available columns and relationships that can be used when creating rules for smart collections. This provides the schema for building automated collection logic based on product attributes.
 *
 * For example, merchants can create rules like "product type equals 'Shirts'" or "vendor contains 'Nike'" using the conditions defined in this object to automatically populate collections.
 *
 * Use `CollectionRuleConditions` to:
 * - Discovering valid field options for smart collection rule interfaces
 * - Understanding which conditions are available for automated collections
 * - Exploring available product attributes for collection automation
 * - Learning about proper field relationships for rule implementation
 *
 * The conditions define which product fields can be used in smart collection rules and what types of comparisons are allowed for each field.
 *
 * Learn more about [smart collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection).
 */
export interface ShopifyCollectionRuleConditions {
  __typename?: "CollectionRuleConditions"
  /** Allowed relations of the rule. */
  allowedRelations: Array<ShopifyCollectionRuleRelation>
  /** Most commonly used relation for this rule. */
  defaultRelation: ShopifyCollectionRuleRelation
  /** Additional attributes defining the rule. */
  ruleObject?: Maybe<ShopifyCollectionRuleConditionsRuleObject>
  /** Type of the rule. */
  ruleType: ShopifyCollectionRuleColumn
}

/** Specifies object with additional rule attributes. */
export type ShopifyCollectionRuleConditionsRuleObject =
  ShopifyCollectionRuleMetafieldCondition

/** The input fields for a rule to associate with a collection. */
export interface ShopifyCollectionRuleInput {
  /** The attribute that the rule focuses on. For example, `title` or `product_type`. */
  column: ShopifyCollectionRuleColumn
  /** The value that the operator is applied to. For example, `Hats`. */
  condition: Scalars["String"]["input"]
  /**
   * The object ID that points to additional attributes for the collection rule.
   * This is only required when using metafield definition rules.
   */
  conditionObjectId?: InputMaybe<Scalars["ID"]["input"]>
  /** The type of operator that the rule is based on. For example, `equals`, `contains`, or `not_equals`. */
  relation: ShopifyCollectionRuleRelation
}

/** Identifies a metafield definition used as a rule for the smart collection. */
export interface ShopifyCollectionRuleMetafieldCondition {
  __typename?: "CollectionRuleMetafieldCondition"
  /** The metafield definition associated with the condition. */
  metafieldDefinition: ShopifyMetafieldDefinition
}

/** Specifies the condition for a Product Category field. */
export interface ShopifyCollectionRuleProductCategoryCondition {
  __typename?: "CollectionRuleProductCategoryCondition"
  /** The value of the condition. */
  value: ShopifyProductTaxonomyNode
}

/** Specifies the relationship between the `column` and the `condition`. */
export type ShopifyCollectionRuleRelation =
  /** The attribute contains the condition. */
  | "CONTAINS"
  /** The attribute ends with the condition. */
  | "ENDS_WITH"
  /** The attribute is equal to the condition. */
  | "EQUALS"
  /** The attribute is greater than the condition. */
  | "GREATER_THAN"
  /** The attribute is not set (equal to `null`). */
  | "IS_NOT_SET"
  /** The attribute is set (not equal to `null`). */
  | "IS_SET"
  /** The attribute is less than the condition. */
  | "LESS_THAN"
  /** The attribute does not contain the condition. */
  | "NOT_CONTAINS"
  /** The attribute does not equal the condition. */
  | "NOT_EQUALS"
  /** The attribute starts with the condition. */
  | "STARTS_WITH"
  | "%future added value"

/** The set of rules that are used to determine which products are included in the collection. */
export interface ShopifyCollectionRuleSet {
  __typename?: "CollectionRuleSet"
  /**
   * Whether products must match any or all of the rules to be included in the collection.
   * If true, then products must match at least one of the rules to be included in the collection.
   * If false, then products must match all of the rules to be included in the collection.
   */
  appliedDisjunctively: Scalars["Boolean"]["output"]
  /** The rules used to assign products to the collection. */
  rules: Array<ShopifyCollectionRule>
}

/** The input fields for a rule set of the collection. */
export interface ShopifyCollectionRuleSetInput {
  /**
   * Whether products must match any or all of the rules to be included in the collection.
   * If true, then products must match at least one of the rules to be included in the collection.
   * If false, then products must match all of the rules to be included in the collection.
   */
  appliedDisjunctively: Scalars["Boolean"]["input"]
  /** The rules used to assign products to the collection. */
  rules?: InputMaybe<Array<ShopifyCollectionRuleInput>>
}

/** Specifies the condition for a text field. */
export interface ShopifyCollectionRuleTextCondition {
  __typename?: "CollectionRuleTextCondition"
  /** The value of the condition. */
  value: Scalars["String"]["output"]
}

/** The set of valid sort keys for the Collection query. */
export type ShopifyCollectionSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  /** Sort by the `title` value. */
  | "TITLE"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** Specifies the sort order for the products in the collection. */
export type ShopifyCollectionSortOrder =
  /** Alphabetically, in ascending order (A - Z). */
  | "ALPHA_ASC"
  /** Alphabetically, in descending order (Z - A). */
  | "ALPHA_DESC"
  /** By best-selling products. */
  | "BEST_SELLING"
  /** By date created, in ascending order (oldest - newest). */
  | "CREATED"
  /** By date created, in descending order (newest - oldest). */
  | "CREATED_DESC"
  /** In the order set manually by the merchant. */
  | "MANUAL"
  /** By price, in ascending order (lowest - highest). */
  | "PRICE_ASC"
  /** By price, in descending order (highest - lowest). */
  | "PRICE_DESC"
  | "%future added value"

/** The input fields for specifying the collection to unpublish and the sales channels to remove it from. */
export interface ShopifyCollectionUnpublishInput {
  /** The channels where the collection is published. */
  collectionPublications: Array<ShopifyCollectionPublicationInput>
  /** The collection to create or update publications for. */
  id: Scalars["ID"]["input"]
}

/** Return type for `collectionUnpublish` mutation. */
export interface ShopifyCollectionUnpublishPayload {
  __typename?: "CollectionUnpublishPayload"
  /** The collection that has been unpublished. */
  collection?: Maybe<ShopifyCollection>
  /** The shop associated with the collection. */
  shop: ShopifyShop
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `collectionUpdate` mutation. */
export interface ShopifyCollectionUpdatePayload {
  __typename?: "CollectionUpdatePayload"
  /** The updated collection. */
  collection?: Maybe<ShopifyCollection>
  /** The asynchronous job updating the products based on the new rule set. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** A combined listing of products. */
export interface ShopifyCombinedListing {
  __typename?: "CombinedListing"
  /** A list of child products in the combined listing. */
  combinedListingChildren: ShopifyCombinedListingChildConnection
  /** The parent product. */
  parentProduct: ShopifyProduct
}

/** A combined listing of products. */
export interface ShopifyCombinedListingCombinedListingChildrenArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A child of a combined listing. */
export interface ShopifyCombinedListingChild {
  __typename?: "CombinedListingChild"
  /** The parent variant. */
  parentVariant: ShopifyProductVariant
  /** The child product. */
  product: ShopifyProduct
}

/** An auto-generated type for paginating through multiple CombinedListingChildren. */
export interface ShopifyCombinedListingChildConnection {
  __typename?: "CombinedListingChildConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCombinedListingChildEdge>
  /** A list of nodes that are contained in CombinedListingChildEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCombinedListingChild>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one CombinedListingChild and a cursor during pagination. */
export interface ShopifyCombinedListingChildEdge {
  __typename?: "CombinedListingChildEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CombinedListingChildEdge. */
  node: ShopifyCombinedListingChild
}

/** Return type for `combinedListingUpdate` mutation. */
export interface ShopifyCombinedListingUpdatePayload {
  __typename?: "CombinedListingUpdatePayload"
  /** The parent product. */
  product?: Maybe<ShopifyProduct>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCombinedListingUpdateUserError>
}

/** An error that occurs during the execution of `CombinedListingUpdate`. */
export interface ShopifyCombinedListingUpdateUserError
  extends ShopifyDisplayableError {
  __typename?: "CombinedListingUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyCombinedListingUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CombinedListingUpdateUserError`. */
export type ShopifyCombinedListingUpdateUserErrorCode =
  /** Unable to add duplicated products. */
  | "CANNOT_HAVE_DUPLICATED_PRODUCTS"
  /** Unable to add a product that is a parent. */
  | "CANNOT_HAVE_PARENT_AS_CHILD"
  /** Unable to add products with repeated options. */
  | "CANNOT_HAVE_REPEATED_OPTIONS"
  /** Option values cannot be repeated. */
  | "CANNOT_HAVE_REPEATED_OPTION_VALUES"
  /** Unable to add options values that are already in use. */
  | "CANT_ADD_OPTIONS_VALUES_IF_ALREADY_EXISTS"
  /** Combined listings feature is not enabled. */
  | "COMBINED_LISTINGS_NOT_ENABLED"
  /** Cannot perform edit and remove on same products. */
  | "EDIT_AND_REMOVE_ON_SAME_PRODUCTS"
  /** Unable to add products. */
  | "FAILED_TO_ADD_PRODUCTS"
  /** Unable to remove products. */
  | "FAILED_TO_REMOVE_PRODUCTS"
  /** Unable to update products. */
  | "FAILED_TO_UPDATE_PRODUCTS"
  /** The same metafield cannot be linked to multiple options. */
  | "LINKED_METAFIELDS_CANNOT_BE_REPEATED"
  /** An option linked to a metafield cannot be linked to a different metafield. */
  | "LINKED_METAFIELD_CANNOT_BE_CHANGED"
  /** Linked metafield value missing from `optionsAndValues` field. */
  | "LINKED_METAFIELD_VALUE_MISSING"
  /** Linked options are currently not supported for this shop. */
  | "LINKED_OPTIONS_NOT_SUPPORTED_FOR_SHOP"
  /** The optionsAndValues field is required for this operation. */
  | "MISSING_OPTION_VALUES"
  /** Selected option values cannot be empty. */
  | "MUST_HAVE_SELECTED_OPTION_VALUES"
  /** All child products must include the same options. */
  | "OPTIONS_MUST_BE_EQUAL_TO_THE_OTHER_COMPONENTS"
  /** Unable to add products with blank option names. */
  | "OPTION_NAME_CANNOT_BE_BLANK"
  /** Option name contains invalid characters. */
  | "OPTION_NAME_CONTAINS_INVALID_CHARACTERS"
  /** Option does not exist. */
  | "OPTION_NOT_FOUND"
  /** Unable to update options with blank option values. */
  | "OPTION_VALUES_CANNOT_BE_BLANK"
  /** Unable to update options with no option values. */
  | "OPTION_VALUES_CANNOT_BE_EMPTY"
  /** The options_and_values field must contain all option values used in the combined listing. */
  | "OPTION_VALUES_MUST_BE_COMPLETE"
  /** Parent product cannot be a combined listing child. */
  | "PARENT_PRODUCT_CANNOT_BE_COMBINED_LISTING_CHILD"
  /** Unable to update components for a product that isn't a combined listing. */
  | "PARENT_PRODUCT_MUST_BE_A_COMBINED_LISTING"
  /** The combined listing parent product must have a product category to use linked metafield options. */
  | "PARENT_PRODUCT_MUST_HAVE_CATEGORY"
  /** Parent product not found. */
  | "PARENT_PRODUCT_NOT_FOUND"
  /** Unable to add a product that is already a child. */
  | "PRODUCT_IS_ALREADY_A_CHILD"
  /** Failed to remove mebmership due to invalid input. */
  | "PRODUCT_MEMBERSHIP_NOT_FOUND"
  /** Unable to add products that do not exist. */
  | "PRODUCT_NOT_FOUND"
  /** The title cannot be longer than 255 characters. */
  | "TITLE_TOO_LONG"
  /** You have reached the maximum number of products that can be added to an individual combined listing. */
  | "TOO_MANY_PRODUCTS"
  /** You have reached the maximum number of variants across all products for an individual combined listing. */
  | "TOO_MANY_VARIANTS"
  /** An unexpected error occurred. */
  | "UNEXPECTED_ERROR"
  | "%future added value"

/** The role of the combined listing. */
export type ShopifyCombinedListingsRole =
  /** The product is the child of a combined listing. */
  | "CHILD"
  /** The product is the parent of a combined listing. */
  | "PARENT"
  | "%future added value"

/** A comment on an article. */
export interface ShopifyComment extends ShopifyHasEvents, ShopifyNode {
  __typename?: "Comment"
  /** The article associated with the comment. */
  article?: Maybe<ShopifyArticle>
  /** The comment’s author. */
  author: ShopifyCommentAuthor
  /** The content of the comment. */
  body: Scalars["String"]["output"]
  /** The content of the comment, complete with HTML formatting. */
  bodyHtml: Scalars["HTML"]["output"]
  /** The date and time when the comment was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The paginated list of events associated with the host subject. */
  events: ShopifyEventConnection
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The IP address of the commenter. */
  ip?: Maybe<Scalars["String"]["output"]>
  /** Whether or not the comment is published. */
  isPublished: Scalars["Boolean"]["output"]
  /** The date and time when the comment was published. */
  publishedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The status of the comment. */
  status: ShopifyCommentStatus
  /** The date and time when the comment was last updated. */
  updatedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The user agent of the commenter. */
  userAgent?: Maybe<Scalars["String"]["output"]>
}

/** A comment on an article. */
export interface ShopifyCommentEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/** Return type for `commentApprove` mutation. */
export interface ShopifyCommentApprovePayload {
  __typename?: "CommentApprovePayload"
  /** The comment that was approved. */
  comment?: Maybe<ShopifyComment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCommentApproveUserError>
}

/** An error that occurs during the execution of `CommentApprove`. */
export interface ShopifyCommentApproveUserError
  extends ShopifyDisplayableError {
  __typename?: "CommentApproveUserError"
  /** The error code. */
  code?: Maybe<ShopifyCommentApproveUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CommentApproveUserError`. */
export type ShopifyCommentApproveUserErrorCode =
  /** The record with the ID used as the input value couldn't be found. */
  "NOT_FOUND" | "%future added value"

/** The author of a comment. */
export interface ShopifyCommentAuthor {
  __typename?: "CommentAuthor"
  /** The author's email. */
  email: Scalars["String"]["output"]
  /** The author’s name. */
  name: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple Comments. */
export interface ShopifyCommentConnection {
  __typename?: "CommentConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCommentEdge>
  /** A list of nodes that are contained in CommentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyComment>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `commentDelete` mutation. */
export interface ShopifyCommentDeletePayload {
  __typename?: "CommentDeletePayload"
  /** The ID of the comment that was deleted. */
  deletedCommentId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCommentDeleteUserError>
}

/** An error that occurs during the execution of `CommentDelete`. */
export interface ShopifyCommentDeleteUserError extends ShopifyDisplayableError {
  __typename?: "CommentDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyCommentDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CommentDeleteUserError`. */
export type ShopifyCommentDeleteUserErrorCode =
  /** The record with the ID used as the input value couldn't be found. */
  "NOT_FOUND" | "%future added value"

/** An auto-generated type which holds one Comment and a cursor during pagination. */
export interface ShopifyCommentEdge {
  __typename?: "CommentEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CommentEdge. */
  node: ShopifyComment
}

/**
 * Comment events are generated by staff members of a shop.
 * They are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.
 */
export interface ShopifyCommentEvent extends ShopifyEvent, ShopifyNode {
  __typename?: "CommentEvent"
  /** The action that occured. */
  action: Scalars["String"]["output"]
  /** The name of the app that created the event. */
  appTitle?: Maybe<Scalars["String"]["output"]>
  /** The attachments associated with the comment event. */
  attachments: Array<ShopifyCommentEventAttachment>
  /** Whether the event was created by an app. */
  attributeToApp: Scalars["Boolean"]["output"]
  /** Whether the event was caused by an admin user. */
  attributeToUser: Scalars["Boolean"]["output"]
  /** The name of the user that authored the comment event. */
  author: ShopifyStaffMember
  /** Whether the comment event can be deleted. If true, then the comment event can be deleted. */
  canDelete: Scalars["Boolean"]["output"]
  /** Whether the comment event can be edited. If true, then the comment event can be edited. */
  canEdit: Scalars["Boolean"]["output"]
  /** The date and time when the event was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** Whether the event is critical. */
  criticalAlert: Scalars["Boolean"]["output"]
  /** Whether the comment event has been edited. If true, then the comment event has been edited. */
  edited: Scalars["Boolean"]["output"]
  /** The object reference associated with the comment event. For example, a product or discount). */
  embed?: Maybe<ShopifyCommentEventEmbed>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Human readable text that describes the event. */
  message: Scalars["FormattedString"]["output"]
  /** The raw body of the comment event. */
  rawMessage: Scalars["String"]["output"]
  /** The parent subject to which the comment event belongs. */
  subject?: Maybe<ShopifyCommentEventSubject>
}

/** A file attachment associated to a comment event. */
export interface ShopifyCommentEventAttachment {
  __typename?: "CommentEventAttachment"
  /** The file extension of the comment event attachment, indicating the file format. */
  fileExtension?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The image attached to the comment event. */
  image?: Maybe<ShopifyImage>
  /** The filename of the comment event attachment. */
  name: Scalars["String"]["output"]
  /** The size of the attachment. */
  size: Scalars["Int"]["output"]
  /** The URL of the attachment. */
  url: Scalars["URL"]["output"]
}

/** The main embed of a comment event. */
export type ShopifyCommentEventEmbed =
  | ShopifyCustomer
  | ShopifyDraftOrder
  | ShopifyInventoryTransfer
  | ShopifyOrder
  | ShopifyProduct
  | ShopifyProductVariant

/** The subject line of a comment event. */
export interface ShopifyCommentEventSubject {
  /** Whether the timeline subject has a timeline comment. If true, then a timeline comment exists. */
  hasTimelineComment: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
}

/** Return type for `commentNotSpam` mutation. */
export interface ShopifyCommentNotSpamPayload {
  __typename?: "CommentNotSpamPayload"
  /** The comment that was marked as not spam. */
  comment?: Maybe<ShopifyComment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCommentNotSpamUserError>
}

/** An error that occurs during the execution of `CommentNotSpam`. */
export interface ShopifyCommentNotSpamUserError
  extends ShopifyDisplayableError {
  __typename?: "CommentNotSpamUserError"
  /** The error code. */
  code?: Maybe<ShopifyCommentNotSpamUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CommentNotSpamUserError`. */
export type ShopifyCommentNotSpamUserErrorCode =
  /** The record with the ID used as the input value couldn't be found. */
  "NOT_FOUND" | "%future added value"

/** Possible comment policies for a blog. */
export type ShopifyCommentPolicy =
  /** Readers can post comments to blog articles without moderation. */
  | "AUTO_PUBLISHED"
  /** Readers cannot post comments to blog articles. */
  | "CLOSED"
  /** Readers can post comments to blog articles, but comments must be moderated before they appear. */
  | "MODERATED"
  | "%future added value"

/** The set of valid sort keys for the Comment query. */
export type ShopifyCommentSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  | "%future added value"

/** Return type for `commentSpam` mutation. */
export interface ShopifyCommentSpamPayload {
  __typename?: "CommentSpamPayload"
  /** The comment that was marked as spam. */
  comment?: Maybe<ShopifyComment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCommentSpamUserError>
}

/** An error that occurs during the execution of `CommentSpam`. */
export interface ShopifyCommentSpamUserError extends ShopifyDisplayableError {
  __typename?: "CommentSpamUserError"
  /** The error code. */
  code?: Maybe<ShopifyCommentSpamUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CommentSpamUserError`. */
export type ShopifyCommentSpamUserErrorCode =
  /** The record with the ID used as the input value couldn't be found. */
  "NOT_FOUND" | "%future added value"

/** The status of a comment. */
export type ShopifyCommentStatus =
  /** The comment is pending approval. */
  | "PENDING"
  /** The comment is published. */
  | "PUBLISHED"
  /** The comment has been removed. */
  | "REMOVED"
  /** The comment is marked as spam. */
  | "SPAM"
  /** The comment is unapproved. */
  | "UNAPPROVED"
  | "%future added value"

/** Return type for `companiesDelete` mutation. */
export interface ShopifyCompaniesDeletePayload {
  __typename?: "CompaniesDeletePayload"
  /** A list of IDs of the deleted companies. */
  deletedCompanyIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Represents information about a company which is also a customer of the shop. */
export interface ShopifyCompany
  extends ShopifyCommentEventSubject,
    ShopifyHasEvents,
    ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyNavigable,
    ShopifyNode {
  __typename?: "Company"
  /**
   * The number of contacts that belong to the company.
   * @deprecated Use `contactsCount` instead.
   */
  contactCount: Scalars["Int"]["output"]
  /** The list of roles for the company contacts. */
  contactRoles: ShopifyCompanyContactRoleConnection
  /** The list of contacts in the company. */
  contacts: ShopifyCompanyContactConnection
  /** The number of contacts that belong to the company. */
  contactsCount?: Maybe<ShopifyCount>
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was created in Shopify. */
  createdAt: Scalars["DateTime"]["output"]
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company became the customer. */
  customerSince: Scalars["DateTime"]["output"]
  /** A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars["String"]["output"]
  /** The role proposed by default for a contact at the company. */
  defaultRole?: Maybe<ShopifyCompanyContactRole>
  /** The list of the company's draft orders. */
  draftOrders: ShopifyDraftOrderConnection
  /** The paginated list of events associated with the host subject. */
  events: ShopifyEventConnection
  /** A unique externally-supplied ID for the company. */
  externalId?: Maybe<Scalars["String"]["output"]>
  /** Whether the merchant added a timeline comment to the company. */
  hasTimelineComment: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The lifetime duration of the company, since it became a customer of the shop. Examples: `2 days`, `3 months`, `1 year`. */
  lifetimeDuration: Scalars["String"]["output"]
  /** The list of locations in the company. */
  locations: ShopifyCompanyLocationConnection
  /** The number of locations that belong to the company. */
  locationsCount?: Maybe<ShopifyCount>
  /** The main contact for the company. */
  mainContact?: Maybe<ShopifyCompanyContact>
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** The name of the company. */
  name: Scalars["String"]["output"]
  /** A note about the company. */
  note?: Maybe<Scalars["String"]["output"]>
  /** The list of the company's orders. */
  orders: ShopifyOrderConnection
  /** The total number of orders placed for this company, across all its locations. */
  ordersCount?: Maybe<ShopifyCount>
  /** The total amount spent by this company, across all its locations. */
  totalSpent: ShopifyMoneyV2
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was last modified. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** Represents information about a company which is also a customer of the shop. */
export interface ShopifyCompanyContactRolesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCompanyContactRoleSortKeys>
}

/** Represents information about a company which is also a customer of the shop. */
export interface ShopifyCompanyContactsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCompanyContactSortKeys>
}

/** Represents information about a company which is also a customer of the shop. */
export interface ShopifyCompanyDraftOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyDraftOrderSortKeys>
}

/** Represents information about a company which is also a customer of the shop. */
export interface ShopifyCompanyEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/** Represents information about a company which is also a customer of the shop. */
export interface ShopifyCompanyLocationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCompanyLocationSortKeys>
}

/** Represents information about a company which is also a customer of the shop. */
export interface ShopifyCompanyMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** Represents information about a company which is also a customer of the shop. */
export interface ShopifyCompanyMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/** Represents information about a company which is also a customer of the shop. */
export interface ShopifyCompanyMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents information about a company which is also a customer of the shop. */
export interface ShopifyCompanyOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyOrderSortKeys>
}

/** Represents a billing or shipping address for a company location. */
export interface ShopifyCompanyAddress extends ShopifyNode {
  __typename?: "CompanyAddress"
  /** The first line of the address. Typically the street address or PO Box number. */
  address1: Scalars["String"]["output"]
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: Maybe<Scalars["String"]["output"]>
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars["String"]["output"]>
  /** The name of the company. */
  companyName: Scalars["String"]["output"]
  /** The name of the country. */
  country?: Maybe<Scalars["String"]["output"]>
  /**
   * The two-letter code for the country of the address.
   * For example, US.
   */
  countryCode: ShopifyCountryCode
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company address was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The first name of the recipient. */
  firstName?: Maybe<Scalars["String"]["output"]>
  /** The formatted version of the address. */
  formattedAddress: Array<Scalars["String"]["output"]>
  /** A comma-separated list of the values for city, province, and country. */
  formattedArea?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The last name of the recipient. */
  lastName?: Maybe<Scalars["String"]["output"]>
  /**
   * A unique phone number for the customer.
   * Formatted using E.164 standard. For example, _+16135551111_.
   */
  phone?: Maybe<Scalars["String"]["output"]>
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars["String"]["output"]>
  /** The identity of the recipient e.g. 'Receiving Department'. */
  recipient?: Maybe<Scalars["String"]["output"]>
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company address was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars["String"]["output"]>
  /**
   * The alphanumeric code for the region.
   * For example, ON.
   */
  zoneCode?: Maybe<Scalars["String"]["output"]>
}

/** Represents a billing or shipping address for a company location. */
export interface ShopifyCompanyAddressFormattedAddressArgs {
  withCompanyName?: InputMaybe<Scalars["Boolean"]["input"]>
  withName?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `companyAddressDelete` mutation. */
export interface ShopifyCompanyAddressDeletePayload {
  __typename?: "CompanyAddressDeletePayload"
  /** The ID of the deleted address. */
  deletedAddressId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** The input fields to create or update the address of a company location. */
export interface ShopifyCompanyAddressInput {
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: InputMaybe<Scalars["String"]["input"]>
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the city, district, village, or town. */
  city?: InputMaybe<Scalars["String"]["input"]>
  /** The two-letter code ([ISO 3166-1 alpha-2]](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format) for the country of the address. For example, `US`` for the United States. */
  countryCode?: InputMaybe<ShopifyCountryCode>
  /** The first name of the recipient. */
  firstName?: InputMaybe<Scalars["String"]["input"]>
  /** The last name of the recipient. */
  lastName?: InputMaybe<Scalars["String"]["input"]>
  /** A phone number for the recipient. Formatted using E.164 standard. For example, _+16135551111_. */
  phone?: InputMaybe<Scalars["String"]["input"]>
  /** The identity of the recipient e.g. 'Receiving Department'. */
  recipient?: InputMaybe<Scalars["String"]["input"]>
  /** The zip or postal code of the address. */
  zip?: InputMaybe<Scalars["String"]["input"]>
  /** The alphanumeric code for the region of the address, such as the province, state, or district. For example, `ON` for Ontario, Canada. */
  zoneCode?: InputMaybe<Scalars["String"]["input"]>
}

/** The valid values for the address type of a company. */
export type ShopifyCompanyAddressType =
  /** The address is a billing address. */
  | "BILLING"
  /** The address is a shipping address. */
  | "SHIPPING"
  | "%future added value"

/** Return type for `companyAssignCustomerAsContact` mutation. */
export interface ShopifyCompanyAssignCustomerAsContactPayload {
  __typename?: "CompanyAssignCustomerAsContactPayload"
  /** The created company contact. */
  companyContact?: Maybe<ShopifyCompanyContact>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyAssignMainContact` mutation. */
export interface ShopifyCompanyAssignMainContactPayload {
  __typename?: "CompanyAssignMainContactPayload"
  /** The company for which the main contact is assigned. */
  company?: Maybe<ShopifyCompany>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** An auto-generated type for paginating through multiple Companies. */
export interface ShopifyCompanyConnection {
  __typename?: "CompanyConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCompanyEdge>
  /** A list of nodes that are contained in CompanyEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCompany>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** A person that acts on behalf of company associated to [a customer](https://shopify.dev/api/admin-graphql/latest/objects/customer). */
export interface ShopifyCompanyContact extends ShopifyNode {
  __typename?: "CompanyContact"
  /** The company to which the contact belongs. */
  company: ShopifyCompany
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company contact was created at Shopify. */
  createdAt: Scalars["DateTime"]["output"]
  /** The customer associated to this contact. */
  customer: ShopifyCustomer
  /** The list of draft orders for the company contact. */
  draftOrders: ShopifyDraftOrderConnection
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Whether the contact is the main contact of the company. */
  isMainContact: Scalars["Boolean"]["output"]
  /** The lifetime duration of the company contact, since its creation date on Shopify. Examples: `1 year`, `2 months`, `3 days`. */
  lifetimeDuration: Scalars["String"]["output"]
  /** The company contact's locale (language). */
  locale?: Maybe<Scalars["String"]["output"]>
  /** The list of orders for the company contact. */
  orders: ShopifyOrderConnection
  /** The list of roles assigned to this company contact. */
  roleAssignments: ShopifyCompanyContactRoleAssignmentConnection
  /** The company contact's job title. */
  title?: Maybe<Scalars["String"]["output"]>
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company contact was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** A person that acts on behalf of company associated to [a customer](https://shopify.dev/api/admin-graphql/latest/objects/customer). */
export interface ShopifyCompanyContactDraftOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyDraftOrderSortKeys>
}

/** A person that acts on behalf of company associated to [a customer](https://shopify.dev/api/admin-graphql/latest/objects/customer). */
export interface ShopifyCompanyContactOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyOrderSortKeys>
}

/** A person that acts on behalf of company associated to [a customer](https://shopify.dev/api/admin-graphql/latest/objects/customer). */
export interface ShopifyCompanyContactRoleAssignmentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCompanyContactRoleAssignmentSortKeys>
}

/** Return type for `companyContactAssignRole` mutation. */
export interface ShopifyCompanyContactAssignRolePayload {
  __typename?: "CompanyContactAssignRolePayload"
  /** The company contact role assignment. */
  companyContactRoleAssignment?: Maybe<ShopifyCompanyContactRoleAssignment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyContactAssignRoles` mutation. */
export interface ShopifyCompanyContactAssignRolesPayload {
  __typename?: "CompanyContactAssignRolesPayload"
  /** A list of newly created assignments of company contacts to a company location. */
  roleAssignments?: Maybe<Array<ShopifyCompanyContactRoleAssignment>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** An auto-generated type for paginating through multiple CompanyContacts. */
export interface ShopifyCompanyContactConnection {
  __typename?: "CompanyContactConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCompanyContactEdge>
  /** A list of nodes that are contained in CompanyContactEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCompanyContact>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `companyContactCreate` mutation. */
export interface ShopifyCompanyContactCreatePayload {
  __typename?: "CompanyContactCreatePayload"
  /** The created company contact. */
  companyContact?: Maybe<ShopifyCompanyContact>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyContactDelete` mutation. */
export interface ShopifyCompanyContactDeletePayload {
  __typename?: "CompanyContactDeletePayload"
  /** The ID of the deleted company contact. */
  deletedCompanyContactId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** An auto-generated type which holds one CompanyContact and a cursor during pagination. */
export interface ShopifyCompanyContactEdge {
  __typename?: "CompanyContactEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CompanyContactEdge. */
  node: ShopifyCompanyContact
}

/** The input fields for company contact attributes when creating or updating a company contact. */
export interface ShopifyCompanyContactInput {
  /** The unique email address of the company contact. */
  email?: InputMaybe<Scalars["String"]["input"]>
  /** The company contact's first name. */
  firstName?: InputMaybe<Scalars["String"]["input"]>
  /** The company contact's last name. */
  lastName?: InputMaybe<Scalars["String"]["input"]>
  /** The contact's locale. */
  locale?: InputMaybe<Scalars["String"]["input"]>
  /** The phone number of the company contact. */
  phone?: InputMaybe<Scalars["String"]["input"]>
  /** The title of the company contact. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `companyContactRemoveFromCompany` mutation. */
export interface ShopifyCompanyContactRemoveFromCompanyPayload {
  __typename?: "CompanyContactRemoveFromCompanyPayload"
  /** The ID of the removed company contact. */
  removedCompanyContactId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyContactRevokeRole` mutation. */
export interface ShopifyCompanyContactRevokeRolePayload {
  __typename?: "CompanyContactRevokeRolePayload"
  /** The role assignment that was revoked. */
  revokedCompanyContactRoleAssignmentId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyContactRevokeRoles` mutation. */
export interface ShopifyCompanyContactRevokeRolesPayload {
  __typename?: "CompanyContactRevokeRolesPayload"
  /** A list of role assignment IDs that were removed from the company contact. */
  revokedRoleAssignmentIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** The role for a [company contact](https://shopify.dev/api/admin-graphql/latest/objects/companycontact). */
export interface ShopifyCompanyContactRole extends ShopifyNode {
  __typename?: "CompanyContactRole"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * The name of a role.
   * For example, `admin` or `buyer`.
   */
  name: Scalars["String"]["output"]
  /** A note for the role. */
  note?: Maybe<Scalars["String"]["output"]>
}

/** The input fields for the role and location to assign to a company contact. */
export interface ShopifyCompanyContactRoleAssign {
  /** The role ID. */
  companyContactRoleId: Scalars["ID"]["input"]
  /** The location. */
  companyLocationId: Scalars["ID"]["input"]
}

/** The CompanyContactRoleAssignment describes the company and location associated to a company contact's role. */
export interface ShopifyCompanyContactRoleAssignment extends ShopifyNode {
  __typename?: "CompanyContactRoleAssignment"
  /** The company this role assignment belongs to. */
  company: ShopifyCompany
  /** The company contact for whom this role is assigned. */
  companyContact: ShopifyCompanyContact
  /** The company location to which the role is assigned. */
  companyLocation: ShopifyCompanyLocation
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The role that's assigned to the company contact. */
  role: ShopifyCompanyContactRole
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** An auto-generated type for paginating through multiple CompanyContactRoleAssignments. */
export interface ShopifyCompanyContactRoleAssignmentConnection {
  __typename?: "CompanyContactRoleAssignmentConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCompanyContactRoleAssignmentEdge>
  /** A list of nodes that are contained in CompanyContactRoleAssignmentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCompanyContactRoleAssignment>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one CompanyContactRoleAssignment and a cursor during pagination. */
export interface ShopifyCompanyContactRoleAssignmentEdge {
  __typename?: "CompanyContactRoleAssignmentEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CompanyContactRoleAssignmentEdge. */
  node: ShopifyCompanyContactRoleAssignment
}

/** The set of valid sort keys for the CompanyContactRoleAssignment query. */
export type ShopifyCompanyContactRoleAssignmentSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `location_name` value. */
  | "LOCATION_NAME"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** An auto-generated type for paginating through multiple CompanyContactRoles. */
export interface ShopifyCompanyContactRoleConnection {
  __typename?: "CompanyContactRoleConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCompanyContactRoleEdge>
  /** A list of nodes that are contained in CompanyContactRoleEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCompanyContactRole>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one CompanyContactRole and a cursor during pagination. */
export interface ShopifyCompanyContactRoleEdge {
  __typename?: "CompanyContactRoleEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CompanyContactRoleEdge. */
  node: ShopifyCompanyContactRole
}

/** The set of valid sort keys for the CompanyContactRole query. */
export type ShopifyCompanyContactRoleSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** Return type for `companyContactSendWelcomeEmail` mutation. */
export interface ShopifyCompanyContactSendWelcomeEmailPayload {
  __typename?: "CompanyContactSendWelcomeEmailPayload"
  /** The company contact to whom a welcome email was sent. */
  companyContact?: Maybe<ShopifyCompanyContact>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** The set of valid sort keys for the CompanyContact query. */
export type ShopifyCompanyContactSortKeys =
  /** Sort by the `company_id` value. */
  | "COMPANY_ID"
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `email` value. */
  | "EMAIL"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `name` value. */
  | "NAME"
  /** Sort by the `name_email` value. */
  | "NAME_EMAIL"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  /** Sort by the `title` value. */
  | "TITLE"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** Return type for `companyContactUpdate` mutation. */
export interface ShopifyCompanyContactUpdatePayload {
  __typename?: "CompanyContactUpdatePayload"
  /** The updated company contact. */
  companyContact?: Maybe<ShopifyCompanyContact>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyContactsDelete` mutation. */
export interface ShopifyCompanyContactsDeletePayload {
  __typename?: "CompanyContactsDeletePayload"
  /** The list of IDs of the deleted company contacts. */
  deletedCompanyContactIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** The input fields and values for creating a company and its associated resources. */
export interface ShopifyCompanyCreateInput {
  /** The attributes for the company. */
  company: ShopifyCompanyInput
  /** The attributes for the company contact. */
  companyContact?: InputMaybe<ShopifyCompanyContactInput>
  /** The attributes for the company location. */
  companyLocation?: InputMaybe<ShopifyCompanyLocationInput>
}

/** Return type for `companyCreate` mutation. */
export interface ShopifyCompanyCreatePayload {
  __typename?: "CompanyCreatePayload"
  /** The created company. */
  company?: Maybe<ShopifyCompany>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyDelete` mutation. */
export interface ShopifyCompanyDeletePayload {
  __typename?: "CompanyDeletePayload"
  /** The ID of the deleted company. */
  deletedCompanyId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** An auto-generated type which holds one Company and a cursor during pagination. */
export interface ShopifyCompanyEdge {
  __typename?: "CompanyEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CompanyEdge. */
  node: ShopifyCompany
}

/** The input fields for company attributes when creating or updating a company. */
export interface ShopifyCompanyInput {
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at
   *           which the company became the customer.
   */
  customerSince?: InputMaybe<Scalars["DateTime"]["input"]>
  /** A unique externally-supplied ID for the company. */
  externalId?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the company. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** A note about the company. */
  note?: InputMaybe<Scalars["String"]["input"]>
}

/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export interface ShopifyCompanyLocation
  extends ShopifyCommentEventSubject,
    ShopifyHasEvents,
    ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyNavigable,
    ShopifyNode {
  __typename?: "CompanyLocation"
  /** The address used as billing address for the location. */
  billingAddress?: Maybe<ShopifyCompanyAddress>
  /** The configuration for the buyer's B2B checkout. */
  buyerExperienceConfiguration?: Maybe<ShopifyBuyerExperienceConfiguration>
  /** The list of catalogs associated with the company location. */
  catalogs: ShopifyCatalogConnection
  /** The number of catalogs associated with the company location. Limited to a maximum of 10000 by default. */
  catalogsCount?: Maybe<ShopifyCount>
  /** The company that the company location belongs to. */
  company: ShopifyCompany
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company location was created in Shopify. */
  createdAt: Scalars["DateTime"]["output"]
  /** The location's currency based on the shipping address. If the shipping address is empty, then the value is the shop's primary market. */
  currency: ShopifyCurrencyCode
  /** A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars["String"]["output"]
  /** The list of draft orders for the company location. */
  draftOrders: ShopifyDraftOrderConnection
  /** The paginated list of events associated with the host subject. */
  events: ShopifyEventConnection
  /** A unique externally-supplied ID for the company location. */
  externalId?: Maybe<Scalars["String"]["output"]>
  /** Whether the merchant added a timeline comment to the company location. */
  hasTimelineComment: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Whether the company location is assigned a specific catalog. */
  inCatalog: Scalars["Boolean"]["output"]
  /** The preferred locale of the company location. */
  locale?: Maybe<Scalars["String"]["output"]>
  /**
   * The market that includes the location's shipping address. If the shipping address is empty, then the value is the shop's primary market.
   * @deprecated This `market` field will be removed in a future version of the API.
   */
  market: ShopifyMarket
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** The name of the company location. */
  name: Scalars["String"]["output"]
  /** A note about the company location. */
  note?: Maybe<Scalars["String"]["output"]>
  /**
   * The total number of orders placed for the location.
   * @deprecated Use `ordersCount` instead.
   */
  orderCount: Scalars["Int"]["output"]
  /** The list of orders for the company location. */
  orders: ShopifyOrderConnection
  /** The total number of orders placed for the location. */
  ordersCount?: Maybe<ShopifyCount>
  /** The phone number of the company location. */
  phone?: Maybe<Scalars["String"]["output"]>
  /** The list of roles assigned to the company location. */
  roleAssignments: ShopifyCompanyContactRoleAssignmentConnection
  /** The address used as shipping address for the location. */
  shippingAddress?: Maybe<ShopifyCompanyAddress>
  /** The list of staff members assigned to the company location. */
  staffMemberAssignments: ShopifyCompanyLocationStaffMemberAssignmentConnection
  /**
   * The list of tax exemptions applied to the location.
   * @deprecated Use `taxSettings` instead.
   */
  taxExemptions: Array<ShopifyTaxExemption>
  /**
   * The tax registration ID for the company location.
   * @deprecated Use `taxSettings` instead.
   */
  taxRegistrationId?: Maybe<Scalars["String"]["output"]>
  /** The tax settings for the company location. */
  taxSettings: ShopifyCompanyLocationTaxSettings
  /** The total amount spent by the location. */
  totalSpent: ShopifyMoneyV2
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company location was last modified. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export interface ShopifyCompanyLocationCatalogsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export interface ShopifyCompanyLocationCatalogsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
}

/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export interface ShopifyCompanyLocationDraftOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyDraftOrderSortKeys>
}

/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export interface ShopifyCompanyLocationEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export interface ShopifyCompanyLocationInCatalogArgs {
  catalogId: Scalars["ID"]["input"]
}

/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export interface ShopifyCompanyLocationMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export interface ShopifyCompanyLocationMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export interface ShopifyCompanyLocationMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export interface ShopifyCompanyLocationOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyOrderSortKeys>
}

/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export interface ShopifyCompanyLocationRoleAssignmentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCompanyContactRoleAssignmentSortKeys>
}

/** A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location. */
export interface ShopifyCompanyLocationStaffMemberAssignmentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCompanyLocationStaffMemberAssignmentSortKeys>
}

/** Return type for `companyLocationAssignAddress` mutation. */
export interface ShopifyCompanyLocationAssignAddressPayload {
  __typename?: "CompanyLocationAssignAddressPayload"
  /** The list of updated addresses on the company location. */
  addresses?: Maybe<Array<ShopifyCompanyAddress>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyLocationAssignRoles` mutation. */
export interface ShopifyCompanyLocationAssignRolesPayload {
  __typename?: "CompanyLocationAssignRolesPayload"
  /** A list of newly created assignments of company contacts to a company location. */
  roleAssignments?: Maybe<Array<ShopifyCompanyContactRoleAssignment>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyLocationAssignStaffMembers` mutation. */
export interface ShopifyCompanyLocationAssignStaffMembersPayload {
  __typename?: "CompanyLocationAssignStaffMembersPayload"
  /** The list of created staff member assignments. */
  companyLocationStaffMemberAssignments?: Maybe<
    Array<ShopifyCompanyLocationStaffMemberAssignment>
  >
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyLocationAssignTaxExemptions` mutation. */
export interface ShopifyCompanyLocationAssignTaxExemptionsPayload {
  __typename?: "CompanyLocationAssignTaxExemptionsPayload"
  /** The updated company location. */
  companyLocation?: Maybe<ShopifyCompanyLocation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** A list of products with publishing and pricing information associated with company locations. */
export interface ShopifyCompanyLocationCatalog
  extends ShopifyCatalog,
    ShopifyNode {
  __typename?: "CompanyLocationCatalog"
  /** The company locations associated with the catalog. */
  companyLocations: ShopifyCompanyLocationConnection
  /** The number of company locations associated with the catalog. */
  companyLocationsCount?: Maybe<ShopifyCount>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Most recent catalog operations. */
  operations: Array<ShopifyResourceOperation>
  /** The price list associated with the catalog. */
  priceList?: Maybe<ShopifyPriceList>
  /** A group of products and collections that's published to a catalog. */
  publication?: Maybe<ShopifyPublication>
  /** The status of the catalog. */
  status: ShopifyCatalogStatus
  /** The name of the catalog. */
  title: Scalars["String"]["output"]
}

/** A list of products with publishing and pricing information associated with company locations. */
export interface ShopifyCompanyLocationCatalogCompanyLocationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCompanyLocationSortKeys>
}

/** An auto-generated type for paginating through multiple CompanyLocations. */
export interface ShopifyCompanyLocationConnection {
  __typename?: "CompanyLocationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCompanyLocationEdge>
  /** A list of nodes that are contained in CompanyLocationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCompanyLocation>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `companyLocationCreate` mutation. */
export interface ShopifyCompanyLocationCreatePayload {
  __typename?: "CompanyLocationCreatePayload"
  /** The created company location. */
  companyLocation?: Maybe<ShopifyCompanyLocation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyLocationCreateTaxRegistration` mutation. */
export interface ShopifyCompanyLocationCreateTaxRegistrationPayload {
  __typename?: "CompanyLocationCreateTaxRegistrationPayload"
  /** The company location with the created tax registration. */
  companyLocation?: Maybe<ShopifyCompanyLocation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyLocationDelete` mutation. */
export interface ShopifyCompanyLocationDeletePayload {
  __typename?: "CompanyLocationDeletePayload"
  /** The ID of the deleted company location. */
  deletedCompanyLocationId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** An auto-generated type which holds one CompanyLocation and a cursor during pagination. */
export interface ShopifyCompanyLocationEdge {
  __typename?: "CompanyLocationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CompanyLocationEdge. */
  node: ShopifyCompanyLocation
}

/** The input fields for company location when creating or updating a company location. */
export interface ShopifyCompanyLocationInput {
  /** The input fields to create or update the billing address for a company location. */
  billingAddress?: InputMaybe<ShopifyCompanyAddressInput>
  /** Whether the billing address is the same as the shipping address. If the value is true, then the input for `billingAddress` is ignored. */
  billingSameAsShipping?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The configuration for the buyer's checkout at the company location. */
  buyerExperienceConfiguration?: InputMaybe<ShopifyBuyerExperienceConfigurationInput>
  /** A unique externally-supplied ID for the company location. */
  externalId?: InputMaybe<Scalars["String"]["input"]>
  /** The preferred locale of the company location. */
  locale?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the company location. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** A note about the company location. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** The phone number of the company location. */
  phone?: InputMaybe<Scalars["String"]["input"]>
  /** The input fields to create or update the shipping address for a company location. */
  shippingAddress?: InputMaybe<ShopifyCompanyAddressInput>
  /** Whether the location is exempt from taxes. */
  taxExempt?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The list of tax exemptions to apply to the company location. */
  taxExemptions?: InputMaybe<Array<ShopifyTaxExemption>>
  /** The tax registration ID of the company location. */
  taxRegistrationId?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `companyLocationRemoveStaffMembers` mutation. */
export interface ShopifyCompanyLocationRemoveStaffMembersPayload {
  __typename?: "CompanyLocationRemoveStaffMembersPayload"
  /** The list of IDs of the deleted staff member assignment. */
  deletedCompanyLocationStaffMemberAssignmentIds?: Maybe<
    Array<Scalars["ID"]["output"]>
  >
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyLocationRevokeRoles` mutation. */
export interface ShopifyCompanyLocationRevokeRolesPayload {
  __typename?: "CompanyLocationRevokeRolesPayload"
  /** A list of role assignment IDs that were removed from the company location. */
  revokedRoleAssignmentIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyLocationRevokeTaxExemptions` mutation. */
export interface ShopifyCompanyLocationRevokeTaxExemptionsPayload {
  __typename?: "CompanyLocationRevokeTaxExemptionsPayload"
  /** The updated company location. */
  companyLocation?: Maybe<ShopifyCompanyLocation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyLocationRevokeTaxRegistration` mutation. */
export interface ShopifyCompanyLocationRevokeTaxRegistrationPayload {
  __typename?: "CompanyLocationRevokeTaxRegistrationPayload"
  /** The updated company location. */
  companyLocation?: Maybe<ShopifyCompanyLocation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** The input fields for the role and contact to assign on a location. */
export interface ShopifyCompanyLocationRoleAssign {
  /** The company contact ID.. */
  companyContactId: Scalars["ID"]["input"]
  /** The role ID. */
  companyContactRoleId: Scalars["ID"]["input"]
}

/** The set of valid sort keys for the CompanyLocation query. */
export type ShopifyCompanyLocationSortKeys =
  /** Sort by the `company_and_location_name` value. */
  | "COMPANY_AND_LOCATION_NAME"
  /** Sort by the `company_id` value. */
  | "COMPANY_ID"
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `name` value. */
  | "NAME"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** A representation of store's staff member who is assigned to a [company location](https://shopify.dev/api/admin-graphql/latest/objects/CompanyLocation) of the shop. The staff member's actions will be limited to objects associated with the assigned company location. */
export interface ShopifyCompanyLocationStaffMemberAssignment
  extends ShopifyNode {
  __typename?: "CompanyLocationStaffMemberAssignment"
  /** The company location the staff member is assigned to. */
  companyLocation: ShopifyCompanyLocation
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Represents the data of a staff member who's assigned to a company location. */
  staffMember: ShopifyStaffMember
}

/** An auto-generated type for paginating through multiple CompanyLocationStaffMemberAssignments. */
export interface ShopifyCompanyLocationStaffMemberAssignmentConnection {
  __typename?: "CompanyLocationStaffMemberAssignmentConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCompanyLocationStaffMemberAssignmentEdge>
  /** A list of nodes that are contained in CompanyLocationStaffMemberAssignmentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCompanyLocationStaffMemberAssignment>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one CompanyLocationStaffMemberAssignment and a cursor during pagination. */
export interface ShopifyCompanyLocationStaffMemberAssignmentEdge {
  __typename?: "CompanyLocationStaffMemberAssignmentEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CompanyLocationStaffMemberAssignmentEdge. */
  node: ShopifyCompanyLocationStaffMemberAssignment
}

/** The set of valid sort keys for the CompanyLocationStaffMemberAssignment query. */
export type ShopifyCompanyLocationStaffMemberAssignmentSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** Represents the tax settings for a company location. */
export interface ShopifyCompanyLocationTaxSettings {
  __typename?: "CompanyLocationTaxSettings"
  /** Whether the location is exempt from taxes. */
  taxExempt: Scalars["Boolean"]["output"]
  /** The list of tax exemptions applied to the location. */
  taxExemptions: Array<ShopifyTaxExemption>
  /** The tax registration ID for the company location. */
  taxRegistrationId?: Maybe<Scalars["String"]["output"]>
}

/** Return type for `companyLocationTaxSettingsUpdate` mutation. */
export interface ShopifyCompanyLocationTaxSettingsUpdatePayload {
  __typename?: "CompanyLocationTaxSettingsUpdatePayload"
  /** The company location with the updated tax settings. */
  companyLocation?: Maybe<ShopifyCompanyLocation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** The input fields for company location when creating or updating a company location. */
export interface ShopifyCompanyLocationUpdateInput {
  /** The configuration for the buyer's checkout at the company location. */
  buyerExperienceConfiguration?: InputMaybe<ShopifyBuyerExperienceConfigurationInput>
  /** A unique externally-supplied ID for the company location. */
  externalId?: InputMaybe<Scalars["String"]["input"]>
  /** The preferred locale of the company location. */
  locale?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the company location. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** A note about the company location. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** The phone number of the company location. */
  phone?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `companyLocationUpdate` mutation. */
export interface ShopifyCompanyLocationUpdatePayload {
  __typename?: "CompanyLocationUpdatePayload"
  /** The updated company location. */
  companyLocation?: Maybe<ShopifyCompanyLocation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** A condition checking the company location a visitor is purchasing for. */
export interface ShopifyCompanyLocationsCondition {
  __typename?: "CompanyLocationsCondition"
  /** The application level for the condition. */
  applicationLevel?: Maybe<ShopifyMarketConditionApplicationType>
  /** The company locations that comprise the market. */
  companyLocations: ShopifyCompanyLocationConnection
}

/** A condition checking the company location a visitor is purchasing for. */
export interface ShopifyCompanyLocationsConditionCompanyLocationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `companyLocationsDelete` mutation. */
export interface ShopifyCompanyLocationsDeletePayload {
  __typename?: "CompanyLocationsDeletePayload"
  /** A list of IDs of the deleted company locations. */
  deletedCompanyLocationIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** Return type for `companyRevokeMainContact` mutation. */
export interface ShopifyCompanyRevokeMainContactPayload {
  __typename?: "CompanyRevokeMainContactPayload"
  /** The company from which the main contact is revoked. */
  company?: Maybe<ShopifyCompany>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/** The set of valid sort keys for the Company query. */
export type ShopifyCompanySortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `name` value. */
  | "NAME"
  /** Sort by the `order_count` value. */
  | "ORDER_COUNT"
  /** Sort by the `since_date` value. */
  | "SINCE_DATE"
  /** Sort by the `total_spent` value. */
  | "TOTAL_SPENT"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** Return type for `companyUpdate` mutation. */
export interface ShopifyCompanyUpdatePayload {
  __typename?: "CompanyUpdatePayload"
  /** The updated company. */
  company?: Maybe<ShopifyCompany>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBusinessCustomerUserError>
}

/**
 * A consent policy describes the level of consent that the merchant requires from the user before actually
 * collecting and processing the data.
 */
export interface ShopifyConsentPolicy extends ShopifyNode {
  __typename?: "ConsentPolicy"
  /** Whether consent is required for the region. */
  consentRequired?: Maybe<Scalars["Boolean"]["output"]>
  /** The `ISO 3166` country code for which the policy applies. */
  countryCode?: Maybe<ShopifyPrivacyCountryCode>
  /** Whether data sale opt-out is required for the region. */
  dataSaleOptOutRequired?: Maybe<Scalars["Boolean"]["output"]>
  /** The global ID of the consent policy. IDs prefixed with `SD-` are system default policies. */
  id: Scalars["ID"]["output"]
  /** The `ISO 3166` region code for which the policy applies. */
  regionCode?: Maybe<Scalars["String"]["output"]>
  /** The global ID of the shop that owns the policy. */
  shopId: Scalars["ID"]["output"]
}

/** The errors encountered while performing mutations on consent policies. */
export interface ShopifyConsentPolicyError extends ShopifyDisplayableError {
  __typename?: "ConsentPolicyError"
  /** The error code. */
  code?: Maybe<ShopifyConsentPolicyErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ConsentPolicyError`. */
export type ShopifyConsentPolicyErrorCode =
  /** Country code is required. */
  | "COUNTRY_CODE_REQUIRED"
  /** Region code must match the country code. */
  | "REGION_CODE_MUST_MATCH_COUNTRY_CODE"
  /** Region code is required for countries with existing regional policies. */
  | "REGION_CODE_REQUIRED"
  /** Shopify's cookie banner must be disabled. */
  | "SHOPIFY_COOKIE_BANNER_NOT_DISABLED"
  /** Unsupported consent policy. */
  | "UNSUPORTED_CONSENT_POLICY"
  | "%future added value"

/** The input fields for a consent policy to be updated or created. */
export interface ShopifyConsentPolicyInput {
  /** Whether consent is required for the region. */
  consentRequired?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The `ISO 3166` country code for which the policy applies. */
  countryCode?: InputMaybe<ShopifyPrivacyCountryCode>
  /** Whether data sale opt-out is required for the region. */
  dataSaleOptOutRequired?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The `ISO 3166` region code for which the policy applies. */
  regionCode?: InputMaybe<Scalars["String"]["input"]>
}

/** A country or region code. */
export interface ShopifyConsentPolicyRegion {
  __typename?: "ConsentPolicyRegion"
  /** The `ISO 3166` country code for which the policy applies. */
  countryCode?: Maybe<ShopifyPrivacyCountryCode>
  /** The `ISO 3166` region code for which the policy applies. */
  regionCode?: Maybe<Scalars["String"]["output"]>
}

/** Return type for `consentPolicyUpdate` mutation. */
export interface ShopifyConsentPolicyUpdatePayload {
  __typename?: "ConsentPolicyUpdatePayload"
  /** All updated and created consent policies. The consent policies that haven't been modified as part of the mutation aren't returned. */
  updatedPolicies?: Maybe<Array<ShopifyConsentPolicy>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyConsentPolicyError>
}

/** The input fields for the context data that determines the pricing of a variant. Refer to [Product](https://shopify.dev/docs/api/admin-graphql/latest/queries/product?example=Get+the+price+range+for+a+product+for+buyers+from+Canada)for more information on how to use this input object. */
export interface ShopifyContextualPricingContext {
  /** The CompanyLocation ID used to fetch company location specific prices. */
  companyLocationId?: InputMaybe<Scalars["ID"]["input"]>
  /** The country code used to fetch country-specific prices. */
  country?: InputMaybe<ShopifyCountryCode>
  /** The Location ID used to fetch location specific prices. */
  locationId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The context data that determines the publication status of a product. */
export interface ShopifyContextualPublicationContext {
  /** The company location ID used to fetch company-specific publication. */
  companyLocationId?: InputMaybe<Scalars["ID"]["input"]>
  /** The country code used to fetch country-specific publication. */
  country?: InputMaybe<ShopifyCountryCode>
  /** The Location ID used to fetch the publication status of a product. */
  locationId?: InputMaybe<Scalars["ID"]["input"]>
}

/** A shop's banner settings. */
export interface ShopifyCookieBanner extends ShopifyHasPublishedTranslations {
  __typename?: "CookieBanner"
  /** Indicates if the banner is auto managed. */
  autoManaged: Scalars["Boolean"]["output"]
  /** Indicates if the banner is enabled. */
  enabled: Scalars["Boolean"]["output"]
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
}

/** A shop's banner settings. */
export interface ShopifyCookieBannerTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/** Details for count of elements. */
export interface ShopifyCount {
  __typename?: "Count"
  /** The count of elements. */
  count: Scalars["Int"]["output"]
  /** The count's precision, or the exactness of the value. */
  precision: ShopifyCountPrecision
}

/** The precision of the value returned by a count field. */
export type ShopifyCountPrecision =
  /** The count is at least the value. A limit was imposed and reached. */
  | "AT_LEAST"
  /** The count is exactly the value. A write may not be reflected instantaneously. */
  | "EXACT"
  | "%future added value"

/** The list of all the countries from the combined shipping zones for the shop. */
export interface ShopifyCountriesInShippingZones {
  __typename?: "CountriesInShippingZones"
  /** The list of all the countries from all the combined shipping zones. */
  countryCodes: Array<ShopifyCountryCode>
  /** Whether 'Rest of World' has been defined in any of the shipping zones. */
  includeRestOfWorld: Scalars["Boolean"]["output"]
}

/**
 * The code designating a country/region, which generally follows ISO 3166-1 alpha-2 guidelines.
 * If a territory doesn't have a country code value in the `CountryCode` enum, then it might be considered a subdivision
 * of another country. For example, the territories associated with Spain are represented by the country code `ES`,
 * and the territories associated with the United States of America are represented by the country code `US`.
 */
export type ShopifyCountryCode =
  /** Ascension Island. */
  | "AC"
  /** Andorra. */
  | "AD"
  /** United Arab Emirates. */
  | "AE"
  /** Afghanistan. */
  | "AF"
  /** Antigua & Barbuda. */
  | "AG"
  /** Anguilla. */
  | "AI"
  /** Albania. */
  | "AL"
  /** Armenia. */
  | "AM"
  /** Netherlands Antilles. */
  | "AN"
  /** Angola. */
  | "AO"
  /** Argentina. */
  | "AR"
  /** Austria. */
  | "AT"
  /** Australia. */
  | "AU"
  /** Aruba. */
  | "AW"
  /** Åland Islands. */
  | "AX"
  /** Azerbaijan. */
  | "AZ"
  /** Bosnia & Herzegovina. */
  | "BA"
  /** Barbados. */
  | "BB"
  /** Bangladesh. */
  | "BD"
  /** Belgium. */
  | "BE"
  /** Burkina Faso. */
  | "BF"
  /** Bulgaria. */
  | "BG"
  /** Bahrain. */
  | "BH"
  /** Burundi. */
  | "BI"
  /** Benin. */
  | "BJ"
  /** St. Barthélemy. */
  | "BL"
  /** Bermuda. */
  | "BM"
  /** Brunei. */
  | "BN"
  /** Bolivia. */
  | "BO"
  /** Caribbean Netherlands. */
  | "BQ"
  /** Brazil. */
  | "BR"
  /** Bahamas. */
  | "BS"
  /** Bhutan. */
  | "BT"
  /** Bouvet Island. */
  | "BV"
  /** Botswana. */
  | "BW"
  /** Belarus. */
  | "BY"
  /** Belize. */
  | "BZ"
  /** Canada. */
  | "CA"
  /** Cocos (Keeling) Islands. */
  | "CC"
  /** Congo - Kinshasa. */
  | "CD"
  /** Central African Republic. */
  | "CF"
  /** Congo - Brazzaville. */
  | "CG"
  /** Switzerland. */
  | "CH"
  /** Côte d’Ivoire. */
  | "CI"
  /** Cook Islands. */
  | "CK"
  /** Chile. */
  | "CL"
  /** Cameroon. */
  | "CM"
  /** China. */
  | "CN"
  /** Colombia. */
  | "CO"
  /** Costa Rica. */
  | "CR"
  /** Cuba. */
  | "CU"
  /** Cape Verde. */
  | "CV"
  /** Curaçao. */
  | "CW"
  /** Christmas Island. */
  | "CX"
  /** Cyprus. */
  | "CY"
  /** Czechia. */
  | "CZ"
  /** Germany. */
  | "DE"
  /** Djibouti. */
  | "DJ"
  /** Denmark. */
  | "DK"
  /** Dominica. */
  | "DM"
  /** Dominican Republic. */
  | "DO"
  /** Algeria. */
  | "DZ"
  /** Ecuador. */
  | "EC"
  /** Estonia. */
  | "EE"
  /** Egypt. */
  | "EG"
  /** Western Sahara. */
  | "EH"
  /** Eritrea. */
  | "ER"
  /** Spain. */
  | "ES"
  /** Ethiopia. */
  | "ET"
  /** Finland. */
  | "FI"
  /** Fiji. */
  | "FJ"
  /** Falkland Islands. */
  | "FK"
  /** Faroe Islands. */
  | "FO"
  /** France. */
  | "FR"
  /** Gabon. */
  | "GA"
  /** United Kingdom. */
  | "GB"
  /** Grenada. */
  | "GD"
  /** Georgia. */
  | "GE"
  /** French Guiana. */
  | "GF"
  /** Guernsey. */
  | "GG"
  /** Ghana. */
  | "GH"
  /** Gibraltar. */
  | "GI"
  /** Greenland. */
  | "GL"
  /** Gambia. */
  | "GM"
  /** Guinea. */
  | "GN"
  /** Guadeloupe. */
  | "GP"
  /** Equatorial Guinea. */
  | "GQ"
  /** Greece. */
  | "GR"
  /** South Georgia & South Sandwich Islands. */
  | "GS"
  /** Guatemala. */
  | "GT"
  /** Guinea-Bissau. */
  | "GW"
  /** Guyana. */
  | "GY"
  /** Hong Kong SAR. */
  | "HK"
  /** Heard & McDonald Islands. */
  | "HM"
  /** Honduras. */
  | "HN"
  /** Croatia. */
  | "HR"
  /** Haiti. */
  | "HT"
  /** Hungary. */
  | "HU"
  /** Indonesia. */
  | "ID"
  /** Ireland. */
  | "IE"
  /** Israel. */
  | "IL"
  /** Isle of Man. */
  | "IM"
  /** India. */
  | "IN"
  /** British Indian Ocean Territory. */
  | "IO"
  /** Iraq. */
  | "IQ"
  /** Iran. */
  | "IR"
  /** Iceland. */
  | "IS"
  /** Italy. */
  | "IT"
  /** Jersey. */
  | "JE"
  /** Jamaica. */
  | "JM"
  /** Jordan. */
  | "JO"
  /** Japan. */
  | "JP"
  /** Kenya. */
  | "KE"
  /** Kyrgyzstan. */
  | "KG"
  /** Cambodia. */
  | "KH"
  /** Kiribati. */
  | "KI"
  /** Comoros. */
  | "KM"
  /** St. Kitts & Nevis. */
  | "KN"
  /** North Korea. */
  | "KP"
  /** South Korea. */
  | "KR"
  /** Kuwait. */
  | "KW"
  /** Cayman Islands. */
  | "KY"
  /** Kazakhstan. */
  | "KZ"
  /** Laos. */
  | "LA"
  /** Lebanon. */
  | "LB"
  /** St. Lucia. */
  | "LC"
  /** Liechtenstein. */
  | "LI"
  /** Sri Lanka. */
  | "LK"
  /** Liberia. */
  | "LR"
  /** Lesotho. */
  | "LS"
  /** Lithuania. */
  | "LT"
  /** Luxembourg. */
  | "LU"
  /** Latvia. */
  | "LV"
  /** Libya. */
  | "LY"
  /** Morocco. */
  | "MA"
  /** Monaco. */
  | "MC"
  /** Moldova. */
  | "MD"
  /** Montenegro. */
  | "ME"
  /** St. Martin. */
  | "MF"
  /** Madagascar. */
  | "MG"
  /** North Macedonia. */
  | "MK"
  /** Mali. */
  | "ML"
  /** Myanmar (Burma). */
  | "MM"
  /** Mongolia. */
  | "MN"
  /** Macao SAR. */
  | "MO"
  /** Martinique. */
  | "MQ"
  /** Mauritania. */
  | "MR"
  /** Montserrat. */
  | "MS"
  /** Malta. */
  | "MT"
  /** Mauritius. */
  | "MU"
  /** Maldives. */
  | "MV"
  /** Malawi. */
  | "MW"
  /** Mexico. */
  | "MX"
  /** Malaysia. */
  | "MY"
  /** Mozambique. */
  | "MZ"
  /** Namibia. */
  | "NA"
  /** New Caledonia. */
  | "NC"
  /** Niger. */
  | "NE"
  /** Norfolk Island. */
  | "NF"
  /** Nigeria. */
  | "NG"
  /** Nicaragua. */
  | "NI"
  /** Netherlands. */
  | "NL"
  /** Norway. */
  | "NO"
  /** Nepal. */
  | "NP"
  /** Nauru. */
  | "NR"
  /** Niue. */
  | "NU"
  /** New Zealand. */
  | "NZ"
  /** Oman. */
  | "OM"
  /** Panama. */
  | "PA"
  /** Peru. */
  | "PE"
  /** French Polynesia. */
  | "PF"
  /** Papua New Guinea. */
  | "PG"
  /** Philippines. */
  | "PH"
  /** Pakistan. */
  | "PK"
  /** Poland. */
  | "PL"
  /** St. Pierre & Miquelon. */
  | "PM"
  /** Pitcairn Islands. */
  | "PN"
  /** Palestinian Territories. */
  | "PS"
  /** Portugal. */
  | "PT"
  /** Paraguay. */
  | "PY"
  /** Qatar. */
  | "QA"
  /** Réunion. */
  | "RE"
  /** Romania. */
  | "RO"
  /** Serbia. */
  | "RS"
  /** Russia. */
  | "RU"
  /** Rwanda. */
  | "RW"
  /** Saudi Arabia. */
  | "SA"
  /** Solomon Islands. */
  | "SB"
  /** Seychelles. */
  | "SC"
  /** Sudan. */
  | "SD"
  /** Sweden. */
  | "SE"
  /** Singapore. */
  | "SG"
  /** St. Helena. */
  | "SH"
  /** Slovenia. */
  | "SI"
  /** Svalbard & Jan Mayen. */
  | "SJ"
  /** Slovakia. */
  | "SK"
  /** Sierra Leone. */
  | "SL"
  /** San Marino. */
  | "SM"
  /** Senegal. */
  | "SN"
  /** Somalia. */
  | "SO"
  /** Suriname. */
  | "SR"
  /** South Sudan. */
  | "SS"
  /** São Tomé & Príncipe. */
  | "ST"
  /** El Salvador. */
  | "SV"
  /** Sint Maarten. */
  | "SX"
  /** Syria. */
  | "SY"
  /** Eswatini. */
  | "SZ"
  /** Tristan da Cunha. */
  | "TA"
  /** Turks & Caicos Islands. */
  | "TC"
  /** Chad. */
  | "TD"
  /** French Southern Territories. */
  | "TF"
  /** Togo. */
  | "TG"
  /** Thailand. */
  | "TH"
  /** Tajikistan. */
  | "TJ"
  /** Tokelau. */
  | "TK"
  /** Timor-Leste. */
  | "TL"
  /** Turkmenistan. */
  | "TM"
  /** Tunisia. */
  | "TN"
  /** Tonga. */
  | "TO"
  /** Türkiye. */
  | "TR"
  /** Trinidad & Tobago. */
  | "TT"
  /** Tuvalu. */
  | "TV"
  /** Taiwan. */
  | "TW"
  /** Tanzania. */
  | "TZ"
  /** Ukraine. */
  | "UA"
  /** Uganda. */
  | "UG"
  /** U.S. Outlying Islands. */
  | "UM"
  /** United States. */
  | "US"
  /** Uruguay. */
  | "UY"
  /** Uzbekistan. */
  | "UZ"
  /** Vatican City. */
  | "VA"
  /** St. Vincent & Grenadines. */
  | "VC"
  /** Venezuela. */
  | "VE"
  /** British Virgin Islands. */
  | "VG"
  /** Vietnam. */
  | "VN"
  /** Vanuatu. */
  | "VU"
  /** Wallis & Futuna. */
  | "WF"
  /** Samoa. */
  | "WS"
  /** Kosovo. */
  | "XK"
  /** Yemen. */
  | "YE"
  /** Mayotte. */
  | "YT"
  /** South Africa. */
  | "ZA"
  /** Zambia. */
  | "ZM"
  /** Zimbabwe. */
  | "ZW"
  /** Unknown Region. */
  | "ZZ"
  | "%future added value"

/** The country-specific harmonized system code and ISO country code for an inventory item. */
export interface ShopifyCountryHarmonizedSystemCode {
  __typename?: "CountryHarmonizedSystemCode"
  /** The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code. */
  countryCode: ShopifyCountryCode
  /** The country-specific harmonized system code. These are usually longer than 6 digits. */
  harmonizedSystemCode: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple CountryHarmonizedSystemCodes. */
export interface ShopifyCountryHarmonizedSystemCodeConnection {
  __typename?: "CountryHarmonizedSystemCodeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCountryHarmonizedSystemCodeEdge>
  /** A list of nodes that are contained in CountryHarmonizedSystemCodeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCountryHarmonizedSystemCode>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination. */
export interface ShopifyCountryHarmonizedSystemCodeEdge {
  __typename?: "CountryHarmonizedSystemCodeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CountryHarmonizedSystemCodeEdge. */
  node: ShopifyCountryHarmonizedSystemCode
}

/** The input fields required to specify a harmonized system code. */
export interface ShopifyCountryHarmonizedSystemCodeInput {
  /** The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code. */
  countryCode: ShopifyCountryCode
  /** Country specific harmonized system code. */
  harmonizedSystemCode: Scalars["String"]["input"]
}

/** The input fields required to create a media object. */
export interface ShopifyCreateMediaInput {
  /** The alt text associated with the media. */
  alt?: InputMaybe<Scalars["String"]["input"]>
  /** The media content type. */
  mediaContentType: ShopifyMediaContentType
  /** The original source of the media object. This might be an external URL or a staged upload URL. */
  originalSource: Scalars["String"]["input"]
}

/** The part of the image that should remain after cropping. */
export type ShopifyCropRegion =
  /** Keep the bottom of the image. */
  | "BOTTOM"
  /** Keep the center of the image. */
  | "CENTER"
  /** Keep the left of the image. */
  | "LEFT"
  /** Keep the right of the image. */
  | "RIGHT"
  /** Keep the top of the image. */
  | "TOP"
  | "%future added value"

/**
 * The currency codes that represent the world currencies throughout the Admin API. Currency codes include
 * [standard ISO 4217 codes](https://en.wikipedia.org/wiki/ISO_4217), legacy codes, non-standard codes,
 * digital currency codes.
 */
export type ShopifyCurrencyCode =
  /** United Arab Emirates Dirham (AED). */
  | "AED"
  /** Afghan Afghani (AFN). */
  | "AFN"
  /** Albanian Lek (ALL). */
  | "ALL"
  /** Armenian Dram (AMD). */
  | "AMD"
  /** Netherlands Antillean Guilder. */
  | "ANG"
  /** Angolan Kwanza (AOA). */
  | "AOA"
  /** Argentine Pesos (ARS). */
  | "ARS"
  /** Australian Dollars (AUD). */
  | "AUD"
  /** Aruban Florin (AWG). */
  | "AWG"
  /** Azerbaijani Manat (AZN). */
  | "AZN"
  /** Bosnia and Herzegovina Convertible Mark (BAM). */
  | "BAM"
  /** Barbadian Dollar (BBD). */
  | "BBD"
  /** Bangladesh Taka (BDT). */
  | "BDT"
  /** Bulgarian Lev (BGN). */
  | "BGN"
  /** Bahraini Dinar (BHD). */
  | "BHD"
  /** Burundian Franc (BIF). */
  | "BIF"
  /** Bermudian Dollar (BMD). */
  | "BMD"
  /** Brunei Dollar (BND). */
  | "BND"
  /** Bolivian Boliviano (BOB). */
  | "BOB"
  /** Brazilian Real (BRL). */
  | "BRL"
  /** Bahamian Dollar (BSD). */
  | "BSD"
  /** Bhutanese Ngultrum (BTN). */
  | "BTN"
  /** Botswana Pula (BWP). */
  | "BWP"
  /** Belarusian Ruble (BYN). */
  | "BYN"
  /** Belarusian Ruble (BYR). */
  | "BYR"
  /** Belize Dollar (BZD). */
  | "BZD"
  /** Canadian Dollars (CAD). */
  | "CAD"
  /** Congolese franc (CDF). */
  | "CDF"
  /** Swiss Francs (CHF). */
  | "CHF"
  /** Chilean Peso (CLP). */
  | "CLP"
  /** Chinese Yuan Renminbi (CNY). */
  | "CNY"
  /** Colombian Peso (COP). */
  | "COP"
  /** Costa Rican Colones (CRC). */
  | "CRC"
  /** Cape Verdean escudo (CVE). */
  | "CVE"
  /** Czech Koruny (CZK). */
  | "CZK"
  /** Djiboutian Franc (DJF). */
  | "DJF"
  /** Danish Kroner (DKK). */
  | "DKK"
  /** Dominican Peso (DOP). */
  | "DOP"
  /** Algerian Dinar (DZD). */
  | "DZD"
  /** Egyptian Pound (EGP). */
  | "EGP"
  /** Eritrean Nakfa (ERN). */
  | "ERN"
  /** Ethiopian Birr (ETB). */
  | "ETB"
  /** Euro (EUR). */
  | "EUR"
  /** Fijian Dollars (FJD). */
  | "FJD"
  /** Falkland Islands Pounds (FKP). */
  | "FKP"
  /** United Kingdom Pounds (GBP). */
  | "GBP"
  /** Georgian Lari (GEL). */
  | "GEL"
  /** Ghanaian Cedi (GHS). */
  | "GHS"
  /** Gibraltar Pounds (GIP). */
  | "GIP"
  /** Gambian Dalasi (GMD). */
  | "GMD"
  /** Guinean Franc (GNF). */
  | "GNF"
  /** Guatemalan Quetzal (GTQ). */
  | "GTQ"
  /** Guyanese Dollar (GYD). */
  | "GYD"
  /** Hong Kong Dollars (HKD). */
  | "HKD"
  /** Honduran Lempira (HNL). */
  | "HNL"
  /** Croatian Kuna (HRK). */
  | "HRK"
  /** Haitian Gourde (HTG). */
  | "HTG"
  /** Hungarian Forint (HUF). */
  | "HUF"
  /** Indonesian Rupiah (IDR). */
  | "IDR"
  /** Israeli New Shekel (NIS). */
  | "ILS"
  /** Indian Rupees (INR). */
  | "INR"
  /** Iraqi Dinar (IQD). */
  | "IQD"
  /** Iranian Rial (IRR). */
  | "IRR"
  /** Icelandic Kronur (ISK). */
  | "ISK"
  /** Jersey Pound. */
  | "JEP"
  /** Jamaican Dollars (JMD). */
  | "JMD"
  /** Jordanian Dinar (JOD). */
  | "JOD"
  /** Japanese Yen (JPY). */
  | "JPY"
  /** Kenyan Shilling (KES). */
  | "KES"
  /** Kyrgyzstani Som (KGS). */
  | "KGS"
  /** Cambodian Riel. */
  | "KHR"
  /** Kiribati Dollar (KID). */
  | "KID"
  /** Comorian Franc (KMF). */
  | "KMF"
  /** South Korean Won (KRW). */
  | "KRW"
  /** Kuwaiti Dinar (KWD). */
  | "KWD"
  /** Cayman Dollars (KYD). */
  | "KYD"
  /** Kazakhstani Tenge (KZT). */
  | "KZT"
  /** Laotian Kip (LAK). */
  | "LAK"
  /** Lebanese Pounds (LBP). */
  | "LBP"
  /** Sri Lankan Rupees (LKR). */
  | "LKR"
  /** Liberian Dollar (LRD). */
  | "LRD"
  /** Lesotho Loti (LSL). */
  | "LSL"
  /** Lithuanian Litai (LTL). */
  | "LTL"
  /** Latvian Lati (LVL). */
  | "LVL"
  /** Libyan Dinar (LYD). */
  | "LYD"
  /** Moroccan Dirham. */
  | "MAD"
  /** Moldovan Leu (MDL). */
  | "MDL"
  /** Malagasy Ariary (MGA). */
  | "MGA"
  /** Macedonia Denar (MKD). */
  | "MKD"
  /** Burmese Kyat (MMK). */
  | "MMK"
  /** Mongolian Tugrik. */
  | "MNT"
  /** Macanese Pataca (MOP). */
  | "MOP"
  /** Mauritanian Ouguiya (MRU). */
  | "MRU"
  /** Mauritian Rupee (MUR). */
  | "MUR"
  /** Maldivian Rufiyaa (MVR). */
  | "MVR"
  /** Malawian Kwacha (MWK). */
  | "MWK"
  /** Mexican Pesos (MXN). */
  | "MXN"
  /** Malaysian Ringgits (MYR). */
  | "MYR"
  /** Mozambican Metical. */
  | "MZN"
  /** Namibian Dollar. */
  | "NAD"
  /** Nigerian Naira (NGN). */
  | "NGN"
  /** Nicaraguan Córdoba (NIO). */
  | "NIO"
  /** Norwegian Kroner (NOK). */
  | "NOK"
  /** Nepalese Rupee (NPR). */
  | "NPR"
  /** New Zealand Dollars (NZD). */
  | "NZD"
  /** Omani Rial (OMR). */
  | "OMR"
  /** Panamian Balboa (PAB). */
  | "PAB"
  /** Peruvian Nuevo Sol (PEN). */
  | "PEN"
  /** Papua New Guinean Kina (PGK). */
  | "PGK"
  /** Philippine Peso (PHP). */
  | "PHP"
  /** Pakistani Rupee (PKR). */
  | "PKR"
  /** Polish Zlotych (PLN). */
  | "PLN"
  /** Paraguayan Guarani (PYG). */
  | "PYG"
  /** Qatari Rial (QAR). */
  | "QAR"
  /** Romanian Lei (RON). */
  | "RON"
  /** Serbian dinar (RSD). */
  | "RSD"
  /** Russian Rubles (RUB). */
  | "RUB"
  /** Rwandan Franc (RWF). */
  | "RWF"
  /** Saudi Riyal (SAR). */
  | "SAR"
  /** Solomon Islands Dollar (SBD). */
  | "SBD"
  /** Seychellois Rupee (SCR). */
  | "SCR"
  /** Sudanese Pound (SDG). */
  | "SDG"
  /** Swedish Kronor (SEK). */
  | "SEK"
  /** Singapore Dollars (SGD). */
  | "SGD"
  /** Saint Helena Pounds (SHP). */
  | "SHP"
  /** Sierra Leonean Leone (SLL). */
  | "SLL"
  /** Somali Shilling (SOS). */
  | "SOS"
  /** Surinamese Dollar (SRD). */
  | "SRD"
  /** South Sudanese Pound (SSP). */
  | "SSP"
  /** Sao Tome And Principe Dobra (STD). */
  | "STD"
  /** Sao Tome And Principe Dobra (STN). */
  | "STN"
  /** Syrian Pound (SYP). */
  | "SYP"
  /** Swazi Lilangeni (SZL). */
  | "SZL"
  /** Thai baht (THB). */
  | "THB"
  /** Tajikistani Somoni (TJS). */
  | "TJS"
  /** Turkmenistani Manat (TMT). */
  | "TMT"
  /** Tunisian Dinar (TND). */
  | "TND"
  /** Tongan Pa'anga (TOP). */
  | "TOP"
  /** Turkish Lira (TRY). */
  | "TRY"
  /** Trinidad and Tobago Dollars (TTD). */
  | "TTD"
  /** Taiwan Dollars (TWD). */
  | "TWD"
  /** Tanzanian Shilling (TZS). */
  | "TZS"
  /** Ukrainian Hryvnia (UAH). */
  | "UAH"
  /** Ugandan Shilling (UGX). */
  | "UGX"
  /** United States Dollars (USD). */
  | "USD"
  /** United States Dollars Coin (USDC). */
  | "USDC"
  /** Uruguayan Pesos (UYU). */
  | "UYU"
  /** Uzbekistan som (UZS). */
  | "UZS"
  /** Venezuelan Bolivares (VED). */
  | "VED"
  /** Venezuelan Bolivares (VEF). */
  | "VEF"
  /** Venezuelan Bolivares Soberanos (VES). */
  | "VES"
  /** Vietnamese đồng (VND). */
  | "VND"
  /** Vanuatu Vatu (VUV). */
  | "VUV"
  /** Samoan Tala (WST). */
  | "WST"
  /** Central African CFA Franc (XAF). */
  | "XAF"
  /** East Caribbean Dollar (XCD). */
  | "XCD"
  /** West African CFA franc (XOF). */
  | "XOF"
  /** CFP Franc (XPF). */
  | "XPF"
  /** Unrecognized currency. */
  | "XXX"
  /** Yemeni Rial (YER). */
  | "YER"
  /** South African Rand (ZAR). */
  | "ZAR"
  /** Zambian Kwacha (ZMW). */
  | "ZMW"
  | "%future added value"

/** Represents a currency exchange adjustment applied to an order transaction. */
export interface ShopifyCurrencyExchangeAdjustment extends ShopifyNode {
  __typename?: "CurrencyExchangeAdjustment"
  /** The adjustment amount in both shop and presentment currencies. */
  adjustment: ShopifyMoneyV2
  /** The final amount in both shop and presentment currencies after the adjustment. */
  finalAmountSet: ShopifyMoneyV2
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The original amount in both shop and presentment currencies before the adjustment. */
  originalAmountSet: ShopifyMoneyV2
}

/** Currency formats configured for the merchant. These formats are available to use within Liquid. */
export interface ShopifyCurrencyFormats {
  __typename?: "CurrencyFormats"
  /** Money without currency in HTML. */
  moneyFormat: Scalars["FormattedString"]["output"]
  /** Money without currency in emails. */
  moneyInEmailsFormat: Scalars["String"]["output"]
  /** Money with currency in HTML. */
  moneyWithCurrencyFormat: Scalars["FormattedString"]["output"]
  /** Money with currency in emails. */
  moneyWithCurrencyInEmailsFormat: Scalars["String"]["output"]
}

/** A setting for a presentment currency. */
export interface ShopifyCurrencySetting {
  __typename?: "CurrencySetting"
  /** The currency's ISO code. */
  currencyCode: ShopifyCurrencyCode
  /** The full name of the currency. */
  currencyName: Scalars["String"]["output"]
  /** Whether the currency is enabled or not. An enabled currency setting is visible to buyers and allows orders to be generated with that currency as presentment. */
  enabled: Scalars["Boolean"]["output"]
  /** The manual rate, if enabled, that applies to this currency when converting from shop currency. This rate is specific to the associated market's currency setting. */
  manualRate?: Maybe<Scalars["Decimal"]["output"]>
  /** The date and time when the active exchange rate for the currency was last modified. It can be the automatic rate's creation date, or the manual rate's last updated at date if active. */
  rateUpdatedAt?: Maybe<Scalars["DateTime"]["output"]>
}

/** An auto-generated type for paginating through multiple CurrencySettings. */
export interface ShopifyCurrencySettingConnection {
  __typename?: "CurrencySettingConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCurrencySettingEdge>
  /** A list of nodes that are contained in CurrencySettingEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCurrencySetting>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one CurrencySetting and a cursor during pagination. */
export interface ShopifyCurrencySettingEdge {
  __typename?: "CurrencySettingEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CurrencySettingEdge. */
  node: ShopifyCurrencySetting
}

/** The input fields for a custom shipping package used to pack shipment. */
export interface ShopifyCustomShippingPackageInput {
  /** The default package is the one used to calculate shipping costs on checkout. */
  default?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Outside dimensions of the empty shipping package. */
  dimensions?: InputMaybe<ShopifyObjectDimensionsInput>
  /** Descriptive name for the package. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** Type of package. */
  type?: InputMaybe<ShopifyShippingPackageType>
  /** Weight of the empty shipping package. */
  weight?: InputMaybe<ShopifyWeightInput>
}

/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export interface ShopifyCustomer
  extends ShopifyCommentEventSubject,
    ShopifyHasEvents,
    ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyHasStoreCreditAccounts,
    ShopifyLegacyInteroperability,
    ShopifyNode {
  __typename?: "Customer"
  /** A list of addresses associated with the customer. */
  addresses: Array<ShopifyMailingAddress>
  /** The addresses associated with the customer. */
  addressesV2: ShopifyMailingAddressConnection
  /** The total amount that the customer has spent on orders in their lifetime. */
  amountSpent: ShopifyMoneyV2
  /**
   * Whether the merchant can delete the customer from their store.
   *
   * A customer can be deleted from a store only if they haven't yet made an order. After a customer makes an
   * order, they can't be deleted from a store.
   */
  canDelete: Scalars["Boolean"]["output"]
  /** A list of the customer's company contact profiles. */
  companyContactProfiles: Array<ShopifyCompanyContact>
  /** The date and time when the customer was added to the store. */
  createdAt: Scalars["DateTime"]["output"]
  /** Whether the customer has opted out of having their data sold. */
  dataSaleOptOut: Scalars["Boolean"]["output"]
  /** The default address associated with the customer. */
  defaultAddress?: Maybe<ShopifyMailingAddress>
  /** The customer's default email address. */
  defaultEmailAddress?: Maybe<ShopifyCustomerEmailAddress>
  /** The customer's default phone number. */
  defaultPhoneNumber?: Maybe<ShopifyCustomerPhoneNumber>
  /**
   * The full name of the customer, based on the values for first_name and last_name. If the first_name and
   * last_name are not available, then this falls back to the customer's email address, and if that is not available, the customer's phone number.
   */
  displayName: Scalars["String"]["output"]
  /**
   * The customer's email address.
   * @deprecated Use `defaultEmailAddress.emailAddress` instead.
   */
  email?: Maybe<Scalars["String"]["output"]>
  /**
   * The current email marketing state for the customer.
   * If the customer doesn't have an email address, then this property is `null`.
   * @deprecated Use `defaultEmailAddress.marketingState`, `defaultEmailAddress.marketingOptInLevel`, `defaultEmailAddress.marketingUpdatedAt`, and `defaultEmailAddress.sourceLocation` instead.
   */
  emailMarketingConsent?: Maybe<ShopifyCustomerEmailMarketingConsentState>
  /** A list of events associated with the customer. */
  events: ShopifyEventConnection
  /** The customer's first name. */
  firstName?: Maybe<Scalars["String"]["output"]>
  /**
   * Whether the merchant has added timeline comments about the customer on the customer's page.
   * @deprecated To query for comments on the timeline, use the `events` connection and a 'query' argument containing `verb:comment`, or look for a 'CommentEvent' in the `__typename` of `events`.
   */
  hasTimelineComment: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The image associated with the customer. */
  image: ShopifyImage
  /** The customer's last name. */
  lastName?: Maybe<Scalars["String"]["output"]>
  /** The customer's last order. */
  lastOrder?: Maybe<ShopifyOrder>
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /**
   * The amount of time since the customer was first added to the store.
   *
   * Example: 'about 12 years'.
   */
  lifetimeDuration: Scalars["String"]["output"]
  /** The customer's locale. */
  locale: Scalars["String"]["output"]
  /**
   * The market that includes the customer’s default address.
   * @deprecated This `market` field will be removed in a future version of the API.
   */
  market?: Maybe<ShopifyMarket>
  /** Whether the customer can be merged with another customer. */
  mergeable: ShopifyCustomerMergeable
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** A unique identifier for the customer that's used with Multipass login. */
  multipassIdentifier?: Maybe<Scalars["String"]["output"]>
  /** A note about the customer. */
  note?: Maybe<Scalars["String"]["output"]>
  /** The number of orders that the customer has made at the store in their lifetime. */
  numberOfOrders: Scalars["UnsignedInt64"]["output"]
  /** A list of the customer's orders. */
  orders: ShopifyOrderConnection
  /** A list of the customer's payment methods. */
  paymentMethods: ShopifyCustomerPaymentMethodConnection
  /**
   * The customer's phone number.
   * @deprecated Use `defaultPhoneNumber.phoneNumber` instead.
   */
  phone?: Maybe<Scalars["String"]["output"]>
  /** Possible subscriber states of a customer defined by their subscription contracts. */
  productSubscriberStatus: ShopifyCustomerProductSubscriberStatus
  /**
   * The current SMS marketing state for the customer's phone number.
   *
   * If the customer does not have a phone number, then this property is `null`.
   * @deprecated Use `defaultPhoneNumber.marketingState`, `defaultPhoneNumber.marketingOptInLevel`, `defaultPhoneNumber.marketingUpdatedAt`, `defaultPhoneNumber.marketingCollectedFrom`, and `defaultPhoneNumber.sourceLocation` instead.
   */
  smsMarketingConsent?: Maybe<ShopifyCustomerSmsMarketingConsentState>
  /**
   * The state of the customer's account with the shop.
   *
   * Please note that this only meaningful when Classic Customer Accounts is active.
   */
  state: ShopifyCustomerState
  /** The statistics for a given customer. */
  statistics: ShopifyCustomerStatistics
  /**
   * Returns a list of store credit accounts that belong to the owner resource.
   * A store credit account owner can hold multiple accounts each with a different currency.
   */
  storeCreditAccounts: ShopifyStoreCreditAccountConnection
  /** A list of the customer's subscription contracts. */
  subscriptionContracts: ShopifySubscriptionContractConnection
  /** A comma separated list of tags that have been added to the customer. */
  tags: Array<Scalars["String"]["output"]>
  /** Whether the customer is exempt from being charged taxes on their orders. */
  taxExempt: Scalars["Boolean"]["output"]
  /** The list of tax exemptions applied to the customer. */
  taxExemptions: Array<ShopifyTaxExemption>
  /**
   * The URL to unsubscribe the customer from the mailing list.
   * @deprecated Use `defaultEmailAddress.marketingUnsubscribeUrl` instead.
   */
  unsubscribeUrl: Scalars["URL"]["output"]
  /** The date and time when the customer was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
  /**
   * Whether the email address is formatted correctly.
   *
   * Returns `true` when the email is formatted correctly and
   * belongs to an existing domain. This doesn't guarantee that
   * the email address actually exists.
   * @deprecated Use `defaultEmailAddress.validFormat` instead.
   */
  validEmailAddress: Scalars["Boolean"]["output"]
  /** Whether the customer has verified their email address. Defaults to `true` if the customer is created through the Shopify admin or API. */
  verifiedEmail: Scalars["Boolean"]["output"]
}

/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export interface ShopifyCustomerAddressesArgs {
  first?: InputMaybe<Scalars["Int"]["input"]>
}

/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export interface ShopifyCustomerAddressesV2Args {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export interface ShopifyCustomerEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export interface ShopifyCustomerMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export interface ShopifyCustomerMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export interface ShopifyCustomerMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export interface ShopifyCustomerOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyOrderSortKeys>
}

/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export interface ShopifyCustomerPaymentMethodsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  showRevoked?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export interface ShopifyCustomerStoreCreditAccountsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 */
export interface ShopifyCustomerSubscriptionContractsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An app extension page for the customer account navigation menu. */
export interface ShopifyCustomerAccountAppExtensionPage
  extends ShopifyCustomerAccountPage,
    ShopifyNavigable,
    ShopifyNode {
  __typename?: "CustomerAccountAppExtensionPage"
  /** The UUID of the app extension. */
  appExtensionUuid?: Maybe<Scalars["String"]["output"]>
  /** A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars["String"]["output"]
  /** A unique, human-friendly string for the customer account page. */
  handle: Scalars["String"]["output"]
  /** The unique ID for the customer account page. */
  id: Scalars["ID"]["output"]
  /** The title of the customer account page. */
  title: Scalars["String"]["output"]
}

/** A native page for the customer account navigation menu. */
export interface ShopifyCustomerAccountNativePage
  extends ShopifyCustomerAccountPage,
    ShopifyNavigable,
    ShopifyNode {
  __typename?: "CustomerAccountNativePage"
  /** A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars["String"]["output"]
  /** A unique, human-friendly string for the customer account page. */
  handle: Scalars["String"]["output"]
  /** The unique ID for the customer account page. */
  id: Scalars["ID"]["output"]
  /** The type of customer account native page. */
  pageType: ShopifyCustomerAccountNativePagePageType
  /** The title of the customer account page. */
  title: Scalars["String"]["output"]
}

/** The type of customer account native page. */
export type ShopifyCustomerAccountNativePagePageType =
  /** An orders page type. */
  | "NATIVE_ORDERS"
  /** A profile page type. */
  | "NATIVE_PROFILE"
  /** A settings page type. */
  | "NATIVE_SETTINGS"
  /** An unknown page type. Represents new page types that may be added in future versions. */
  | "UNKNOWN"
  | "%future added value"

/** A customer account page. */
export interface ShopifyCustomerAccountPage {
  /** A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars["String"]["output"]
  /** A unique, human-friendly string for the customer account page. */
  handle: Scalars["String"]["output"]
  /** The unique ID for the customer account page. */
  id: Scalars["ID"]["output"]
  /** The title of the customer account page. */
  title: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple CustomerAccountPages. */
export interface ShopifyCustomerAccountPageConnection {
  __typename?: "CustomerAccountPageConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCustomerAccountPageEdge>
  /** A list of nodes that are contained in CustomerAccountPageEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCustomerAccountPage>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one CustomerAccountPage and a cursor during pagination. */
export interface ShopifyCustomerAccountPageEdge {
  __typename?: "CustomerAccountPageEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CustomerAccountPageEdge. */
  node: ShopifyCustomerAccountPage
}

/** Information about the shop's customer accounts. */
export interface ShopifyCustomerAccountsV2 {
  __typename?: "CustomerAccountsV2"
  /** Indicates which version of customer accounts the merchant is using in online store and checkout. */
  customerAccountsVersion: ShopifyCustomerAccountsVersion
  /** Login links are shown in online store and checkout. */
  loginLinksVisibleOnStorefrontAndCheckout: Scalars["Boolean"]["output"]
  /** Customers are required to log in to their account before checkout. */
  loginRequiredAtCheckout: Scalars["Boolean"]["output"]
  /** The root url for the customer accounts pages. */
  url?: Maybe<Scalars["URL"]["output"]>
}

/** The login redirection target for customer accounts. */
export type ShopifyCustomerAccountsVersion =
  /** The customer is redirected to the classic customer accounts login page. */
  | "CLASSIC"
  /** The customer is redirected to the new customer accounts login page. */
  | "NEW_CUSTOMER_ACCOUNTS"
  | "%future added value"

/** Return type for `customerAddTaxExemptions` mutation. */
export interface ShopifyCustomerAddTaxExemptionsPayload {
  __typename?: "CustomerAddTaxExemptionsPayload"
  /** The updated customer. */
  customer?: Maybe<ShopifyCustomer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `customerAddressCreate` mutation. */
export interface ShopifyCustomerAddressCreatePayload {
  __typename?: "CustomerAddressCreatePayload"
  /** The created address. */
  address?: Maybe<ShopifyMailingAddress>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `customerAddressDelete` mutation. */
export interface ShopifyCustomerAddressDeletePayload {
  __typename?: "CustomerAddressDeletePayload"
  /** The ID of the address deleted from the customer. */
  deletedAddressId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `customerAddressUpdate` mutation. */
export interface ShopifyCustomerAddressUpdatePayload {
  __typename?: "CustomerAddressUpdatePayload"
  /** The updated address. */
  address?: Maybe<ShopifyMailingAddress>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Possible error codes that can be returned by `CustomerCancelDataErasureUserError`. */
export type ShopifyCustomerCancelDataErasureErrorCode =
  /** Customer does not exist. */
  | "DOES_NOT_EXIST"
  /** Failed to cancel customer data erasure. */
  | "FAILED_TO_CANCEL"
  /** Customer's data is not scheduled for erasure. */
  | "NOT_BEING_ERASED"
  /** Only the original requester can cancel this data erasure. */
  | "UNAUTHORIZED_CANCELLATION"
  | "%future added value"

/** Return type for `customerCancelDataErasure` mutation. */
export interface ShopifyCustomerCancelDataErasurePayload {
  __typename?: "CustomerCancelDataErasurePayload"
  /** The ID of the customer whose pending data erasure has been cancelled. */
  customerId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCustomerCancelDataErasureUserError>
}

/** An error that occurs when cancelling a customer data erasure request. */
export interface ShopifyCustomerCancelDataErasureUserError
  extends ShopifyDisplayableError {
  __typename?: "CustomerCancelDataErasureUserError"
  /** The error code. */
  code?: Maybe<ShopifyCustomerCancelDataErasureErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple Customers. */
export interface ShopifyCustomerConnection {
  __typename?: "CustomerConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCustomerEdge>
  /** A list of nodes that are contained in CustomerEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCustomer>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The source that collected the customer's consent to receive marketing materials. */
export type ShopifyCustomerConsentCollectedFrom =
  /** The customer consent was collected outside of Shopify. */
  | "OTHER"
  /** The customer consent was collected by Shopify. */
  | "SHOPIFY"
  | "%future added value"

/** Return type for `customerCreate` mutation. */
export interface ShopifyCustomerCreatePayload {
  __typename?: "CustomerCreatePayload"
  /** The created customer. */
  customer?: Maybe<ShopifyCustomer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Represents a card instrument for customer payment method. */
export interface ShopifyCustomerCreditCard {
  __typename?: "CustomerCreditCard"
  /** The billing address of the card. */
  billingAddress?: Maybe<ShopifyCustomerCreditCardBillingAddress>
  /** The brand of the card. */
  brand: Scalars["String"]["output"]
  /** Whether the card is about to expire. */
  expiresSoon: Scalars["Boolean"]["output"]
  /** The expiry month of the card. */
  expiryMonth: Scalars["Int"]["output"]
  /** The expiry year of the card. */
  expiryYear: Scalars["Int"]["output"]
  /** The card's BIN number. */
  firstDigits?: Maybe<Scalars["String"]["output"]>
  /** The payment method can be revoked if there are no active subscription contracts. */
  isRevocable: Scalars["Boolean"]["output"]
  /** The last 4 digits of the card. */
  lastDigits: Scalars["String"]["output"]
  /** The masked card number with only the last 4 digits displayed. */
  maskedNumber: Scalars["String"]["output"]
  /** The name of the card holder. */
  name: Scalars["String"]["output"]
  /** The source of the card if coming from a wallet such as Apple Pay. */
  source?: Maybe<Scalars["String"]["output"]>
  /** The last 4 digits of the Device Account Number. */
  virtualLastDigits?: Maybe<Scalars["String"]["output"]>
}

/** The billing address of a credit card payment instrument. */
export interface ShopifyCustomerCreditCardBillingAddress {
  __typename?: "CustomerCreditCardBillingAddress"
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars["String"]["output"]>
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars["String"]["output"]>
  /** The name of the country. */
  country?: Maybe<Scalars["String"]["output"]>
  /**
   * The two-letter code for the country of the address.
   * For example, US.
   */
  countryCode?: Maybe<ShopifyCountryCode>
  /** The first name in the billing address. */
  firstName?: Maybe<Scalars["String"]["output"]>
  /** The last name in the billing address. */
  lastName?: Maybe<Scalars["String"]["output"]>
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars["String"]["output"]>
  /**
   * The alphanumeric code for the region.
   * For example, ON.
   */
  provinceCode?: Maybe<Scalars["String"]["output"]>
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars["String"]["output"]>
}

/** The input fields to delete a customer. */
export interface ShopifyCustomerDeleteInput {
  /** The ID of the customer to delete. */
  id: Scalars["ID"]["input"]
}

/** Return type for `customerDelete` mutation. */
export interface ShopifyCustomerDeletePayload {
  __typename?: "CustomerDeletePayload"
  /** The ID of the deleted customer. */
  deletedCustomerId?: Maybe<Scalars["ID"]["output"]>
  /** The shop of the deleted customer. */
  shop: ShopifyShop
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type which holds one Customer and a cursor during pagination. */
export interface ShopifyCustomerEdge {
  __typename?: "CustomerEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CustomerEdge. */
  node: ShopifyCustomer
}

/** Represents an email address. */
export interface ShopifyCustomerEmailAddress {
  __typename?: "CustomerEmailAddress"
  /** The customer's default email address. */
  emailAddress: Scalars["String"]["output"]
  /**
   * The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,
   * received when the marketing consent was updated.
   */
  marketingOptInLevel?: Maybe<ShopifyCustomerMarketingOptInLevel>
  /** Whether the customer has subscribed to email marketing. */
  marketingState: ShopifyCustomerEmailAddressMarketingState
  /** The URL to unsubscribe a member from all mailing lists. */
  marketingUnsubscribeUrl: Scalars["URL"]["output"]
  /**
   * The date and time at which the marketing consent was updated.
   *
   * No date is provided if the email address never updated its marketing consent.
   */
  marketingUpdatedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** Whether the customer has opted in to having their opened emails tracked. */
  openTrackingLevel: ShopifyCustomerEmailAddressOpenTrackingLevel
  /** The URL that can be used to opt a customer in or out of email open tracking. */
  openTrackingUrl: Scalars["URL"]["output"]
  /** The location where the customer consented to receive marketing material by email. */
  sourceLocation?: Maybe<ShopifyLocation>
  /**
   * Whether the email address is formatted correctly.
   *
   * Returns `true` when the email is formatted correctly. This doesn't guarantee that the email address
   * actually exists.
   */
  validFormat: Scalars["Boolean"]["output"]
}

/** Possible marketing states for the customer’s email address. */
export type ShopifyCustomerEmailAddressMarketingState =
  /** The customer’s email address marketing state is invalid. */
  | "INVALID"
  /** The customer is not subscribed to email marketing. */
  | "NOT_SUBSCRIBED"
  /** The customer is in the process of subscribing to email marketing. */
  | "PENDING"
  /** The customer is subscribed to email marketing. */
  | "SUBSCRIBED"
  /** The customer is not subscribed to email marketing but was previously subscribed. */
  | "UNSUBSCRIBED"
  | "%future added value"

/** The different levels related to whether a customer has opted in to having their opened emails tracked. */
export type ShopifyCustomerEmailAddressOpenTrackingLevel =
  /** The customer has opted in to having their open emails tracked. */
  | "OPTED_IN"
  /** The customer has opted out of having their open emails tracked. */
  | "OPTED_OUT"
  /** The customer has not specified whether they want to opt in or out of having their open emails tracked. */
  | "UNKNOWN"
  | "%future added value"

/**
 * Information that describes when a customer consented to
 *         receiving marketing material by email.
 */
export interface ShopifyCustomerEmailMarketingConsentInput {
  /**
   * The latest date and time when the customer consented or objected to
   *           receiving marketing material by email.
   */
  consentUpdatedAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The customer opt-in level at the time of subscribing to marketing material. */
  marketingOptInLevel?: InputMaybe<ShopifyCustomerMarketingOptInLevel>
  /**
   * The current marketing state associated with the customer's email.
   *           If the customer doesn't have an email, then this field is `null`.
   */
  marketingState: ShopifyCustomerEmailMarketingState
  /** Identifies the location where the customer consented to receiving marketing material by email. */
  sourceLocationId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The record of when a customer consented to receive marketing material by email. */
export interface ShopifyCustomerEmailMarketingConsentState {
  __typename?: "CustomerEmailMarketingConsentState"
  /**
   * The date and time at which the customer consented to receive marketing material by email.
   * The customer's consent state reflects the consent record with the most recent `consent_updated_at` date.
   * If no date is provided, then the date and time at which the consent information was sent is used.
   */
  consentUpdatedAt?: Maybe<Scalars["DateTime"]["output"]>
  /**
   * The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,
   * that the customer gave when they consented to receive marketing material by email.
   */
  marketingOptInLevel?: Maybe<ShopifyCustomerMarketingOptInLevel>
  /** The current email marketing state for the customer. */
  marketingState: ShopifyCustomerEmailMarketingState
  /** The location where the customer consented to receive marketing material by email. */
  sourceLocation?: Maybe<ShopifyLocation>
}

/** The input fields for the email consent information to update for a given customer ID. */
export interface ShopifyCustomerEmailMarketingConsentUpdateInput {
  /** The ID of the customer for which to update the email marketing consent information. The customer must have a unique email address associated to the record. If not, add the email address using the `customerUpdate` mutation first. */
  customerId: Scalars["ID"]["input"]
  /** The marketing consent information when the customer consented to receiving marketing material by email. */
  emailMarketingConsent: ShopifyCustomerEmailMarketingConsentInput
}

/** Return type for `customerEmailMarketingConsentUpdate` mutation. */
export interface ShopifyCustomerEmailMarketingConsentUpdatePayload {
  __typename?: "CustomerEmailMarketingConsentUpdatePayload"
  /** The updated customer. */
  customer?: Maybe<ShopifyCustomer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCustomerEmailMarketingConsentUpdateUserError>
}

/** An error that occurs during the execution of `CustomerEmailMarketingConsentUpdate`. */
export interface ShopifyCustomerEmailMarketingConsentUpdateUserError
  extends ShopifyDisplayableError {
  __typename?: "CustomerEmailMarketingConsentUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyCustomerEmailMarketingConsentUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CustomerEmailMarketingConsentUpdateUserError`. */
export type ShopifyCustomerEmailMarketingConsentUpdateUserErrorCode =
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** Unexpected internal error happened. */
  | "INTERNAL_ERROR"
  /** The input value is invalid. */
  | "INVALID"
  /** Missing a required argument. */
  | "MISSING_ARGUMENT"
  | "%future added value"

/** The possible email marketing states for a customer. */
export type ShopifyCustomerEmailMarketingState =
  /** The customer’s email address marketing state is invalid. */
  | "INVALID"
  /** The customer isn't subscribed to email marketing. */
  | "NOT_SUBSCRIBED"
  /** The customer is in the process of subscribing to email marketing. */
  | "PENDING"
  /** The customer's personal data is erased. This value is internally-set and read-only. */
  | "REDACTED"
  /** The customer is subscribed to email marketing. */
  | "SUBSCRIBED"
  /** The customer isn't currently subscribed to email marketing but was previously subscribed. */
  | "UNSUBSCRIBED"
  | "%future added value"

/** Return type for `customerGenerateAccountActivationUrl` mutation. */
export interface ShopifyCustomerGenerateAccountActivationUrlPayload {
  __typename?: "CustomerGenerateAccountActivationUrlPayload"
  /** The generated account activation URL. */
  accountActivationUrl?: Maybe<Scalars["URL"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields for identifying a customer. */
export interface ShopifyCustomerIdentifierInput {
  /** The [custom ID](https://shopify.dev/docs/apps/build/custom-data/metafields/working-with-custom-ids) of the customer. */
  customId?: InputMaybe<ShopifyUniqueMetafieldValueInput>
  /** The email address of the customer. */
  emailAddress?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of the customer. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** The phone number of the customer. */
  phoneNumber?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields and values to use when creating or updating a customer. */
export interface ShopifyCustomerInput {
  /** The addresses for a customer. */
  addresses?: InputMaybe<Array<ShopifyMailingAddressInput>>
  /** The unique email address of the customer. */
  email?: InputMaybe<Scalars["String"]["input"]>
  /**
   * Information that describes when the customer consented to receiving marketing
   *         material by email. The `email` field is required when creating a customer with email marketing
   *         consent information.
   */
  emailMarketingConsent?: InputMaybe<ShopifyCustomerEmailMarketingConsentInput>
  /** The customer's first name. */
  firstName?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of the customer to update. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** The customer's last name. */
  lastName?: InputMaybe<Scalars["String"]["input"]>
  /** The customer's locale. */
  locale?: InputMaybe<Scalars["String"]["input"]>
  /** Additional metafields to associate to the customer. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** A note about the customer. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** The unique phone number for the customer. */
  phone?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The marketing consent information when the customer consented to receiving marketing
   *         material by SMS. The `phone` field is required when creating a customer with SMS
   *         marketing consent information.
   */
  smsMarketingConsent?: InputMaybe<ShopifyCustomerSmsMarketingConsentInput>
  /**
   * A list of tags to associate with the customer. Can be an array or a comma-separated list. Example values: `["tag1", "tag2", "tag3"]`, `"tag1, tag2, tag3"`
   *
   * Updating `tags` overwrites any existing tags that were previously added to the customer. To add new tags without overwriting
   * existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** Whether the customer is exempt from paying taxes on their order. */
  taxExempt?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The list of tax exemptions to apply to the customer. */
  taxExemptions?: InputMaybe<Array<ShopifyTaxExemption>>
}

/** Represents a customer's visiting activities on a shop's online store. */
export interface ShopifyCustomerJourney {
  __typename?: "CustomerJourney"
  /** The position of the current order within the customer's order history. */
  customerOrderIndex: Scalars["Int"]["output"]
  /** The amount of days between first session and order creation date. First session represents first session since the last order, or first session within the 30 day attribution window, if more than 30 days has passed since the last order. */
  daysToConversion: Scalars["Int"]["output"]
  /** The customer's first session going into the shop. */
  firstVisit: ShopifyCustomerVisit
  /** The last session before an order is made. */
  lastVisit?: Maybe<ShopifyCustomerVisit>
  /** Events preceding a customer order, such as shop sessions. */
  moments: Array<ShopifyCustomerMoment>
}

/** Represents a customer's visiting activities on a shop's online store. */
export interface ShopifyCustomerJourneySummary {
  __typename?: "CustomerJourneySummary"
  /** The position of the current order within the customer's order history. Test orders aren't included. */
  customerOrderIndex?: Maybe<Scalars["Int"]["output"]>
  /** The number of days between the first session and the order creation date. The first session represents the first session since the last order, or the first session within the 30 day attribution window, if more than 30 days have passed since the last order. */
  daysToConversion?: Maybe<Scalars["Int"]["output"]>
  /** The customer's first session going into the shop. */
  firstVisit?: Maybe<ShopifyCustomerVisit>
  /** The last session before an order is made. */
  lastVisit?: Maybe<ShopifyCustomerVisit>
  /** The events preceding a customer's order, such as shop sessions. */
  moments?: Maybe<ShopifyCustomerMomentConnection>
  /** The total number of customer moments associated with this order. Returns null if the order is still in the process of being attributed. */
  momentsCount?: Maybe<ShopifyCount>
  /** Whether the attributed sessions for the order have been created yet. */
  ready: Scalars["Boolean"]["output"]
}

/** Represents a customer's visiting activities on a shop's online store. */
export interface ShopifyCustomerJourneySummaryMomentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The possible values for the marketing subscription opt-in level enabled at the time the customer consented to receive marketing information.
 *
 * The levels are defined by [the M3AAWG best practices guideline
 *   document](https://www.m3aawg.org/sites/maawg/files/news/M3AAWG_Senders_BCP_Ver3-2015-02.pdf).
 */
export type ShopifyCustomerMarketingOptInLevel =
  /**
   * After providing their information, the customer receives a confirmation and is required to
   * perform a intermediate step before receiving marketing information.
   */
  | "CONFIRMED_OPT_IN"
  /**
   * After providing their information, the customer receives marketing information without any
   * intermediate steps.
   */
  | "SINGLE_OPT_IN"
  /** The customer receives marketing information but how they were opted in is unknown. */
  | "UNKNOWN"
  | "%future added value"

/** The error blocking a customer merge. */
export interface ShopifyCustomerMergeError {
  __typename?: "CustomerMergeError"
  /** The list of fields preventing the customer from being merged. */
  errorFields: Array<ShopifyCustomerMergeErrorFieldType>
  /** The customer merge error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CustomerMergeUserError`. */
export type ShopifyCustomerMergeErrorCode =
  /** The customer cannot be merged because it has associated gift cards. */
  | "CUSTOMER_HAS_GIFT_CARDS"
  /** An internal error occurred. */
  | "INTERNAL_ERROR"
  /** The customer cannot be merged. */
  | "INVALID_CUSTOMER"
  /** The customer ID is invalid. */
  | "INVALID_CUSTOMER_ID"
  /** The customer is missing the attribute requested for override. */
  | "MISSING_OVERRIDE_ATTRIBUTE"
  /** The override attribute is invalid. */
  | "OVERRIDE_ATTRIBUTE_INVALID"
  | "%future added value"

/** The types of the hard blockers preventing a customer from being merged to another customer. */
export type ShopifyCustomerMergeErrorFieldType =
  /** The customer is a company contact. */
  | "COMPANY_CONTACT"
  /** The customer has payment methods. */
  | "CUSTOMER_PAYMENT_METHODS"
  /** The customer does not exist. */
  | "DELETED_AT"
  /** The customer has gift cards. */
  | "GIFT_CARDS"
  /** The customer has a merge in progress. */
  | "MERGE_IN_PROGRESS"
  /** The customer has a multipass identifier. */
  | "MULTIPASS_IDENTIFIER"
  /** The override fields are invalid. */
  | "OVERRIDE_FIELDS"
  /** The customer has a pending data request. */
  | "PENDING_DATA_REQUEST"
  /** The customer has a pending or completed redaction. */
  | "REDACTED_AT"
  /** The customer has store credit. */
  | "STORE_CREDIT"
  /** The customer has a subscription history. */
  | "SUBSCRIPTIONS"
  | "%future added value"

/** The input fields to override default customer merge rules. */
export interface ShopifyCustomerMergeOverrideFields {
  /** The ID of the customer whose default address will be kept. */
  customerIdOfDefaultAddressToKeep?: InputMaybe<Scalars["ID"]["input"]>
  /** The ID of the customer whose email will be kept. */
  customerIdOfEmailToKeep?: InputMaybe<Scalars["ID"]["input"]>
  /** The ID of the customer whose first name will be kept. */
  customerIdOfFirstNameToKeep?: InputMaybe<Scalars["ID"]["input"]>
  /** The ID of the customer whose last name will be kept. */
  customerIdOfLastNameToKeep?: InputMaybe<Scalars["ID"]["input"]>
  /** The ID of the customer whose phone number will be kept. */
  customerIdOfPhoneNumberToKeep?: InputMaybe<Scalars["ID"]["input"]>
  /** The note to keep. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** The tags to keep. */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
}

/** Return type for `customerMerge` mutation. */
export interface ShopifyCustomerMergePayload {
  __typename?: "CustomerMergePayload"
  /** The asynchronous job for merging the customers. */
  job?: Maybe<ShopifyJob>
  /** The ID of the customer resulting from the merge. */
  resultingCustomerId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCustomerMergeUserError>
}

/** A preview of the results of a customer merge request. */
export interface ShopifyCustomerMergePreview {
  __typename?: "CustomerMergePreview"
  /** The fields that can be used to override the default fields. */
  alternateFields?: Maybe<ShopifyCustomerMergePreviewAlternateFields>
  /** The fields that will block the merge if the two customers are merged. */
  blockingFields?: Maybe<ShopifyCustomerMergePreviewBlockingFields>
  /** The errors blocking the customer merge. */
  customerMergeErrors?: Maybe<Array<ShopifyCustomerMergeError>>
  /** The fields that will be kept if the two customers are merged. */
  defaultFields?: Maybe<ShopifyCustomerMergePreviewDefaultFields>
  /** The resulting customer ID if the two customers are merged. */
  resultingCustomerId?: Maybe<Scalars["ID"]["output"]>
}

/** The fields that can be used to override the default fields. */
export interface ShopifyCustomerMergePreviewAlternateFields {
  __typename?: "CustomerMergePreviewAlternateFields"
  /** The default address of a customer. */
  defaultAddress?: Maybe<ShopifyMailingAddress>
  /** The email state of a customer. */
  email?: Maybe<ShopifyCustomerEmailAddress>
  /** The first name of a customer. */
  firstName?: Maybe<Scalars["String"]["output"]>
  /** The last name of a customer. */
  lastName?: Maybe<Scalars["String"]["output"]>
  /** The phone number state of a customer. */
  phoneNumber?: Maybe<ShopifyCustomerPhoneNumber>
}

/** The blocking fields of a customer merge preview. These fields will block customer merge unless edited. */
export interface ShopifyCustomerMergePreviewBlockingFields {
  __typename?: "CustomerMergePreviewBlockingFields"
  /** The merged note resulting from a customer merge. The merged note is over the 5000 character limit and will block customer merge. */
  note?: Maybe<Scalars["String"]["output"]>
  /** The merged tags resulting from a customer merge. The merged tags are over the 250 limit and will block customer merge. */
  tags: Array<Scalars["String"]["output"]>
}

/** The fields that will be kept as part of a customer merge preview. */
export interface ShopifyCustomerMergePreviewDefaultFields {
  __typename?: "CustomerMergePreviewDefaultFields"
  /** The merged addresses resulting from a customer merge. */
  addresses: ShopifyMailingAddressConnection
  /** The default address resulting from a customer merge. */
  defaultAddress?: Maybe<ShopifyMailingAddress>
  /** The total number of customer-specific discounts resulting from a customer merge. */
  discountNodeCount: Scalars["UnsignedInt64"]["output"]
  /** The merged customer-specific discounts resulting from a customer merge. */
  discountNodes: ShopifyDiscountNodeConnection
  /** The full name of the customer, based on the values for `first_name` and `last_name`. If `first_name` and `last_name` aren't available, then this field falls back to the customer's email address. If the customer's email isn't available, then this field falls back to the customer's phone number. */
  displayName: Scalars["String"]["output"]
  /** The total number of merged draft orders. */
  draftOrderCount: Scalars["UnsignedInt64"]["output"]
  /** The merged draft orders resulting from a customer merge. */
  draftOrders: ShopifyDraftOrderConnection
  /** The email state of a customer. */
  email?: Maybe<ShopifyCustomerEmailAddress>
  /** The first name resulting from a customer merge. */
  firstName?: Maybe<Scalars["String"]["output"]>
  /** The total number of merged gift cards. */
  giftCardCount: Scalars["UnsignedInt64"]["output"]
  /** The merged gift cards resulting from a customer merge. */
  giftCards: ShopifyGiftCardConnection
  /** The last name resulting from a customer merge. */
  lastName?: Maybe<Scalars["String"]["output"]>
  /** The total number of merged metafields. */
  metafieldCount: Scalars["UnsignedInt64"]["output"]
  /** The merged note resulting from a customer merge. */
  note?: Maybe<Scalars["String"]["output"]>
  /** The total number of merged orders. */
  orderCount: Scalars["UnsignedInt64"]["output"]
  /** The merged orders resulting from a customer merge. */
  orders: ShopifyOrderConnection
  /** The phone number state of a customer. */
  phoneNumber?: Maybe<ShopifyCustomerPhoneNumber>
  /** The merged tags resulting from a customer merge. */
  tags: Array<Scalars["String"]["output"]>
}

/** The fields that will be kept as part of a customer merge preview. */
export interface ShopifyCustomerMergePreviewDefaultFieldsAddressesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The fields that will be kept as part of a customer merge preview. */
export interface ShopifyCustomerMergePreviewDefaultFieldsDiscountNodesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyDiscountSortKeys>
}

/** The fields that will be kept as part of a customer merge preview. */
export interface ShopifyCustomerMergePreviewDefaultFieldsDraftOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyDraftOrderSortKeys>
}

/** The fields that will be kept as part of a customer merge preview. */
export interface ShopifyCustomerMergePreviewDefaultFieldsGiftCardsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyGiftCardSortKeys>
}

/** The fields that will be kept as part of a customer merge preview. */
export interface ShopifyCustomerMergePreviewDefaultFieldsOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyOrderSortKeys>
}

/** A merge request for merging two customers. */
export interface ShopifyCustomerMergeRequest {
  __typename?: "CustomerMergeRequest"
  /** The merge errors that occurred during the customer merge request. */
  customerMergeErrors: Array<ShopifyCustomerMergeError>
  /** The UUID of the merge job. */
  jobId?: Maybe<Scalars["ID"]["output"]>
  /** The ID of the customer resulting from the merge. */
  resultingCustomerId: Scalars["ID"]["output"]
  /** The status of the customer merge request. */
  status: ShopifyCustomerMergeRequestStatus
}

/** The status of the customer merge request. */
export type ShopifyCustomerMergeRequestStatus =
  /** The customer merge request has been completed. */
  | "COMPLETED"
  /** The customer merge request has failed. */
  | "FAILED"
  /** The customer merge request is currently in progress. */
  | "IN_PROGRESS"
  /** The customer merge request has been requested. */
  | "REQUESTED"
  | "%future added value"

/** An error that occurs while merging two customers. */
export interface ShopifyCustomerMergeUserError extends ShopifyDisplayableError {
  __typename?: "CustomerMergeUserError"
  /** The error code. */
  code?: Maybe<ShopifyCustomerMergeErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** An object that represents whether a customer can be merged with another customer. */
export interface ShopifyCustomerMergeable {
  __typename?: "CustomerMergeable"
  /** The list of fields preventing the customer from being merged. */
  errorFields: Array<ShopifyCustomerMergeErrorFieldType>
  /** Whether the customer can be merged with another customer. */
  isMergeable: Scalars["Boolean"]["output"]
  /** The merge request if one is currently in progress. */
  mergeInProgress?: Maybe<ShopifyCustomerMergeRequest>
  /** The reason why the customer can't be merged with another customer. */
  reason?: Maybe<Scalars["String"]["output"]>
}

/** Represents a session preceding an order, often used for building a timeline of events leading to an order. */
export interface ShopifyCustomerMoment {
  /** The date and time when the customer's session occurred. */
  occurredAt: Scalars["DateTime"]["output"]
}

/** An auto-generated type for paginating through multiple CustomerMoments. */
export interface ShopifyCustomerMomentConnection {
  __typename?: "CustomerMomentConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCustomerMomentEdge>
  /** A list of nodes that are contained in CustomerMomentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCustomerMoment>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one CustomerMoment and a cursor during pagination. */
export interface ShopifyCustomerMomentEdge {
  __typename?: "CustomerMomentEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CustomerMomentEdge. */
  node: ShopifyCustomerMoment
}

/** All possible instruments for CustomerPaymentMethods. */
export type ShopifyCustomerPaymentInstrument =
  | ShopifyCustomerCreditCard
  | ShopifyCustomerPaypalBillingAgreement
  | ShopifyCustomerShopPayAgreement

/** The billing address of a payment instrument. */
export interface ShopifyCustomerPaymentInstrumentBillingAddress {
  __typename?: "CustomerPaymentInstrumentBillingAddress"
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars["String"]["output"]>
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars["String"]["output"]>
  /** The name of the country. */
  country?: Maybe<Scalars["String"]["output"]>
  /**
   * The two-letter code for the country of the address.
   * For example, US.
   */
  countryCode?: Maybe<ShopifyCountryCode>
  /** The name of the buyer of the address. */
  name?: Maybe<Scalars["String"]["output"]>
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars["String"]["output"]>
  /**
   * The alphanumeric code for the region.
   * For example, ON.
   */
  provinceCode?: Maybe<Scalars["String"]["output"]>
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars["String"]["output"]>
}

/** A customer's payment method. */
export interface ShopifyCustomerPaymentMethod extends ShopifyNode {
  __typename?: "CustomerPaymentMethod"
  /** The customer to whom the payment method belongs. */
  customer?: Maybe<ShopifyCustomer>
  /** The ID of this payment method. */
  id: Scalars["ID"]["output"]
  /** The instrument for this payment method. */
  instrument?: Maybe<ShopifyCustomerPaymentInstrument>
  /** The time that the payment method was revoked. */
  revokedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The revocation reason for this payment method. */
  revokedReason?: Maybe<ShopifyCustomerPaymentMethodRevocationReason>
  /** List Subscription Contracts. */
  subscriptionContracts: ShopifySubscriptionContractConnection
}

/** A customer's payment method. */
export interface ShopifyCustomerPaymentMethodSubscriptionContractsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple CustomerPaymentMethods. */
export interface ShopifyCustomerPaymentMethodConnection {
  __typename?: "CustomerPaymentMethodConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCustomerPaymentMethodEdge>
  /** A list of nodes that are contained in CustomerPaymentMethodEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCustomerPaymentMethod>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `customerPaymentMethodCreateFromDuplicationData` mutation. */
export interface ShopifyCustomerPaymentMethodCreateFromDuplicationDataPayload {
  __typename?: "CustomerPaymentMethodCreateFromDuplicationDataPayload"
  /** The customer payment method. */
  customerPaymentMethod?: Maybe<ShopifyCustomerPaymentMethod>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCustomerPaymentMethodCreateFromDuplicationDataUserError>
}

/** An error that occurs during the execution of `CustomerPaymentMethodCreateFromDuplicationData`. */
export interface ShopifyCustomerPaymentMethodCreateFromDuplicationDataUserError
  extends ShopifyDisplayableError {
  __typename?: "CustomerPaymentMethodCreateFromDuplicationDataUserError"
  /** The error code. */
  code?: Maybe<ShopifyCustomerPaymentMethodCreateFromDuplicationDataUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CustomerPaymentMethodCreateFromDuplicationDataUserError`. */
export type ShopifyCustomerPaymentMethodCreateFromDuplicationDataUserErrorCode =
  /** Customer doesn't exist. */
  | "CUSTOMER_DOES_NOT_EXIST"
  /** Invalid encrypted duplication data. */
  | "INVALID_ENCRYPTED_DUPLICATION_DATA"
  /** Too many requests. */
  | "TOO_MANY_REQUESTS"
  | "%future added value"

/** Return type for `customerPaymentMethodCreditCardCreate` mutation. */
export interface ShopifyCustomerPaymentMethodCreditCardCreatePayload {
  __typename?: "CustomerPaymentMethodCreditCardCreatePayload"
  /** The customer payment method. */
  customerPaymentMethod?: Maybe<ShopifyCustomerPaymentMethod>
  /** If the card verification result is processing. When this is true, customer_payment_method will be null. */
  processing?: Maybe<Scalars["Boolean"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `customerPaymentMethodCreditCardUpdate` mutation. */
export interface ShopifyCustomerPaymentMethodCreditCardUpdatePayload {
  __typename?: "CustomerPaymentMethodCreditCardUpdatePayload"
  /** The customer payment method. */
  customerPaymentMethod?: Maybe<ShopifyCustomerPaymentMethod>
  /** If the card verification result is processing. When this is true, customer_payment_method will be null. */
  processing?: Maybe<Scalars["Boolean"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination. */
export interface ShopifyCustomerPaymentMethodEdge {
  __typename?: "CustomerPaymentMethodEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CustomerPaymentMethodEdge. */
  node: ShopifyCustomerPaymentMethod
}

/** Return type for `customerPaymentMethodGetDuplicationData` mutation. */
export interface ShopifyCustomerPaymentMethodGetDuplicationDataPayload {
  __typename?: "CustomerPaymentMethodGetDuplicationDataPayload"
  /** The encrypted data from the payment method to be duplicated. */
  encryptedDuplicationData?: Maybe<Scalars["String"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCustomerPaymentMethodGetDuplicationDataUserError>
}

/** An error that occurs during the execution of `CustomerPaymentMethodGetDuplicationData`. */
export interface ShopifyCustomerPaymentMethodGetDuplicationDataUserError
  extends ShopifyDisplayableError {
  __typename?: "CustomerPaymentMethodGetDuplicationDataUserError"
  /** The error code. */
  code?: Maybe<ShopifyCustomerPaymentMethodGetDuplicationDataUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CustomerPaymentMethodGetDuplicationDataUserError`. */
export type ShopifyCustomerPaymentMethodGetDuplicationDataUserErrorCode =
  /** Customer doesn't exist. */
  | "CUSTOMER_DOES_NOT_EXIST"
  /** Invalid payment instrument. */
  | "INVALID_INSTRUMENT"
  /** Must be targeted to another shop in the same organization. */
  | "INVALID_ORGANIZATION_SHOP"
  /** Payment method doesn't exist. */
  | "PAYMENT_METHOD_DOES_NOT_EXIST"
  /** Target shop cannot be the same as the source. */
  | "SAME_SHOP"
  /** Too many requests. */
  | "TOO_MANY_REQUESTS"
  | "%future added value"

/** Return type for `customerPaymentMethodGetUpdateUrl` mutation. */
export interface ShopifyCustomerPaymentMethodGetUpdateUrlPayload {
  __typename?: "CustomerPaymentMethodGetUpdateUrlPayload"
  /** The URL to redirect the customer to update the payment method. */
  updatePaymentMethodUrl?: Maybe<Scalars["URL"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCustomerPaymentMethodGetUpdateUrlUserError>
}

/** An error that occurs during the execution of `CustomerPaymentMethodGetUpdateUrl`. */
export interface ShopifyCustomerPaymentMethodGetUpdateUrlUserError
  extends ShopifyDisplayableError {
  __typename?: "CustomerPaymentMethodGetUpdateUrlUserError"
  /** The error code. */
  code?: Maybe<ShopifyCustomerPaymentMethodGetUpdateUrlUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CustomerPaymentMethodGetUpdateUrlUserError`. */
export type ShopifyCustomerPaymentMethodGetUpdateUrlUserErrorCode =
  /** Customer doesn't exist. */
  | "CUSTOMER_DOES_NOT_EXIST"
  /** Invalid payment instrument. */
  | "INVALID_INSTRUMENT"
  /** Payment method doesn't exist. */
  | "PAYMENT_METHOD_DOES_NOT_EXIST"
  /** Too many requests. */
  | "TOO_MANY_REQUESTS"
  | "%future added value"

/** Return type for `customerPaymentMethodPaypalBillingAgreementCreate` mutation. */
export interface ShopifyCustomerPaymentMethodPaypalBillingAgreementCreatePayload {
  __typename?: "CustomerPaymentMethodPaypalBillingAgreementCreatePayload"
  /** The customer payment method. */
  customerPaymentMethod?: Maybe<ShopifyCustomerPaymentMethod>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCustomerPaymentMethodUserError>
}

/** Return type for `customerPaymentMethodPaypalBillingAgreementUpdate` mutation. */
export interface ShopifyCustomerPaymentMethodPaypalBillingAgreementUpdatePayload {
  __typename?: "CustomerPaymentMethodPaypalBillingAgreementUpdatePayload"
  /** The customer payment method. */
  customerPaymentMethod?: Maybe<ShopifyCustomerPaymentMethod>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCustomerPaymentMethodUserError>
}

/** Return type for `customerPaymentMethodRemoteCreate` mutation. */
export interface ShopifyCustomerPaymentMethodRemoteCreatePayload {
  __typename?: "CustomerPaymentMethodRemoteCreatePayload"
  /** The customer payment method. Note that the returned payment method may initially be in an incomplete state. Developers should poll this payment method using the customerPaymentMethod query until all required payment details have been processed. */
  customerPaymentMethod?: Maybe<ShopifyCustomerPaymentMethod>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCustomerPaymentMethodRemoteUserError>
}

/** The input fields for a remote gateway payment method, only one remote reference permitted. */
export interface ShopifyCustomerPaymentMethodRemoteInput {
  /** The input fields for a remote authorize net customer profile. */
  authorizeNetCustomerPaymentProfile?: InputMaybe<ShopifyRemoteAuthorizeNetCustomerPaymentProfileInput>
  /** The input fields for a remote Braintree customer profile. */
  braintreePaymentMethod?: InputMaybe<ShopifyRemoteBraintreePaymentMethodInput>
  /** Input containing the fields for a remote stripe credit card. */
  stripePaymentMethod?: InputMaybe<ShopifyRemoteStripePaymentMethodInput>
}

/** Represents an error in the input of a mutation. */
export interface ShopifyCustomerPaymentMethodRemoteUserError
  extends ShopifyDisplayableError {
  __typename?: "CustomerPaymentMethodRemoteUserError"
  /** The error code. */
  code?: Maybe<ShopifyCustomerPaymentMethodRemoteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CustomerPaymentMethodRemoteUserError`. */
export type ShopifyCustomerPaymentMethodRemoteUserErrorCode =
  /** Authorize.net is not enabled for subscriptions. */
  | "AUTHORIZE_NET_NOT_ENABLED_FOR_SUBSCRIPTIONS"
  /** Braintree is not enabled for subscriptions. */
  | "BRAINTREE_NOT_ENABLED_FOR_SUBSCRIPTIONS"
  /** Exactly one remote reference is required. */
  | "EXACTLY_ONE_REMOTE_REFERENCE_REQUIRED"
  /** The input value is invalid. */
  | "INVALID"
  /** The input value needs to be blank. */
  | "PRESENT"
  /** The input value is already taken. */
  | "TAKEN"
  | "%future added value"

/** The revocation reason types for a customer payment method. */
export type ShopifyCustomerPaymentMethodRevocationReason =
  /** The Authorize.net payment gateway is not enabled. */
  | "AUTHORIZE_NET_GATEWAY_NOT_ENABLED"
  /** Authorize.net did not return any payment methods. Make sure that the correct Authorize.net account is linked. */
  | "AUTHORIZE_NET_RETURNED_NO_PAYMENT_METHOD"
  /** Failed to contact Braintree API. */
  | "BRAINTREE_API_AUTHENTICATION_ERROR"
  /** The Braintree payment gateway is not enabled. */
  | "BRAINTREE_GATEWAY_NOT_ENABLED"
  /** The Braintree payment method type should be a credit card or Apple Pay card. */
  | "BRAINTREE_PAYMENT_METHOD_NOT_CARD"
  /** Braintree returned no payment methods. Make sure the correct Braintree account is linked. */
  | "BRAINTREE_RETURNED_NO_PAYMENT_METHOD"
  /** The customer redacted their payment method. */
  | "CUSTOMER_REDACTED"
  /** CVV attempts limit exceeded. */
  | "CVV_ATTEMPTS_LIMIT_EXCEEDED"
  /** The billing address failed to retrieve. */
  | "FAILED_TO_RETRIEVE_BILLING_ADDRESS"
  /** The credit card failed to update. */
  | "FAILED_TO_UPDATE_CREDIT_CARD"
  /** The payment method was manually revoked. */
  | "MANUALLY_REVOKED"
  /** The payment method was replaced with an existing payment method. The associated contracts have been migrated to the other payment method. */
  | "MERGED"
  /** Verification of payment method failed. */
  | "PAYMENT_METHOD_VERIFICATION_FAILED"
  /** Failed to contact the Stripe API. */
  | "STRIPE_API_AUTHENTICATION_ERROR"
  /** Invalid request. Failed to retrieve payment method from Stripe. */
  | "STRIPE_API_INVALID_REQUEST_ERROR"
  /** The Stripe payment gateway is not enabled. */
  | "STRIPE_GATEWAY_NOT_ENABLED"
  /** The Stripe payment method type should be card. */
  | "STRIPE_PAYMENT_METHOD_NOT_CARD"
  /** Stripe did not return any payment methods. Make sure that the correct Stripe account is linked. */
  | "STRIPE_RETURNED_NO_PAYMENT_METHOD"
  /** Verification of the payment method failed due to 3DS not being supported. */
  | "THREE_D_SECURE_FLOW_IN_VERIFICATION_NOT_IMPLEMENTED"
  /** Too many consecutive failed attempts. */
  | "TOO_MANY_CONSECUTIVE_FAILURES"
  | "%future added value"

/** Return type for `customerPaymentMethodRevoke` mutation. */
export interface ShopifyCustomerPaymentMethodRevokePayload {
  __typename?: "CustomerPaymentMethodRevokePayload"
  /** The ID of the revoked customer payment method. */
  revokedCustomerPaymentMethodId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `customerPaymentMethodSendUpdateEmail` mutation. */
export interface ShopifyCustomerPaymentMethodSendUpdateEmailPayload {
  __typename?: "CustomerPaymentMethodSendUpdateEmailPayload"
  /** The customer to whom an update payment method email was sent. */
  customer?: Maybe<ShopifyCustomer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Represents an error in the input of a mutation. */
export interface ShopifyCustomerPaymentMethodUserError
  extends ShopifyDisplayableError {
  __typename?: "CustomerPaymentMethodUserError"
  /** The error code. */
  code?: Maybe<ShopifyCustomerPaymentMethodUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CustomerPaymentMethodUserError`. */
export type ShopifyCustomerPaymentMethodUserErrorCode =
  /** The input value is invalid. */
  | "INVALID"
  /** The input value needs to be blank. */
  | "PRESENT"
  /** The input value is already taken. */
  | "TAKEN"
  | "%future added value"

/** Represents a PayPal instrument for customer payment method. */
export interface ShopifyCustomerPaypalBillingAgreement {
  __typename?: "CustomerPaypalBillingAgreement"
  /** The billing address of this payment method. */
  billingAddress?: Maybe<ShopifyCustomerPaymentInstrumentBillingAddress>
  /** Whether the PayPal billing agreement is inactive. */
  inactive: Scalars["Boolean"]["output"]
  /** Whether the payment method can be revoked.The payment method can be revoked if there are no active subscription contracts. */
  isRevocable: Scalars["Boolean"]["output"]
  /** The customers's PayPal account email address. */
  paypalAccountEmail?: Maybe<Scalars["String"]["output"]>
}

/** A phone number. */
export interface ShopifyCustomerPhoneNumber {
  __typename?: "CustomerPhoneNumber"
  /** The source from which the SMS marketing information for the customer was collected. */
  marketingCollectedFrom?: Maybe<ShopifyCustomerConsentCollectedFrom>
  /**
   * The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,
   * received when the marketing consent was updated.
   */
  marketingOptInLevel?: Maybe<ShopifyCustomerMarketingOptInLevel>
  /** Whether the customer has subscribed to SMS marketing material. */
  marketingState: ShopifyCustomerSmsMarketingState
  /**
   * The date and time at which the marketing consent was updated.
   *
   * No date is provided if the email address never updated its marketing consent.
   */
  marketingUpdatedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** A customer's phone number. */
  phoneNumber: Scalars["String"]["output"]
  /** The location where the customer consented to receive marketing material by SMS. */
  sourceLocation?: Maybe<ShopifyLocation>
}

/** The valid tiers for the predicted spend of a customer with a shop. */
export type ShopifyCustomerPredictedSpendTier =
  /** The customer's spending is predicted to be in the top spending range for the shop in the following year. */
  | "HIGH"
  /** The customer's spending is predicted to be zero, or in the lowest spending range for the shop in the following year. */
  | "LOW"
  /** The customer's spending is predicted to be in the normal spending range for the shop in the following year. */
  | "MEDIUM"
  | "%future added value"

/** The possible product subscription states for a customer, as defined by the customer's subscription contracts. */
export type ShopifyCustomerProductSubscriberStatus =
  /** The customer has at least one active subscription contract. */
  | "ACTIVE"
  /**
   * The customer's last subscription contract was cancelled and there are no other active or paused
   * subscription contracts.
   */
  | "CANCELLED"
  /**
   * The customer's last subscription contract expired and there are no other active or paused
   * subscription contracts.
   */
  | "EXPIRED"
  /**
   * The customer's last subscription contract failed and there are no other active or paused
   * subscription contracts.
   */
  | "FAILED"
  /** The customer has never had a subscription contract. */
  | "NEVER_SUBSCRIBED"
  /**
   * The customer has at least one paused subscription contract and there are no other active
   * subscription contracts.
   */
  | "PAUSED"
  | "%future added value"

/** Return type for `customerRemoveTaxExemptions` mutation. */
export interface ShopifyCustomerRemoveTaxExemptionsPayload {
  __typename?: "CustomerRemoveTaxExemptionsPayload"
  /** The updated customer. */
  customer?: Maybe<ShopifyCustomer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `customerReplaceTaxExemptions` mutation. */
export interface ShopifyCustomerReplaceTaxExemptionsPayload {
  __typename?: "CustomerReplaceTaxExemptionsPayload"
  /** The updated customer. */
  customer?: Maybe<ShopifyCustomer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Possible error codes that can be returned by `CustomerRequestDataErasureUserError`. */
export type ShopifyCustomerRequestDataErasureErrorCode =
  /** Customer does not exist. */
  | "DOES_NOT_EXIST"
  /** Failed to request customer data erasure. */
  | "FAILED_TO_REQUEST"
  | "%future added value"

/** Return type for `customerRequestDataErasure` mutation. */
export interface ShopifyCustomerRequestDataErasurePayload {
  __typename?: "CustomerRequestDataErasurePayload"
  /** The ID of the customer that will be erased. */
  customerId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCustomerRequestDataErasureUserError>
}

/** An error that occurs when requesting a customer data erasure. */
export interface ShopifyCustomerRequestDataErasureUserError
  extends ShopifyDisplayableError {
  __typename?: "CustomerRequestDataErasureUserError"
  /** The error code. */
  code?: Maybe<ShopifyCustomerRequestDataErasureErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** The RFM (Recency, Frequency, Monetary) group for a customer. */
export type ShopifyCustomerRfmGroup =
  /** Customers with recent purchases, some orders, and moderate spend. */
  | "ACTIVE"
  /** Customers without recent purchases, fewer orders, and with lower spend. */
  | "ALMOST_LOST"
  /** Customers without recent purchases, but with a strong history of orders and spend. */
  | "AT_RISK"
  /** Customers with very recent purchases, many orders, and the most spend. */
  | "CHAMPIONS"
  /** Customers without recent orders, with infrequent orders, and with low spend. */
  | "DORMANT"
  /** Customers with recent purchases, many orders, and the most spend. */
  | "LOYAL"
  /** Customers with recent purchases, some orders, and moderate spend. */
  | "NEEDS_ATTENTION"
  /** Customers with very recent purchases, few orders, and low spend. */
  | "NEW"
  /** Customers without recent purchases, but with a very strong history of orders and spend. */
  | "PREVIOUSLY_LOYAL"
  /** Customers with recent purchases, few orders, and low spend. */
  | "PROMISING"
  /** Customers with no orders yet. */
  | "PROSPECTS"
  | "%future added value"

/** The set of valid sort keys for the CustomerSavedSearch query. */
export type ShopifyCustomerSavedSearchSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `name` value. */
  | "NAME"
  | "%future added value"

/** The member of a segment. */
export interface ShopifyCustomerSegmentMember extends ShopifyHasMetafields {
  __typename?: "CustomerSegmentMember"
  /** The total amount of money that the member has spent on orders. */
  amountSpent?: Maybe<ShopifyMoneyV2>
  /** The member's default address. */
  defaultAddress?: Maybe<ShopifyMailingAddress>
  /** The member's default email address. */
  defaultEmailAddress?: Maybe<ShopifyCustomerEmailAddress>
  /** The member's default phone number. */
  defaultPhoneNumber?: Maybe<ShopifyCustomerPhoneNumber>
  /** The full name of the member, which is based on the values of the `first_name` and `last_name` fields. If the member's first name and last name aren't available, then the customer's email address is used. If the customer's email address isn't available, then the customer's phone number is used. */
  displayName: Scalars["String"]["output"]
  /** The member's first name. */
  firstName?: Maybe<Scalars["String"]["output"]>
  /** The member’s ID. */
  id: Scalars["ID"]["output"]
  /** The member's last name. */
  lastName?: Maybe<Scalars["String"]["output"]>
  /** The ID of the member's most recent order. */
  lastOrderId?: Maybe<Scalars["ID"]["output"]>
  /** Whether the customer can be merged with another customer. */
  mergeable: ShopifyCustomerMergeable
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** A note about the member. */
  note?: Maybe<Scalars["String"]["output"]>
  /** The total number of orders that the member has made. */
  numberOfOrders?: Maybe<Scalars["UnsignedInt64"]["output"]>
}

/** The member of a segment. */
export interface ShopifyCustomerSegmentMemberMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** The member of a segment. */
export interface ShopifyCustomerSegmentMemberMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The connection type for the `CustomerSegmentMembers` object. */
export interface ShopifyCustomerSegmentMemberConnection {
  __typename?: "CustomerSegmentMemberConnection"
  /** A list of edges. */
  edges: Array<ShopifyCustomerSegmentMemberEdge>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
  /** The statistics for a given segment. */
  statistics: ShopifySegmentStatistics
  /** The total number of members in a given segment. */
  totalCount: Scalars["Int"]["output"]
}

/** An auto-generated type which holds one CustomerSegmentMember and a cursor during pagination. */
export interface ShopifyCustomerSegmentMemberEdge {
  __typename?: "CustomerSegmentMemberEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CustomerSegmentMemberEdge. */
  node: ShopifyCustomerSegmentMember
}

/** A job to determine a list of members, such as customers, that are associated with an individual segment. */
export interface ShopifyCustomerSegmentMembersQuery
  extends ShopifyJobResult,
    ShopifyNode {
  __typename?: "CustomerSegmentMembersQuery"
  /** The current total number of members in a given segment. */
  currentCount: Scalars["Int"]["output"]
  /** This indicates if the job is still queued or has been run. */
  done: Scalars["Boolean"]["output"]
  /** A globally-unique ID that's returned when running an asynchronous mutation. */
  id: Scalars["ID"]["output"]
}

/** Return type for `customerSegmentMembersQueryCreate` mutation. */
export interface ShopifyCustomerSegmentMembersQueryCreatePayload {
  __typename?: "CustomerSegmentMembersQueryCreatePayload"
  /** The newly created customer segment members query. */
  customerSegmentMembersQuery?: Maybe<ShopifyCustomerSegmentMembersQuery>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCustomerSegmentMembersQueryUserError>
}

/** The input fields and values for creating a customer segment members query. */
export interface ShopifyCustomerSegmentMembersQueryInput {
  /** The query that's used to filter the members. The query is composed of a combination of conditions on facts about customers such as `email_subscription_status = 'SUBSCRIBED'` with [this syntax](https://shopify.dev/api/shopifyql/segment-query-language-reference). */
  query?: InputMaybe<Scalars["String"]["input"]>
  /** Reverse the order of the list. The sorting behaviour defaults to ascending order. */
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The ID of the segment. */
  segmentId?: InputMaybe<Scalars["ID"]["input"]>
  /** Sort the list by a given key. */
  sortKey?: InputMaybe<Scalars["String"]["input"]>
}

/** Represents a customer segment members query custom error. */
export interface ShopifyCustomerSegmentMembersQueryUserError
  extends ShopifyDisplayableError {
  __typename?: "CustomerSegmentMembersQueryUserError"
  /** The error code. */
  code?: Maybe<ShopifyCustomerSegmentMembersQueryUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CustomerSegmentMembersQueryUserError`. */
export type ShopifyCustomerSegmentMembersQueryUserErrorCode =
  /** The input value is invalid. */
  "INVALID" | "%future added value"

/** Return type for `customerSendAccountInviteEmail` mutation. */
export interface ShopifyCustomerSendAccountInviteEmailPayload {
  __typename?: "CustomerSendAccountInviteEmailPayload"
  /** The customer to whom an account invite email was sent. */
  customer?: Maybe<ShopifyCustomer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCustomerSendAccountInviteEmailUserError>
}

/** Defines errors for customerSendAccountInviteEmail mutation. */
export interface ShopifyCustomerSendAccountInviteEmailUserError
  extends ShopifyDisplayableError {
  __typename?: "CustomerSendAccountInviteEmailUserError"
  /** The error code. */
  code?: Maybe<ShopifyCustomerSendAccountInviteEmailUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CustomerSendAccountInviteEmailUserError`. */
export type ShopifyCustomerSendAccountInviteEmailUserErrorCode =
  /** The input value is invalid. */
  "INVALID" | "%future added value"

/** The input fields required to identify a customer. */
export interface ShopifyCustomerSetIdentifiers {
  /** Custom ID of customer to upsert. */
  customId?: InputMaybe<ShopifyUniqueMetafieldValueInput>
  /** Email address of the customer to upsert. */
  email?: InputMaybe<Scalars["String"]["input"]>
  /** ID of customer to update. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** Phone number of the customer to upsert. */
  phone?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields and values to use when creating or updating a customer. */
export interface ShopifyCustomerSetInput {
  /** The addresses for a customer. */
  addresses?: InputMaybe<Array<ShopifyMailingAddressInput>>
  /** The unique email address of the customer. */
  email?: InputMaybe<Scalars["String"]["input"]>
  /** The customer's first name. */
  firstName?: InputMaybe<Scalars["String"]["input"]>
  /** The customer's last name. */
  lastName?: InputMaybe<Scalars["String"]["input"]>
  /** The customer's locale. */
  locale?: InputMaybe<Scalars["String"]["input"]>
  /** A note about the customer. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** The unique phone number for the customer. */
  phone?: InputMaybe<Scalars["String"]["input"]>
  /**
   * A list of tags to associate with the customer. Can be an array or a comma-separated list. Example values: `["tag1", "tag2", "tag3"]`, `"tag1, tag2, tag3"`
   *
   * Updating `tags` overwrites any existing tags that were previously added to the customer. To add new tags without overwriting
   * existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** Whether the customer is exempt from paying taxes on their order. */
  taxExempt?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The list of tax exemptions to apply to the customer. */
  taxExemptions?: InputMaybe<Array<ShopifyTaxExemption>>
}

/** Return type for `customerSet` mutation. */
export interface ShopifyCustomerSetPayload {
  __typename?: "CustomerSetPayload"
  /** The created or updated customer. */
  customer?: Maybe<ShopifyCustomer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCustomerSetUserError>
}

/** Defines errors for CustomerSet mutation. */
export interface ShopifyCustomerSetUserError extends ShopifyDisplayableError {
  __typename?: "CustomerSetUserError"
  /** The error code. */
  code?: Maybe<ShopifyCustomerSetUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CustomerSetUserError`. */
export type ShopifyCustomerSetUserErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** The id field is not allowed if identifier is provided. */
  | "ID_NOT_ALLOWED"
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** The identifier value does not match the value of the corresponding field in the input. */
  | "INPUT_MISMATCH"
  /** The input value is invalid. */
  | "INVALID"
  /** The input argument `metafields` (if present) must contain the `customId` value. */
  | "METAFIELD_MISMATCH"
  /** The input field corresponding to the identifier is required. */
  | "MISSING_FIELD_REQUIRED"
  /** Resource matching the identifier was not found. */
  | "NOT_FOUND"
  /** The input value needs to be blank. */
  | "PRESENT"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too long. */
  | "TOO_LONG"
  /** The input value is too short. */
  | "TOO_SHORT"
  | "%future added value"

/** Represents a Shop Pay card instrument for customer payment method. */
export interface ShopifyCustomerShopPayAgreement {
  __typename?: "CustomerShopPayAgreement"
  /** The billing address of the card. */
  billingAddress?: Maybe<ShopifyCustomerCreditCardBillingAddress>
  /** Whether the card is about to expire. */
  expiresSoon: Scalars["Boolean"]["output"]
  /** The expiry month of the card. */
  expiryMonth: Scalars["Int"]["output"]
  /** The expiry year of the card. */
  expiryYear: Scalars["Int"]["output"]
  /** Whether the Shop Pay billing agreement is inactive. */
  inactive: Scalars["Boolean"]["output"]
  /** The payment method can be revoked if there are no active subscription contracts. */
  isRevocable: Scalars["Boolean"]["output"]
  /** The last 4 digits of the card. */
  lastDigits: Scalars["String"]["output"]
  /** The masked card number with only the last 4 digits displayed. */
  maskedNumber: Scalars["String"]["output"]
  /** The name of the card holder. */
  name: Scalars["String"]["output"]
}

/** An error that occurs during execution of an SMS marketing consent mutation. */
export interface ShopifyCustomerSmsMarketingConsentError
  extends ShopifyDisplayableError {
  __typename?: "CustomerSmsMarketingConsentError"
  /** The error code. */
  code?: Maybe<ShopifyCustomerSmsMarketingConsentErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `CustomerSmsMarketingConsentError`. */
export type ShopifyCustomerSmsMarketingConsentErrorCode =
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** Unexpected internal error happened. */
  | "INTERNAL_ERROR"
  /** The input value is invalid. */
  | "INVALID"
  /** Missing a required argument. */
  | "MISSING_ARGUMENT"
  | "%future added value"

/**
 * The marketing consent information when the customer consented to
 *         receiving marketing material by SMS.
 */
export interface ShopifyCustomerSmsMarketingConsentInput {
  /**
   * The date and time when the customer consented to receive marketing material by SMS.
   * If no date is provided, then the date and time when the consent information was sent is used.
   */
  consentUpdatedAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The marketing subscription opt-in level that was set when the customer consented to receive marketing information. */
  marketingOptInLevel?: InputMaybe<ShopifyCustomerMarketingOptInLevel>
  /** The current SMS marketing state for the customer. */
  marketingState: ShopifyCustomerSmsMarketingState
  /** Identifies the location where the customer consented to receiving marketing material by SMS. */
  sourceLocationId?: InputMaybe<Scalars["ID"]["input"]>
}

/**
 * The record of when a customer consented to receive marketing material by SMS.
 *
 * The customer's consent state reflects the record with the most recent date when consent was updated.
 */
export interface ShopifyCustomerSmsMarketingConsentState {
  __typename?: "CustomerSmsMarketingConsentState"
  /** The source from which the SMS marketing information for the customer was collected. */
  consentCollectedFrom?: Maybe<ShopifyCustomerConsentCollectedFrom>
  /**
   * The date and time when the customer consented to receive marketing material by SMS.
   * If no date is provided, then the date and time when the consent information was sent is used.
   */
  consentUpdatedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The marketing subscription opt-in level that was set when the customer consented to receive marketing information. */
  marketingOptInLevel: ShopifyCustomerMarketingOptInLevel
  /** The current SMS marketing state for the customer. */
  marketingState: ShopifyCustomerSmsMarketingState
  /** The location where the customer consented to receive marketing material by SMS. */
  sourceLocation?: Maybe<ShopifyLocation>
}

/** The input fields for updating SMS marketing consent information for a given customer ID. */
export interface ShopifyCustomerSmsMarketingConsentUpdateInput {
  /** The ID of the customer to update the SMS marketing consent information for. The customer must have a unique phone number associated to the record. If not, add the phone number using the `customerUpdate` mutation first. */
  customerId: Scalars["ID"]["input"]
  /** The marketing consent information when the customer consented to receiving marketing material by SMS. */
  smsMarketingConsent: ShopifyCustomerSmsMarketingConsentInput
}

/** Return type for `customerSmsMarketingConsentUpdate` mutation. */
export interface ShopifyCustomerSmsMarketingConsentUpdatePayload {
  __typename?: "CustomerSmsMarketingConsentUpdatePayload"
  /** The updated customer. */
  customer?: Maybe<ShopifyCustomer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyCustomerSmsMarketingConsentError>
}

/** The valid SMS marketing states for a customer’s phone number. */
export type ShopifyCustomerSmsMarketingState =
  /** The customer hasn't subscribed to SMS marketing. */
  | "NOT_SUBSCRIBED"
  /** The customer is in the process of subscribing to SMS marketing. */
  | "PENDING"
  /** The customer's personal data is erased. This value is internally-set and read-only. */
  | "REDACTED"
  /** The customer is subscribed to SMS marketing. */
  | "SUBSCRIBED"
  /** The customer isn't currently subscribed to SMS marketing but was previously subscribed. */
  | "UNSUBSCRIBED"
  | "%future added value"

/** The set of valid sort keys for the Customer query. */
export type ShopifyCustomerSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `location` value. */
  | "LOCATION"
  /** Sort by the `name` value. */
  | "NAME"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** The valid values for the state of a customer's account with a shop. */
export type ShopifyCustomerState =
  /** The customer declined the email invite to create an account. */
  | "DECLINED"
  /** The customer doesn't have an active account. Customer accounts can be disabled from the Shopify admin at any time. */
  | "DISABLED"
  /** The customer has created an account. */
  | "ENABLED"
  /** The customer has received an email invite to create an account. */
  | "INVITED"
  | "%future added value"

/** A customer's computed statistics. */
export interface ShopifyCustomerStatistics {
  __typename?: "CustomerStatistics"
  /** The predicted spend tier of a customer with a shop. */
  predictedSpendTier?: Maybe<ShopifyCustomerPredictedSpendTier>
  /** The RFM (Recency, Frequency, Monetary) group of the customer. */
  rfmGroup?: Maybe<ShopifyCustomerRfmGroup>
}

/** Return type for `customerUpdateDefaultAddress` mutation. */
export interface ShopifyCustomerUpdateDefaultAddressPayload {
  __typename?: "CustomerUpdateDefaultAddressPayload"
  /** The customer whose address was updated. */
  customer?: Maybe<ShopifyCustomer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `customerUpdate` mutation. */
export interface ShopifyCustomerUpdatePayload {
  __typename?: "CustomerUpdatePayload"
  /** The updated customer. */
  customer?: Maybe<ShopifyCustomer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Represents a customer's session visiting a shop's online store, including information about the marketing activity attributed to starting the session. */
export interface ShopifyCustomerVisit
  extends ShopifyCustomerMoment,
    ShopifyNode {
  __typename?: "CustomerVisit"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** URL of the first page the customer landed on for the session. */
  landingPage?: Maybe<Scalars["URL"]["output"]>
  /** Landing page information with URL linked in HTML. For example, the first page the customer visited was store.myshopify.com/products/1. */
  landingPageHtml?: Maybe<Scalars["HTML"]["output"]>
  /**
   * Represent actions taken by an app, on behalf of a merchant,
   * to market Shopify resources such as products, collections, and discounts.
   */
  marketingEvent?: Maybe<ShopifyMarketingEvent>
  /** The date and time when the customer's session occurred. */
  occurredAt: Scalars["DateTime"]["output"]
  /**
   * Marketing referral code from the link that the customer clicked to visit the store.
   * Supports the following URL attributes: _ref_, _source_, or _r_.
   * For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.
   */
  referralCode?: Maybe<Scalars["String"]["output"]>
  /** Referral information with URLs linked in HTML. */
  referralInfoHtml: Scalars["FormattedString"]["output"]
  /**
   * Webpage where the customer clicked a link that sent them to the online store.
   * For example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.
   */
  referrerUrl?: Maybe<Scalars["URL"]["output"]>
  /**
   * Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,
   * a website domain, QR code, or unknown.
   */
  source: Scalars["String"]["output"]
  /** Describes the source explicitly for first or last session. */
  sourceDescription?: Maybe<Scalars["String"]["output"]>
  /** Type of marketing tactic. */
  sourceType?: Maybe<ShopifyMarketingTactic>
  /** A set of UTM parameters gathered from the URL parameters of the referrer. */
  utmParameters?: Maybe<ShopifyUtmParameters>
}

/** This type returns the information about the product and product variant from a customer visit. */
export interface ShopifyCustomerVisitProductInfo {
  __typename?: "CustomerVisitProductInfo"
  /** The product information. If `null`, then the product was deleted from the store. */
  product?: Maybe<ShopifyProduct>
  /** The quantity of the product that the customer requested. */
  quantity: Scalars["Int"]["output"]
  /** The product variant information, if the product variant exists. */
  variant?: Maybe<ShopifyProductVariant>
}

/** An auto-generated type for paginating through multiple CustomerVisitProductInfos. */
export interface ShopifyCustomerVisitProductInfoConnection {
  __typename?: "CustomerVisitProductInfoConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyCustomerVisitProductInfoEdge>
  /** A list of nodes that are contained in CustomerVisitProductInfoEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyCustomerVisitProductInfo>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one CustomerVisitProductInfo and a cursor during pagination. */
export interface ShopifyCustomerVisitProductInfoEdge {
  __typename?: "CustomerVisitProductInfoEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of CustomerVisitProductInfoEdge. */
  node: ShopifyCustomerVisitProductInfo
}

/** A shop's data sale opt out page. */
export interface ShopifyDataSaleOptOutPage {
  __typename?: "DataSaleOptOutPage"
  /** If the data sale opt out page is auto managed. */
  autoManaged: Scalars["Boolean"]["output"]
}

/** Return type for `dataSaleOptOut` mutation. */
export interface ShopifyDataSaleOptOutPayload {
  __typename?: "DataSaleOptOutPayload"
  /** The ID of the customer whose email address has been opted out of data sale. */
  customerId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDataSaleOptOutUserError>
}

/** An error that occurs during the execution of `DataSaleOptOut`. */
export interface ShopifyDataSaleOptOutUserError
  extends ShopifyDisplayableError {
  __typename?: "DataSaleOptOutUserError"
  /** The error code. */
  code?: Maybe<ShopifyDataSaleOptOutUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `DataSaleOptOutUserError`. */
export type ShopifyDataSaleOptOutUserErrorCode =
  /** Data sale opt out failed. */
  "FAILED" | "%future added value"

/** Days of the week from Monday to Sunday. */
export type ShopifyDayOfTheWeek =
  /** Friday. */
  | "FRIDAY"
  /** Monday. */
  | "MONDAY"
  /** Saturday. */
  | "SATURDAY"
  /** Sunday. */
  | "SUNDAY"
  /** Thursday. */
  | "THURSDAY"
  /** Tuesday. */
  | "TUESDAY"
  /** Wednesday. */
  | "WEDNESDAY"
  | "%future added value"

/**
 * A token that delegates a set of scopes from the original permission.
 *
 * To learn more about creating delegate access tokens, refer to
 * [Delegate OAuth access tokens to subsystems](https://shopify.dev/docs/apps/build/authentication-authorization/access-tokens/use-delegate-tokens).
 */
export interface ShopifyDelegateAccessToken {
  __typename?: "DelegateAccessToken"
  /** The list of permissions associated with the token. */
  accessScopes: Array<Scalars["String"]["output"]>
  /** The issued delegate access token. */
  accessToken: Scalars["String"]["output"]
  /** The date and time when the delegate access token was created. */
  createdAt: Scalars["DateTime"]["output"]
}

/** Return type for `delegateAccessTokenCreate` mutation. */
export interface ShopifyDelegateAccessTokenCreatePayload {
  __typename?: "DelegateAccessTokenCreatePayload"
  /** The delegate access token. */
  delegateAccessToken?: Maybe<ShopifyDelegateAccessToken>
  /** The user's shop. */
  shop: ShopifyShop
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDelegateAccessTokenCreateUserError>
}

/** An error that occurs during the execution of `DelegateAccessTokenCreate`. */
export interface ShopifyDelegateAccessTokenCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "DelegateAccessTokenCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyDelegateAccessTokenCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `DelegateAccessTokenCreateUserError`. */
export type ShopifyDelegateAccessTokenCreateUserErrorCode =
  /** The parent access token can't be a delegate token. */
  | "DELEGATE_ACCESS_TOKEN"
  /** The access scope can't be empty. */
  | "EMPTY_ACCESS_SCOPE"
  /** The delegate token can't expire after the parent token. */
  | "EXPIRES_AFTER_PARENT"
  /** The expires_in value must be greater than 0. */
  | "NEGATIVE_EXPIRES_IN"
  /** Persistence failed. */
  | "PERSISTENCE_FAILED"
  /** The parent access token can't have a refresh token. */
  | "REFRESH_TOKEN"
  /** Unknown scopes. */
  | "UNKNOWN_SCOPES"
  | "%future added value"

/** Return type for `delegateAccessTokenDestroy` mutation. */
export interface ShopifyDelegateAccessTokenDestroyPayload {
  __typename?: "DelegateAccessTokenDestroyPayload"
  /** The user's shop. */
  shop: ShopifyShop
  /** The status of the delegate access token destroy operation. Returns true if successful. */
  status?: Maybe<Scalars["Boolean"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDelegateAccessTokenDestroyUserError>
}

/** An error that occurs during the execution of `DelegateAccessTokenDestroy`. */
export interface ShopifyDelegateAccessTokenDestroyUserError
  extends ShopifyDisplayableError {
  __typename?: "DelegateAccessTokenDestroyUserError"
  /** The error code. */
  code?: Maybe<ShopifyDelegateAccessTokenDestroyUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `DelegateAccessTokenDestroyUserError`. */
export type ShopifyDelegateAccessTokenDestroyUserErrorCode =
  /** Access denied. */
  | "ACCESS_DENIED"
  /** Access token not found. */
  | "ACCESS_TOKEN_NOT_FOUND"
  /** Cannot delete parent access token. */
  | "CAN_ONLY_DELETE_DELEGATE_TOKENS"
  /** Persistence failed. */
  | "PERSISTENCE_FAILED"
  | "%future added value"

/** The input fields for a delegate access token. */
export interface ShopifyDelegateAccessTokenInput {
  /** The list of scopes that will be delegated to the new access token. */
  delegateAccessScope: Array<Scalars["String"]["input"]>
  /** The amount of time, in seconds, after which the delegate access token is no longer valid. */
  expiresIn?: InputMaybe<Scalars["Int"]["input"]>
}

/**
 * Deletion events chronicle the destruction of resources (e.g. products and collections).
 * Once deleted, the deletion event is the only trace of the original's existence,
 * as the resource itself has been removed and can no longer be accessed.
 */
export interface ShopifyDeletionEvent {
  __typename?: "DeletionEvent"
  /** The date and time when the deletion event for the related resource was generated. */
  occurredAt: Scalars["DateTime"]["output"]
  /** The ID of the resource that was deleted. */
  subjectId: Scalars["ID"]["output"]
  /** The type of resource that was deleted. */
  subjectType: ShopifyDeletionEventSubjectType
}

/** An auto-generated type for paginating through multiple DeletionEvents. */
export interface ShopifyDeletionEventConnection {
  __typename?: "DeletionEventConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDeletionEventEdge>
  /** A list of nodes that are contained in DeletionEventEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDeletionEvent>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one DeletionEvent and a cursor during pagination. */
export interface ShopifyDeletionEventEdge {
  __typename?: "DeletionEventEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DeletionEventEdge. */
  node: ShopifyDeletionEvent
}

/** The set of valid sort keys for the DeletionEvent query. */
export type ShopifyDeletionEventSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  | "%future added value"

/** The supported subject types of deletion events. */
export type ShopifyDeletionEventSubjectType =
  | "COLLECTION"
  | "PRODUCT"
  | "%future added value"

/** A shipping service and a list of countries that the service is available for. */
export interface ShopifyDeliveryAvailableService {
  __typename?: "DeliveryAvailableService"
  /** The countries the service provider ships to. */
  countries: ShopifyDeliveryCountryCodesOrRestOfWorld
  /** The name of the service. */
  name: Scalars["String"]["output"]
}

/** Represents a branded promise presented to buyers. */
export interface ShopifyDeliveryBrandedPromise {
  __typename?: "DeliveryBrandedPromise"
  /** The handle of the branded promise.  For example: `shop_promise`. */
  handle: Scalars["String"]["output"]
  /** The name of the branded promise.  For example: `Shop Promise`. */
  name: Scalars["String"]["output"]
}

/**
 * A carrier service (also known as a carrier calculated service or shipping service) provides real-time shipping rates to Shopify. Some common carrier services include Canada Post, FedEx, UPS, and USPS. The term **carrier** is often used interchangeably with the terms **shipping company** and **rate provider**.
 *
 * Using the CarrierService resource, you can add a carrier service to a shop and then provide a list of applicable shipping rates at checkout. You can even use the cart data to adjust shipping rates and offer shipping discounts based on what is in the customer's cart.
 *
 * ## Requirements for accessing the CarrierService resource
 * To access the CarrierService resource, add the `write_shipping` permission to your app's requested scopes. For more information, see [API access scopes](https://shopify.dev/docs/admin-api/access-scopes).
 *
 * Your app's request to create a carrier service will fail unless the store installing your carrier service meets one of the following requirements:
 * * It's on the Advanced Shopify plan or higher.
 * * It's on the Shopify plan with yearly billing, or the carrier service feature has been added to the store for a monthly fee. For more information, contact [Shopify Support](https://help.shopify.com/questions).
 * * It's a development store.
 *
 * > Note:
 * > If a store changes its Shopify plan, then the store's association with a carrier service is deactivated if the store no long meets one of the requirements above.
 *
 * ## Providing shipping rates to Shopify
 * When adding a carrier service to a store, you need to provide a POST endpoint rooted in the `callbackUrl` property where Shopify can retrieve applicable shipping rates. The callback URL should be a public endpoint that expects these requests from Shopify.
 *
 * ### Example shipping rate request sent to a carrier service
 *
 * ```json
 * {
 *   "rate": {
 *     "origin": {
 *       "country": "CA",
 *       "postal_code": "K2P1L4",
 *       "province": "ON",
 *       "city": "Ottawa",
 *       "name": null,
 *       "address1": "150 Elgin St.",
 *       "address2": "",
 *       "address3": null,
 *       "phone": null,
 *       "fax": null,
 *       "email": null,
 *       "address_type": null,
 *       "company_name": "Jamie D's Emporium"
 *     },
 *     "destination": {
 *       "country": "CA",
 *       "postal_code": "K1M1M4",
 *       "province": "ON",
 *       "city": "Ottawa",
 *       "name": "Bob Norman",
 *       "address1": "24 Sussex Dr.",
 *       "address2": "",
 *       "address3": null,
 *       "phone": null,
 *       "fax": null,
 *       "email": null,
 *       "address_type": null,
 *       "company_name": null
 *     },
 *     "items": [{
 *       "name": "Short Sleeve T-Shirt",
 *       "sku": "",
 *       "quantity": 1,
 *       "grams": 1000,
 *       "price": 1999,
 *       "vendor": "Jamie D's Emporium",
 *       "requires_shipping": true,
 *       "taxable": true,
 *       "fulfillment_service": "manual",
 *       "properties": null,
 *       "product_id": 48447225880,
 *       "variant_id": 258644705304
 *     }],
 *     "currency": "USD",
 *     "locale": "en"
 *   }
 * }
 * ```
 *
 * ### Example response
 * ```json
 * {
 *    "rates": [
 *        {
 *            "service_name": "canadapost-overnight",
 *            "service_code": "ON",
 *            "total_price": "1295",
 *            "description": "This is the fastest option by far",
 *            "currency": "CAD",
 *            "min_delivery_date": "2013-04-12 14:48:45 -0400",
 *            "max_delivery_date": "2013-04-12 14:48:45 -0400"
 *        },
 *        {
 *            "service_name": "fedex-2dayground",
 *            "service_code": "2D",
 *            "total_price": "2934",
 *            "currency": "USD",
 *            "min_delivery_date": "2013-04-12 14:48:45 -0400",
 *            "max_delivery_date": "2013-04-12 14:48:45 -0400"
 *        },
 *        {
 *            "service_name": "fedex-priorityovernight",
 *            "service_code": "1D",
 *            "total_price": "3587",
 *            "currency": "USD",
 *            "min_delivery_date": "2013-04-12 14:48:45 -0400",
 *            "max_delivery_date": "2013-04-12 14:48:45 -0400"
 *        }
 *    ]
 * }
 * ```
 *
 * The `address3`, `fax`, `address_type`, and `company_name` fields are returned by specific [ActiveShipping](https://github.com/Shopify/active_shipping) providers. For API-created carrier services, you should use only the following shipping address fields:
 * * `address1`
 * * `address2`
 * * `city`
 * * `zip`
 * * `province`
 * * `country`
 *
 * Other values remain as `null` and are not sent to the callback URL.
 *
 * ### Response fields
 *
 * When Shopify requests shipping rates using your callback URL, the response object `rates` must be a JSON array of objects with the following fields.  Required fields must be included in the response for the carrier service integration to work properly.
 *
 * | Field                   | Required | Description                                                                                                                                                                                                  |
 * | ----------------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
 * | `service_name`          | Yes      | The name of the rate, which customers see at checkout. For example: `Expedited Mail`.                                                                                                                        |
 * | `description`           | Yes      | A description of the rate, which customers see at checkout. For example: `Includes tracking and insurance`.                                                                                                  |
 * | `service_code`          | Yes      | A unique code associated with the rate. For example: `expedited_mail`.                                                                                                                                       |
 * | `currency`              | Yes      | The currency of the shipping rate.                                                                                                                                                                           |
 * | `total_price`           | Yes      | The total price expressed in subunits. If the currency doesn't use subunits, then the value must be multiplied by 100. For example: `"total_price": 500` for 5.00 CAD, `"total_price": 100000` for 1000 JPY. |
 * | `phone_required`        | No       | Whether the customer must provide a phone number at checkout.                                                                                                                                                |
 * | `min_delivery_date`     | No       | The earliest delivery date for the displayed rate.                                                                                                                                                           |
 * | `max_delivery_date`     | No       | The latest delivery date for the displayed rate to still be valid.                                                                                                                                           |
 *
 * ### Special conditions
 *
 * * To indicate that this carrier service cannot handle this shipping request, return an empty array and any successful (20x) HTTP code.
 * * To force backup rates instead, return a 40x or 50x HTTP code with any content. A good choice is the regular 404 Not Found code.
 * * Redirects (30x codes) will only be followed for the same domain as the original callback URL. Attempting to redirect to a different domain will trigger backup rates.
 * * There is no retry mechanism. The response must be successful on the first try, within the time budget listed below. Timeouts or errors will trigger backup rates.
 *
 * ## Response Timeouts
 *
 * The read timeout for rate requests are dynamic, based on the number of requests per minute (RPM). These limits are applied to each shop-app pair. The timeout values are as follows.
 *
 * | RPM Range     | Timeout    |
 * | ------------- | ---------- |
 * | Under 1500    | 10s        |
 * | 1500 to 3000  | 5s         |
 * | Over 3000     | 3s         |
 *
 * > Note:
 * > These values are upper limits and should not be interpretted as a goal to develop towards. Shopify is constantly evaluating the performance of the platform and working towards improving resilience as well as app capabilities. As such, these numbers may be adjusted outside of our normal versioning timelines.
 *
 * ## Server-side caching of requests
 * Shopify provides server-side caching to reduce the number of requests it makes. Any shipping rate request that identically matches the following fields will be retrieved from Shopify's cache of the initial response:
 * * variant IDs
 * * default shipping box weight and dimensions
 * * variant quantities
 * * carrier service ID
 * * origin address
 * * destination address
 * * item weights and signatures
 *
 * If any of these fields differ, or if the cache has expired since the original request, then new shipping rates are requested. The cache expires 15 minutes after rates are successfully returned. If an error occurs, then the cache expires after 30 seconds.
 */
export interface ShopifyDeliveryCarrierService extends ShopifyNode {
  __typename?: "DeliveryCarrierService"
  /** Whether the carrier service is active. */
  active: Scalars["Boolean"]["output"]
  /** The list of services offered for given destinations. */
  availableServicesForCountries: Array<ShopifyDeliveryAvailableService>
  /** The URL endpoint that Shopify needs to retrieve shipping rates. */
  callbackUrl?: Maybe<Scalars["URL"]["output"]>
  /** The properly formatted name of the shipping service provider, ready to display. */
  formattedName?: Maybe<Scalars["String"]["output"]>
  /** The logo of the service provider. */
  icon: ShopifyImage
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The name of the shipping service provider. */
  name?: Maybe<Scalars["String"]["output"]>
  /** Whether merchants are able to send dummy data to your service through the Shopify admin to see shipping rate examples. */
  supportsServiceDiscovery: Scalars["Boolean"]["output"]
}

/**
 * A carrier service (also known as a carrier calculated service or shipping service) provides real-time shipping rates to Shopify. Some common carrier services include Canada Post, FedEx, UPS, and USPS. The term **carrier** is often used interchangeably with the terms **shipping company** and **rate provider**.
 *
 * Using the CarrierService resource, you can add a carrier service to a shop and then provide a list of applicable shipping rates at checkout. You can even use the cart data to adjust shipping rates and offer shipping discounts based on what is in the customer's cart.
 *
 * ## Requirements for accessing the CarrierService resource
 * To access the CarrierService resource, add the `write_shipping` permission to your app's requested scopes. For more information, see [API access scopes](https://shopify.dev/docs/admin-api/access-scopes).
 *
 * Your app's request to create a carrier service will fail unless the store installing your carrier service meets one of the following requirements:
 * * It's on the Advanced Shopify plan or higher.
 * * It's on the Shopify plan with yearly billing, or the carrier service feature has been added to the store for a monthly fee. For more information, contact [Shopify Support](https://help.shopify.com/questions).
 * * It's a development store.
 *
 * > Note:
 * > If a store changes its Shopify plan, then the store's association with a carrier service is deactivated if the store no long meets one of the requirements above.
 *
 * ## Providing shipping rates to Shopify
 * When adding a carrier service to a store, you need to provide a POST endpoint rooted in the `callbackUrl` property where Shopify can retrieve applicable shipping rates. The callback URL should be a public endpoint that expects these requests from Shopify.
 *
 * ### Example shipping rate request sent to a carrier service
 *
 * ```json
 * {
 *   "rate": {
 *     "origin": {
 *       "country": "CA",
 *       "postal_code": "K2P1L4",
 *       "province": "ON",
 *       "city": "Ottawa",
 *       "name": null,
 *       "address1": "150 Elgin St.",
 *       "address2": "",
 *       "address3": null,
 *       "phone": null,
 *       "fax": null,
 *       "email": null,
 *       "address_type": null,
 *       "company_name": "Jamie D's Emporium"
 *     },
 *     "destination": {
 *       "country": "CA",
 *       "postal_code": "K1M1M4",
 *       "province": "ON",
 *       "city": "Ottawa",
 *       "name": "Bob Norman",
 *       "address1": "24 Sussex Dr.",
 *       "address2": "",
 *       "address3": null,
 *       "phone": null,
 *       "fax": null,
 *       "email": null,
 *       "address_type": null,
 *       "company_name": null
 *     },
 *     "items": [{
 *       "name": "Short Sleeve T-Shirt",
 *       "sku": "",
 *       "quantity": 1,
 *       "grams": 1000,
 *       "price": 1999,
 *       "vendor": "Jamie D's Emporium",
 *       "requires_shipping": true,
 *       "taxable": true,
 *       "fulfillment_service": "manual",
 *       "properties": null,
 *       "product_id": 48447225880,
 *       "variant_id": 258644705304
 *     }],
 *     "currency": "USD",
 *     "locale": "en"
 *   }
 * }
 * ```
 *
 * ### Example response
 * ```json
 * {
 *    "rates": [
 *        {
 *            "service_name": "canadapost-overnight",
 *            "service_code": "ON",
 *            "total_price": "1295",
 *            "description": "This is the fastest option by far",
 *            "currency": "CAD",
 *            "min_delivery_date": "2013-04-12 14:48:45 -0400",
 *            "max_delivery_date": "2013-04-12 14:48:45 -0400"
 *        },
 *        {
 *            "service_name": "fedex-2dayground",
 *            "service_code": "2D",
 *            "total_price": "2934",
 *            "currency": "USD",
 *            "min_delivery_date": "2013-04-12 14:48:45 -0400",
 *            "max_delivery_date": "2013-04-12 14:48:45 -0400"
 *        },
 *        {
 *            "service_name": "fedex-priorityovernight",
 *            "service_code": "1D",
 *            "total_price": "3587",
 *            "currency": "USD",
 *            "min_delivery_date": "2013-04-12 14:48:45 -0400",
 *            "max_delivery_date": "2013-04-12 14:48:45 -0400"
 *        }
 *    ]
 * }
 * ```
 *
 * The `address3`, `fax`, `address_type`, and `company_name` fields are returned by specific [ActiveShipping](https://github.com/Shopify/active_shipping) providers. For API-created carrier services, you should use only the following shipping address fields:
 * * `address1`
 * * `address2`
 * * `city`
 * * `zip`
 * * `province`
 * * `country`
 *
 * Other values remain as `null` and are not sent to the callback URL.
 *
 * ### Response fields
 *
 * When Shopify requests shipping rates using your callback URL, the response object `rates` must be a JSON array of objects with the following fields.  Required fields must be included in the response for the carrier service integration to work properly.
 *
 * | Field                   | Required | Description                                                                                                                                                                                                  |
 * | ----------------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
 * | `service_name`          | Yes      | The name of the rate, which customers see at checkout. For example: `Expedited Mail`.                                                                                                                        |
 * | `description`           | Yes      | A description of the rate, which customers see at checkout. For example: `Includes tracking and insurance`.                                                                                                  |
 * | `service_code`          | Yes      | A unique code associated with the rate. For example: `expedited_mail`.                                                                                                                                       |
 * | `currency`              | Yes      | The currency of the shipping rate.                                                                                                                                                                           |
 * | `total_price`           | Yes      | The total price expressed in subunits. If the currency doesn't use subunits, then the value must be multiplied by 100. For example: `"total_price": 500` for 5.00 CAD, `"total_price": 100000` for 1000 JPY. |
 * | `phone_required`        | No       | Whether the customer must provide a phone number at checkout.                                                                                                                                                |
 * | `min_delivery_date`     | No       | The earliest delivery date for the displayed rate.                                                                                                                                                           |
 * | `max_delivery_date`     | No       | The latest delivery date for the displayed rate to still be valid.                                                                                                                                           |
 *
 * ### Special conditions
 *
 * * To indicate that this carrier service cannot handle this shipping request, return an empty array and any successful (20x) HTTP code.
 * * To force backup rates instead, return a 40x or 50x HTTP code with any content. A good choice is the regular 404 Not Found code.
 * * Redirects (30x codes) will only be followed for the same domain as the original callback URL. Attempting to redirect to a different domain will trigger backup rates.
 * * There is no retry mechanism. The response must be successful on the first try, within the time budget listed below. Timeouts or errors will trigger backup rates.
 *
 * ## Response Timeouts
 *
 * The read timeout for rate requests are dynamic, based on the number of requests per minute (RPM). These limits are applied to each shop-app pair. The timeout values are as follows.
 *
 * | RPM Range     | Timeout    |
 * | ------------- | ---------- |
 * | Under 1500    | 10s        |
 * | 1500 to 3000  | 5s         |
 * | Over 3000     | 3s         |
 *
 * > Note:
 * > These values are upper limits and should not be interpretted as a goal to develop towards. Shopify is constantly evaluating the performance of the platform and working towards improving resilience as well as app capabilities. As such, these numbers may be adjusted outside of our normal versioning timelines.
 *
 * ## Server-side caching of requests
 * Shopify provides server-side caching to reduce the number of requests it makes. Any shipping rate request that identically matches the following fields will be retrieved from Shopify's cache of the initial response:
 * * variant IDs
 * * default shipping box weight and dimensions
 * * variant quantities
 * * carrier service ID
 * * origin address
 * * destination address
 * * item weights and signatures
 *
 * If any of these fields differ, or if the cache has expired since the original request, then new shipping rates are requested. The cache expires 15 minutes after rates are successfully returned. If an error occurs, then the cache expires after 30 seconds.
 */
export interface ShopifyDeliveryCarrierServiceAvailableServicesForCountriesArgs {
  countryCodes?: InputMaybe<Array<ShopifyCountryCode>>
  origins?: InputMaybe<Array<Scalars["ID"]["input"]>>
  restOfWorld: Scalars["Boolean"]["input"]
}

/** A carrier service and the associated list of shop locations. */
export interface ShopifyDeliveryCarrierServiceAndLocations {
  __typename?: "DeliveryCarrierServiceAndLocations"
  /** The carrier service. */
  carrierService: ShopifyDeliveryCarrierService
  /** The list of locations that support this carrier service. */
  locations: Array<ShopifyLocation>
}

/** An auto-generated type for paginating through multiple DeliveryCarrierServices. */
export interface ShopifyDeliveryCarrierServiceConnection {
  __typename?: "DeliveryCarrierServiceConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDeliveryCarrierServiceEdge>
  /** A list of nodes that are contained in DeliveryCarrierServiceEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDeliveryCarrierService>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields required to create a carrier service. */
export interface ShopifyDeliveryCarrierServiceCreateInput {
  /** Whether this carrier service is active. If `true`, then the service will be available to serve rates in checkout. */
  active: Scalars["Boolean"]["input"]
  /** The URL endpoint that Shopify needs to retrieve shipping rates. This must be a public URL. */
  callbackUrl: Scalars["URL"]["input"]
  /** The name of the shipping service as seen by merchants and their customers. */
  name: Scalars["String"]["input"]
  /** Whether merchants are able to send dummy data to your service through the Shopify admin to see shipping rate examples. */
  supportsServiceDiscovery: Scalars["Boolean"]["input"]
}

/** An auto-generated type which holds one DeliveryCarrierService and a cursor during pagination. */
export interface ShopifyDeliveryCarrierServiceEdge {
  __typename?: "DeliveryCarrierServiceEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DeliveryCarrierServiceEdge. */
  node: ShopifyDeliveryCarrierService
}

/** The input fields used to update a carrier service. */
export interface ShopifyDeliveryCarrierServiceUpdateInput {
  /** Whether this carrier service is active. If `true`, then the service will be available to serve rates in checkout. */
  active?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The URL endpoint that Shopify needs to retrieve shipping rates. This must be a public URL. */
  callbackUrl?: InputMaybe<Scalars["URL"]["input"]>
  /** The global ID of the carrier service to update. */
  id: Scalars["ID"]["input"]
  /** The name of the shipping service as seen by merchants and their customers. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** Whether merchants are able to send dummy data to your service through the Shopify admin to see shipping rate examples. */
  supportsServiceDiscovery?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A condition that must pass for a delivery method definition to be applied to an order. */
export interface ShopifyDeliveryCondition extends ShopifyNode {
  __typename?: "DeliveryCondition"
  /** The value (weight or price) that the condition field is compared to. */
  conditionCriteria: ShopifyDeliveryConditionCriteria
  /** The field to compare the criterion value against, using the operator. */
  field: ShopifyDeliveryConditionField
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The operator to compare the field and criterion value. */
  operator: ShopifyDeliveryConditionOperator
}

/** The value (weight or price) that the condition field is compared to. */
export type ShopifyDeliveryConditionCriteria = ShopifyMoneyV2 | ShopifyWeight

/** The field type that the condition will be applied to. */
export type ShopifyDeliveryConditionField =
  /** The condition will check against the total price of the order. */
  | "TOTAL_PRICE"
  /** The condition will check against the total weight of the order. */
  | "TOTAL_WEIGHT"
  | "%future added value"

/** The operator to use to determine if the condition passes. */
export type ShopifyDeliveryConditionOperator =
  /** The condition will check whether the field is greater than or equal to the criterion. */
  | "GREATER_THAN_OR_EQUAL_TO"
  /** The condition will check if the field is less than or equal to the criterion. */
  | "LESS_THAN_OR_EQUAL_TO"
  | "%future added value"

/** A country that is used to define a shipping zone. */
export interface ShopifyDeliveryCountry extends ShopifyNode {
  __typename?: "DeliveryCountry"
  /**
   * A two-letter country code in ISO 3166-1 alpha-2 standard.
   * It also includes a flag indicating whether the country should be
   * a part of the 'Rest Of World' shipping zone.
   */
  code: ShopifyDeliveryCountryCodeOrRestOfWorld
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The full name of the country. */
  name: Scalars["String"]["output"]
  /** The list of regions associated with this country. */
  provinces: Array<ShopifyDeliveryProvince>
  /** The translated name of the country. The translation returned is based on the system's locale. */
  translatedName: Scalars["String"]["output"]
}

/** The country details and the associated shipping zone. */
export interface ShopifyDeliveryCountryAndZone {
  __typename?: "DeliveryCountryAndZone"
  /** The country details. */
  country: ShopifyDeliveryCountry
  /** The name of the shipping zone. */
  zone: Scalars["String"]["output"]
}

/** The country code and whether the country is a part of the 'Rest Of World' shipping zone. */
export interface ShopifyDeliveryCountryCodeOrRestOfWorld {
  __typename?: "DeliveryCountryCodeOrRestOfWorld"
  /** The country code in the ISO 3166-1 alpha-2 format. */
  countryCode?: Maybe<ShopifyCountryCode>
  /** Whether the country is a part of the 'Rest of World' shipping zone. */
  restOfWorld: Scalars["Boolean"]["output"]
}

/**
 * The list of country codes and information whether the countries
 * are a part of the 'Rest Of World' shipping zone.
 */
export interface ShopifyDeliveryCountryCodesOrRestOfWorld {
  __typename?: "DeliveryCountryCodesOrRestOfWorld"
  /** List of applicable country codes in the ISO 3166-1 alpha-2 format. */
  countryCodes: Array<ShopifyCountryCode>
  /** Whether the countries are a part of the 'Rest of World' shipping zone. */
  restOfWorld: Scalars["Boolean"]["output"]
}

/** The input fields to specify a country. */
export interface ShopifyDeliveryCountryInput {
  /** The country code of the country in the ISO 3166-1 alpha-2 format. */
  code?: InputMaybe<ShopifyCountryCode>
  /** Associate all available provinces with this country. */
  includeAllProvinces?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The regions associated with this country. */
  provinces?: InputMaybe<Array<ShopifyDeliveryProvinceInput>>
  /** Whether the country is a part of the 'Rest of World' shipping zone. */
  restOfWorld?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A delivery customization. */
export interface ShopifyDeliveryCustomization
  extends ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyNode {
  __typename?: "DeliveryCustomization"
  /** The enabled status of the delivery customization. */
  enabled: Scalars["Boolean"]["output"]
  /** The error history on the most recent version of the delivery customization. */
  errorHistory?: Maybe<ShopifyFunctionsErrorHistory>
  /** The ID of the Shopify Function implementing the delivery customization. */
  functionId: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** The Shopify Function implementing the delivery customization. */
  shopifyFunction: ShopifyShopifyFunction
  /** The title of the delivery customization. */
  title: Scalars["String"]["output"]
}

/** A delivery customization. */
export interface ShopifyDeliveryCustomizationMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** A delivery customization. */
export interface ShopifyDeliveryCustomizationMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/** A delivery customization. */
export interface ShopifyDeliveryCustomizationMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `deliveryCustomizationActivation` mutation. */
export interface ShopifyDeliveryCustomizationActivationPayload {
  __typename?: "DeliveryCustomizationActivationPayload"
  /** The IDs of the updated delivery customizations. */
  ids?: Maybe<Array<Scalars["String"]["output"]>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDeliveryCustomizationError>
}

/** An auto-generated type for paginating through multiple DeliveryCustomizations. */
export interface ShopifyDeliveryCustomizationConnection {
  __typename?: "DeliveryCustomizationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDeliveryCustomizationEdge>
  /** A list of nodes that are contained in DeliveryCustomizationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDeliveryCustomization>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `deliveryCustomizationCreate` mutation. */
export interface ShopifyDeliveryCustomizationCreatePayload {
  __typename?: "DeliveryCustomizationCreatePayload"
  /** Returns the created delivery customization. */
  deliveryCustomization?: Maybe<ShopifyDeliveryCustomization>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDeliveryCustomizationError>
}

/** Return type for `deliveryCustomizationDelete` mutation. */
export interface ShopifyDeliveryCustomizationDeletePayload {
  __typename?: "DeliveryCustomizationDeletePayload"
  /** Returns the deleted delivery customization ID. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDeliveryCustomizationError>
}

/** An auto-generated type which holds one DeliveryCustomization and a cursor during pagination. */
export interface ShopifyDeliveryCustomizationEdge {
  __typename?: "DeliveryCustomizationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DeliveryCustomizationEdge. */
  node: ShopifyDeliveryCustomization
}

/** An error that occurs during the execution of a delivery customization mutation. */
export interface ShopifyDeliveryCustomizationError
  extends ShopifyDisplayableError {
  __typename?: "DeliveryCustomizationError"
  /** The error code. */
  code?: Maybe<ShopifyDeliveryCustomizationErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `DeliveryCustomizationError`. */
export type ShopifyDeliveryCustomizationErrorCode =
  /** Shop must be on a Shopify Plus plan to activate functions from a custom app. */
  | "CUSTOM_APP_FUNCTION_NOT_ELIGIBLE"
  /** Shop must be on a Shopify Plus plan to activate delivery customizations from a custom app. */
  | "DELIVERY_CUSTOMIZATION_FUNCTION_NOT_ELIGIBLE"
  /** Delivery customization not found. */
  | "DELIVERY_CUSTOMIZATION_NOT_FOUND"
  /** Function does not implement the required interface for this delivery customization. */
  | "FUNCTION_DOES_NOT_IMPLEMENT"
  /** Function ID cannot be changed. */
  | "FUNCTION_ID_CANNOT_BE_CHANGED"
  /** Function not found. */
  | "FUNCTION_NOT_FOUND"
  /** Function is pending deletion. */
  | "FUNCTION_PENDING_DELETION"
  /** The input value is invalid. */
  | "INVALID"
  /** Could not create or update metafields. */
  | "INVALID_METAFIELDS"
  /** Maximum delivery customizations are already enabled. */
  | "MAXIMUM_ACTIVE_DELIVERY_CUSTOMIZATIONS"
  /** Required input field must be present. */
  | "REQUIRED_INPUT_FIELD"
  /** Unauthorized app scope. */
  | "UNAUTHORIZED_APP_SCOPE"
  | "%future added value"

/** The input fields to create and update a delivery customization. */
export interface ShopifyDeliveryCustomizationInput {
  /** The enabled status of the delivery customization. */
  enabled?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The ID of the function providing the delivery customization. */
  functionId?: InputMaybe<Scalars["String"]["input"]>
  /** Additional metafields to associate to the delivery customization. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The title of the delivery customization. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `deliveryCustomizationUpdate` mutation. */
export interface ShopifyDeliveryCustomizationUpdatePayload {
  __typename?: "DeliveryCustomizationUpdatePayload"
  /** Returns the updated delivery customization. */
  deliveryCustomization?: Maybe<ShopifyDeliveryCustomization>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDeliveryCustomizationError>
}

/** Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned. */
export interface ShopifyDeliveryLegacyModeBlocked {
  __typename?: "DeliveryLegacyModeBlocked"
  /** Whether the shop can convert to full multi-location delivery profiles mode. */
  blocked: Scalars["Boolean"]["output"]
  /** The reasons why the shop is blocked from converting to full multi-location delivery profiles mode. */
  reasons?: Maybe<Array<ShopifyDeliveryLegacyModeBlockedReason>>
}

/** Reasons the shop is blocked from converting to full multi-location delivery profiles mode. */
export type ShopifyDeliveryLegacyModeBlockedReason =
  /** Multi-Location mode is disabled. The shop can't convert to full multi-location delivery profiles mode. */
  | "MULTI_LOCATION_DISABLED"
  /** There are no locations for this store that can fulfill online orders. */
  | "NO_LOCATIONS_FULFILLING_ONLINE_ORDERS"
  | "%future added value"

/** Local pickup settings associated with a location. */
export interface ShopifyDeliveryLocalPickupSettings {
  __typename?: "DeliveryLocalPickupSettings"
  /** Additional instructions or information related to the local pickup. */
  instructions: Scalars["String"]["output"]
  /** The estimated pickup time to show customers at checkout. */
  pickupTime: ShopifyDeliveryLocalPickupTime
}

/** Possible pickup time values that a location enabled for local pickup can have. */
export type ShopifyDeliveryLocalPickupTime =
  /** Custom pickup time. Unrecognized pickup time enum value. */
  | "CUSTOM"
  /** Usually ready in 5+ days. */
  | "FIVE_OR_MORE_DAYS"
  /** Usually ready in 4 hours. */
  | "FOUR_HOURS"
  /** Usually ready in 1 hour. */
  | "ONE_HOUR"
  /** Usually ready in 24 hours. */
  | "TWENTY_FOUR_HOURS"
  /** Usually ready in 2 hours. */
  | "TWO_HOURS"
  /** Usually ready in 2-4 days. */
  | "TWO_TO_FOUR_DAYS"
  | "%future added value"

/**
 * A location group is a collection of locations. They share zones and delivery methods across delivery
 * profiles.
 */
export interface ShopifyDeliveryLocationGroup extends ShopifyNode {
  __typename?: "DeliveryLocationGroup"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** A list of all locations that are part of this location group. */
  locations: ShopifyLocationConnection
  /** A count of all locations that are part of this location group. */
  locationsCount?: Maybe<ShopifyCount>
}

/**
 * A location group is a collection of locations. They share zones and delivery methods across delivery
 * profiles.
 */
export interface ShopifyDeliveryLocationGroupLocationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  includeInactive?: InputMaybe<Scalars["Boolean"]["input"]>
  includeLegacy?: InputMaybe<Scalars["Boolean"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyLocationSortKeys>
}

/** Links a location group with a zone and the associated method definitions. */
export interface ShopifyDeliveryLocationGroupZone {
  __typename?: "DeliveryLocationGroupZone"
  /** The number of method definitions for the zone. */
  methodDefinitionCounts: ShopifyDeliveryMethodDefinitionCounts
  /** The method definitions associated to a zone and location group. */
  methodDefinitions: ShopifyDeliveryMethodDefinitionConnection
  /** The zone associated to a location group. */
  zone: ShopifyDeliveryZone
}

/** Links a location group with a zone and the associated method definitions. */
export interface ShopifyDeliveryLocationGroupZoneMethodDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  eligible?: InputMaybe<Scalars["Boolean"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMethodDefinitionSortKeys>
  type?: InputMaybe<ShopifyDeliveryMethodDefinitionType>
}

/** An auto-generated type for paginating through multiple DeliveryLocationGroupZones. */
export interface ShopifyDeliveryLocationGroupZoneConnection {
  __typename?: "DeliveryLocationGroupZoneConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDeliveryLocationGroupZoneEdge>
  /** A list of nodes that are contained in DeliveryLocationGroupZoneEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDeliveryLocationGroupZone>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination. */
export interface ShopifyDeliveryLocationGroupZoneEdge {
  __typename?: "DeliveryLocationGroupZoneEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DeliveryLocationGroupZoneEdge. */
  node: ShopifyDeliveryLocationGroupZone
}

/** The input fields for a delivery zone associated to a location group and profile. */
export interface ShopifyDeliveryLocationGroupZoneInput {
  /** A list of countries to associate with the zone. */
  countries?: InputMaybe<Array<ShopifyDeliveryCountryInput>>
  /** A globally-unique ID of the zone. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** A list of method definitions to create. */
  methodDefinitionsToCreate?: InputMaybe<
    Array<ShopifyDeliveryMethodDefinitionInput>
  >
  /** A list of method definitions to update. */
  methodDefinitionsToUpdate?: InputMaybe<
    Array<ShopifyDeliveryMethodDefinitionInput>
  >
  /** The name of the zone. */
  name?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields for a local pickup setting associated with a location. */
export interface ShopifyDeliveryLocationLocalPickupEnableInput {
  /** The instructions for the local pickup. */
  instructions?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of the location associated with the location setting. */
  locationId: Scalars["ID"]["input"]
  /** The time of the local pickup. */
  pickupTime: ShopifyDeliveryLocalPickupTime
}

/** Represents an error that happened when changing local pickup settings for a location. */
export interface ShopifyDeliveryLocationLocalPickupSettingsError
  extends ShopifyDisplayableError {
  __typename?: "DeliveryLocationLocalPickupSettingsError"
  /** The error code. */
  code?: Maybe<ShopifyDeliveryLocationLocalPickupSettingsErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `DeliveryLocationLocalPickupSettingsError`. */
export type ShopifyDeliveryLocationLocalPickupSettingsErrorCode =
  /** Provided locationId is not for an active location belonging to this store. */
  | "ACTIVE_LOCATION_NOT_FOUND"
  /** Custom pickup time is not allowed for local pickup settings. */
  | "CUSTOM_PICKUP_TIME_NOT_ALLOWED"
  /** An error occurred while changing the local pickup settings. */
  | "GENERIC_ERROR"
  | "%future added value"

/** The delivery method used by a fulfillment order. */
export interface ShopifyDeliveryMethod extends ShopifyNode {
  __typename?: "DeliveryMethod"
  /** The Additional information to consider when performing the delivery. */
  additionalInformation?: Maybe<ShopifyDeliveryMethodAdditionalInformation>
  /** The branded promise that was presented to the buyer during checkout.  For example: Shop Promise. */
  brandedPromise?: Maybe<ShopifyDeliveryBrandedPromise>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The latest delivery date and time when the fulfillment is expected to arrive at the buyer's location. */
  maxDeliveryDateTime?: Maybe<Scalars["DateTime"]["output"]>
  /** The type of the delivery method. */
  methodType: ShopifyDeliveryMethodType
  /** The earliest delivery date and time when the fulfillment is expected to arrive at the buyer's location. */
  minDeliveryDateTime?: Maybe<Scalars["DateTime"]["output"]>
  /** The name of the delivery option that was presented to the buyer during checkout. */
  presentedName?: Maybe<Scalars["String"]["output"]>
  /** A reference to the shipping method. */
  serviceCode?: Maybe<Scalars["String"]["output"]>
  /** Source reference is promise provider specific data associated with delivery promise. */
  sourceReference?: Maybe<Scalars["String"]["output"]>
}

/** Additional information included on a delivery method that will help during the delivery process. */
export interface ShopifyDeliveryMethodAdditionalInformation {
  __typename?: "DeliveryMethodAdditionalInformation"
  /** The delivery instructions to follow when performing the delivery. */
  instructions?: Maybe<Scalars["String"]["output"]>
  /** The phone number to contact when performing the delivery. */
  phone?: Maybe<Scalars["String"]["output"]>
}

/**
 * A method definition contains the delivery rate and the conditions that must be met for the method to be
 * applied.
 */
export interface ShopifyDeliveryMethodDefinition extends ShopifyNode {
  __typename?: "DeliveryMethodDefinition"
  /** Whether this method definition is active. */
  active: Scalars["Boolean"]["output"]
  /** The description of the method definition. Only available on shipping rates that are custom. */
  description?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The method conditions that must pass for this method definition to be applied to an order. */
  methodConditions: Array<ShopifyDeliveryCondition>
  /** The name of the method definition. */
  name: Scalars["String"]["output"]
  /** The provided rate for this method definition, from a rate definition or participant. */
  rateProvider: ShopifyDeliveryRateProvider
}

/** An auto-generated type for paginating through multiple DeliveryMethodDefinitions. */
export interface ShopifyDeliveryMethodDefinitionConnection {
  __typename?: "DeliveryMethodDefinitionConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDeliveryMethodDefinitionEdge>
  /** A list of nodes that are contained in DeliveryMethodDefinitionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDeliveryMethodDefinition>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The number of method definitions for a zone, separated into merchant-owned and participant definitions. */
export interface ShopifyDeliveryMethodDefinitionCounts {
  __typename?: "DeliveryMethodDefinitionCounts"
  /** The number of participant method definitions for the specified zone. */
  participantDefinitionsCount: Scalars["Int"]["output"]
  /** The number of merchant-defined method definitions for the specified zone. */
  rateDefinitionsCount: Scalars["Int"]["output"]
}

/** An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination. */
export interface ShopifyDeliveryMethodDefinitionEdge {
  __typename?: "DeliveryMethodDefinitionEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DeliveryMethodDefinitionEdge. */
  node: ShopifyDeliveryMethodDefinition
}

/** The input fields for a method definition. */
export interface ShopifyDeliveryMethodDefinitionInput {
  /** Whether to use this method definition during rate calculation. */
  active?: InputMaybe<Scalars["Boolean"]["input"]>
  /** A list of conditions to update on the method definition. */
  conditionsToUpdate?: InputMaybe<Array<ShopifyDeliveryUpdateConditionInput>>
  /** The description of the method definition. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /** A globally-unique ID of the method definition. Use only when updating a method definition. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** The name of the method definition. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** A participant to apply to the method definition. */
  participant?: InputMaybe<ShopifyDeliveryParticipantInput>
  /** A list of price conditions on the method definition. */
  priceConditionsToCreate?: InputMaybe<
    Array<ShopifyDeliveryPriceConditionInput>
  >
  /** A rate definition to apply to the method definition. */
  rateDefinition?: InputMaybe<ShopifyDeliveryRateDefinitionInput>
  /** A list of weight conditions on the method definition. */
  weightConditionsToCreate?: InputMaybe<
    Array<ShopifyDeliveryWeightConditionInput>
  >
}

/** The different types of method definitions to filter by. */
export type ShopifyDeliveryMethodDefinitionType =
  /** A static merchant-defined rate. */
  | "MERCHANT"
  /** A dynamic participant rate. */
  | "PARTICIPANT"
  | "%future added value"

/** Possible method types that a delivery method can have. */
export type ShopifyDeliveryMethodType =
  /** The order is delivered using a local delivery service. */
  | "LOCAL"
  /** Non-physical items, no delivery needed. */
  | "NONE"
  /** The order is delivered to a pickup point. */
  | "PICKUP_POINT"
  /** The order is picked up by the customer. */
  | "PICK_UP"
  /** In-store sale, no delivery needed. */
  | "RETAIL"
  /** The order is shipped. */
  | "SHIPPING"
  | "%future added value"

/**
 * A participant defines carrier-calculated rates for shipping services
 * with a possible merchant-defined fixed fee or a percentage-of-rate fee.
 */
export interface ShopifyDeliveryParticipant extends ShopifyNode {
  __typename?: "DeliveryParticipant"
  /** Whether to display new shipping services automatically to the customer when the service becomes available. */
  adaptToNewServicesFlag: Scalars["Boolean"]["output"]
  /** The carrier used for this participant. */
  carrierService: ShopifyDeliveryCarrierService
  /** The merchant-defined fixed fee for this participant. */
  fixedFee?: Maybe<ShopifyMoneyV2>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The carrier-specific services offered by the participant, and whether each service is active. */
  participantServices: Array<ShopifyDeliveryParticipantService>
  /** The merchant-defined percentage-of-rate fee for this participant. */
  percentageOfRateFee: Scalars["Float"]["output"]
}

/** The input fields for a participant. */
export interface ShopifyDeliveryParticipantInput {
  /** Whether to automatically display new shipping services to the customer when a service becomes available. */
  adaptToNewServices?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The ID of the carrier service for this participant. */
  carrierServiceId?: InputMaybe<Scalars["ID"]["input"]>
  /** The fixed feed that's defined by the merchant for this participant. */
  fixedFee?: InputMaybe<ShopifyMoneyInput>
  /** The ID of the participant. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** The list of shipping services offered by the participant. */
  participantServices?: InputMaybe<
    Array<ShopifyDeliveryParticipantServiceInput>
  >
  /** The merchant-defined percentage-of-rate fee for this participant. */
  percentageOfRateFee?: InputMaybe<Scalars["Float"]["input"]>
}

/** A mail service provided by the participant. */
export interface ShopifyDeliveryParticipantService {
  __typename?: "DeliveryParticipantService"
  /** Whether the service is active. */
  active: Scalars["Boolean"]["output"]
  /** The name of the service. */
  name: Scalars["String"]["output"]
}

/** The input fields for a shipping service provided by a participant. */
export interface ShopifyDeliveryParticipantServiceInput {
  /** Whether the service is active. */
  active: Scalars["Boolean"]["input"]
  /** The name of the service. */
  name: Scalars["String"]["input"]
}

/** The input fields for a price-based condition of a delivery method definition. */
export interface ShopifyDeliveryPriceConditionInput {
  /** The monetary value to compare the price of an order to. */
  criteria?: InputMaybe<ShopifyMoneyInput>
  /** The operator to use for comparison. */
  operator?: InputMaybe<ShopifyDeliveryConditionOperator>
}

/** How many product variants are in a profile. This count is capped at 500. */
export interface ShopifyDeliveryProductVariantsCount {
  __typename?: "DeliveryProductVariantsCount"
  /** Whether the count has reached the cap of 500. */
  capped: Scalars["Boolean"]["output"]
  /** The product variant count. */
  count: Scalars["Int"]["output"]
}

/** A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. Learn more about [building with delivery profiles](https://shopify.dev/apps/build/purchase-options/deferred/delivery-and-deferment/build-delivery-profiles). */
export interface ShopifyDeliveryProfile extends ShopifyNode {
  __typename?: "DeliveryProfile"
  /** The number of active shipping rates for the profile. */
  activeMethodDefinitionsCount: Scalars["Int"]["output"]
  /** Whether this is the default profile. */
  default: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Whether this shop has enabled legacy compatibility mode for delivery profiles. */
  legacyMode: Scalars["Boolean"]["output"]
  /** The number of locations without rates defined. */
  locationsWithoutRatesCount: Scalars["Int"]["output"]
  /** The name of the delivery profile. */
  name: Scalars["String"]["output"]
  /** The number of active origin locations for the profile. */
  originLocationCount: Scalars["Int"]["output"]
  /** How many product variants are in this profile. */
  productVariantsCount?: Maybe<ShopifyCount>
  /**
   * How many product variants are in this profile.
   * @deprecated Use `productVariantsCount` instead.
   */
  productVariantsCountV2: ShopifyDeliveryProductVariantsCount
  /** The products and variants associated with this profile. */
  profileItems: ShopifyDeliveryProfileItemConnection
  /** The location groups and associated zones using this profile. */
  profileLocationGroups: Array<ShopifyDeliveryProfileLocationGroup>
  /** Selling plan groups associated with the specified delivery profile. */
  sellingPlanGroups: ShopifySellingPlanGroupConnection
  /** List of locations that haven't been assigned to a location group for this profile. */
  unassignedLocations: Array<ShopifyLocation>
  /** List of locations that have not been assigned to a location group for this profile. */
  unassignedLocationsPaginated: ShopifyLocationConnection
  /** The number of countries with active rates to deliver to. */
  zoneCountryCount: Scalars["Int"]["output"]
}

/** A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. Learn more about [building with delivery profiles](https://shopify.dev/apps/build/purchase-options/deferred/delivery-and-deferment/build-delivery-profiles). */
export interface ShopifyDeliveryProfileProfileItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. Learn more about [building with delivery profiles](https://shopify.dev/apps/build/purchase-options/deferred/delivery-and-deferment/build-delivery-profiles). */
export interface ShopifyDeliveryProfileProfileLocationGroupsArgs {
  locationGroupId?: InputMaybe<Scalars["ID"]["input"]>
}

/** A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. Learn more about [building with delivery profiles](https://shopify.dev/apps/build/purchase-options/deferred/delivery-and-deferment/build-delivery-profiles). */
export interface ShopifyDeliveryProfileSellingPlanGroupsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones. Learn more about [building with delivery profiles](https://shopify.dev/apps/build/purchase-options/deferred/delivery-and-deferment/build-delivery-profiles). */
export interface ShopifyDeliveryProfileUnassignedLocationsPaginatedArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple DeliveryProfiles. */
export interface ShopifyDeliveryProfileConnection {
  __typename?: "DeliveryProfileConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDeliveryProfileEdge>
  /** A list of nodes that are contained in DeliveryProfileEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDeliveryProfile>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `deliveryProfileCreate` mutation. */
export interface ShopifyDeliveryProfileCreatePayload {
  __typename?: "DeliveryProfileCreatePayload"
  /** The delivery profile that was created. */
  profile?: Maybe<ShopifyDeliveryProfile>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type which holds one DeliveryProfile and a cursor during pagination. */
export interface ShopifyDeliveryProfileEdge {
  __typename?: "DeliveryProfileEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DeliveryProfileEdge. */
  node: ShopifyDeliveryProfile
}

/** The input fields for a delivery profile. */
export interface ShopifyDeliveryProfileInput {
  /** The list of condition IDs to delete. */
  conditionsToDelete?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /**
   * The list of location groups to be created in the delivery profile.
   *
   * **Note:** due to the potential complexity of the nested data, it is recommended to send no more than 5 location groups per each request.
   */
  locationGroupsToCreate?: InputMaybe<
    Array<ShopifyDeliveryProfileLocationGroupInput>
  >
  /** The list of location groups to be deleted from the delivery profile. */
  locationGroupsToDelete?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /**
   * The list of location groups to be updated in the delivery profile.
   *
   * **Note:** due to the potential complexity of the nested data, it is recommended to send no more than 5 location groups per each request.
   */
  locationGroupsToUpdate?: InputMaybe<
    Array<ShopifyDeliveryProfileLocationGroupInput>
  >
  /** The list of method definition IDs to delete. */
  methodDefinitionsToDelete?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The name of the delivery profile. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** The list of location groups associated with the delivery profile. */
  profileLocationGroups?: InputMaybe<
    Array<ShopifyDeliveryProfileLocationGroupInput>
  >
  /** The list of selling plan groups to be associated with the delivery profile. */
  sellingPlanGroupsToAssociate?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The list of selling plan groups to be dissociated with the delivery profile. */
  sellingPlanGroupsToDissociate?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The list of product variant IDs to be associated with the delivery profile. */
  variantsToAssociate?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /**
   * The list of product variant IDs to be dissociated from the delivery profile.
   * The dissociated product variants are moved back to the default delivery profile.
   */
  variantsToDissociate?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The list of zone IDs to delete. */
  zonesToDelete?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** A product and the subset of associated variants that are part of this delivery profile. */
export interface ShopifyDeliveryProfileItem extends ShopifyNode {
  __typename?: "DeliveryProfileItem"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** A product associated with this profile. */
  product: ShopifyProduct
  /** The product variants associated with this delivery profile. */
  variants: ShopifyProductVariantConnection
}

/** A product and the subset of associated variants that are part of this delivery profile. */
export interface ShopifyDeliveryProfileItemVariantsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple DeliveryProfileItems. */
export interface ShopifyDeliveryProfileItemConnection {
  __typename?: "DeliveryProfileItemConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDeliveryProfileItemEdge>
  /** A list of nodes that are contained in DeliveryProfileItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDeliveryProfileItem>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination. */
export interface ShopifyDeliveryProfileItemEdge {
  __typename?: "DeliveryProfileItemEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DeliveryProfileItemEdge. */
  node: ShopifyDeliveryProfileItem
}

/** Links a location group with zones. Both are associated to a delivery profile. */
export interface ShopifyDeliveryProfileLocationGroup {
  __typename?: "DeliveryProfileLocationGroup"
  /** The countries already selected in any zone for the specified location group. */
  countriesInAnyZone: Array<ShopifyDeliveryCountryAndZone>
  /** The collection of locations that make up the specified location group. */
  locationGroup: ShopifyDeliveryLocationGroup
  /** The applicable zones associated to the specified location group. */
  locationGroupZones: ShopifyDeliveryLocationGroupZoneConnection
}

/** Links a location group with zones. Both are associated to a delivery profile. */
export interface ShopifyDeliveryProfileLocationGroupLocationGroupZonesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The input fields for a location group associated to a delivery profile. */
export interface ShopifyDeliveryProfileLocationGroupInput {
  /** The globally-unique ID of the delivery profile location group. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** The list of location IDs to be moved to this location group. */
  locations?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /**
   * The list of location IDs to be added to this location group.
   *
   * **Note:** due to API input array limits, a maximum of 250 items can be sent per each request.
   */
  locationsToAdd?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /**
   * The list of location IDs to be removed from this location group.
   *
   * **Note:** due to API input array limits, a maximum of 250 items can be sent per each request.
   */
  locationsToRemove?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /**
   * The list of location group zones to create.
   *
   * **Note:** due to the potential complexity of the nested data, it is recommended to send no more than 5 zones per each request.
   */
  zonesToCreate?: InputMaybe<Array<ShopifyDeliveryLocationGroupZoneInput>>
  /**
   * The list of location group zones to update.
   *
   * **Note:** due to the potential complexity of the nested data, it is recommended to send no more than 5 zones per each request.
   */
  zonesToUpdate?: InputMaybe<Array<ShopifyDeliveryLocationGroupZoneInput>>
}

/** Return type for `deliveryProfileRemove` mutation. */
export interface ShopifyDeliveryProfileRemovePayload {
  __typename?: "DeliveryProfileRemovePayload"
  /** The delivery profile deletion job triggered by the mutation. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `deliveryProfileUpdate` mutation. */
export interface ShopifyDeliveryProfileUpdatePayload {
  __typename?: "DeliveryProfileUpdatePayload"
  /** The delivery profile that was updated. */
  profile?: Maybe<ShopifyDeliveryProfile>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Returns enabled delivery promise participants. */
export interface ShopifyDeliveryPromiseParticipant extends ShopifyNode {
  __typename?: "DeliveryPromiseParticipant"
  /** The ID of the promise participant. */
  id: Scalars["ID"]["output"]
  /** The resource that the participant is attached to. */
  owner?: Maybe<ShopifyDeliveryPromiseParticipantOwner>
  /** The owner type of the participant. */
  ownerType: ShopifyDeliveryPromiseParticipantOwnerType
}

/** An auto-generated type for paginating through multiple DeliveryPromiseParticipants. */
export interface ShopifyDeliveryPromiseParticipantConnection {
  __typename?: "DeliveryPromiseParticipantConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDeliveryPromiseParticipantEdge>
  /** A list of nodes that are contained in DeliveryPromiseParticipantEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDeliveryPromiseParticipant>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one DeliveryPromiseParticipant and a cursor during pagination. */
export interface ShopifyDeliveryPromiseParticipantEdge {
  __typename?: "DeliveryPromiseParticipantEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DeliveryPromiseParticipantEdge. */
  node: ShopifyDeliveryPromiseParticipant
}

/** The object that the participant references. */
export type ShopifyDeliveryPromiseParticipantOwner = ShopifyProductVariant

/** The type of object that the participant is attached to. */
export type ShopifyDeliveryPromiseParticipantOwnerType =
  /** A product variant. */
  "PRODUCTVARIANT" | "%future added value"

/** Return type for `deliveryPromiseParticipantsUpdate` mutation. */
export interface ShopifyDeliveryPromiseParticipantsUpdatePayload {
  __typename?: "DeliveryPromiseParticipantsUpdatePayload"
  /** The promise participants that were added. */
  promiseParticipants?: Maybe<Array<ShopifyDeliveryPromiseParticipant>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** A delivery promise provider. Currently restricted to select approved delivery promise partners. */
export interface ShopifyDeliveryPromiseProvider extends ShopifyNode {
  __typename?: "DeliveryPromiseProvider"
  /** Whether the delivery promise provider is active. Defaults to `true` when creating a provider. */
  active: Scalars["Boolean"]["output"]
  /** The number of seconds to add to the current time as a buffer when looking up delivery promises. Represents how long the shop requires before releasing an order to the fulfillment provider. */
  fulfillmentDelay?: Maybe<Scalars["Int"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The location associated with this delivery promise provider. */
  location: ShopifyLocation
  /** The time zone to be used for interpreting day of week and cutoff times in delivery schedules when looking up delivery promises. */
  timeZone: Scalars["String"]["output"]
}

/** Return type for `deliveryPromiseProviderUpsert` mutation. */
export interface ShopifyDeliveryPromiseProviderUpsertPayload {
  __typename?: "DeliveryPromiseProviderUpsertPayload"
  /** The created or updated delivery promise provider. */
  deliveryPromiseProvider?: Maybe<ShopifyDeliveryPromiseProvider>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDeliveryPromiseProviderUpsertUserError>
}

/** An error that occurs during the execution of `DeliveryPromiseProviderUpsert`. */
export interface ShopifyDeliveryPromiseProviderUpsertUserError
  extends ShopifyDisplayableError {
  __typename?: "DeliveryPromiseProviderUpsertUserError"
  /** The error code. */
  code?: Maybe<ShopifyDeliveryPromiseProviderUpsertUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `DeliveryPromiseProviderUpsertUserError`. */
export type ShopifyDeliveryPromiseProviderUpsertUserErrorCode =
  /** The time zone is invalid. */
  | "INVALID_TIME_ZONE"
  /** The location doesn't belong to the app. */
  | "MUST_BELONG_TO_APP"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** The input value is too long. */
  | "TOO_LONG"
  | "%future added value"

/** The delivery promise settings. */
export interface ShopifyDeliveryPromiseSetting {
  __typename?: "DeliveryPromiseSetting"
  /** Whether delivery dates is enabled. */
  deliveryDatesEnabled: Scalars["Boolean"]["output"]
  /** The number of business days required for processing the order before the package is handed off to the carrier. Expressed as an ISO8601 duration. */
  processingTime?: Maybe<Scalars["String"]["output"]>
}

/** A region that is used to define a shipping zone. */
export interface ShopifyDeliveryProvince extends ShopifyNode {
  __typename?: "DeliveryProvince"
  /** The code of the region. */
  code: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The full name of the region. */
  name: Scalars["String"]["output"]
  /** The translated name of the region. The translation returned is based on the system's locale. */
  translatedName: Scalars["String"]["output"]
}

/** The input fields to specify a region. */
export interface ShopifyDeliveryProvinceInput {
  /** The code of the region. */
  code: Scalars["String"]["input"]
}

/** The merchant-defined rate of the [DeliveryMethodDefinition](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryMethodDefinition). */
export interface ShopifyDeliveryRateDefinition extends ShopifyNode {
  __typename?: "DeliveryRateDefinition"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The price of this rate. */
  price: ShopifyMoneyV2
}

/** The input fields for a rate definition. */
export interface ShopifyDeliveryRateDefinitionInput {
  /** A globally-unique ID of the rate definition. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** The price of the rate definition. */
  price: ShopifyMoneyInput
}

/** A rate provided by a merchant-defined rate or a participant. */
export type ShopifyDeliveryRateProvider =
  | ShopifyDeliveryParticipant
  | ShopifyDeliveryRateDefinition

/**
 * The `DeliverySetting` object enables you to manage shop-wide shipping settings.
 * You can enable legacy compatibility mode for the multi-location delivery profiles feature
 * if the legacy mode isn't blocked.
 */
export interface ShopifyDeliverySetting {
  __typename?: "DeliverySetting"
  /** Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned. */
  legacyModeBlocked: ShopifyDeliveryLegacyModeBlocked
  /** Enables legacy compatability mode for the multi-location delivery profiles feature. */
  legacyModeProfiles: Scalars["Boolean"]["output"]
}

/** The input fields for shop-level delivery settings. */
export interface ShopifyDeliverySettingInput {
  /** Whether legacy compatability mode is enabled for the multi-location delivery profiles feature. */
  legacyModeProfiles?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `deliverySettingUpdate` mutation. */
export interface ShopifyDeliverySettingUpdatePayload {
  __typename?: "DeliverySettingUpdatePayload"
  /** The updated delivery shop level settings. */
  setting?: Maybe<ShopifyDeliverySetting>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `deliveryShippingOriginAssign` mutation. */
export interface ShopifyDeliveryShippingOriginAssignPayload {
  __typename?: "DeliveryShippingOriginAssignPayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields for updating the condition of a delivery method definition. */
export interface ShopifyDeliveryUpdateConditionInput {
  /** The value that will be used in comparison. */
  criteria?: InputMaybe<Scalars["Float"]["input"]>
  /** The unit associated with the value that will be used in comparison. */
  criteriaUnit?: InputMaybe<Scalars["String"]["input"]>
  /** The property of an order that will be used in comparison. */
  field?: InputMaybe<ShopifyDeliveryConditionField>
  /** A globally-unique ID of the condition. */
  id: Scalars["ID"]["input"]
  /** The operator to use for comparison. */
  operator?: InputMaybe<ShopifyDeliveryConditionOperator>
}

/** The input fields for a weight-based condition of a delivery method definition. */
export interface ShopifyDeliveryWeightConditionInput {
  /** The weight value to compare the weight of an order to. */
  criteria?: InputMaybe<ShopifyWeightInput>
  /** The operator to use for comparison. */
  operator?: InputMaybe<ShopifyDeliveryConditionOperator>
}

/** A zone is a group of countries that have the same shipping rates. Customers can order products from a store only if they choose a shipping destination that's included in one of the store's zones. */
export interface ShopifyDeliveryZone extends ShopifyNode {
  __typename?: "DeliveryZone"
  /** The list of countries within the zone. */
  countries: Array<ShopifyDeliveryCountry>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The name of the zone. */
  name: Scalars["String"]["output"]
}

/** Configuration of the deposit. */
export type ShopifyDepositConfiguration = ShopifyDepositPercentage

/** The input fields configuring the deposit for a B2B buyer. */
export interface ShopifyDepositInput {
  /** The percentage of the order total that should be paid as a deposit. */
  percentage: Scalars["Float"]["input"]
}

/** A percentage deposit. */
export interface ShopifyDepositPercentage {
  __typename?: "DepositPercentage"
  /** The percentage value of the deposit. */
  percentage: Scalars["Float"]["output"]
}

/** Digital wallet, such as Apple Pay, which can be used for accelerated checkouts. */
export type ShopifyDigitalWallet =
  /** Amazon Pay. */
  | "AMAZON_PAY"
  /** Android Pay. */
  | "ANDROID_PAY"
  /** Apple Pay. */
  | "APPLE_PAY"
  /** Facebook Pay. */
  | "FACEBOOK_PAY"
  /** Google Pay. */
  | "GOOGLE_PAY"
  /** Shopify Pay. */
  | "SHOPIFY_PAY"
  | "%future added value"

/** A discount offers promotional value and can be applied by entering a code or automatically when conditions are met. Discounts can provide fixed amounts, percentage reductions, free shipping, or Buy X Get Y (BXGY) benefits on specific products or the entire order. For more complex scenarios, developers can use Function-backed discounts to create custom discount configurations. */
export type ShopifyDiscount =
  | ShopifyDiscountAutomaticApp
  | ShopifyDiscountAutomaticBasic
  | ShopifyDiscountAutomaticBxgy
  | ShopifyDiscountAutomaticFreeShipping
  | ShopifyDiscountCodeApp
  | ShopifyDiscountCodeBasic
  | ShopifyDiscountCodeBxgy
  | ShopifyDiscountCodeFreeShipping

/** An amount that's allocated to a line based on an associated discount application. */
export interface ShopifyDiscountAllocation {
  __typename?: "DiscountAllocation"
  /**
   * The money amount that's allocated to a line based on the associated discount application.
   * @deprecated Use `allocatedAmountSet` instead.
   */
  allocatedAmount: ShopifyMoneyV2
  /** The money amount that's allocated to a line based on the associated discount application in shop and presentment currencies. */
  allocatedAmountSet: ShopifyMoneyBag
  /** The discount application that the allocated amount originated from. */
  discountApplication: ShopifyDiscountApplication
}

/** An auto-generated type for paginating through multiple DiscountAllocations. */
export interface ShopifyDiscountAllocationConnection {
  __typename?: "DiscountAllocationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDiscountAllocationEdge>
  /** A list of nodes that are contained in DiscountAllocationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDiscountAllocation>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one DiscountAllocation and a cursor during pagination. */
export interface ShopifyDiscountAllocationEdge {
  __typename?: "DiscountAllocationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DiscountAllocationEdge. */
  node: ShopifyDiscountAllocation
}

/** The fixed amount value of a discount, and whether the amount is applied to each entitled item or spread evenly across the entitled items. */
export interface ShopifyDiscountAmount {
  __typename?: "DiscountAmount"
  /** The value of the discount. */
  amount: ShopifyMoneyV2
  /** If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items. */
  appliesOnEachItem: Scalars["Boolean"]["output"]
}

/** The input fields for the value of the discount and how it is applied. */
export interface ShopifyDiscountAmountInput {
  /** The value of the discount. */
  amount?: InputMaybe<Scalars["Decimal"]["input"]>
  /** If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items. */
  appliesOnEachItem?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Discount applications capture the intentions of a discount source at
 * the time of application on an order's line items or shipping lines.
 *
 * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
 */
export interface ShopifyDiscountApplication {
  /** The method by which the discount's value is applied to its entitled items. */
  allocationMethod: ShopifyDiscountApplicationAllocationMethod
  /**
   * An ordered index that can be used to identify the discount application and indicate the precedence
   * of the discount application for calculations.
   */
  index: Scalars["Int"]["output"]
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: ShopifyDiscountApplicationTargetSelection
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: ShopifyDiscountApplicationTargetType
  /** The value of the discount application. */
  value: ShopifyPricingValue
}

/** The method by which the discount's value is allocated onto its entitled lines. */
export type ShopifyDiscountApplicationAllocationMethod =
  /** The value is spread across all entitled lines. */
  | "ACROSS"
  /** The value is applied onto every entitled line. */
  | "EACH"
  /** The value is specifically applied onto a particular line. */
  | "ONE"
  | "%future added value"

/** An auto-generated type for paginating through multiple DiscountApplications. */
export interface ShopifyDiscountApplicationConnection {
  __typename?: "DiscountApplicationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDiscountApplicationEdge>
  /** A list of nodes that are contained in DiscountApplicationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDiscountApplication>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one DiscountApplication and a cursor during pagination. */
export interface ShopifyDiscountApplicationEdge {
  __typename?: "DiscountApplicationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DiscountApplicationEdge. */
  node: ShopifyDiscountApplication
}

/** The level at which the discount's value is applied. */
export type ShopifyDiscountApplicationLevel =
  /**
   * The discount is applied at the line level.
   * Line level discounts are factored into the discountedUnitPriceSet on line items.
   */
  | "LINE"
  /**
   * The discount is applied at the order level.
   * Order level discounts are not factored into the discountedUnitPriceSet on line items.
   */
  | "ORDER"
  | "%future added value"

/**
 * The lines on the order to which the discount is applied, of the type defined by
 * the discount application's `targetType`. For example, the value `ENTITLED`, combined with a `targetType` of
 * `LINE_ITEM`, applies the discount on all line items that are entitled to the discount.
 * The value `ALL`, combined with a `targetType` of `SHIPPING_LINE`, applies the discount on all shipping lines.
 */
export type ShopifyDiscountApplicationTargetSelection =
  /** The discount is allocated onto all the lines. */
  | "ALL"
  /** The discount is allocated onto only the lines that it's entitled for. */
  | "ENTITLED"
  /** The discount is allocated onto explicitly chosen lines. */
  | "EXPLICIT"
  | "%future added value"

/** The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards. */
export type ShopifyDiscountApplicationTargetType =
  /** The discount applies onto line items. */
  | "LINE_ITEM"
  /** The discount applies onto shipping lines. */
  | "SHIPPING_LINE"
  | "%future added value"

/** The type of discount associated to the automatic discount. For example, the automatic discount might offer a basic discount using a fixed percentage, or a fixed amount, on specific products from the order. The automatic discount may also be a BXGY discount, which offers customer discounts on select products if they add a specific product to their order. */
export type ShopifyDiscountAutomatic =
  | ShopifyDiscountAutomaticApp
  | ShopifyDiscountAutomaticBasic
  | ShopifyDiscountAutomaticBxgy
  | ShopifyDiscountAutomaticFreeShipping

/** Return type for `discountAutomaticActivate` mutation. */
export interface ShopifyDiscountAutomaticActivatePayload {
  __typename?: "DiscountAutomaticActivatePayload"
  /** The activated automatic discount. */
  automaticDiscountNode?: Maybe<ShopifyDiscountAutomaticNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/**
 * The `DiscountAutomaticApp` object stores information about automatic discounts
 * that are managed by an app using
 * [Shopify Functions](https://shopify.dev/docs/apps/build/functions).
 * Use `DiscountAutomaticApp`when you need advanced, custom, or
 * dynamic discount capabilities that aren't supported by
 * [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).
 *
 * Learn more about creating
 * [custom discount functionality](https://shopify.dev/docs/apps/build/discounts/build-discount-function).
 *
 * > Note:
 * > The [`DiscountCodeApp`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeApp)
 * object has similar functionality to the `DiscountAutomaticApp` object, with the exception that `DiscountCodeApp`
 * stores information about discount codes that are managed by an app using Shopify Functions.
 * >
 * > API versions prior to `2025-10` only return automatic discounts with `context` set to `all`, discounts with other values are filtered out.
 */
export interface ShopifyDiscountAutomaticApp {
  __typename?: "DiscountAutomaticApp"
  /**
   * The details about the app extension that's providing the
   * [discount type](https://help.shopify.com/manual/discounts/discount-types).
   * This information includes the app extension's name and
   * [client ID](https://shopify.dev/docs/apps/build/authentication-authorization/client-secrets),
   * [App Bridge configuration](https://shopify.dev/docs/api/app-bridge),
   * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations),
   * [function ID](https://shopify.dev/docs/apps/build/functions/input-output/metafields-for-input-queries),
   * and other metadata about the discount type, including the discount type's name and description.
   */
  appDiscountType: ShopifyAppDiscountType
  /** Whether the discount applies on one-time purchases. */
  appliesOnOneTimePurchase: Scalars["Boolean"]["output"]
  /**
   * Whether the discount applies on subscription items.
   * [Subscriptions](https://shopify.dev/docs/apps/launch/billing/subscription-billing/offer-subscription-discounts)
   * enable customers to purchase products
   * on a recurring basis.
   */
  appliesOnSubscription: Scalars["Boolean"]["output"]
  /**
   * The number of times that the discount has been used.
   * For example, if a "Buy 3, Get 1 Free" t-shirt discount
   * is automatically applied in 200 transactions, then the
   * discount has been used 200 times.
   * This value is updated asynchronously. As a result,
   * it might be lower than the actual usage count until the
   * asynchronous process is completed.
   */
  asyncUsageCount: Scalars["Int"]["output"]
  /**
   * The
   * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with
   * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
   */
  combinesWith: ShopifyDiscountCombinesWith
  /** The date and time when the discount was created. */
  createdAt: Scalars["DateTime"]["output"]
  /**
   * The
   * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that's used to control how discounts can be combined.
   * @deprecated Use `discountClasses` instead.
   */
  discountClass: ShopifyDiscountClass
  /** The classes of the discount. */
  discountClasses: Array<ShopifyDiscountClass>
  /**
   * The [globally-unique ID](https://shopify.dev/docs/api/usage/gids)
   * for the discount.
   */
  discountId: Scalars["ID"]["output"]
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: Maybe<Scalars["DateTime"]["output"]>
  /**
   * The [error history](https://shopify.dev/docs/apps/build/functions/monitoring-and-errors)
   * for the latest version of the discount type that the app provides.
   */
  errorHistory?: Maybe<ShopifyFunctionsErrorHistory>
  /**
   * The number of billing cycles for which the discount can be applied,
   * which is useful for subscription-based discounts. For example, if you set this field
   * to `3`, then the discount only applies to the first three billing cycles of a
   * subscription. If you specify `0`, then the discount applies indefinitely.
   */
  recurringCycleLimit: Scalars["Int"]["output"]
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt: Scalars["DateTime"]["output"]
  /**
   * The status of the discount that describes its availability,
   * expiration, or pending activation.
   */
  status: ShopifyDiscountStatus
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title: Scalars["String"]["output"]
  /** The date and time when the discount was updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** Return type for `discountAutomaticAppCreate` mutation. */
export interface ShopifyDiscountAutomaticAppCreatePayload {
  __typename?: "DiscountAutomaticAppCreatePayload"
  /** The automatic discount that the app manages. */
  automaticAppDiscount?: Maybe<ShopifyDiscountAutomaticApp>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/**
 * The input fields for creating or updating an automatic discount
 * that's managed by an app.
 *
 * Use these input fields when you need advanced, custom, or
 * dynamic discount capabilities that aren't supported by
 * [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).
 */
export interface ShopifyDiscountAutomaticAppInput {
  /** Whether the discount applies on one-time purchases. */
  appliesOnOneTimePurchase?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * Whether the discount applies on subscription items.
   * [Subscriptions](https://shopify.dev/docs/apps/launch/billing/subscription-billing/offer-subscription-discounts)
   * enable customers to purchase products
   * on a recurring basis.
   */
  appliesOnSubscription?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * The
   * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with
   * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
   */
  combinesWith?: InputMaybe<ShopifyDiscountCombinesWithInput>
  /** Determines which discount effects the discount can apply. */
  discountClasses?: InputMaybe<Array<ShopifyDiscountClass>>
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /**
   * The
   * [function ID](https://shopify.dev/docs/apps/build/functions/input-output/metafields-for-input-queries)
   * associated with the app extension providing the
   * [discount type](https://help.shopify.com/manual/discounts/discount-types).
   */
  functionId?: InputMaybe<Scalars["String"]["input"]>
  /**
   * Additional metafields to associate to the discount.
   * [Metafields](https://shopify.dev/docs/apps/build/custom-data)
   * provide dynamic function configuration with
   * different parameters, such as `percentage` for a percentage discount. Merchants can set metafield values
   * in the Shopify admin, which makes the discount function more flexible and customizable.
   */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /**
   * The number of billing cycles for which the discount can be applied,
   * which is useful for subscription-based discounts. For example, if you set this field
   * to `3`, then the discount only applies to the first three billing cycles of a
   * subscription. If you specify `0`, then the discount applies indefinitely.
   */
  recurringCycleLimit?: InputMaybe<Scalars["Int"]["input"]>
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `discountAutomaticAppUpdate` mutation. */
export interface ShopifyDiscountAutomaticAppUpdatePayload {
  __typename?: "DiscountAutomaticAppUpdatePayload"
  /** The updated automatic discount that the app provides. */
  automaticAppDiscount?: Maybe<ShopifyDiscountAutomaticApp>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/**
 * The `DiscountAutomaticBasic` object lets you manage
 * [amount off discounts](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount)
 * that are automatically applied on a cart and at checkout. Amount off discounts give customers a
 * fixed value or a percentage off the products in an order, but don't apply to shipping costs.
 *
 * The `DiscountAutomaticBasic` object stores information about automatic amount off discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The [`DiscountCodeBasic`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeBasic)
 * object has similar functionality to the `DiscountAutomaticBasic` object, but customers need to enter a code to
 * receive a discount.
 * >
 * > API versions prior to `2025-10` only return automatic discounts with `context` set to `all`, discounts with other values are filtered out.
 */
export interface ShopifyDiscountAutomaticBasic {
  __typename?: "DiscountAutomaticBasic"
  /**
   * The number of times that the discount has been used.
   * For example, if a "Buy 3, Get 1 Free" t-shirt discount
   * is automatically applied in 200 transactions, then the
   * discount has been used 200 times.
   * This value is updated asynchronously. As a result,
   * it might be lower than the actual usage count until the
   * asynchronous process is completed.
   */
  asyncUsageCount: Scalars["Int"]["output"]
  /**
   * The
   * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with
   * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
   */
  combinesWith: ShopifyDiscountCombinesWith
  /** The date and time when the discount was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The items in the order that qualify for the discount, their quantities, and the total value of the discount. */
  customerGets: ShopifyDiscountCustomerGets
  /**
   * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that's used to control how discounts can be combined.
   * @deprecated Use `discountClasses` instead.
   */
  discountClass: ShopifyMerchandiseDiscountClass
  /** The classes of the discount. */
  discountClasses: Array<ShopifyDiscountClass>
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The minimum subtotal or quantity of items that are required for the discount to be applied. */
  minimumRequirement?: Maybe<ShopifyDiscountMinimumRequirement>
  /**
   * The number of billing cycles for which the discount can be applied,
   * which is useful for subscription-based discounts. For example, if you set this field
   * to `3`, then the discount only applies to the first three billing cycles of a
   * subscription. If you specify `0`, then the discount applies indefinitely.
   */
  recurringCycleLimit: Scalars["Int"]["output"]
  /**
   * An abbreviated version of the discount
   * [`summary`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticBasic#field-summary)
   * field.
   */
  shortSummary: Scalars["String"]["output"]
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt: Scalars["DateTime"]["output"]
  /**
   * The status of the discount that describes its availability,
   * expiration, or pending activation.
   */
  status: ShopifyDiscountStatus
  /**
   * A detailed explanation of what the discount is,
   * who can use it, when and where it applies, and any associated
   * rules or limitations.
   */
  summary: Scalars["String"]["output"]
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title: Scalars["String"]["output"]
  /** The date and time when the discount was updated. */
  updatedAt: Scalars["DateTime"]["output"]
  /**
   * The number of times that the discount has been used.
   * @deprecated Use `asyncUsageCount` instead.
   */
  usageCount: Scalars["Int"]["output"]
}

/** Return type for `discountAutomaticBasicCreate` mutation. */
export interface ShopifyDiscountAutomaticBasicCreatePayload {
  __typename?: "DiscountAutomaticBasicCreatePayload"
  /** The automatic discount that was created. */
  automaticDiscountNode?: Maybe<ShopifyDiscountAutomaticNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/**
 * The input fields for creating or updating an
 * [amount off discount](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount)
 * that's automatically applied on a cart and at checkout.
 */
export interface ShopifyDiscountAutomaticBasicInput {
  /**
   * The
   * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with
   * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
   */
  combinesWith?: InputMaybe<ShopifyDiscountCombinesWithInput>
  /** Information about the qualifying items and their discount. */
  customerGets?: InputMaybe<ShopifyDiscountCustomerGetsInput>
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The minimum subtotal or quantity of items that are required for the discount to be applied. */
  minimumRequirement?: InputMaybe<ShopifyDiscountMinimumRequirementInput>
  /**
   * The number of billing cycles for which the discount can be applied,
   * which is useful for subscription-based discounts. For example, if you set this field
   * to `3`, then the discount only applies to the first three billing cycles of a
   * subscription. If you specify `0`, then the discount applies indefinitely.
   */
  recurringCycleLimit?: InputMaybe<Scalars["Int"]["input"]>
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `discountAutomaticBasicUpdate` mutation. */
export interface ShopifyDiscountAutomaticBasicUpdatePayload {
  __typename?: "DiscountAutomaticBasicUpdatePayload"
  /** The automatic discount that was updated. */
  automaticDiscountNode?: Maybe<ShopifyDiscountAutomaticNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/** Return type for `discountAutomaticBulkDelete` mutation. */
export interface ShopifyDiscountAutomaticBulkDeletePayload {
  __typename?: "DiscountAutomaticBulkDeletePayload"
  /** The asynchronous job removing the automatic discounts. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/**
 * The `DiscountAutomaticBxgy` object lets you manage
 * [buy X get Y discounts (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
 * that are automatically applied on a cart and at checkout. BXGY discounts incentivize customers by offering
 * them additional items at a discounted price or for free when they purchase a specified quantity of items.
 *
 * The `DiscountAutomaticBxgy` object stores information about automatic BXGY discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The [`DiscountCodeBxgy`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeBxgy)
 * object has similar functionality to the `DiscountAutomaticBxgy` object, but customers need to enter a code to
 * receive a discount.
 * >
 * > API versions prior to `2025-10` only return automatic discounts with `context` set to `all`, discounts with other values are filtered out.
 */
export interface ShopifyDiscountAutomaticBxgy
  extends ShopifyHasEvents,
    ShopifyNode {
  __typename?: "DiscountAutomaticBxgy"
  /**
   * The number of times that the discount has been used.
   * For example, if a "Buy 3, Get 1 Free" t-shirt discount
   * is automatically applied in 200 transactions, then the
   * discount has been used 200 times.
   * This value is updated asynchronously. As a result,
   * it might be lower than the actual usage count until the
   * asynchronous process is completed.
   */
  asyncUsageCount: Scalars["Int"]["output"]
  /**
   * The
   * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with
   * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
   */
  combinesWith: ShopifyDiscountCombinesWith
  /** The date and time when the discount was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The items eligible for the discount and the required quantity of each to receive the discount. */
  customerBuys: ShopifyDiscountCustomerBuys
  /** The items in the order that qualify for the discount, their quantities, and the total value of the discount. */
  customerGets: ShopifyDiscountCustomerGets
  /**
   * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that's used to control how discounts can be combined.
   * @deprecated Use `discountClasses` instead.
   */
  discountClass: ShopifyMerchandiseDiscountClass
  /** The classes of the discount. */
  discountClasses: Array<ShopifyDiscountClass>
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The paginated list of events associated with the host subject. */
  events: ShopifyEventConnection
  /**
   * A legacy unique ID for the discount.
   * @deprecated Use DiscountAutomaticNode.id instead.
   */
  id: Scalars["ID"]["output"]
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt: Scalars["DateTime"]["output"]
  /**
   * The status of the discount that describes its availability,
   * expiration, or pending activation.
   */
  status: ShopifyDiscountStatus
  /**
   * A detailed explanation of what the discount is,
   * who can use it, when and where it applies, and any associated
   * rules or limitations.
   */
  summary: Scalars["String"]["output"]
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title: Scalars["String"]["output"]
  /** The date and time when the discount was updated. */
  updatedAt: Scalars["DateTime"]["output"]
  /**
   * The number of times that the discount has been used.
   * @deprecated Use `asyncUsageCount` instead.
   */
  usageCount: Scalars["Int"]["output"]
  /** The maximum number of times that the discount can be applied to an order. */
  usesPerOrderLimit?: Maybe<Scalars["Int"]["output"]>
}

/**
 * The `DiscountAutomaticBxgy` object lets you manage
 * [buy X get Y discounts (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
 * that are automatically applied on a cart and at checkout. BXGY discounts incentivize customers by offering
 * them additional items at a discounted price or for free when they purchase a specified quantity of items.
 *
 * The `DiscountAutomaticBxgy` object stores information about automatic BXGY discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The [`DiscountCodeBxgy`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeBxgy)
 * object has similar functionality to the `DiscountAutomaticBxgy` object, but customers need to enter a code to
 * receive a discount.
 * >
 * > API versions prior to `2025-10` only return automatic discounts with `context` set to `all`, discounts with other values are filtered out.
 */
export interface ShopifyDiscountAutomaticBxgyEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/** Return type for `discountAutomaticBxgyCreate` mutation. */
export interface ShopifyDiscountAutomaticBxgyCreatePayload {
  __typename?: "DiscountAutomaticBxgyCreatePayload"
  /** The automatic discount that was created. */
  automaticDiscountNode?: Maybe<ShopifyDiscountAutomaticNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/**
 * The input fields for creating or updating a
 * [buy X get Y discount (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
 * that's automatically applied on a cart and at checkout.
 */
export interface ShopifyDiscountAutomaticBxgyInput {
  /**
   * The
   * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with
   * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
   */
  combinesWith?: InputMaybe<ShopifyDiscountCombinesWithInput>
  /** The items eligible for the discount and the required quantity of each to receive the discount. */
  customerBuys?: InputMaybe<ShopifyDiscountCustomerBuysInput>
  /** The items in the order that qualify for the discount, their quantities, and the total value of the discount. */
  customerGets?: InputMaybe<ShopifyDiscountCustomerGetsInput>
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title?: InputMaybe<Scalars["String"]["input"]>
  /** The maximum number of times that the discount can be applied to an order. */
  usesPerOrderLimit?: InputMaybe<Scalars["UnsignedInt64"]["input"]>
}

/** Return type for `discountAutomaticBxgyUpdate` mutation. */
export interface ShopifyDiscountAutomaticBxgyUpdatePayload {
  __typename?: "DiscountAutomaticBxgyUpdatePayload"
  /** The automatic discount that was updated. */
  automaticDiscountNode?: Maybe<ShopifyDiscountAutomaticNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/** An auto-generated type for paginating through multiple DiscountAutomatics. */
export interface ShopifyDiscountAutomaticConnection {
  __typename?: "DiscountAutomaticConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDiscountAutomaticEdge>
  /** A list of nodes that are contained in DiscountAutomaticEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDiscountAutomatic>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `discountAutomaticDeactivate` mutation. */
export interface ShopifyDiscountAutomaticDeactivatePayload {
  __typename?: "DiscountAutomaticDeactivatePayload"
  /** The deactivated automatic discount. */
  automaticDiscountNode?: Maybe<ShopifyDiscountAutomaticNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/** Return type for `discountAutomaticDelete` mutation. */
export interface ShopifyDiscountAutomaticDeletePayload {
  __typename?: "DiscountAutomaticDeletePayload"
  /** The ID of the automatic discount that was deleted. */
  deletedAutomaticDiscountId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/** An auto-generated type which holds one DiscountAutomatic and a cursor during pagination. */
export interface ShopifyDiscountAutomaticEdge {
  __typename?: "DiscountAutomaticEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DiscountAutomaticEdge. */
  node: ShopifyDiscountAutomatic
}

/**
 * The `DiscountAutomaticFreeShipping` object lets you manage
 * [free shipping discounts](https://help.shopify.com/manual/discounts/discount-types/free-shipping)
 * that are automatically applied on a cart and at checkout. Free shipping discounts are promotional deals that
 * merchants offer to customers to waive shipping costs and encourage online purchases.
 *
 * The `DiscountAutomaticFreeShipping` object stores information about automatic free shipping discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The [`DiscountCodeFreeShipping`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeFreeShipping)
 * object has similar functionality to the `DiscountAutomaticFreeShipping` object, but customers need to enter a code to
 * receive a discount.
 * >
 * > API versions prior to `2025-10` only return automatic discounts with `context` set to `all`, discounts with other values are filtered out.
 */
export interface ShopifyDiscountAutomaticFreeShipping {
  __typename?: "DiscountAutomaticFreeShipping"
  /**
   * Whether the discount applies on one-time purchases.
   * A one-time purchase is a transaction where you pay a
   * single time for a product, without any ongoing
   * commitments or recurring charges.
   */
  appliesOnOneTimePurchase: Scalars["Boolean"]["output"]
  /**
   * Whether the discount applies on subscription items.
   * [Subscriptions](https://shopify.dev/docs/apps/launch/billing/subscription-billing/offer-subscription-discounts)
   * enable customers to purchase products
   * on a recurring basis.
   */
  appliesOnSubscription: Scalars["Boolean"]["output"]
  /**
   * The number of times that the discount has been used.
   * For example, if a "Buy 3, Get 1 Free" t-shirt discount
   * is automatically applied in 200 transactions, then the
   * discount has been used 200 times.
   * This value is updated asynchronously. As a result,
   * it might be lower than the actual usage count until the
   * asynchronous process is completed.
   */
  asyncUsageCount: Scalars["Int"]["output"]
  /**
   * The
   * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with
   * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
   */
  combinesWith: ShopifyDiscountCombinesWith
  /** The date and time when the discount was created. */
  createdAt: Scalars["DateTime"]["output"]
  /**
   * The countries that qualify for the discount.
   * You can define
   * [a list of countries](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCountries)
   * or specify [all countries](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCountryAll)
   * to be eligible for the discount.
   */
  destinationSelection: ShopifyDiscountShippingDestinationSelection
  /**
   * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that's used to control how discounts can be combined.
   * @deprecated Use `discountClasses` instead.
   */
  discountClass: ShopifyShippingDiscountClass
  /** The classes of the discount. */
  discountClasses: Array<ShopifyDiscountClass>
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: Maybe<Scalars["DateTime"]["output"]>
  /**
   * Whether there are
   * [timeline comments](https://help.shopify.com/manual/discounts/managing-discount-codes#use-the-discount-timeline)
   * associated with the discount.
   */
  hasTimelineComment: Scalars["Boolean"]["output"]
  /** The maximum shipping price amount accepted to qualify for the discount. */
  maximumShippingPrice?: Maybe<ShopifyMoneyV2>
  /** The minimum subtotal or quantity of items that are required for the discount to be applied. */
  minimumRequirement?: Maybe<ShopifyDiscountMinimumRequirement>
  /**
   * The number of billing cycles for which the discount can be applied,
   * which is useful for subscription-based discounts. For example, if you set this field
   * to `3`, then the discount only applies to the first three billing cycles of a
   * subscription. If you specify `0`, then the discount applies indefinitely.
   */
  recurringCycleLimit: Scalars["Int"]["output"]
  /**
   * An abbreviated version of the discount
   * [`summary`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticFreeShipping#field-summary)
   * field.
   */
  shortSummary: Scalars["String"]["output"]
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt: Scalars["DateTime"]["output"]
  /**
   * The status of the discount that describes its availability,
   * expiration, or pending activation.
   */
  status: ShopifyDiscountStatus
  /**
   * A detailed explanation of what the discount is,
   * who can use it, when and where it applies, and any associated
   * rules or limitations.
   */
  summary: Scalars["String"]["output"]
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title: Scalars["String"]["output"]
  /** The total sales from orders where the discount was used. */
  totalSales?: Maybe<ShopifyMoneyV2>
  /** The date and time when the discount was updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** Return type for `discountAutomaticFreeShippingCreate` mutation. */
export interface ShopifyDiscountAutomaticFreeShippingCreatePayload {
  __typename?: "DiscountAutomaticFreeShippingCreatePayload"
  /** The automatic free shipping discount that was created. */
  automaticDiscountNode?: Maybe<ShopifyDiscountAutomaticNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/**
 * The input fields for creating or updating a
 * [free shipping discount](https://help.shopify.com/manual/discounts/discount-types/free-shipping)
 * that's automatically applied on a cart and at checkout.
 */
export interface ShopifyDiscountAutomaticFreeShippingInput {
  /** Whether the discount applies on regular one-time-purchase items. */
  appliesOnOneTimePurchase?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * Whether the discount applies on subscription items.
   * [Subscriptions](https://shopify.dev/docs/apps/launch/billing/subscription-billing/offer-subscription-discounts)
   * enable customers to purchase products
   * on a recurring basis.
   */
  appliesOnSubscription?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * The
   * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with the shipping discount.
   */
  combinesWith?: InputMaybe<ShopifyDiscountCombinesWithInput>
  /** A list of destinations where the discount will apply. */
  destination?: InputMaybe<ShopifyDiscountShippingDestinationSelectionInput>
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The maximum shipping price that qualifies for the discount. */
  maximumShippingPrice?: InputMaybe<Scalars["Decimal"]["input"]>
  /** The minimum subtotal or quantity of items that are required for the discount to be applied. */
  minimumRequirement?: InputMaybe<ShopifyDiscountMinimumRequirementInput>
  /**
   * The number of billing cycles for which the discount can be applied,
   * which is useful for subscription-based discounts. For example, if you set this field
   * to `3`, then the discount only applies to the first three billing cycles of a
   * subscription. If you specify `0`, then the discount applies indefinitely.
   */
  recurringCycleLimit?: InputMaybe<Scalars["Int"]["input"]>
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `discountAutomaticFreeShippingUpdate` mutation. */
export interface ShopifyDiscountAutomaticFreeShippingUpdatePayload {
  __typename?: "DiscountAutomaticFreeShippingUpdatePayload"
  /** The automatic discount that was updated. */
  automaticDiscountNode?: Maybe<ShopifyDiscountAutomaticNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/**
 * The `DiscountAutomaticNode` object enables you to manage [automatic discounts](https://help.shopify.com/manual/discounts/discount-types#automatic-discounts) that are applied when an order meets specific criteria. You can create amount off, free shipping, or buy X get Y automatic discounts. For example, you can offer customers a free shipping discount that applies when conditions are met. Or you can offer customers a buy X get Y discount that's automatically applied when customers spend a specified amount of money, or a specified quantity of products.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related queries, mutations, limitations, and considerations.
 */
export interface ShopifyDiscountAutomaticNode
  extends ShopifyHasEvents,
    ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyNode {
  __typename?: "DiscountAutomaticNode"
  /** A discount that's applied automatically when an order meets specific criteria. Learn more about [automatic discounts](https://help.shopify.com/manual/discounts/discount-types#automatic-discounts). */
  automaticDiscount: ShopifyDiscountAutomatic
  /** The paginated list of events associated with the host subject. */
  events: ShopifyEventConnection
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
}

/**
 * The `DiscountAutomaticNode` object enables you to manage [automatic discounts](https://help.shopify.com/manual/discounts/discount-types#automatic-discounts) that are applied when an order meets specific criteria. You can create amount off, free shipping, or buy X get Y automatic discounts. For example, you can offer customers a free shipping discount that applies when conditions are met. Or you can offer customers a buy X get Y discount that's automatically applied when customers spend a specified amount of money, or a specified quantity of products.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related queries, mutations, limitations, and considerations.
 */
export interface ShopifyDiscountAutomaticNodeEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/**
 * The `DiscountAutomaticNode` object enables you to manage [automatic discounts](https://help.shopify.com/manual/discounts/discount-types#automatic-discounts) that are applied when an order meets specific criteria. You can create amount off, free shipping, or buy X get Y automatic discounts. For example, you can offer customers a free shipping discount that applies when conditions are met. Or you can offer customers a buy X get Y discount that's automatically applied when customers spend a specified amount of money, or a specified quantity of products.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related queries, mutations, limitations, and considerations.
 */
export interface ShopifyDiscountAutomaticNodeMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * The `DiscountAutomaticNode` object enables you to manage [automatic discounts](https://help.shopify.com/manual/discounts/discount-types#automatic-discounts) that are applied when an order meets specific criteria. You can create amount off, free shipping, or buy X get Y automatic discounts. For example, you can offer customers a free shipping discount that applies when conditions are met. Or you can offer customers a buy X get Y discount that's automatically applied when customers spend a specified amount of money, or a specified quantity of products.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related queries, mutations, limitations, and considerations.
 */
export interface ShopifyDiscountAutomaticNodeMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/**
 * The `DiscountAutomaticNode` object enables you to manage [automatic discounts](https://help.shopify.com/manual/discounts/discount-types#automatic-discounts) that are applied when an order meets specific criteria. You can create amount off, free shipping, or buy X get Y automatic discounts. For example, you can offer customers a free shipping discount that applies when conditions are met. Or you can offer customers a buy X get Y discount that's automatically applied when customers spend a specified amount of money, or a specified quantity of products.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related queries, mutations, limitations, and considerations.
 */
export interface ShopifyDiscountAutomaticNodeMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple DiscountAutomaticNodes. */
export interface ShopifyDiscountAutomaticNodeConnection {
  __typename?: "DiscountAutomaticNodeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDiscountAutomaticNodeEdge>
  /** A list of nodes that are contained in DiscountAutomaticNodeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDiscountAutomaticNode>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one DiscountAutomaticNode and a cursor during pagination. */
export interface ShopifyDiscountAutomaticNodeEdge {
  __typename?: "DiscountAutomaticNodeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DiscountAutomaticNodeEdge. */
  node: ShopifyDiscountAutomaticNode
}

/**
 * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that's used to control how discounts can be combined.
 */
export type ShopifyDiscountClass =
  /**
   * The discount is combined with an
   * [order discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * class.
   */
  | "ORDER"
  /**
   * The discount is combined with a
   * [product discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * class.
   */
  | "PRODUCT"
  /**
   * The discount is combined with a
   * [shipping discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * class.
   */
  | "SHIPPING"
  | "%future added value"

/** The type of discount associated with the discount code. For example, the discount code might offer a basic discount of a fixed percentage, or a fixed amount, on specific products or the order. Alternatively, the discount might offer the customer free shipping on their order. A third option is a Buy X, Get Y (BXGY) discount, which offers a customer discounts on select products if they add a specific product to their order. */
export type ShopifyDiscountCode =
  | ShopifyDiscountCodeApp
  | ShopifyDiscountCodeBasic
  | ShopifyDiscountCodeBxgy
  | ShopifyDiscountCodeFreeShipping

/** Return type for `discountCodeActivate` mutation. */
export interface ShopifyDiscountCodeActivatePayload {
  __typename?: "DiscountCodeActivatePayload"
  /** The activated code discount. */
  codeDiscountNode?: Maybe<ShopifyDiscountCodeNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/**
 * The `DiscountCodeApp` object stores information about code discounts
 * that are managed by an app using
 * [Shopify Functions](https://shopify.dev/docs/apps/build/functions).
 * Use `DiscountCodeApp` when you need advanced, custom, or
 * dynamic discount capabilities that aren't supported by
 * [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).
 *
 * Learn more about creating
 * [custom discount functionality](https://shopify.dev/docs/apps/build/discounts/build-discount-function).
 *
 * > Note:
 * > The [`DiscountAutomaticApp`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticApp)
 * object has similar functionality to the `DiscountCodeApp` object, with the exception that `DiscountAutomaticApp`
 * stores information about automatic discounts that are managed by an app using Shopify Functions.
 */
export interface ShopifyDiscountCodeApp {
  __typename?: "DiscountCodeApp"
  /**
   * The details about the app extension that's providing the
   * [discount type](https://help.shopify.com/manual/discounts/discount-types).
   * This information includes the app extension's name and
   * [client ID](https://shopify.dev/docs/apps/build/authentication-authorization/client-secrets),
   * [App Bridge configuration](https://shopify.dev/docs/api/app-bridge),
   * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations),
   * [function ID](https://shopify.dev/docs/apps/build/functions/input-output/metafields-for-input-queries),
   * and other metadata about the discount type, including the discount type's name and description.
   */
  appDiscountType: ShopifyAppDiscountType
  /** Whether the discount applies on regular one-time-purchase items. */
  appliesOnOneTimePurchase: Scalars["Boolean"]["output"]
  /** Whether the discount applies to subscriptions items. */
  appliesOnSubscription: Scalars["Boolean"]["output"]
  /** Whether a customer can only use the discount once. */
  appliesOncePerCustomer: Scalars["Boolean"]["output"]
  /**
   * The number of times that the discount has been used.
   * For example, if a "Buy 3, Get 1 Free" t-shirt discount
   * is automatically applied in 200 transactions, then the
   * discount has been used 200 times.
   * This value is updated asynchronously. As a result,
   * it might be lower than the actual usage count until the
   * asynchronous process is completed.
   */
  asyncUsageCount: Scalars["Int"]["output"]
  /** A list codes that customers can use to redeem the discount. */
  codes: ShopifyDiscountRedeemCodeConnection
  /** The number of codes that a customer can use to redeem the discount. */
  codesCount?: Maybe<ShopifyCount>
  /**
   * The
   * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with
   * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
   */
  combinesWith: ShopifyDiscountCombinesWith
  /** The date and time when the discount was created. */
  createdAt: Scalars["DateTime"]["output"]
  /**
   * The customers that can use the discount.
   * @deprecated Use `context` instead.
   */
  customerSelection: ShopifyDiscountCustomerSelection
  /**
   * The
   * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that's used to control how discounts can be combined.
   * @deprecated Use `discountClasses` instead.
   */
  discountClass: ShopifyDiscountClass
  /** The classes of the discount. */
  discountClasses: Array<ShopifyDiscountClass>
  /**
   * The [globally-unique ID](https://shopify.dev/docs/api/usage/gids)
   * for the discount.
   */
  discountId: Scalars["ID"]["output"]
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: Maybe<Scalars["DateTime"]["output"]>
  /**
   * The [error history](https://shopify.dev/docs/apps/build/functions/monitoring-and-errors)
   * for the latest version of the discount type that the app provides.
   */
  errorHistory?: Maybe<ShopifyFunctionsErrorHistory>
  /**
   * Whether there are
   * [timeline comments](https://help.shopify.com/manual/discounts/managing-discount-codes#use-the-discount-timeline)
   * associated with the discount.
   */
  hasTimelineComment: Scalars["Boolean"]["output"]
  /**
   * The number of billing cycles for which the discount can be applied,
   * which is useful for subscription-based discounts. For example, if you set this field
   * to `3`, then the discount only applies to the first three billing cycles of a
   * subscription. If you specify `0`, then the discount applies indefinitely.
   */
  recurringCycleLimit?: Maybe<Scalars["Int"]["output"]>
  /** A list of URLs that the app can use to share the discount. */
  shareableUrls: Array<ShopifyDiscountShareableUrl>
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt: Scalars["DateTime"]["output"]
  /**
   * The status of the discount that describes its availability,
   * expiration, or pending activation.
   */
  status: ShopifyDiscountStatus
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title: Scalars["String"]["output"]
  /** The total sales from orders where the discount was used. */
  totalSales?: Maybe<ShopifyMoneyV2>
  /** The date and time when the discount was updated. */
  updatedAt: Scalars["DateTime"]["output"]
  /**
   * The maximum number of times that a customer can use the discount.
   * For discounts with unlimited usage, specify `null`.
   */
  usageLimit?: Maybe<Scalars["Int"]["output"]>
}

/**
 * The `DiscountCodeApp` object stores information about code discounts
 * that are managed by an app using
 * [Shopify Functions](https://shopify.dev/docs/apps/build/functions).
 * Use `DiscountCodeApp` when you need advanced, custom, or
 * dynamic discount capabilities that aren't supported by
 * [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).
 *
 * Learn more about creating
 * [custom discount functionality](https://shopify.dev/docs/apps/build/discounts/build-discount-function).
 *
 * > Note:
 * > The [`DiscountAutomaticApp`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticApp)
 * object has similar functionality to the `DiscountCodeApp` object, with the exception that `DiscountAutomaticApp`
 * stores information about automatic discounts that are managed by an app using Shopify Functions.
 */
export interface ShopifyDiscountCodeAppCodesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyDiscountCodeSortKeys>
}

/** Return type for `discountCodeAppCreate` mutation. */
export interface ShopifyDiscountCodeAppCreatePayload {
  __typename?: "DiscountCodeAppCreatePayload"
  /** The discount that the app provides. */
  codeAppDiscount?: Maybe<ShopifyDiscountCodeApp>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/**
 * The input fields for creating or updating a code discount, where the discount type is provided by an app extension that uses [Shopify Functions](https://shopify.dev/docs/apps/build/functions).
 *
 *
 * Use these input fields when you need advanced or custom discount capabilities that aren't supported by [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).
 */
export interface ShopifyDiscountCodeAppInput {
  /** Whether the discount applies on regular one-time-purchase items. */
  appliesOnOneTimePurchase?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether the discount applies to subscriptions items. */
  appliesOnSubscription?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether a customer can only use the discount once. */
  appliesOncePerCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The code that customers use to apply the discount. */
  code?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The
   * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with
   * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
   */
  combinesWith?: InputMaybe<ShopifyDiscountCombinesWithInput>
  /** Determines which discount effects the discount can apply. */
  discountClasses?: InputMaybe<Array<ShopifyDiscountClass>>
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The [function ID](https://shopify.dev/docs/apps/build/functions/input-output/metafields-for-input-queries) associated with the app extension that's providing the [discount type](https://help.shopify.com/manual/discounts/discount-types). */
  functionId?: InputMaybe<Scalars["String"]["input"]>
  /** Additional metafields to associate to the discount. [Metafields](https://shopify.dev/docs/apps/build/custom-data) provide dynamic function configuration with different parameters, such as `percentage` for a percentage discount. Merchants can set metafield values in the Shopify admin, which makes the discount function more flexible and customizable. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The number of times a discount applies on recurring purchases (subscriptions).         0 will apply infinitely whereas 1 will only apply to the first checkout. */
  recurringCycleLimit?: InputMaybe<Scalars["Int"]["input"]>
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The maximum number of times that a customer can use the discount.
   * For discounts with unlimited usage, specify `null`.
   */
  usageLimit?: InputMaybe<Scalars["Int"]["input"]>
}

/** Return type for `discountCodeAppUpdate` mutation. */
export interface ShopifyDiscountCodeAppUpdatePayload {
  __typename?: "DiscountCodeAppUpdatePayload"
  /** The updated discount that the app provides. */
  codeAppDiscount?: Maybe<ShopifyDiscountCodeApp>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/**
 * Discount code applications capture the intentions of a discount code at
 * the time that it is applied onto an order.
 *
 * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
 */
export interface ShopifyDiscountCodeApplication
  extends ShopifyDiscountApplication {
  __typename?: "DiscountCodeApplication"
  /** The method by which the discount's value is applied to its entitled items. */
  allocationMethod: ShopifyDiscountApplicationAllocationMethod
  /** The string identifying the discount code that was used at the time of application. */
  code: Scalars["String"]["output"]
  /**
   * An ordered index that can be used to identify the discount application and indicate the precedence
   * of the discount application for calculations.
   */
  index: Scalars["Int"]["output"]
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: ShopifyDiscountApplicationTargetSelection
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: ShopifyDiscountApplicationTargetType
  /** The value of the discount application. */
  value: ShopifyPricingValue
}

/**
 * The `DiscountCodeBasic` object lets you manage
 * [amount off discounts](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount)
 * that are applied on a cart and at checkout when a customer enters a code. Amount off discounts give customers a
 * fixed value or a percentage off the products in an order, but don't apply to shipping costs.
 *
 * The `DiscountCodeBasic` object stores information about amount off code discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The [`DiscountAutomaticBasic`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticBasic)
 * object has similar functionality to the `DiscountCodeBasic` object, but discounts are automatically applied,
 * without the need for customers to enter a code.
 */
export interface ShopifyDiscountCodeBasic {
  __typename?: "DiscountCodeBasic"
  /** Whether a customer can only use the discount once. */
  appliesOncePerCustomer: Scalars["Boolean"]["output"]
  /**
   * The number of times that the discount has been used.
   * For example, if a "Buy 3, Get 1 Free" t-shirt discount
   * is automatically applied in 200 transactions, then the
   * discount has been used 200 times.
   * This value is updated asynchronously. As a result,
   * it might be lower than the actual usage count until the
   * asynchronous process is completed.
   */
  asyncUsageCount: Scalars["Int"]["output"]
  /** A list codes that customers can use to redeem the discount. */
  codes: ShopifyDiscountRedeemCodeConnection
  /** The number of codes that a customer can use to redeem the discount. */
  codesCount?: Maybe<ShopifyCount>
  /**
   * The
   * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with
   * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
   */
  combinesWith: ShopifyDiscountCombinesWith
  /** The date and time when the discount was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The items in the order that qualify for the discount, their quantities, and the total value of the discount. */
  customerGets: ShopifyDiscountCustomerGets
  /**
   * The customers that can use the discount.
   * @deprecated Use `context` instead.
   */
  customerSelection: ShopifyDiscountCustomerSelection
  /**
   * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that's used to control how discounts can be combined.
   * @deprecated Use `discountClasses` instead.
   */
  discountClass: ShopifyMerchandiseDiscountClass
  /** The classes of the discount. */
  discountClasses: Array<ShopifyDiscountClass>
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: Maybe<Scalars["DateTime"]["output"]>
  /**
   * Whether there are
   * [timeline comments](https://help.shopify.com/manual/discounts/managing-discount-codes#use-the-discount-timeline)
   * associated with the discount.
   */
  hasTimelineComment: Scalars["Boolean"]["output"]
  /** The minimum subtotal or quantity of items that are required for the discount to be applied. */
  minimumRequirement?: Maybe<ShopifyDiscountMinimumRequirement>
  /**
   * The number of billing cycles for which the discount can be applied,
   * which is useful for subscription-based discounts. For example, if you set this field
   * to `3`, then the discount only applies to the first three billing cycles of a
   * subscription. If you specify `0`, then the discount applies indefinitely.
   */
  recurringCycleLimit?: Maybe<Scalars["Int"]["output"]>
  /** A list of URLs that the app can use to share the discount. */
  shareableUrls: Array<ShopifyDiscountShareableUrl>
  /**
   * An abbreviated version of the discount
   * [`summary`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeBasic#field-summary)
   * field.
   */
  shortSummary: Scalars["String"]["output"]
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt: Scalars["DateTime"]["output"]
  /**
   * The status of the discount that describes its availability,
   * expiration, or pending activation.
   */
  status: ShopifyDiscountStatus
  /**
   * A detailed explanation of what the discount is,
   * who can use it, when and where it applies, and any associated
   * rules or limitations.
   */
  summary: Scalars["String"]["output"]
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title: Scalars["String"]["output"]
  /** The total sales from orders where the discount was used. */
  totalSales?: Maybe<ShopifyMoneyV2>
  /** The date and time when the discount was updated. */
  updatedAt: Scalars["DateTime"]["output"]
  /**
   * The maximum number of times that a customer can use the discount.
   * For discounts with unlimited usage, specify `null`.
   */
  usageLimit?: Maybe<Scalars["Int"]["output"]>
}

/**
 * The `DiscountCodeBasic` object lets you manage
 * [amount off discounts](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount)
 * that are applied on a cart and at checkout when a customer enters a code. Amount off discounts give customers a
 * fixed value or a percentage off the products in an order, but don't apply to shipping costs.
 *
 * The `DiscountCodeBasic` object stores information about amount off code discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The [`DiscountAutomaticBasic`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticBasic)
 * object has similar functionality to the `DiscountCodeBasic` object, but discounts are automatically applied,
 * without the need for customers to enter a code.
 */
export interface ShopifyDiscountCodeBasicCodesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyDiscountCodeSortKeys>
}

/** Return type for `discountCodeBasicCreate` mutation. */
export interface ShopifyDiscountCodeBasicCreatePayload {
  __typename?: "DiscountCodeBasicCreatePayload"
  /** The discount code that was created. */
  codeDiscountNode?: Maybe<ShopifyDiscountCodeNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/** The input fields for creating or updating an [amount off discount](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount) that's applied on a cart and at checkout when a customer enters a code. Amount off discounts can be a percentage off or a fixed amount off. */
export interface ShopifyDiscountCodeBasicInput {
  /** Whether a customer can only use the discount once. */
  appliesOncePerCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The code that customers use to apply the discount. */
  code?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The
   * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with
   * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
   */
  combinesWith?: InputMaybe<ShopifyDiscountCombinesWithInput>
  /** The items in the order that qualify for the discount, their quantities, and the total value of the discount. */
  customerGets?: InputMaybe<ShopifyDiscountCustomerGetsInput>
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The minimum subtotal or quantity of items that are required for the discount to be applied. */
  minimumRequirement?: InputMaybe<ShopifyDiscountMinimumRequirementInput>
  /** The number of billing cycles for which the discount can be applied, which is useful for subscription-based discounts. For example, if you set this field to `3`, then the discount only applies to the first three billing cycles of a subscription. If you specify `0`, then the discount applies indefinitely. */
  recurringCycleLimit?: InputMaybe<Scalars["Int"]["input"]>
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The maximum number of times that a customer can use the discount.
   * For discounts with unlimited usage, specify `null`.
   */
  usageLimit?: InputMaybe<Scalars["Int"]["input"]>
}

/** Return type for `discountCodeBasicUpdate` mutation. */
export interface ShopifyDiscountCodeBasicUpdatePayload {
  __typename?: "DiscountCodeBasicUpdatePayload"
  /** The discount code that was updated. */
  codeDiscountNode?: Maybe<ShopifyDiscountCodeNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/** Return type for `discountCodeBulkActivate` mutation. */
export interface ShopifyDiscountCodeBulkActivatePayload {
  __typename?: "DiscountCodeBulkActivatePayload"
  /** The asynchronous job that activates the discounts. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/** Return type for `discountCodeBulkDeactivate` mutation. */
export interface ShopifyDiscountCodeBulkDeactivatePayload {
  __typename?: "DiscountCodeBulkDeactivatePayload"
  /** The asynchronous job that deactivates the discounts. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/** Return type for `discountCodeBulkDelete` mutation. */
export interface ShopifyDiscountCodeBulkDeletePayload {
  __typename?: "DiscountCodeBulkDeletePayload"
  /** The asynchronous job that deletes the discounts. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/**
 * The `DiscountCodeBxgy` object lets you manage
 * [buy X get Y discounts (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
 * that are applied on a cart and at checkout when a customer enters a code. BXGY discounts incentivize customers
 * by offering them additional items at a discounted price or for free when they purchase a specified quantity
 * of items.
 *
 * The `DiscountCodeBxgy` object stores information about BXGY code discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The [`DiscountAutomaticBxgy`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticBxgy)
 * object has similar functionality to the `DiscountCodeBxgy` object, but discounts are automatically applied,
 * without the need for customers to enter a code.
 */
export interface ShopifyDiscountCodeBxgy {
  __typename?: "DiscountCodeBxgy"
  /** Whether a customer can only use the discount once. */
  appliesOncePerCustomer: Scalars["Boolean"]["output"]
  /**
   * The number of times that the discount has been used.
   * For example, if a "Buy 3, Get 1 Free" t-shirt discount
   * is automatically applied in 200 transactions, then the
   * discount has been used 200 times.
   * This value is updated asynchronously. As a result,
   * it might be lower than the actual usage count until the
   * asynchronous process is completed.
   */
  asyncUsageCount: Scalars["Int"]["output"]
  /** A list codes that customers can use to redeem the discount. */
  codes: ShopifyDiscountRedeemCodeConnection
  /** The number of codes that a customer can use to redeem the discount. */
  codesCount?: Maybe<ShopifyCount>
  /**
   * The
   * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with
   * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
   */
  combinesWith: ShopifyDiscountCombinesWith
  /** The date and time when the discount was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The items eligible for the discount and the required quantity of each to receive the discount. */
  customerBuys: ShopifyDiscountCustomerBuys
  /** The items in the order that qualify for the discount, their quantities, and the total value of the discount. */
  customerGets: ShopifyDiscountCustomerGets
  /**
   * The customers that can use the discount.
   * @deprecated Use `context` instead.
   */
  customerSelection: ShopifyDiscountCustomerSelection
  /**
   * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that's used to control how discounts can be combined.
   * @deprecated Use `discountClasses` instead.
   */
  discountClass: ShopifyMerchandiseDiscountClass
  /** The classes of the discount. */
  discountClasses: Array<ShopifyDiscountClass>
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: Maybe<Scalars["DateTime"]["output"]>
  /**
   * Whether there are
   * [timeline comments](https://help.shopify.com/manual/discounts/managing-discount-codes#use-the-discount-timeline)
   * associated with the discount.
   */
  hasTimelineComment: Scalars["Boolean"]["output"]
  /** A list of URLs that the app can use to share the discount. */
  shareableUrls: Array<ShopifyDiscountShareableUrl>
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt: Scalars["DateTime"]["output"]
  /**
   * The status of the discount that describes its availability,
   * expiration, or pending activation.
   */
  status: ShopifyDiscountStatus
  /**
   * A detailed explanation of what the discount is,
   * who can use it, when and where it applies, and any associated
   * rules or limitations.
   */
  summary: Scalars["String"]["output"]
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title: Scalars["String"]["output"]
  /** The total sales from orders where the discount was used. */
  totalSales?: Maybe<ShopifyMoneyV2>
  /** The date and time when the discount was updated. */
  updatedAt: Scalars["DateTime"]["output"]
  /**
   * The maximum number of times that a customer can use the discount.
   * For discounts with unlimited usage, specify `null`.
   */
  usageLimit?: Maybe<Scalars["Int"]["output"]>
  /** The maximum number of times that the discount can be applied to an order. */
  usesPerOrderLimit?: Maybe<Scalars["Int"]["output"]>
}

/**
 * The `DiscountCodeBxgy` object lets you manage
 * [buy X get Y discounts (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
 * that are applied on a cart and at checkout when a customer enters a code. BXGY discounts incentivize customers
 * by offering them additional items at a discounted price or for free when they purchase a specified quantity
 * of items.
 *
 * The `DiscountCodeBxgy` object stores information about BXGY code discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The [`DiscountAutomaticBxgy`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticBxgy)
 * object has similar functionality to the `DiscountCodeBxgy` object, but discounts are automatically applied,
 * without the need for customers to enter a code.
 */
export interface ShopifyDiscountCodeBxgyCodesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyDiscountCodeSortKeys>
}

/** Return type for `discountCodeBxgyCreate` mutation. */
export interface ShopifyDiscountCodeBxgyCreatePayload {
  __typename?: "DiscountCodeBxgyCreatePayload"
  /** The code discount that was created. */
  codeDiscountNode?: Maybe<ShopifyDiscountCodeNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/**
 * The input fields for creating or updating a
 * [buy X get Y discount (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
 * that's applied on a cart and at checkout when a customer enters a code.
 */
export interface ShopifyDiscountCodeBxgyInput {
  /** Whether a customer can only use the discount once. */
  appliesOncePerCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The code that customers use to apply the discount. */
  code?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The
   * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with
   * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
   */
  combinesWith?: InputMaybe<ShopifyDiscountCombinesWithInput>
  /** The items eligible for the discount and the required quantity of each to receive the discount. */
  customerBuys?: InputMaybe<ShopifyDiscountCustomerBuysInput>
  /** The items in the order that qualify for the discount, their quantities, and the total value of the discount. */
  customerGets?: InputMaybe<ShopifyDiscountCustomerGetsInput>
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The maximum number of times that a customer can use the discount.
   * For discounts with unlimited usage, specify `null`.
   */
  usageLimit?: InputMaybe<Scalars["Int"]["input"]>
  /** The maximum number of times that the discount can be applied to an order. */
  usesPerOrderLimit?: InputMaybe<Scalars["Int"]["input"]>
}

/** Return type for `discountCodeBxgyUpdate` mutation. */
export interface ShopifyDiscountCodeBxgyUpdatePayload {
  __typename?: "DiscountCodeBxgyUpdatePayload"
  /** The code discount that was updated. */
  codeDiscountNode?: Maybe<ShopifyDiscountCodeNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/** Return type for `discountCodeDeactivate` mutation. */
export interface ShopifyDiscountCodeDeactivatePayload {
  __typename?: "DiscountCodeDeactivatePayload"
  /** The deactivated code discount. */
  codeDiscountNode?: Maybe<ShopifyDiscountCodeNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/** Return type for `discountCodeDelete` mutation. */
export interface ShopifyDiscountCodeDeletePayload {
  __typename?: "DiscountCodeDeletePayload"
  /** The ID of the code discount that was deleted. */
  deletedCodeDiscountId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/**
 * The `DiscountCodeFreeShipping` object lets you manage
 * [free shipping discounts](https://help.shopify.com/manual/discounts/discount-types/free-shipping)
 * that are applied on a cart and at checkout when a customer enters a code. Free shipping discounts are
 * promotional deals that merchants offer to customers to waive shipping costs and encourage online purchases.
 *
 * The `DiscountCodeFreeShipping` object stores information about free shipping code discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The
 * [`DiscountAutomaticFreeShipping`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticFreeShipping)
 * object has similar functionality to the `DiscountCodeFreeShipping` object, but discounts are automatically applied,
 * without the need for customers to enter a code.
 */
export interface ShopifyDiscountCodeFreeShipping {
  __typename?: "DiscountCodeFreeShipping"
  /**
   * Whether the discount applies on one-time purchases.
   * A one-time purchase is a transaction where you pay a
   * single time for a product, without any ongoing
   * commitments or recurring charges.
   */
  appliesOnOneTimePurchase: Scalars["Boolean"]["output"]
  /**
   * Whether the discount applies on subscription items.
   * [Subscriptions](https://shopify.dev/docs/apps/launch/billing/subscription-billing/offer-subscription-discounts)
   * enable customers to purchase products
   * on a recurring basis.
   */
  appliesOnSubscription: Scalars["Boolean"]["output"]
  /** Whether a customer can only use the discount once. */
  appliesOncePerCustomer: Scalars["Boolean"]["output"]
  /**
   * The number of times that the discount has been used.
   * For example, if a "Buy 3, Get 1 Free" t-shirt discount
   * is automatically applied in 200 transactions, then the
   * discount has been used 200 times.
   * This value is updated asynchronously. As a result,
   * it might be lower than the actual usage count until the
   * asynchronous process is completed.
   */
  asyncUsageCount: Scalars["Int"]["output"]
  /** A list codes that customers can use to redeem the discount. */
  codes: ShopifyDiscountRedeemCodeConnection
  /** The number of codes that a customer can use to redeem the discount. */
  codesCount?: Maybe<ShopifyCount>
  /**
   * The
   * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with
   * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
   */
  combinesWith: ShopifyDiscountCombinesWith
  /** The date and time when the discount was created. */
  createdAt: Scalars["DateTime"]["output"]
  /**
   * The customers that can use the discount.
   * @deprecated Use `context` instead.
   */
  customerSelection: ShopifyDiscountCustomerSelection
  /**
   * The countries that qualify for the discount.
   * You can define
   * [a list of countries](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCountries)
   * or specify [all countries](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCountryAll)
   * to be eligible for the discount.
   */
  destinationSelection: ShopifyDiscountShippingDestinationSelection
  /**
   * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that's used to control how discounts can be combined.
   * @deprecated Use `discountClasses` instead.
   */
  discountClass: ShopifyShippingDiscountClass
  /** The classes of the discount. */
  discountClasses: Array<ShopifyDiscountClass>
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: Maybe<Scalars["DateTime"]["output"]>
  /**
   * Whether there are
   * [timeline comments](https://help.shopify.com/manual/discounts/managing-discount-codes#use-the-discount-timeline)
   * associated with the discount.
   */
  hasTimelineComment: Scalars["Boolean"]["output"]
  /** The maximum shipping price amount accepted to qualify for the discount. */
  maximumShippingPrice?: Maybe<ShopifyMoneyV2>
  /** The minimum subtotal or quantity of items that are required for the discount to be applied. */
  minimumRequirement?: Maybe<ShopifyDiscountMinimumRequirement>
  /**
   * The number of billing cycles for which the discount can be applied,
   * which is useful for subscription-based discounts. For example, if you set this field
   * to `3`, then the discount only applies to the first three billing cycles of a
   * subscription. If you specify `0`, then the discount applies indefinitely.
   */
  recurringCycleLimit?: Maybe<Scalars["Int"]["output"]>
  /** A list of URLs that the app can use to share the discount. */
  shareableUrls: Array<ShopifyDiscountShareableUrl>
  /**
   * An abbreviated version of the discount
   * [`summary`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCodeFreeShipping#field-summary)
   * field.
   */
  shortSummary: Scalars["String"]["output"]
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt: Scalars["DateTime"]["output"]
  /**
   * The status of the discount that describes its availability,
   * expiration, or pending activation.
   */
  status: ShopifyDiscountStatus
  /**
   * A detailed explanation of what the discount is,
   * who can use it, when and where it applies, and any associated
   * rules or limitations.
   */
  summary: Scalars["String"]["output"]
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title: Scalars["String"]["output"]
  /** The total sales from orders where the discount was used. */
  totalSales?: Maybe<ShopifyMoneyV2>
  /** The date and time when the discount was updated. */
  updatedAt: Scalars["DateTime"]["output"]
  /**
   * The maximum number of times that a customer can use the discount.
   * For discounts with unlimited usage, specify `null`.
   */
  usageLimit?: Maybe<Scalars["Int"]["output"]>
}

/**
 * The `DiscountCodeFreeShipping` object lets you manage
 * [free shipping discounts](https://help.shopify.com/manual/discounts/discount-types/free-shipping)
 * that are applied on a cart and at checkout when a customer enters a code. Free shipping discounts are
 * promotional deals that merchants offer to customers to waive shipping costs and encourage online purchases.
 *
 * The `DiscountCodeFreeShipping` object stores information about free shipping code discounts that apply to
 * specific [products and variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountProducts),
 * [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountCollections),
 * or [all items in a cart](https://shopify.dev/docs/api/admin-graphql/latest/objects/AllDiscountItems).
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including limitations and considerations.
 *
 * > Note:
 * > The
 * [`DiscountAutomaticFreeShipping`](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAutomaticFreeShipping)
 * object has similar functionality to the `DiscountCodeFreeShipping` object, but discounts are automatically applied,
 * without the need for customers to enter a code.
 */
export interface ShopifyDiscountCodeFreeShippingCodesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyDiscountCodeSortKeys>
}

/** Return type for `discountCodeFreeShippingCreate` mutation. */
export interface ShopifyDiscountCodeFreeShippingCreatePayload {
  __typename?: "DiscountCodeFreeShippingCreatePayload"
  /** The discount code that was created. */
  codeDiscountNode?: Maybe<ShopifyDiscountCodeNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/** The input fields for creating or updating a [free shipping discount](https://help.shopify.com/manual/discounts/discount-types/free-shipping) that's applied on a cart and at checkout when a customer enters a code. */
export interface ShopifyDiscountCodeFreeShippingInput {
  /** Whether the discount applies on one-time purchases. A one-time purchase is a transaction where you pay a single time for a product, without any ongoing commitments or recurring charges. */
  appliesOnOneTimePurchase?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether the discount applies on subscription items. [Subscriptions](https://shopify.dev/docs/apps/launch/billing/subscription-billing/offer-subscription-discounts) enable customers to purchase products on a recurring basis. */
  appliesOnSubscription?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether a customer can only use the discount once. */
  appliesOncePerCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The code that customers use to apply the discount. */
  code?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The
   * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with the shipping discount.
   */
  combinesWith?: InputMaybe<ShopifyDiscountCombinesWithInput>
  /** The shipping destinations where the free shipping discount can be applied. You can specify whether the discount applies to all countries, or specify individual countries. */
  destination?: InputMaybe<ShopifyDiscountShippingDestinationSelectionInput>
  /**
   * The date and time when the discount expires and is no longer available to customers.
   * For discounts without a fixed expiration date, specify `null`.
   */
  endsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /**
   * The maximum shipping price, in the shop's currency, that qualifies for free shipping.
   * <br/><br/>
   * For example, if set to 20.00, then only shipping rates that cost $20.00 or less will be made free. To apply the discount to all shipping rates, specify `null`.
   */
  maximumShippingPrice?: InputMaybe<Scalars["Decimal"]["input"]>
  /** The minimum subtotal or quantity of items that are required for the discount to be applied. */
  minimumRequirement?: InputMaybe<ShopifyDiscountMinimumRequirementInput>
  /**
   * The number of billing cycles for which the discount can be applied, which is useful for subscription-based discounts.
   * <br/><br/>
   * For example, if set to `3`, then the discount only applies to the first three billing cycles of a subscription. If set to `0`, then the discount applies indefinitely.
   */
  recurringCycleLimit?: InputMaybe<Scalars["Int"]["input"]>
  /** The date and time when the discount becomes active and is available to customers. */
  startsAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The discount's name that displays to merchants in the Shopify admin and to customers. */
  title?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The maximum number of times that a customer can use the discount.
   * For discounts with unlimited usage, specify `null`.
   */
  usageLimit?: InputMaybe<Scalars["Int"]["input"]>
}

/** Return type for `discountCodeFreeShippingUpdate` mutation. */
export interface ShopifyDiscountCodeFreeShippingUpdatePayload {
  __typename?: "DiscountCodeFreeShippingUpdatePayload"
  /** The discount code that was updated. */
  codeDiscountNode?: Maybe<ShopifyDiscountCodeNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/**
 * The `DiscountCodeNode` object enables you to manage [code discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes) that are applied when customers enter a code at checkout. For example, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store. Or, you can offer discounts where customers have to enter a code to get free shipping. Merchants can create and share discount codes individually with customers.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related queries, mutations, limitations, and considerations.
 */
export interface ShopifyDiscountCodeNode
  extends ShopifyHasEvents,
    ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyNode {
  __typename?: "DiscountCodeNode"
  /** The underlying code discount object. */
  codeDiscount: ShopifyDiscountCode
  /** The paginated list of events associated with the host subject. */
  events: ShopifyEventConnection
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
}

/**
 * The `DiscountCodeNode` object enables you to manage [code discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes) that are applied when customers enter a code at checkout. For example, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store. Or, you can offer discounts where customers have to enter a code to get free shipping. Merchants can create and share discount codes individually with customers.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related queries, mutations, limitations, and considerations.
 */
export interface ShopifyDiscountCodeNodeEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/**
 * The `DiscountCodeNode` object enables you to manage [code discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes) that are applied when customers enter a code at checkout. For example, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store. Or, you can offer discounts where customers have to enter a code to get free shipping. Merchants can create and share discount codes individually with customers.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related queries, mutations, limitations, and considerations.
 */
export interface ShopifyDiscountCodeNodeMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * The `DiscountCodeNode` object enables you to manage [code discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes) that are applied when customers enter a code at checkout. For example, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store. Or, you can offer discounts where customers have to enter a code to get free shipping. Merchants can create and share discount codes individually with customers.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related queries, mutations, limitations, and considerations.
 */
export interface ShopifyDiscountCodeNodeMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/**
 * The `DiscountCodeNode` object enables you to manage [code discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes) that are applied when customers enter a code at checkout. For example, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store. Or, you can offer discounts where customers have to enter a code to get free shipping. Merchants can create and share discount codes individually with customers.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related queries, mutations, limitations, and considerations.
 */
export interface ShopifyDiscountCodeNodeMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple DiscountCodeNodes. */
export interface ShopifyDiscountCodeNodeConnection {
  __typename?: "DiscountCodeNodeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDiscountCodeNodeEdge>
  /** A list of nodes that are contained in DiscountCodeNodeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDiscountCodeNode>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one DiscountCodeNode and a cursor during pagination. */
export interface ShopifyDiscountCodeNodeEdge {
  __typename?: "DiscountCodeNodeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DiscountCodeNodeEdge. */
  node: ShopifyDiscountCodeNode
}

/** Return type for `discountCodeRedeemCodeBulkDelete` mutation. */
export interface ShopifyDiscountCodeRedeemCodeBulkDeletePayload {
  __typename?: "DiscountCodeRedeemCodeBulkDeletePayload"
  /** The asynchronous job that deletes the discount codes. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/** The set of valid sort keys for the DiscountCode query. */
export type ShopifyDiscountCodeSortKeys =
  /** Sort by the `code` value. */
  | "CODE"
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  | "%future added value"

/** A list of collections that the discount can have as a prerequisite or a list of collections to which the discount can be applied. */
export interface ShopifyDiscountCollections {
  __typename?: "DiscountCollections"
  /** The list of collections that the discount can have as a prerequisite or the list of collections to which the discount can be applied. */
  collections: ShopifyCollectionConnection
}

/** A list of collections that the discount can have as a prerequisite or a list of collections to which the discount can be applied. */
export interface ShopifyDiscountCollectionsCollectionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The input fields for collections attached to a discount. */
export interface ShopifyDiscountCollectionsInput {
  /** Specifies list of collection ids to add. */
  add?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** Specifies list of collection ids to remove. */
  remove?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/**
 * The [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that you can use in combination with
 * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
 */
export interface ShopifyDiscountCombinesWith {
  __typename?: "DiscountCombinesWith"
  /**
   * Whether the discount combines with the
   * [order discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * class.
   */
  orderDiscounts: Scalars["Boolean"]["output"]
  /**
   * Whether the discount combines with the
   * [product discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * class.
   */
  productDiscounts: Scalars["Boolean"]["output"]
  /**
   * Whether the discount combines with the
   * [shipping discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * class.
   */
  shippingDiscounts: Scalars["Boolean"]["output"]
}

/** The input fields to determine which discount classes the discount can combine with. */
export interface ShopifyDiscountCombinesWithInput {
  /**
   * Whether the discount combines with the
   * [order discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * class.
   */
  orderDiscounts?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * Whether the discount combines with the
   * [product discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * class.
   */
  productDiscounts?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * Whether the discount combines
   * with the
   * [shipping discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * class.
   */
  shippingDiscounts?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Defines the geographic scope where a shipping discount can be applied based on customer shipping destinations. This configuration determines which countries are eligible for the promotional offer.
 *
 * For example, a "Free Shipping to EU" promotion would specify European Union countries, while a domestic-only sale might target just the store's home country.
 *
 * The object includes both specific country selections and an option to include all remaining countries not explicitly listed, providing flexible geographic targeting for international merchants.
 */
export interface ShopifyDiscountCountries {
  __typename?: "DiscountCountries"
  /** The codes for the countries where the discount can be applied. */
  countries: Array<ShopifyCountryCode>
  /** Whether the discount is applicable to countries that haven't been defined in the shop's shipping zones. */
  includeRestOfWorld: Scalars["Boolean"]["output"]
}

/** The input fields for a list of countries to add or remove from the free shipping discount. */
export interface ShopifyDiscountCountriesInput {
  /** The country codes to add to the list of countries where the discount applies. */
  add?: InputMaybe<Array<ShopifyCountryCode>>
  /** Whether the discount code is applicable to countries that haven't been defined in the shop's shipping zones. */
  includeRestOfWorld?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The country codes to remove from the list of countries where the discount applies. */
  remove?: InputMaybe<Array<ShopifyCountryCode>>
}

/**
 * Indicates that a shipping discount applies to all countries without restriction, enabling merchants to create truly global promotions. This object represents universal geographic eligibility for shipping discount offers.
 *
 * For example, an online store launching a "Worldwide Free Shipping" campaign would use this configuration to ensure customers from any country can benefit from the promotion.
 *
 * This setting simplifies international discount management by eliminating the need to manually select individual countries or regions, making it ideal for digital products or stores with comprehensive global shipping capabilities.
 */
export interface ShopifyDiscountCountryAll {
  __typename?: "DiscountCountryAll"
  /** Whether the discount can be applied to all countries as shipping destination. This value is always `true`. */
  allCountries: Scalars["Boolean"]["output"]
}

/** The `DiscountCustomerAll` object lets you target all customers for discount eligibility. */
export interface ShopifyDiscountCustomerAll {
  __typename?: "DiscountCustomerAll"
  /** Whether the discount can be applied by all customers. This value is always `true`. */
  allCustomers: Scalars["Boolean"]["output"]
}

/** The prerequisite items and prerequisite value that a customer must have on the order for the discount to be applicable. */
export interface ShopifyDiscountCustomerBuys {
  __typename?: "DiscountCustomerBuys"
  /** If the discount is applicable when a customer buys a one-time purchase. */
  isOneTimePurchase: Scalars["Boolean"]["output"]
  /** If the discount is applicable when a customer buys a subscription purchase. */
  isSubscription: Scalars["Boolean"]["output"]
  /** The items required for the discount to be applicable. */
  items: ShopifyDiscountItems
  /** The prerequisite value. */
  value: ShopifyDiscountCustomerBuysValue
}

/** The input fields for prerequisite items and quantity for the discount. */
export interface ShopifyDiscountCustomerBuysInput {
  /** If the discount is applicable when a customer buys a one-time purchase. */
  isOneTimePurchase?: InputMaybe<Scalars["Boolean"]["input"]>
  /** If the discount is applicable when a customer buys a subscription purchase. */
  isSubscription?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The IDs of items that the customer buys. The items can be either collections or products. */
  items?: InputMaybe<ShopifyDiscountItemsInput>
  /** The quantity of prerequisite items. */
  value?: InputMaybe<ShopifyDiscountCustomerBuysValueInput>
}

/** The prerequisite for the discount to be applicable. For example, the discount might require a customer to buy a minimum quantity of select items. Alternatively, the discount might require a customer to spend a minimum amount on select items. */
export type ShopifyDiscountCustomerBuysValue =
  | ShopifyDiscountPurchaseAmount
  | ShopifyDiscountQuantity

/** The input fields for prerequisite quantity or minimum purchase amount required for the discount. */
export interface ShopifyDiscountCustomerBuysValueInput {
  /** The prerequisite minimum purchase amount required for the discount to be applicable. */
  amount?: InputMaybe<Scalars["Decimal"]["input"]>
  /** The quantity of prerequisite items. */
  quantity?: InputMaybe<Scalars["UnsignedInt64"]["input"]>
}

/** The items in the order that qualify for the discount, their quantities, and the total value of the discount. */
export interface ShopifyDiscountCustomerGets {
  __typename?: "DiscountCustomerGets"
  /** Whether the discount applies on regular one-time-purchase items. */
  appliesOnOneTimePurchase: Scalars["Boolean"]["output"]
  /**
   * Whether the discount applies on subscription items.
   * [Subscriptions](https://shopify.dev/docs/apps/launch/billing/subscription-billing/offer-subscription-discounts)
   * enable customers to purchase products
   * on a recurring basis.
   */
  appliesOnSubscription: Scalars["Boolean"]["output"]
  /** The items to which the discount applies. */
  items: ShopifyDiscountItems
  /** Entitled quantity and the discount value. */
  value: ShopifyDiscountCustomerGetsValue
}

/** Specifies the items that will be discounted, the quantity of items that will be discounted, and the value of discount. */
export interface ShopifyDiscountCustomerGetsInput {
  /** Whether the discount applies on regular one-time-purchase items. */
  appliesOnOneTimePurchase?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * Whether the discount applies on subscription items.
   * [Subscriptions](https://shopify.dev/docs/apps/launch/billing/subscription-billing/offer-subscription-discounts)
   * enable customers to purchase products
   * on a recurring basis.
   */
  appliesOnSubscription?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The IDs of the items that the customer gets. The items can be either collections or products. */
  items?: InputMaybe<ShopifyDiscountItemsInput>
  /** The quantity of items discounted and the discount value. */
  value?: InputMaybe<ShopifyDiscountCustomerGetsValueInput>
}

/** The type of the discount value and how it will be applied. For example, it might be a percentage discount on a fixed number of items. Alternatively, it might be a fixed amount evenly distributed across all items or on each individual item. A third example is a percentage discount on all items. */
export type ShopifyDiscountCustomerGetsValue =
  | ShopifyDiscountAmount
  | ShopifyDiscountOnQuantity
  | ShopifyDiscountPercentage

/** The input fields for the quantity of items discounted and the discount value. */
export interface ShopifyDiscountCustomerGetsValueInput {
  /**
   * The value of the discount.
   *
   * Note: BXGY doesn't support discountAmount.
   */
  discountAmount?: InputMaybe<ShopifyDiscountAmountInput>
  /** The quantity of the items that are discounted and the discount value. */
  discountOnQuantity?: InputMaybe<ShopifyDiscountOnQuantityInput>
  /**
   * The percentage value of the discount. Value must be between 0.00 - 1.00.
   *
   * Note: BXGY doesn't support percentage.
   */
  percentage?: InputMaybe<Scalars["Float"]["input"]>
}

/**
 * Represents customer segments that are eligible to receive a specific discount, allowing merchants to target promotions to defined groups of customers. This enables personalized marketing campaigns based on customer behavior and characteristics.
 *
 * For example, a "VIP Customer 15% Off" promotion might target a segment of high-value repeat customers, while a "New Customer Welcome" discount could focus on first-time buyers.
 *
 * Segment-based discounts help merchants create more relevant promotional experiences and improve conversion rates by showing the right offers to the right customers at the right time.
 */
export interface ShopifyDiscountCustomerSegments {
  __typename?: "DiscountCustomerSegments"
  /** The list of customer segments who are eligible for the discount. */
  segments: Array<ShopifySegment>
}

/** The input fields for which customer segments to add to or remove from the discount. */
export interface ShopifyDiscountCustomerSegmentsInput {
  /** A list of customer segments to add to the current list of customer segments. */
  add?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** A list of customer segments to remove from the current list of customer segments. */
  remove?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** The type used for targeting a set of customers who are eligible for the discount. For example, the discount might be available to all customers or it might only be available to a specific set of customers. You can define the set of customers by targeting a list of customer segments, or by targeting a list of specific customers. */
export type ShopifyDiscountCustomerSelection =
  | ShopifyDiscountCustomerAll
  | ShopifyDiscountCustomerSegments
  | ShopifyDiscountCustomers

/** The input fields for the customers who can use this discount. */
export interface ShopifyDiscountCustomerSelectionInput {
  /** Whether all customers can use this discount. */
  all?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The list of customer segment IDs to add or remove from the list of customer segments. */
  customerSegments?: InputMaybe<ShopifyDiscountCustomerSegmentsInput>
  /** The list of customer IDs to add or remove from the list of customers. */
  customers?: InputMaybe<ShopifyDiscountCustomersInput>
}

/** A list of individual customers eligible for the discount. */
export interface ShopifyDiscountCustomers {
  __typename?: "DiscountCustomers"
  /** The list of individual customers eligible for the discount. */
  customers: Array<ShopifyCustomer>
}

/** The input fields for which customers to add to or remove from the discount. */
export interface ShopifyDiscountCustomersInput {
  /** A list of customers to add to the current list of customers who can use the discount. */
  add?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** A list of customers to remove from the current list of customers who can use the discount. */
  remove?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** The type of discount that will be applied. Currently, only a percentage discount is supported. */
export type ShopifyDiscountEffect =
  | ShopifyDiscountAmount
  | ShopifyDiscountPercentage

/** The input fields for how the discount will be applied. Currently, only percentage off is supported. */
export interface ShopifyDiscountEffectInput {
  /** The value of the discount. */
  amount?: InputMaybe<Scalars["Decimal"]["input"]>
  /** The percentage value of the discount. Value must be between 0.00 - 1.00. */
  percentage?: InputMaybe<Scalars["Float"]["input"]>
}

/** Possible error codes that can be returned by `DiscountUserError`. */
export type ShopifyDiscountErrorCode =
  /** The active period overlaps with other automatic discounts. At any given time, only 25 automatic discounts can be active. */
  | "ACTIVE_PERIOD_OVERLAP"
  /** A discount cannot have both appliesOnOneTimePurchase and appliesOnSubscription set to false. */
  | "APPLIES_ON_NOTHING"
  /** The input value is blank. */
  | "BLANK"
  /** The attribute selection contains conflicting settings. */
  | "CONFLICT"
  /** The input value is already present. */
  | "DUPLICATE"
  /** The end date should be after the start date. */
  | "END_DATE_BEFORE_START_DATE"
  /** The input value should be equal to the value allowed. */
  | "EQUAL_TO"
  /** The value exceeded the maximum allowed value. */
  | "EXCEEDED_MAX"
  /** The input value should be greater than the minimum allowed value. */
  | "GREATER_THAN"
  /** The input value should be greater than or equal to the minimum value allowed. */
  | "GREATER_THAN_OR_EQUAL_TO"
  /** The value is already present through another selection. */
  | "IMPLICIT_DUPLICATE"
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** Unexpected internal error happened. */
  | "INTERNAL_ERROR"
  /** The input value is invalid. */
  | "INVALID"
  /** The `combinesWith` settings are invalid for the discount class. */
  | "INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS"
  /** The discountClass is invalid for the price rule. */
  | "INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE"
  /** The input value should be less than the maximum value allowed. */
  | "LESS_THAN"
  /** The input value should be less than or equal to the maximum value allowed. */
  | "LESS_THAN_OR_EQUAL_TO"
  /** The active period overlaps with too many other app-provided discounts. There's a limit on the number of app discounts that can be active at any given time. */
  | "MAX_APP_DISCOUNTS"
  /** Specify a minimum subtotal or a quantity, but not both. */
  | "MINIMUM_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT"
  /** Missing a required argument. */
  | "MISSING_ARGUMENT"
  /** Recurring cycle limit must be 1 when discount does not apply to subscription items. */
  | "MULTIPLE_RECURRING_CYCLE_LIMIT_FOR_NON_SUBSCRIPTION_ITEMS"
  /** The input value needs to be blank. */
  | "PRESENT"
  /** Recurring cycle limit must be a valid integer greater than or equal to 0. */
  | "RECURRING_CYCLE_LIMIT_NOT_A_VALID_INTEGER"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too long. */
  | "TOO_LONG"
  /** Too many arguments provided. */
  | "TOO_MANY_ARGUMENTS"
  /** The input value is too short. */
  | "TOO_SHORT"
  /** The value is outside of the allowed range. */
  | "VALUE_OUTSIDE_RANGE"
  | "%future added value"

/** The type used to target the items required for discount eligibility, or the items to which the application of a discount might apply. For example, for a customer to be eligible for a discount, they're required to add an item from a specified collection to their order. Alternatively, a customer might be required to add a specific product or product variant. When using this type to target which items the discount will apply to, the discount might apply to all items on the order, or to specific products and product variants, or items in a given collection. */
export type ShopifyDiscountItems =
  | ShopifyAllDiscountItems
  | ShopifyDiscountCollections
  | ShopifyDiscountProducts

/** The input fields for the items attached to a discount. You can specify the discount items by product ID or collection ID. */
export interface ShopifyDiscountItemsInput {
  /** Whether all items should be selected for the discount. Not supported for Buy X get Y discounts. */
  all?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The collections that are attached to a discount. */
  collections?: InputMaybe<ShopifyDiscountCollectionsInput>
  /**
   * The
   * [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) and
   * [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant)
   * that the discount applies to.
   */
  products?: InputMaybe<ShopifyDiscountProductsInput>
}

/** The minimum quantity of items required for the discount to apply. */
export interface ShopifyDiscountMinimumQuantity {
  __typename?: "DiscountMinimumQuantity"
  /** The minimum quantity of items that's required for the discount to be applied. */
  greaterThanOrEqualToQuantity: Scalars["UnsignedInt64"]["output"]
}

/** The input fields for the minimum quantity required for the discount. */
export interface ShopifyDiscountMinimumQuantityInput {
  /** The minimum quantity of items that's required for the discount to be applied. */
  greaterThanOrEqualToQuantity?: InputMaybe<Scalars["UnsignedInt64"]["input"]>
}

/** The type of minimum requirement that must be met for the discount to be applied. For example, a customer must spend a minimum subtotal to be eligible for the discount. Alternatively, a customer must purchase a minimum quantity of items to be eligible for the discount. */
export type ShopifyDiscountMinimumRequirement =
  | ShopifyDiscountMinimumQuantity
  | ShopifyDiscountMinimumSubtotal

/** The input fields for the minimum quantity or subtotal required for a discount. */
export interface ShopifyDiscountMinimumRequirementInput {
  /** The minimum required quantity. */
  quantity?: InputMaybe<ShopifyDiscountMinimumQuantityInput>
  /** The minimum required subtotal. */
  subtotal?: InputMaybe<ShopifyDiscountMinimumSubtotalInput>
}

/** The minimum subtotal required for the discount to apply. */
export interface ShopifyDiscountMinimumSubtotal {
  __typename?: "DiscountMinimumSubtotal"
  /** The minimum subtotal that's required for the discount to be applied. */
  greaterThanOrEqualToSubtotal: ShopifyMoneyV2
}

/** The input fields for the minimum subtotal required for a discount. */
export interface ShopifyDiscountMinimumSubtotalInput {
  /** The minimum subtotal that's required for the discount to be applied. */
  greaterThanOrEqualToSubtotal?: InputMaybe<Scalars["Decimal"]["input"]>
}

/**
 * The `DiscountNode` object enables you to manage [discounts](https://help.shopify.com/manual/discounts), which are applied at checkout or on a cart.
 *
 *
 * Discounts are a way for merchants to promote sales and special offers, or as customer loyalty rewards. Discounts can apply to [orders, products, or shipping](https://shopify.dev/docs/apps/build/discounts#discount-classes), and can be either automatic or code-based. For example, you can offer customers a buy X get Y discount that's automatically applied when purchases meet specific criteria. Or, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related mutations, limitations, and considerations.
 */
export interface ShopifyDiscountNode
  extends ShopifyHasEvents,
    ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyNode {
  __typename?: "DiscountNode"
  /**
   * A discount that's applied at checkout or on cart.
   *
   *
   * Discounts can be [automatic or code-based](https://shopify.dev/docs/apps/build/discounts#discount-methods).
   */
  discount: ShopifyDiscount
  /** The paginated list of events associated with the host subject. */
  events: ShopifyEventConnection
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
}

/**
 * The `DiscountNode` object enables you to manage [discounts](https://help.shopify.com/manual/discounts), which are applied at checkout or on a cart.
 *
 *
 * Discounts are a way for merchants to promote sales and special offers, or as customer loyalty rewards. Discounts can apply to [orders, products, or shipping](https://shopify.dev/docs/apps/build/discounts#discount-classes), and can be either automatic or code-based. For example, you can offer customers a buy X get Y discount that's automatically applied when purchases meet specific criteria. Or, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related mutations, limitations, and considerations.
 */
export interface ShopifyDiscountNodeEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/**
 * The `DiscountNode` object enables you to manage [discounts](https://help.shopify.com/manual/discounts), which are applied at checkout or on a cart.
 *
 *
 * Discounts are a way for merchants to promote sales and special offers, or as customer loyalty rewards. Discounts can apply to [orders, products, or shipping](https://shopify.dev/docs/apps/build/discounts#discount-classes), and can be either automatic or code-based. For example, you can offer customers a buy X get Y discount that's automatically applied when purchases meet specific criteria. Or, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related mutations, limitations, and considerations.
 */
export interface ShopifyDiscountNodeMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * The `DiscountNode` object enables you to manage [discounts](https://help.shopify.com/manual/discounts), which are applied at checkout or on a cart.
 *
 *
 * Discounts are a way for merchants to promote sales and special offers, or as customer loyalty rewards. Discounts can apply to [orders, products, or shipping](https://shopify.dev/docs/apps/build/discounts#discount-classes), and can be either automatic or code-based. For example, you can offer customers a buy X get Y discount that's automatically applied when purchases meet specific criteria. Or, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related mutations, limitations, and considerations.
 */
export interface ShopifyDiscountNodeMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/**
 * The `DiscountNode` object enables you to manage [discounts](https://help.shopify.com/manual/discounts), which are applied at checkout or on a cart.
 *
 *
 * Discounts are a way for merchants to promote sales and special offers, or as customer loyalty rewards. Discounts can apply to [orders, products, or shipping](https://shopify.dev/docs/apps/build/discounts#discount-classes), and can be either automatic or code-based. For example, you can offer customers a buy X get Y discount that's automatically applied when purchases meet specific criteria. Or, you can offer discounts where customers have to enter a code to redeem an amount off discount on products, variants, or collections in a store.
 *
 * Learn more about working with [Shopify's discount model](https://shopify.dev/docs/apps/build/discounts),
 * including related mutations, limitations, and considerations.
 */
export interface ShopifyDiscountNodeMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple DiscountNodes. */
export interface ShopifyDiscountNodeConnection {
  __typename?: "DiscountNodeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDiscountNodeEdge>
  /** A list of nodes that are contained in DiscountNodeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDiscountNode>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one DiscountNode and a cursor during pagination. */
export interface ShopifyDiscountNodeEdge {
  __typename?: "DiscountNodeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DiscountNodeEdge. */
  node: ShopifyDiscountNode
}

/**
 * Defines quantity-based discount rules that specify how many items are eligible for a discount effect. This object enables bulk purchase incentives and tiered pricing strategies.
 *
 * For example, a "Buy 4 candles, get 2 candles 50% off (mix and match)" promotion would specify a quantity threshold of 2 items that will receive a percentage discount effect, encouraging customers to purchase more items to unlock savings.
 *
 * The configuration combines quantity requirements with discount effects, allowing merchants to create sophisticated pricing rules that reward larger purchases and increase average order values.
 */
export interface ShopifyDiscountOnQuantity {
  __typename?: "DiscountOnQuantity"
  /** The discount's effect on qualifying items. */
  effect: ShopifyDiscountEffect
  /** The number of items being discounted. The customer must have at least this many items of specified products or product variants in their order to be eligible for the discount. */
  quantity: ShopifyDiscountQuantity
}

/** The input fields for the quantity of items discounted and the discount value. */
export interface ShopifyDiscountOnQuantityInput {
  /** The percentage value of the discount. */
  effect?: InputMaybe<ShopifyDiscountEffectInput>
  /** The quantity of items that are discounted. */
  quantity?: InputMaybe<Scalars["UnsignedInt64"]["input"]>
}

/** A discount effect that gives customers a percentage off of specified items on their order. */
export interface ShopifyDiscountPercentage {
  __typename?: "DiscountPercentage"
  /** The percentage value of the discount. */
  percentage: Scalars["Float"]["output"]
}

/** A list of products and product variants that the discount can have as a prerequisite or a list of products and product variants to which the discount can be applied. */
export interface ShopifyDiscountProducts {
  __typename?: "DiscountProducts"
  /** The list of product variants that the discount can have as a prerequisite or the list of product variants to which the discount can be applied. */
  productVariants: ShopifyProductVariantConnection
  /** The list of products that the discount can have as a prerequisite or the list of products to which the discount can be applied. */
  products: ShopifyProductConnection
}

/** A list of products and product variants that the discount can have as a prerequisite or a list of products and product variants to which the discount can be applied. */
export interface ShopifyDiscountProductsProductVariantsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A list of products and product variants that the discount can have as a prerequisite or a list of products and product variants to which the discount can be applied. */
export interface ShopifyDiscountProductsProductsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The input fields for adding and removing
 * [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) and
 * [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant)
 * as prerequisites or as eligible items for a discount.
 */
export interface ShopifyDiscountProductsInput {
  /** The IDs of the product variants to add as prerequisites or as eligible items for a discount. */
  productVariantsToAdd?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The IDs of the product variants to remove as prerequisites or as eligible items for a discount. */
  productVariantsToRemove?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The IDs of the products to add as prerequisites or as eligible items for a discount. */
  productsToAdd?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The IDs of the products to remove as prerequisites or as eligible items for a discount. */
  productsToRemove?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** A purchase amount in the context of a discount. This object can be used to define the minimum purchase amount required for a discount to be applicable. */
export interface ShopifyDiscountPurchaseAmount {
  __typename?: "DiscountPurchaseAmount"
  /** The purchase amount in decimal format. */
  amount: Scalars["Decimal"]["output"]
}

/**
 * Defines a quantity threshold for discount eligibility or application. This simple object specifies the number of items required to trigger or calculate discount benefits.
 *
 * For example, a "Buy 3, Get 1 Free" promotion would use DiscountQuantity to define the minimum purchase quantity of 3 items, or a bulk discount might specify quantity tiers like 10+ items for wholesale pricing.
 *
 * The quantity value determines how discounts interact with cart contents, whether setting minimum purchase requirements or defining quantity-based discount calculations.
 */
export interface ShopifyDiscountQuantity {
  __typename?: "DiscountQuantity"
  /** The quantity of items. */
  quantity: Scalars["UnsignedInt64"]["output"]
}

/** A code that a customer can use at checkout to receive a discount. For example, a customer can use the redeem code 'SUMMER20' at checkout to receive a 20% discount on their entire order. */
export interface ShopifyDiscountRedeemCode {
  __typename?: "DiscountRedeemCode"
  /** The number of times that the discount redeem code has been used. This value is updated asynchronously and can be different than the actual usage count. */
  asyncUsageCount: Scalars["Int"]["output"]
  /** The code that a customer can use at checkout to receive a discount. */
  code: Scalars["String"]["output"]
  /** The application that created the discount redeem code. */
  createdBy?: Maybe<ShopifyApp>
  /** A globally-unique ID of the discount redeem code. */
  id: Scalars["ID"]["output"]
}

/** Return type for `discountRedeemCodeBulkAdd` mutation. */
export interface ShopifyDiscountRedeemCodeBulkAddPayload {
  __typename?: "DiscountRedeemCodeBulkAddPayload"
  /**
   * The ID of bulk operation that creates multiple unique discount codes.
   * You can use the
   * [`discountRedeemCodeBulkCreation` query](https://shopify.dev/api/admin-graphql/latest/queries/discountRedeemCodeBulkCreation)
   * to track the status of the bulk operation.
   */
  bulkCreation?: Maybe<ShopifyDiscountRedeemCodeBulkCreation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDiscountUserError>
}

/** The properties and status of a bulk discount redeem code creation operation. */
export interface ShopifyDiscountRedeemCodeBulkCreation extends ShopifyNode {
  __typename?: "DiscountRedeemCodeBulkCreation"
  /** The result of each code creation operation associated with the bulk creation operation including any errors that might have occurred during the operation. */
  codes: ShopifyDiscountRedeemCodeBulkCreationCodeConnection
  /** The number of codes to create. */
  codesCount: Scalars["Int"]["output"]
  /** The date and time when the bulk creation was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The code discount associated with the created codes. */
  discountCode?: Maybe<ShopifyDiscountCodeNode>
  /** Whether the bulk creation is still queued (`false`) or has been run (`true`). */
  done: Scalars["Boolean"]["output"]
  /** The number of codes that weren't created successfully. */
  failedCount: Scalars["Int"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The number of codes created successfully. */
  importedCount: Scalars["Int"]["output"]
}

/** The properties and status of a bulk discount redeem code creation operation. */
export interface ShopifyDiscountRedeemCodeBulkCreationCodesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A result of a discount redeem code creation operation created by a bulk creation. */
export interface ShopifyDiscountRedeemCodeBulkCreationCode {
  __typename?: "DiscountRedeemCodeBulkCreationCode"
  /** The code to use in the discount redeem code creation operation. */
  code: Scalars["String"]["output"]
  /**
   * The successfully created discount redeem code.
   *
   * If the discount redeem code couldn't be created, then this field is `null``.
   */
  discountRedeemCode?: Maybe<ShopifyDiscountRedeemCode>
  /** A list of errors that occurred during the creation operation of the discount redeem code. */
  errors: Array<ShopifyDiscountUserError>
}

/** An auto-generated type for paginating through multiple DiscountRedeemCodeBulkCreationCodes. */
export interface ShopifyDiscountRedeemCodeBulkCreationCodeConnection {
  __typename?: "DiscountRedeemCodeBulkCreationCodeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDiscountRedeemCodeBulkCreationCodeEdge>
  /** A list of nodes that are contained in DiscountRedeemCodeBulkCreationCodeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDiscountRedeemCodeBulkCreationCode>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one DiscountRedeemCodeBulkCreationCode and a cursor during pagination. */
export interface ShopifyDiscountRedeemCodeBulkCreationCodeEdge {
  __typename?: "DiscountRedeemCodeBulkCreationCodeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DiscountRedeemCodeBulkCreationCodeEdge. */
  node: ShopifyDiscountRedeemCodeBulkCreationCode
}

/** An auto-generated type for paginating through multiple DiscountRedeemCodes. */
export interface ShopifyDiscountRedeemCodeConnection {
  __typename?: "DiscountRedeemCodeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDiscountRedeemCodeEdge>
  /** A list of nodes that are contained in DiscountRedeemCodeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDiscountRedeemCode>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one DiscountRedeemCode and a cursor during pagination. */
export interface ShopifyDiscountRedeemCodeEdge {
  __typename?: "DiscountRedeemCodeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DiscountRedeemCodeEdge. */
  node: ShopifyDiscountRedeemCode
}

/** The input fields for the redeem code to attach to a discount. */
export interface ShopifyDiscountRedeemCodeInput {
  /** The code that a customer can use at checkout to receive the associated discount. */
  code: Scalars["String"]["input"]
}

/** A shareable URL for a discount code. */
export interface ShopifyDiscountShareableUrl {
  __typename?: "DiscountShareableUrl"
  /** The image URL of the item (product or collection) to which the discount applies. */
  targetItemImage?: Maybe<ShopifyImage>
  /** The type of page that's associated with the URL. */
  targetType: ShopifyDiscountShareableUrlTargetType
  /** The title of the page that's associated with the URL. */
  title: Scalars["String"]["output"]
  /** The URL for the discount code. */
  url: Scalars["URL"]["output"]
}

/** The type of page where a shareable discount URL lands. */
export type ShopifyDiscountShareableUrlTargetType =
  /** The URL lands on a collection page. */
  | "COLLECTION"
  /** The URL lands on a home page. */
  | "HOME"
  /** The URL lands on a product page. */
  | "PRODUCT"
  | "%future added value"

/** The type used to target the eligible countries of an order's shipping destination for which the discount applies. For example, the discount might be applicable when shipping to all countries, or only to a set of countries. */
export type ShopifyDiscountShippingDestinationSelection =
  | ShopifyDiscountCountries
  | ShopifyDiscountCountryAll

/** The input fields for the destinations where the free shipping discount will be applied. */
export interface ShopifyDiscountShippingDestinationSelectionInput {
  /** Whether the discount code applies to all countries. */
  all?: InputMaybe<Scalars["Boolean"]["input"]>
  /** A list of countries where the discount code will apply. */
  countries?: InputMaybe<ShopifyDiscountCountriesInput>
}

/** The set of valid sort keys for the Discount query. */
export type ShopifyDiscountSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `ends_at` value. */
  | "ENDS_AT"
  /** Sort by the `id` value. */
  | "ID"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  /** Sort by the `starts_at` value. */
  | "STARTS_AT"
  /** Sort by the `title` value. */
  | "TITLE"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/**
 * The status of the discount that describes its availability,
 * expiration, or pending activation.
 */
export type ShopifyDiscountStatus =
  /** The discount is currently available for use. */
  | "ACTIVE"
  /** The discount has reached its end date and is no longer valid. */
  | "EXPIRED"
  /** The discount is set to become active at a future date. */
  | "SCHEDULED"
  | "%future added value"

/** The type of line (line item or shipping line) on an order that the subscription discount is applicable towards. */
export type ShopifyDiscountTargetType =
  /** The discount applies onto line items. */
  | "LINE_ITEM"
  /** The discount applies onto shipping lines. */
  | "SHIPPING_LINE"
  | "%future added value"

/** The type of the subscription discount. */
export type ShopifyDiscountType =
  /** Automatic discount type. */
  | "AUTOMATIC_DISCOUNT"
  /** Code discount type. */
  | "CODE_DISCOUNT"
  /** Manual discount type. */
  | "MANUAL"
  | "%future added value"

/** An error that occurs during the execution of a discount mutation. */
export interface ShopifyDiscountUserError extends ShopifyDisplayableError {
  __typename?: "DiscountUserError"
  /** The error code. */
  code?: Maybe<ShopifyDiscountErrorCode>
  /** Extra information about this error. */
  extraInfo?: Maybe<Scalars["String"]["output"]>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Represents an error in the input of a mutation. */
export interface ShopifyDisplayableError {
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Return type for `disputeEvidenceUpdate` mutation. */
export interface ShopifyDisputeEvidenceUpdatePayload {
  __typename?: "DisputeEvidenceUpdatePayload"
  /** The updated dispute evidence. */
  disputeEvidence?: Maybe<ShopifyShopifyPaymentsDisputeEvidence>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDisputeEvidenceUpdateUserError>
}

/** An error that occurs during the execution of `DisputeEvidenceUpdate`. */
export interface ShopifyDisputeEvidenceUpdateUserError
  extends ShopifyDisplayableError {
  __typename?: "DisputeEvidenceUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyDisputeEvidenceUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `DisputeEvidenceUpdateUserError`. */
export type ShopifyDisputeEvidenceUpdateUserErrorCode =
  /** Dispute evidence could not be found. */
  | "DISPUTE_EVIDENCE_NOT_FOUND"
  /** Evidence already accepted. */
  | "EVIDENCE_ALREADY_ACCEPTED"
  /** Evidence past due date. */
  | "EVIDENCE_PAST_DUE_DATE"
  /** Combined files size is too large. */
  | "FILES_SIZE_EXCEEDED_LIMIT"
  /** File upload failed. Please try again. */
  | "FILE_NOT_FOUND"
  /** The input value is invalid. */
  | "INVALID"
  /** Individual file size is too large. */
  | "TOO_LARGE"
  | "%future added value"

/** The possible statuses of a dispute. */
export type ShopifyDisputeStatus =
  | "ACCEPTED"
  /** Status previously used by Stripe to indicate that a dispute led to a refund. */
  | "CHARGE_REFUNDED"
  | "LOST"
  | "NEEDS_RESPONSE"
  | "UNDER_REVIEW"
  | "WON"
  | "%future added value"

/** The possible types for a dispute. */
export type ShopifyDisputeType =
  /** The dispute has turned into a chargeback. */
  | "CHARGEBACK"
  /** The dispute is in the inquiry phase. */
  | "INQUIRY"
  | "%future added value"

/** A distance, which includes a numeric value and a unit of measurement. */
export interface ShopifyDistance {
  __typename?: "Distance"
  /** The unit of measurement for `value`. */
  unit: ShopifyDistanceUnit
  /** The distance value using the unit system specified with `unit`. */
  value: Scalars["Float"]["output"]
}

/** Units of measurement for distance. */
export type ShopifyDistanceUnit =
  /** Metric system unit of distance. */
  | "KILOMETERS"
  /** Imperial system unit of distance. */
  | "MILES"
  | "%future added value"

/** A unique string that represents the address of a Shopify store on the Internet. */
export interface ShopifyDomain extends ShopifyNode {
  __typename?: "Domain"
  /** The host name of the domain. For example, `example.com`. */
  host: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The localization of the domain, if the domain doesn't redirect. */
  localization?: Maybe<ShopifyDomainLocalization>
  /** The web presence of the domain. */
  marketWebPresence?: Maybe<ShopifyMarketWebPresence>
  /** Whether SSL is enabled. */
  sslEnabled: Scalars["Boolean"]["output"]
  /** The URL of the domain (for example, `https://example.com`). */
  url: Scalars["URL"]["output"]
}

/** The country and language settings assigned to a domain. */
export interface ShopifyDomainLocalization {
  __typename?: "DomainLocalization"
  /** The ISO codes for the domain’s alternate locales. For example, `["en"]`. */
  alternateLocales: Array<Scalars["String"]["output"]>
  /** The ISO code for the country assigned to the domain. For example, `"CA"` or "*" for a domain set to "Rest of world". */
  country?: Maybe<Scalars["String"]["output"]>
  /** The ISO code for the domain’s default locale. For example, `"en"`. */
  defaultLocale: Scalars["String"]["output"]
}

/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 *
 * For draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their shop currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 *
 * Draft orders created on or after April 1, 2025 will be automatically purged after one year of inactivity.
 */
export interface ShopifyDraftOrder
  extends ShopifyCommentEventSubject,
    ShopifyHasEvents,
    ShopifyHasLocalizationExtensions,
    ShopifyHasLocalizedFields,
    ShopifyHasMetafields,
    ShopifyLegacyInteroperability,
    ShopifyNavigable,
    ShopifyNode {
  __typename?: "DraftOrder"
  /**
   * Whether or not to accept automatic discounts on the draft order during calculation.
   * If false, only discount codes and custom draft order discounts (see `appliedDiscount`) will be applied.
   * If true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.
   */
  acceptAutomaticDiscounts?: Maybe<Scalars["Boolean"]["output"]>
  /** Whether all variant prices have been overridden. */
  allVariantPricesOverridden: Scalars["Boolean"]["output"]
  /** Whether discount codes are allowed during checkout of this draft order. */
  allowDiscountCodesInCheckout: Scalars["Boolean"]["output"]
  /** Whether any variant prices have been overridden. */
  anyVariantPricesOverridden: Scalars["Boolean"]["output"]
  /** The custom order-level discount applied. */
  appliedDiscount?: Maybe<ShopifyDraftOrderAppliedDiscount>
  /** The billing address of the customer. */
  billingAddress?: Maybe<ShopifyMailingAddress>
  /** Whether the billing address matches the shipping address. */
  billingAddressMatchesShippingAddress: Scalars["Boolean"]["output"]
  /**
   * The date and time when the draft order was converted to a new order,
   * and had it's status changed to **Completed**.
   */
  completedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The date and time when the draft order was created in Shopify. */
  createdAt: Scalars["DateTime"]["output"]
  /** The shop currency used for calculation. */
  currencyCode: ShopifyCurrencyCode
  /** The custom information added to the draft order on behalf of the customer. */
  customAttributes: Array<ShopifyAttribute>
  /** The customer who will be sent an invoice. */
  customer?: Maybe<ShopifyCustomer>
  /** A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars["String"]["output"]
  /** All discount codes applied. */
  discountCodes: Array<Scalars["String"]["output"]>
  /** The email address of the customer, which is used to send notifications. */
  email?: Maybe<Scalars["String"]["output"]>
  /** The list of events associated with the draft order. */
  events: ShopifyEventConnection
  /** Whether the merchant has added timeline comments to the draft order. */
  hasTimelineComment: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The subject defined for the draft invoice email template. */
  invoiceEmailTemplateSubject: Scalars["String"]["output"]
  /** The date and time when the invoice was last emailed to the customer. */
  invoiceSentAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The link to the checkout, which is sent to the customer in the invoice email. */
  invoiceUrl?: Maybe<Scalars["URL"]["output"]>
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** The list of the line items in the draft order. */
  lineItems: ShopifyDraftOrderLineItemConnection
  /**
   * A subtotal of the line items and corresponding discounts,
   * excluding include shipping charges, shipping discounts, taxes, or order discounts.
   */
  lineItemsSubtotalPrice: ShopifyMoneyBag
  /**
   * List of localization extensions for the resource.
   * @deprecated This connection will be removed in a future version. Use `localizedFields` instead.
   */
  localizationExtensions: ShopifyLocalizationExtensionConnection
  /** List of localized fields for the resource. */
  localizedFields: ShopifyLocalizedFieldConnection
  /**
   * The name of the selected market.
   * @deprecated This field is now incompatible with Markets.
   */
  marketName: Scalars["String"]["output"]
  /**
   * The selected country code that determines the pricing.
   * @deprecated This field is now incompatible with Markets.
   */
  marketRegionCountryCode: ShopifyCountryCode
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** The identifier for the draft order, which is unique within the store. For example, _#D1223_. */
  name: Scalars["String"]["output"]
  /** The text from an optional note attached to the draft order. */
  note2?: Maybe<Scalars["String"]["output"]>
  /** The order that was created from the draft order. */
  order?: Maybe<ShopifyOrder>
  /** The associated payment terms for this draft order. */
  paymentTerms?: Maybe<ShopifyPaymentTerms>
  /** The assigned phone number. */
  phone?: Maybe<Scalars["String"]["output"]>
  /** The list of platform discounts applied. */
  platformDiscounts: Array<ShopifyDraftOrderPlatformDiscount>
  /** The purchase order number. */
  poNumber?: Maybe<Scalars["String"]["output"]>
  /** The payment currency used for calculation. */
  presentmentCurrencyCode: ShopifyCurrencyCode
  /** The purchasing entity. */
  purchasingEntity?: Maybe<ShopifyPurchasingEntity>
  /**
   * Whether the draft order is ready and can be completed.
   * Draft orders might have asynchronous operations that can take time to finish.
   */
  ready: Scalars["Boolean"]["output"]
  /** The time after which inventory will automatically be restocked. */
  reserveInventoryUntil?: Maybe<Scalars["DateTime"]["output"]>
  /** The shipping address of the customer. */
  shippingAddress?: Maybe<ShopifyMailingAddress>
  /** The line item containing the shipping information and costs. */
  shippingLine?: Maybe<ShopifyShippingLine>
  /** The status of the draft order. */
  status: ShopifyDraftOrderStatus
  /**
   * The subtotal, in shop currency, of the line items and their discounts, excluding shipping charges, shipping discounts, and taxes.
   * @deprecated Use `subtotalPriceSet` instead.
   */
  subtotalPrice: Scalars["Money"]["output"]
  /** The subtotal, of the line items and their discounts, excluding shipping charges, shipping discounts, and taxes. */
  subtotalPriceSet: ShopifyMoneyBag
  /**
   * The comma separated list of tags associated with the draft order.
   * Updating `tags` overwrites any existing tags that were previously added to the draft order.
   * To add new tags without overwriting existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd) mutation.
   */
  tags: Array<Scalars["String"]["output"]>
  /** Whether the draft order is tax exempt. */
  taxExempt: Scalars["Boolean"]["output"]
  /** The list of of taxes lines charged for each line item and shipping line. */
  taxLines: Array<ShopifyTaxLine>
  /** Whether the line item prices include taxes. */
  taxesIncluded: Scalars["Boolean"]["output"]
  /** Total discounts. */
  totalDiscountsSet: ShopifyMoneyBag
  /** Total price of line items. */
  totalLineItemsPriceSet: ShopifyMoneyBag
  /**
   * The total price, in shop currency, includes taxes, shipping charges, and discounts.
   * @deprecated Use `totalPriceSet` instead.
   */
  totalPrice: Scalars["Money"]["output"]
  /** The total price, includes taxes, shipping charges, and discounts. */
  totalPriceSet: ShopifyMoneyBag
  /**
   * The sum of individual line item quantities.
   * If the draft order has bundle items, this is the sum containing the quantities of individual items in the bundle.
   */
  totalQuantityOfLineItems: Scalars["Int"]["output"]
  /**
   * The total shipping price in shop currency.
   * @deprecated Use `totalShippingPriceSet` instead.
   */
  totalShippingPrice: Scalars["Money"]["output"]
  /** The total shipping price. */
  totalShippingPriceSet: ShopifyMoneyBag
  /**
   * The total tax in shop currency.
   * @deprecated Use `totalTaxSet` instead.
   */
  totalTax: Scalars["Money"]["output"]
  /** The total tax. */
  totalTaxSet: ShopifyMoneyBag
  /** The total weight in grams of the draft order. */
  totalWeight: Scalars["UnsignedInt64"]["output"]
  /**
   * Fingerprint of the current cart.
   * In order to have bundles work, the fingerprint must be passed to
   * each request as it was previously returned, unmodified.
   */
  transformerFingerprint?: Maybe<Scalars["String"]["output"]>
  /**
   * The date and time when the draft order was last changed.
   * The format is YYYY-MM-DD HH:mm:ss. For example, 2016-02-05 17:04:01.
   */
  updatedAt: Scalars["DateTime"]["output"]
  /** Whether the draft order will be visible to the customer on the self-serve portal. */
  visibleToCustomer: Scalars["Boolean"]["output"]
  /** The list of warnings raised while calculating. */
  warnings: Array<ShopifyDraftOrderWarning>
}

/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 *
 * For draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their shop currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 *
 * Draft orders created on or after April 1, 2025 will be automatically purged after one year of inactivity.
 */
export interface ShopifyDraftOrderEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 *
 * For draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their shop currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 *
 * Draft orders created on or after April 1, 2025 will be automatically purged after one year of inactivity.
 */
export interface ShopifyDraftOrderLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 *
 * For draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their shop currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 *
 * Draft orders created on or after April 1, 2025 will be automatically purged after one year of inactivity.
 */
export interface ShopifyDraftOrderLocalizationExtensionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  countryCodes?: InputMaybe<Array<ShopifyCountryCode>>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  purposes?: InputMaybe<Array<ShopifyLocalizationExtensionPurpose>>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 *
 * For draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their shop currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 *
 * Draft orders created on or after April 1, 2025 will be automatically purged after one year of inactivity.
 */
export interface ShopifyDraftOrderLocalizedFieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  countryCodes?: InputMaybe<Array<ShopifyCountryCode>>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  purposes?: InputMaybe<Array<ShopifyLocalizedFieldPurpose>>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 *
 * For draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their shop currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 *
 * Draft orders created on or after April 1, 2025 will be automatically purged after one year of inactivity.
 */
export interface ShopifyDraftOrderMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 *
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 *
 * For draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their shop currency.
 *
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 *
 * Draft orders created on or after April 1, 2025 will be automatically purged after one year of inactivity.
 */
export interface ShopifyDraftOrderMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The order-level discount applied to a draft order. */
export interface ShopifyDraftOrderAppliedDiscount {
  __typename?: "DraftOrderAppliedDiscount"
  /**
   * Amount of the order-level discount that's applied to the draft order in shop currency.
   * @deprecated Use `amountSet` instead.
   */
  amount: Scalars["Money"]["output"]
  /** The amount of money discounted, with values shown in both shop currency and presentment currency. */
  amountSet: ShopifyMoneyBag
  /**
   * Amount of money discounted.
   * @deprecated Use `amountSet` instead.
   */
  amountV2: ShopifyMoneyV2
  /** Description of the order-level discount. */
  description: Scalars["String"]["output"]
  /** Name of the order-level discount. */
  title?: Maybe<Scalars["String"]["output"]>
  /**
   * The order level discount amount. If `valueType` is `"percentage"`,
   * then `value` is the percentage discount.
   */
  value: Scalars["Float"]["output"]
  /** Type of the order-level discount. */
  valueType: ShopifyDraftOrderAppliedDiscountType
}

/** The input fields for applying an order-level discount to a draft order. */
export interface ShopifyDraftOrderAppliedDiscountInput {
  /** The applied amount of the discount in the specified currency. */
  amountWithCurrency?: InputMaybe<ShopifyMoneyInput>
  /** Reason for the discount. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /** Title of the discount. */
  title?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The value of the discount.
   * If the type of the discount is fixed amount, then this is a fixed amount in your shop currency.
   * If the type is percentage, then this is the percentage.
   */
  value: Scalars["Float"]["input"]
  /** The type of discount. */
  valueType: ShopifyDraftOrderAppliedDiscountType
}

/** The valid discount types that can be applied to a draft order. */
export type ShopifyDraftOrderAppliedDiscountType =
  /** A fixed amount in the store's currency. */
  | "FIXED_AMOUNT"
  /** A percentage of the order subtotal. */
  | "PERCENTAGE"
  | "%future added value"

/** The available delivery options for a draft order. */
export interface ShopifyDraftOrderAvailableDeliveryOptions {
  __typename?: "DraftOrderAvailableDeliveryOptions"
  /** The available local delivery rates for the draft order. Requires a customer with a valid shipping address and at least one line item. */
  availableLocalDeliveryRates: Array<ShopifyDraftOrderShippingRate>
  /** The available local pickup options for the draft order. Requires at least one line item. */
  availableLocalPickupOptions: Array<ShopifyPickupInStoreLocation>
  /** The available shipping rates for the draft order. Requires a customer with a valid shipping address and at least one line item. */
  availableShippingRates: Array<ShopifyDraftOrderShippingRate>
  /** Returns information about pagination of local pickup options. */
  pageInfo: ShopifyPageInfo
}

/** The input fields used to determine available delivery options for a draft order. */
export interface ShopifyDraftOrderAvailableDeliveryOptionsInput {
  /**
   * Whether or not to accept automatic discounts on the draft order during calculation.
   * If false, only discount codes and custom draft order discounts (see `appliedDiscount`) will be applied.
   * If true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.
   */
  acceptAutomaticDiscounts?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * The discount that will be applied to the draft order.
   * A draft order line item can have one discount. A draft order can also have one order-level discount.
   */
  appliedDiscount?: InputMaybe<ShopifyDraftOrderAppliedDiscountInput>
  /** Discount codes that will be attempted to be applied to the draft order. If the draft isn't eligible for any given discount code it will be skipped during calculation. */
  discountCodes?: InputMaybe<Array<Scalars["String"]["input"]>>
  /**
   * Product variant line item or custom line item associated to the draft order.
   * Each draft order must include at least one line item.
   */
  lineItems?: InputMaybe<Array<ShopifyDraftOrderLineItemInput>>
  /** The selected country code that determines the pricing of the draft order. */
  marketRegionCountryCode?: InputMaybe<ShopifyCountryCode>
  /** The purchasing entity for the draft order. */
  purchasingEntity?: InputMaybe<ShopifyPurchasingEntityInput>
  /** The mailing address to where the order will be shipped. */
  shippingAddress?: InputMaybe<ShopifyMailingAddressInput>
}

/** Return type for `draftOrderBulkAddTags` mutation. */
export interface ShopifyDraftOrderBulkAddTagsPayload {
  __typename?: "DraftOrderBulkAddTagsPayload"
  /** The asynchronous job for adding tags to the draft orders. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `draftOrderBulkDelete` mutation. */
export interface ShopifyDraftOrderBulkDeletePayload {
  __typename?: "DraftOrderBulkDeletePayload"
  /** The asynchronous job for deleting the draft orders. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `draftOrderBulkRemoveTags` mutation. */
export interface ShopifyDraftOrderBulkRemoveTagsPayload {
  __typename?: "DraftOrderBulkRemoveTagsPayload"
  /** The asynchronous job for removing tags from the draft orders. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** A warning indicating that a bundle was added to a draft order. */
export interface ShopifyDraftOrderBundleAddedWarning
  extends ShopifyDraftOrderWarning {
  __typename?: "DraftOrderBundleAddedWarning"
  /** The error code. */
  errorCode: Scalars["String"]["output"]
  /** The input field that the warning applies to. */
  field: Scalars["String"]["output"]
  /** The warning message. */
  message: Scalars["String"]["output"]
}

/** Return type for `draftOrderCalculate` mutation. */
export interface ShopifyDraftOrderCalculatePayload {
  __typename?: "DraftOrderCalculatePayload"
  /** The calculated properties for a draft order. */
  calculatedDraftOrder?: Maybe<ShopifyCalculatedDraftOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `draftOrderComplete` mutation. */
export interface ShopifyDraftOrderCompletePayload {
  __typename?: "DraftOrderCompletePayload"
  /** The completed draft order. */
  draftOrder?: Maybe<ShopifyDraftOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type for paginating through multiple DraftOrders. */
export interface ShopifyDraftOrderConnection {
  __typename?: "DraftOrderConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDraftOrderEdge>
  /** A list of nodes that are contained in DraftOrderEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDraftOrder>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `draftOrderCreateFromOrder` mutation. */
export interface ShopifyDraftOrderCreateFromOrderPayload {
  __typename?: "DraftOrderCreateFromOrderPayload"
  /** The created draft order. */
  draftOrder?: Maybe<ShopifyDraftOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `draftOrderCreate` mutation. */
export interface ShopifyDraftOrderCreatePayload {
  __typename?: "DraftOrderCreatePayload"
  /** The created draft order. */
  draftOrder?: Maybe<ShopifyDraftOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields to specify the draft order to delete by its ID. */
export interface ShopifyDraftOrderDeleteInput {
  /** The ID of the draft order to delete. */
  id: Scalars["ID"]["input"]
}

/** Return type for `draftOrderDelete` mutation. */
export interface ShopifyDraftOrderDeletePayload {
  __typename?: "DraftOrderDeletePayload"
  /** The ID of the deleted draft order. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** A warning indicating that a discount cannot be applied to a draft order. */
export interface ShopifyDraftOrderDiscountNotAppliedWarning
  extends ShopifyDraftOrderWarning {
  __typename?: "DraftOrderDiscountNotAppliedWarning"
  /** The code of the discount that can't be applied. */
  discountCode?: Maybe<Scalars["String"]["output"]>
  /** The title of the discount that can't be applied. */
  discountTitle?: Maybe<Scalars["String"]["output"]>
  /** The error code. */
  errorCode: Scalars["String"]["output"]
  /** The input field that the warning applies to. */
  field: Scalars["String"]["output"]
  /** The warning message. */
  message: Scalars["String"]["output"]
  /** The price rule that can't be applied. */
  priceRule?: Maybe<ShopifyPriceRule>
}

/** Return type for `draftOrderDuplicate` mutation. */
export interface ShopifyDraftOrderDuplicatePayload {
  __typename?: "DraftOrderDuplicatePayload"
  /** The newly duplicated draft order. */
  draftOrder?: Maybe<ShopifyDraftOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type which holds one DraftOrder and a cursor during pagination. */
export interface ShopifyDraftOrderEdge {
  __typename?: "DraftOrderEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DraftOrderEdge. */
  node: ShopifyDraftOrder
}

/** The input fields used to create or update a draft order. */
export interface ShopifyDraftOrderInput {
  /**
   * Whether or not to accept automatic discounts on the draft order during calculation.
   * If false, only discount codes and custom draft order discounts (see `appliedDiscount`) will be applied.
   * If true, eligible automatic discounts will be applied in addition to discount codes and custom draft order discounts.
   */
  acceptAutomaticDiscounts?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether discount codes are allowed during checkout of this draft order. */
  allowDiscountCodesInCheckout?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * The discount that will be applied to the draft order.
   * A draft order line item can have one discount. A draft order can also have one order-level discount.
   */
  appliedDiscount?: InputMaybe<ShopifyDraftOrderAppliedDiscountInput>
  /** The mailing address associated with the payment method. */
  billingAddress?: InputMaybe<ShopifyMailingAddressInput>
  /** The extra information added to the draft order on behalf of the customer. */
  customAttributes?: InputMaybe<Array<ShopifyAttributeInput>>
  /**
   * The list of discount codes that will be attempted to be applied to the draft order.
   * If the draft isn't eligible for any given discount code it will be skipped during calculation.
   */
  discountCodes?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The customer's email address. */
  email?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The list of product variant or custom line item.
   * Each draft order must include at least one line item.
   * Accepts a maximum of 499 line items.
   *
   * NOTE: Draft orders don't currently support subscriptions.
   */
  lineItems?: InputMaybe<Array<ShopifyDraftOrderLineItemInput>>
  /** The localized fields attached to the draft order. For example, Tax IDs. */
  localizedFields?: InputMaybe<Array<ShopifyLocalizedFieldInput>>
  /** The list of metafields attached to the draft order. An existing metafield can not be used when creating a draft order. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The text of an optional note that a shop owner can attach to the draft order. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** The fields used to create payment terms. */
  paymentTerms?: InputMaybe<ShopifyPaymentTermsInput>
  /** The customer's phone number. */
  phone?: InputMaybe<Scalars["String"]["input"]>
  /** The purchase order number. */
  poNumber?: InputMaybe<Scalars["String"]["input"]>
  /** The payment currency of the customer for this draft order. */
  presentmentCurrencyCode?: InputMaybe<ShopifyCurrencyCode>
  /** The purchasing entity for the draft order. */
  purchasingEntity?: InputMaybe<ShopifyPurchasingEntityInput>
  /** The time after which inventory reservation will expire. */
  reserveInventoryUntil?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The unique token identifying the draft order. */
  sessionToken?: InputMaybe<Scalars["String"]["input"]>
  /** The mailing address to where the order will be shipped. */
  shippingAddress?: InputMaybe<ShopifyMailingAddressInput>
  /** The shipping line object, which details the shipping method used. */
  shippingLine?: InputMaybe<ShopifyShippingLineInput>
  /**
   * The source of the checkout.
   * To use this field for sales attribution, you must register the channels that your app is managing.
   * You can register the channels that your app is managing by completing
   * [this Google Form](https://docs.google.com/forms/d/e/1FAIpQLScmVTZRQNjOJ7RD738mL1lGeFjqKVe_FM2tO9xsm21QEo5Ozg/viewform?usp=sf_link).
   * After you've submitted your request, you need to wait for your request to be processed by Shopify.
   * You can find a list of your channels in the Partner Dashboard, in your app's Marketplace extension.
   * You need to specify the handle as the `source_name` value in your request.
   * The handle is the channel that the order was placed from.
   */
  sourceName?: InputMaybe<Scalars["String"]["input"]>
  /** A comma separated list of tags that have been added to the draft order. */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
  /**
   * Whether or not taxes are exempt for the draft order.
   * If false, then Shopify will refer to the taxable field for each line item.
   * If a customer is applied to the draft order, then Shopify will use the customer's tax exempt field instead.
   */
  taxExempt?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Fingerprint to guarantee bundles are handled correctly. */
  transformerFingerprint?: InputMaybe<Scalars["String"]["input"]>
  /** Whether to use the customer's default address. */
  useCustomerDefaultAddress?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether the draft order will be visible to the customer on the self-serve portal. */
  visibleToCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `draftOrderInvoicePreview` mutation. */
export interface ShopifyDraftOrderInvoicePreviewPayload {
  __typename?: "DraftOrderInvoicePreviewPayload"
  /** The draft order invoice email rendered as HTML to allow previewing. */
  previewHtml?: Maybe<Scalars["HTML"]["output"]>
  /** The subject preview for the draft order invoice email. */
  previewSubject?: Maybe<Scalars["HTML"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `draftOrderInvoiceSend` mutation. */
export interface ShopifyDraftOrderInvoiceSendPayload {
  __typename?: "DraftOrderInvoiceSendPayload"
  /** The draft order an invoice email is sent for. */
  draftOrder?: Maybe<ShopifyDraftOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The line item for a draft order. */
export interface ShopifyDraftOrderLineItem extends ShopifyNode {
  __typename?: "DraftOrderLineItem"
  /** The custom applied discount. */
  appliedDiscount?: Maybe<ShopifyDraftOrderAppliedDiscount>
  /**
   * The `discountedTotal` divided by `quantity`,
   * equal to the average value of the line item price per unit after discounts are applied.
   * This value doesn't include discounts applied to the entire draft order.
   */
  approximateDiscountedUnitPriceSet: ShopifyMoneyBag
  /**
   * The list of bundle components if applicable.
   * @deprecated Use `components` instead.
   */
  bundleComponents: Array<ShopifyDraftOrderLineItem>
  /** The components of the draft order line item. */
  components: Array<ShopifyDraftOrderLineItem>
  /** Whether the line item is custom (`true`) or contains a product variant (`false`). */
  custom: Scalars["Boolean"]["output"]
  /** A list of attributes that represent custom features or special requests. */
  customAttributes: Array<ShopifyAttribute>
  /** The list of additional information (metafields) with the associated types. */
  customAttributesV2: Array<ShopifyTypedAttribute>
  /**
   * The line item price, in shop currency, after discounts are applied.
   * @deprecated Use `discountedTotalSet` instead.
   */
  discountedTotal: Scalars["Money"]["output"]
  /** The total price with discounts applied. */
  discountedTotalSet: ShopifyMoneyBag
  /**
   * The `discountedTotal` divided by `quantity`, equal to the value of the discount per unit in the shop currency.
   * @deprecated Use `approximateDiscountedUnitPriceSet` instead.
   */
  discountedUnitPrice: Scalars["Money"]["output"]
  /**
   * The unit price with discounts applied.
   * @deprecated Use `approximateDiscountedUnitPriceSet` instead.
   */
  discountedUnitPriceSet: ShopifyMoneyBag
  /**
   * Name of the service provider who fulfilled the order.
   *
   * Valid values are either **manual** or the name of the provider.
   * For example, **amazon**, **shipwire**.
   *
   * Deleted fulfillment services will return null.
   */
  fulfillmentService?: Maybe<ShopifyFulfillmentService>
  /**
   * The weight of the line item in grams.
   * @deprecated Use `weight` instead.
   */
  grams?: Maybe<Scalars["Int"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The image of the product variant. */
  image?: Maybe<ShopifyImage>
  /** Whether the line item represents the purchase of a gift card. */
  isGiftCard: Scalars["Boolean"]["output"]
  /** The name of the product. */
  name: Scalars["String"]["output"]
  /**
   * The total price, in shop currency, excluding discounts, equal to the original unit price multiplied by quantity.
   * @deprecated Use `originalTotalSet` instead.
   */
  originalTotal: Scalars["Money"]["output"]
  /** The total price excluding discounts, equal to the original unit price multiplied by quantity. */
  originalTotalSet: ShopifyMoneyBag
  /**
   * The price, in shop currency, without any discounts applied.
   * @deprecated Use `originalUnitPriceWithCurrency` instead.
   */
  originalUnitPrice: Scalars["Money"]["output"]
  /** The price without any discounts applied. */
  originalUnitPriceSet: ShopifyMoneyBag
  /** The original custom line item input price. */
  originalUnitPriceWithCurrency?: Maybe<ShopifyMoneyV2>
  /** The price override for the line item. */
  priceOverride?: Maybe<ShopifyMoneyV2>
  /** The product for the line item. */
  product?: Maybe<ShopifyProduct>
  /**
   * The quantity of items. For a bundle item, this is the quantity of bundles,
   * not the quantity of items contained in the bundles themselves.
   */
  quantity: Scalars["Int"]["output"]
  /** Whether physical shipping is required for the variant. */
  requiresShipping: Scalars["Boolean"]["output"]
  /** The SKU number of the product variant. */
  sku?: Maybe<Scalars["String"]["output"]>
  /** A list of tax lines. */
  taxLines: Array<ShopifyTaxLine>
  /** Whether the variant is taxable. */
  taxable: Scalars["Boolean"]["output"]
  /** The title of the product or variant. This field only applies to custom line items. */
  title: Scalars["String"]["output"]
  /**
   * The total discount applied in shop currency.
   * @deprecated Use `totalDiscountSet` instead.
   */
  totalDiscount: Scalars["Money"]["output"]
  /** The total discount amount. */
  totalDiscountSet: ShopifyMoneyBag
  /**
   * The UUID of the draft order line item. Must be unique and consistent across requests.
   * This field is mandatory in order to manipulate drafts with bundles.
   */
  uuid: Scalars["String"]["output"]
  /** The product variant for the line item. */
  variant?: Maybe<ShopifyProductVariant>
  /** The name of the variant. */
  variantTitle?: Maybe<Scalars["String"]["output"]>
  /** The name of the vendor who created the product variant. */
  vendor?: Maybe<Scalars["String"]["output"]>
  /** The weight unit and value. */
  weight?: Maybe<ShopifyWeight>
}

/** The input fields representing the components of a line item. */
export interface ShopifyDraftOrderLineItemComponentInput {
  /** The quantity of the component. */
  quantity: Scalars["Int"]["input"]
  /**
   * The UUID of the component. Must be unique and consistent across requests.
   * This field is mandatory in order to manipulate drafts with parent line items.
   */
  uuid?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of the product variant corresponding to the component. */
  variantId?: InputMaybe<Scalars["ID"]["input"]>
}

/** An auto-generated type for paginating through multiple DraftOrderLineItems. */
export interface ShopifyDraftOrderLineItemConnection {
  __typename?: "DraftOrderLineItemConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyDraftOrderLineItemEdge>
  /** A list of nodes that are contained in DraftOrderLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyDraftOrderLineItem>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one DraftOrderLineItem and a cursor during pagination. */
export interface ShopifyDraftOrderLineItemEdge {
  __typename?: "DraftOrderLineItemEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of DraftOrderLineItemEdge. */
  node: ShopifyDraftOrderLineItem
}

/** The input fields for a line item included in a draft order. */
export interface ShopifyDraftOrderLineItemInput {
  /** The custom discount to be applied. */
  appliedDiscount?: InputMaybe<ShopifyDraftOrderAppliedDiscountInput>
  /** The components of the draft order line item. */
  components?: InputMaybe<Array<ShopifyDraftOrderLineItemComponentInput>>
  /** A generic custom attribute using a key value pair. */
  customAttributes?: InputMaybe<Array<ShopifyAttributeInput>>
  /**
   * If the line item doesn't already have a price override input, setting `generatePriceOverride` to `true` will
   * create a price override from the current price.
   */
  generatePriceOverride?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * The price in presentment currency, without any discounts applied, for a custom line item.
   * If this value is provided, `original_unit_price` will be ignored. This field is ignored when `variantId` is provided.
   * Note: All presentment currencies for a single draft should be the same and match the
   * presentment currency of the draft order.
   */
  originalUnitPriceWithCurrency?: InputMaybe<ShopifyMoneyInput>
  /**
   * The price override for the line item. Should be set in presentment currency.
   *
   * This price will be used in place of the product variant's catalog price in this draft order.
   *
   * If the override's presentment currency doesn't match the draft order's presentment currency, it will be
   * converted over to match the draft order's presentment currency. This will occur if the input is defined in a
   * differing currency, or if some other event causes the draft order's currency to change.
   *
   * Price overrides can't be applied to bundle components. If this line item becomes part of a bundle the price
   * override will be removed. In the case of a cart transform, this may mean that a price override is applied to
   * this line item earlier in its lifecycle, and is removed later when the transform occurs.
   */
  priceOverride?: InputMaybe<ShopifyMoneyInput>
  /** The line item quantity. */
  quantity: Scalars["Int"]["input"]
  /** Whether physical shipping is required for a custom line item. This field is ignored when `variantId` is provided. */
  requiresShipping?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The SKU number for custom line items only. This field is ignored when `variantId` is provided. */
  sku?: InputMaybe<Scalars["String"]["input"]>
  /** Whether the custom line item is taxable. This field is ignored when `variantId` is provided. */
  taxable?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Title of the line item. This field is ignored when `variantId` is provided. */
  title?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The UUID of the draft order line item. Must be unique and consistent across requests.
   * This field is mandatory in order to manipulate drafts with bundles.
   */
  uuid?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The ID of the product variant corresponding to the line item.
   * Must be null for custom line items, otherwise required.
   */
  variantId?: InputMaybe<Scalars["ID"]["input"]>
  /**
   * The weight unit and value inputs for custom line items only.
   * This field is ignored when `variantId` is provided.
   */
  weight?: InputMaybe<ShopifyWeightInput>
}

/** A warning indicating that the market region country code is not supported with Markets. */
export interface ShopifyDraftOrderMarketRegionCountryCodeNotSupportedWarning
  extends ShopifyDraftOrderWarning {
  __typename?: "DraftOrderMarketRegionCountryCodeNotSupportedWarning"
  /** The error code. */
  errorCode: Scalars["String"]["output"]
  /** The input field that the warning applies to. */
  field: Scalars["String"]["output"]
  /** The warning message. */
  message: Scalars["String"]["output"]
}

/** The platform discounts applied to the draft order. */
export interface ShopifyDraftOrderPlatformDiscount {
  __typename?: "DraftOrderPlatformDiscount"
  /** Price reduction allocations across the draft order's lines. */
  allocations: Array<ShopifyDraftOrderPlatformDiscountAllocation>
  /** Whether the discount is an automatic discount. */
  automaticDiscount: Scalars["Boolean"]["output"]
  /** Whether the discount is a buy x get y discount. */
  bxgyDiscount: Scalars["Boolean"]["output"]
  /** If a code-based discount, the code used to add the discount. */
  code?: Maybe<Scalars["String"]["output"]>
  /**
   * The discount class.
   * @deprecated Use `discountClasses` instead.
   */
  discountClass: ShopifyDiscountClass
  /** The discount classes. */
  discountClasses: Array<ShopifyDiscountClass>
  /** The discount node for the platform discount. */
  discountNode?: Maybe<ShopifyDiscountNode>
  /** The ID of the discount. */
  id?: Maybe<Scalars["ID"]["output"]>
  /** Whether the discount is line, order or shipping level. */
  presentationLevel: Scalars["String"]["output"]
  /** The short summary of the discount. */
  shortSummary: Scalars["String"]["output"]
  /** The summary of the discount. */
  summary: Scalars["String"]["output"]
  /** The name of the discount. */
  title: Scalars["String"]["output"]
  /** The discount total amount in shop currency. */
  totalAmount: ShopifyMoneyV2
  /** The amount of money discounted, with values shown in both shop currency and presentment currency. */
  totalAmountPriceSet: ShopifyMoneyBag
}

/** Price reduction allocations across the draft order's lines. */
export interface ShopifyDraftOrderPlatformDiscountAllocation {
  __typename?: "DraftOrderPlatformDiscountAllocation"
  /** The ID of the allocation. */
  id?: Maybe<Scalars["ID"]["output"]>
  /** The quantity of the target being discounted. */
  quantity?: Maybe<Scalars["Int"]["output"]>
  /** Amount of the discount allocated to the target. */
  reductionAmount: ShopifyMoneyV2
  /** Amount of the discount allocated to the target in both shop currency and presentment currency. */
  reductionAmountSet: ShopifyMoneyBag
  /** The element of the draft being discounted. */
  target?: Maybe<ShopifyDraftOrderPlatformDiscountAllocationTarget>
}

/** The element of the draft being discounted. */
export type ShopifyDraftOrderPlatformDiscountAllocationTarget =
  | ShopifyCalculatedDraftOrderLineItem
  | ShopifyDraftOrderLineItem
  | ShopifyShippingLine

/** A shipping rate is an additional cost added to the cost of the products that were ordered. */
export interface ShopifyDraftOrderShippingRate {
  __typename?: "DraftOrderShippingRate"
  /** The code of the shipping rate. */
  code: Scalars["String"]["output"]
  /** Unique identifier for this shipping rate. */
  handle: Scalars["String"]["output"]
  /** The cost associated with the shipping rate. */
  price: ShopifyMoneyV2
  /** The source of the shipping rate. */
  source: Scalars["String"]["output"]
  /** The name of the shipping rate. */
  title: Scalars["String"]["output"]
}

/** The set of valid sort keys for the DraftOrder query. */
export type ShopifyDraftOrderSortKeys =
  /** Sort by the `customer_name` value. */
  | "CUSTOMER_NAME"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `number` value. */
  | "NUMBER"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  /** Sort by the `status` value. */
  | "STATUS"
  /** Sort by the `total_price` value. */
  | "TOTAL_PRICE"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** The valid statuses for a draft order. */
export type ShopifyDraftOrderStatus =
  /** The draft order has been paid. */
  | "COMPLETED"
  /** An invoice for the draft order has been sent to the customer. */
  | "INVOICE_SENT"
  /** The draft order is open. It has not been paid, and an invoice hasn't been sent. */
  | "OPEN"
  | "%future added value"

/** Represents a draft order tag. */
export interface ShopifyDraftOrderTag extends ShopifyNode {
  __typename?: "DraftOrderTag"
  /** Handle of draft order tag. */
  handle: Scalars["String"]["output"]
  /** ID of draft order tag. */
  id: Scalars["ID"]["output"]
  /** Title of draft order tag. */
  title: Scalars["String"]["output"]
}

/** Return type for `draftOrderUpdate` mutation. */
export interface ShopifyDraftOrderUpdatePayload {
  __typename?: "DraftOrderUpdatePayload"
  /** The updated draft order. */
  draftOrder?: Maybe<ShopifyDraftOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** A warning that is displayed to the merchant when a change is made to a draft order. */
export interface ShopifyDraftOrderWarning {
  /** The error code. */
  errorCode: Scalars["String"]["output"]
  /** The input field that the warning applies to. */
  field: Scalars["String"]["output"]
  /** The warning message. */
  message: Scalars["String"]["output"]
}

/** The duty details for a line item. */
export interface ShopifyDuty extends ShopifyNode {
  __typename?: "Duty"
  /** The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty. */
  countryCodeOfOrigin?: Maybe<ShopifyCountryCode>
  /** The harmonized system code of the item used in calculating the duty. */
  harmonizedSystemCode?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The amount of the duty. */
  price: ShopifyMoneyBag
  /** A list of taxes charged on the duty. */
  taxLines: Array<ShopifyTaxLine>
}

/** A sale associated with a duty charge. */
export interface ShopifyDutySale extends ShopifySale {
  __typename?: "DutySale"
  /** The type of order action that the sale represents. */
  actionType: ShopifySaleActionType
  /** The duty for the associated sale. */
  duty: ShopifyDuty
  /** The unique ID for the sale. */
  id: Scalars["ID"]["output"]
  /** The line type assocated with the sale. */
  lineType: ShopifySaleLineType
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars["Int"]["output"]>
  /** All individual taxes associated with the sale. */
  taxes: Array<ShopifySaleTax>
  /** The total sale amount after taxes and discounts. */
  totalAmount: ShopifyMoneyBag
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: ShopifyMoneyBag
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: ShopifyMoneyBag
  /** The total amount of taxes for the sale. */
  totalTaxAmount: ShopifyMoneyBag
}

/** The attribute editable information. */
export interface ShopifyEditableProperty {
  __typename?: "EditableProperty"
  /** Whether the attribute is locked for editing. */
  locked: Scalars["Boolean"]["output"]
  /** The reason the attribute is locked for editing. */
  reason?: Maybe<Scalars["FormattedString"]["output"]>
}

/** The input fields for an email. */
export interface ShopifyEmailInput {
  /** Specifies any bcc recipients for the email. */
  bcc?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** Specifies the email body. */
  body?: InputMaybe<Scalars["String"]["input"]>
  /** Specifies a custom message to include in the email. */
  customMessage?: InputMaybe<Scalars["String"]["input"]>
  /** Specifies the email sender. */
  from?: InputMaybe<Scalars["String"]["input"]>
  /** Specifies the email subject. */
  subject?: InputMaybe<Scalars["String"]["input"]>
  /** Specifies the email recipient. */
  to?: InputMaybe<Scalars["String"]["input"]>
}

/** The shop's entitlements. */
export interface ShopifyEntitlementsType {
  __typename?: "EntitlementsType"
  /** Represents the markets for the shop. */
  markets: ShopifyMarketsType
}

/** An error that occurs during the execution of a server pixel mutation. */
export interface ShopifyErrorsServerPixelUserError
  extends ShopifyDisplayableError {
  __typename?: "ErrorsServerPixelUserError"
  /** The error code. */
  code?: Maybe<ShopifyErrorsServerPixelUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ErrorsServerPixelUserError`. */
export type ShopifyErrorsServerPixelUserErrorCode =
  /** A server pixel already exists for this app and shop. Only one server pixel can exist for any app and shop combination. */
  | "ALREADY_EXISTS"
  /** Server Pixel must be configured with a valid AWS Event Bridge or GCP pub/sub endpoint address to be connected. */
  | "NEEDS_CONFIGURATION_TO_CONNECT"
  /** A server pixel doesn't exist for this app and shop. */
  | "NOT_FOUND"
  /** PubSubProject and PubSubTopic values resulted in an address that is not a valid GCP pub/sub format.Address format should be pubsub://project:topic. */
  | "PUB_SUB_ERROR"
  | "%future added value"

/** An error that occurs during the execution of a web pixel mutation. */
export interface ShopifyErrorsWebPixelUserError
  extends ShopifyDisplayableError {
  __typename?: "ErrorsWebPixelUserError"
  /** The error code. */
  code?: Maybe<ShopifyErrorsWebPixelUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ErrorsWebPixelUserError`. */
export type ShopifyErrorsWebPixelUserErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** The provided settings is not a valid JSON. */
  | "INVALID_CONFIGURATION_JSON"
  /** The provided runtime context is invalid. */
  | "INVALID_RUNTIME_CONTEXT"
  /** The provided settings does not match the expected settings definition on the app. */
  | "INVALID_SETTINGS"
  /** The settings definition of the web pixel extension is in an invalid state on the app. */
  | "INVALID_SETTINGS_DEFINITION"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** No extension found. */
  | "NO_EXTENSION"
  /** The input value is already taken. */
  | "TAKEN"
  /** An error occurred and the web pixel couldnt be deleted. */
  | "UNABLE_TO_DELETE"
  /** An unexpected error occurred. */
  | "UNEXPECTED_ERROR"
  | "%future added value"

/**
 * Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the
 * addition of a product.
 */
export interface ShopifyEvent {
  /** The action that occured. */
  action: Scalars["String"]["output"]
  /** The name of the app that created the event. */
  appTitle?: Maybe<Scalars["String"]["output"]>
  /** Whether the event was created by an app. */
  attributeToApp: Scalars["Boolean"]["output"]
  /** Whether the event was caused by an admin user. */
  attributeToUser: Scalars["Boolean"]["output"]
  /** The date and time when the event was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** Whether the event is critical. */
  criticalAlert: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Human readable text that describes the event. */
  message: Scalars["FormattedString"]["output"]
}

/** Return type for `eventBridgeServerPixelUpdate` mutation. */
export interface ShopifyEventBridgeServerPixelUpdatePayload {
  __typename?: "EventBridgeServerPixelUpdatePayload"
  /** The server pixel as configured by the mutation. */
  serverPixel?: Maybe<ShopifyServerPixel>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyErrorsServerPixelUserError>
}

/** Return type for `eventBridgeWebhookSubscriptionCreate` mutation. */
export interface ShopifyEventBridgeWebhookSubscriptionCreatePayload {
  __typename?: "EventBridgeWebhookSubscriptionCreatePayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
  /** The webhook subscription that was created. */
  webhookSubscription?: Maybe<ShopifyWebhookSubscription>
}

/** The input fields for an EventBridge webhook subscription. */
export interface ShopifyEventBridgeWebhookSubscriptionInput {
  /** The ARN of the EventBridge partner event source. */
  arn?: InputMaybe<Scalars["ARN"]["input"]>
  /** A constraint specified using search syntax that ensures only webhooks that match the specified filter are emitted. See our [guide on filters](https://shopify.dev/docs/apps/build/webhooks/customize/filters) for more details. */
  filter?: InputMaybe<Scalars["String"]["input"]>
  /** The format in which the webhook subscription should send the data. */
  format?: InputMaybe<ShopifyWebhookSubscriptionFormat>
  /** The list of fields to be included in the webhook subscription. Only the fields specified will be included in the webhook payload. If null, then all fields will be included. Learn more about [modifying webhook payloads](https://shopify.dev/docs/apps/build/webhooks/customize/modify_payloads). */
  includeFields?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The list of namespaces for any metafields that should be included in the webhook subscription. */
  metafieldNamespaces?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** A list of identifiers specifying metafields to include in the webhook payload. */
  metafields?: InputMaybe<Array<ShopifyHasMetafieldsMetafieldIdentifierInput>>
}

/** Return type for `eventBridgeWebhookSubscriptionUpdate` mutation. */
export interface ShopifyEventBridgeWebhookSubscriptionUpdatePayload {
  __typename?: "EventBridgeWebhookSubscriptionUpdatePayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
  /** The webhook subscription that was updated. */
  webhookSubscription?: Maybe<ShopifyWebhookSubscription>
}

/** An auto-generated type for paginating through multiple Events. */
export interface ShopifyEventConnection {
  __typename?: "EventConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyEventEdge>
  /** A list of nodes that are contained in EventEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyEvent>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one Event and a cursor during pagination. */
export interface ShopifyEventEdge {
  __typename?: "EventEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of EventEdge. */
  node: ShopifyEvent
}

/** The set of valid sort keys for the Event query. */
export type ShopifyEventSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  | "%future added value"

/** The type of the resource that generated the event. */
export type ShopifyEventSubjectType =
  /** A Article resource generated the event. */
  | "ARTICLE"
  /** A Blog resource generated the event. */
  | "BLOG"
  /** A Collection resource generated the event. */
  | "COLLECTION"
  /** A Comment resource generated the event. */
  | "COMMENT"
  /** A Company resource generated the event. */
  | "COMPANY"
  /** A CompanyLocation resource generated the event. */
  | "COMPANY_LOCATION"
  /** A Customer resource generated the event. */
  | "CUSTOMER"
  /** A DiscountAutomaticBxgy resource generated the event. */
  | "DISCOUNT_AUTOMATIC_BXGY"
  /** A DiscountAutomaticNode resource generated the event. */
  | "DISCOUNT_AUTOMATIC_NODE"
  /** A DiscountCodeNode resource generated the event. */
  | "DISCOUNT_CODE_NODE"
  /** A DiscountNode resource generated the event. */
  | "DISCOUNT_NODE"
  /** A DraftOrder resource generated the event. */
  | "DRAFT_ORDER"
  /** A InventoryTransfer resource generated the event. */
  | "INVENTORY_TRANSFER"
  /** A Order resource generated the event. */
  | "ORDER"
  /** A Page resource generated the event. */
  | "PAGE"
  /** A PriceRule resource generated the event. */
  | "PRICE_RULE"
  /** A Product resource generated the event. */
  | "PRODUCT"
  /** A ProductVariant resource generated the event. */
  | "PRODUCT_VARIANT"
  /**
   * Subject type is not available. This usually means that the subject isn't available in the current
   *         version of the API, using a newer API version may resolve this.
   */
  | "UNKNOWN"
  | "%future added value"

/** An item for exchange. */
export interface ShopifyExchangeLineItem extends ShopifyNode {
  __typename?: "ExchangeLineItem"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * The order line item for the exchange. If the exchange line has been processed multiple times, this will be the first associated line item and won't reflect all processed values.
   * @deprecated Use `lineItems` instead.
   */
  lineItem?: Maybe<ShopifyLineItem>
  /** The order line items for the exchange. */
  lineItems?: Maybe<Array<ShopifyLineItem>>
  /** The quantity of the exchange item that can be processed. */
  processableQuantity: Scalars["Int"]["output"]
  /** The quantity of the exchange item that have been processed. */
  processedQuantity: Scalars["Int"]["output"]
  /** The number of units ordered, including refunded and removed units. */
  quantity: Scalars["Int"]["output"]
  /** The quantity of the exchange item that haven't been processed. */
  unprocessedQuantity: Scalars["Int"]["output"]
  /** The ID of the variant at time of return creation. */
  variantId?: Maybe<Scalars["ID"]["output"]>
}

/** The input fields for an applied discount on a calculated exchange line item. */
export interface ShopifyExchangeLineItemAppliedDiscountInput {
  /** The description of the discount. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /** The value of the discount as a fixed amount or a percentage. */
  value: ShopifyExchangeLineItemAppliedDiscountValueInput
}

/**
 * The input value for an applied discount on a calculated exchange line item.
 * Can either specify the value as a fixed amount or a percentage.
 */
export interface ShopifyExchangeLineItemAppliedDiscountValueInput {
  /** The value of the discount as a fixed amount. */
  amount?: InputMaybe<ShopifyMoneyInput>
  /** The value of the discount as a percentage. */
  percentage?: InputMaybe<Scalars["Float"]["input"]>
}

/** An auto-generated type for paginating through multiple ExchangeLineItems. */
export interface ShopifyExchangeLineItemConnection {
  __typename?: "ExchangeLineItemConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyExchangeLineItemEdge>
  /** A list of nodes that are contained in ExchangeLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyExchangeLineItem>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ExchangeLineItem and a cursor during pagination. */
export interface ShopifyExchangeLineItemEdge {
  __typename?: "ExchangeLineItemEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ExchangeLineItemEdge. */
  node: ShopifyExchangeLineItem
}

/** The input fields for new line items to be added to the order as part of an exchange. */
export interface ShopifyExchangeLineItemInput {
  /** The discount to be applied to the exchange line item. */
  appliedDiscount?: InputMaybe<ShopifyExchangeLineItemAppliedDiscountInput>
  /** The gift card codes associated with the physical gift cards. */
  giftCardCodes?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The quantity of the item to be added. */
  quantity: Scalars["Int"]["input"]
  /** The ID of the product variant to be added to the order as part of an exchange. */
  variantId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The input fields for removing an exchange line item from a return. */
export interface ShopifyExchangeLineItemRemoveFromReturnInput {
  /** The ID of the exchange line item to remove. */
  exchangeLineItemId: Scalars["ID"]["input"]
  /** The quantity of the associated exchange line item to be removed. */
  quantity: Scalars["Int"]["input"]
}

/** An exchange where existing items on an order are returned and new items are added to the order. */
export interface ShopifyExchangeV2 extends ShopifyNode {
  __typename?: "ExchangeV2"
  /** The details of the new items in the exchange. */
  additions: ShopifyExchangeV2Additions
  /** The date and time when the exchange was completed. */
  completedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The date and time when the exchange was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The location where the exchange happened. */
  location?: Maybe<ShopifyLocation>
  /** Mirrored from Admin Exchanges. */
  mirrored: Scalars["Boolean"]["output"]
  /** The text of an optional note that a shop owner can attach to the exchange. */
  note?: Maybe<Scalars["String"]["output"]>
  /** The refunds processed during the exchange. */
  refunds: Array<ShopifyRefund>
  /** The details of the returned items in the exchange. */
  returns: ShopifyExchangeV2Returns
  /** The staff member associated with the exchange. */
  staffMember?: Maybe<ShopifyStaffMember>
  /** The amount of money that was paid or refunded as part of the exchange. */
  totalAmountProcessedSet: ShopifyMoneyBag
  /** The difference in values of the items that were exchanged. */
  totalPriceSet: ShopifyMoneyBag
  /** The order transactions related to the exchange. */
  transactions: Array<ShopifyOrderTransaction>
}

/** New items associated to the exchange. */
export interface ShopifyExchangeV2Additions {
  __typename?: "ExchangeV2Additions"
  /** The list of new items for the exchange. */
  lineItems: Array<ShopifyExchangeV2LineItem>
  /** The subtotal of the items being added, including discounts. */
  subtotalPriceSet: ShopifyMoneyBag
  /** The summary of all taxes of the items being added. */
  taxLines: Array<ShopifyTaxLine>
  /** The total price of the items being added, including discounts and taxes. */
  totalPriceSet: ShopifyMoneyBag
}

/** An auto-generated type for paginating through multiple ExchangeV2s. */
export interface ShopifyExchangeV2Connection {
  __typename?: "ExchangeV2Connection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyExchangeV2Edge>
  /** A list of nodes that are contained in ExchangeV2Edge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyExchangeV2>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ExchangeV2 and a cursor during pagination. */
export interface ShopifyExchangeV2Edge {
  __typename?: "ExchangeV2Edge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ExchangeV2Edge. */
  node: ShopifyExchangeV2
}

/** Contains information about an item in the exchange. */
export interface ShopifyExchangeV2LineItem {
  __typename?: "ExchangeV2LineItem"
  /** A list of attributes that represent custom features or special requests. */
  customAttributes: Array<ShopifyAttribute>
  /** The total line price, in shop and presentment currencies, after discounts are applied. */
  discountedTotalSet: ShopifyMoneyBag
  /**
   * The price, in shop and presentment currencies,
   * of a single variant unit after line item discounts are applied.
   */
  discountedUnitPriceSet: ShopifyMoneyBag
  /**
   * Name of the service provider who fulfilled the order.
   *
   * Valid values are either **manual** or the name of the provider.
   * For example, **amazon**, **shipwire**.
   *
   * Deleted fulfillment services will return null.
   */
  fulfillmentService?: Maybe<ShopifyFulfillmentService>
  /** Indiciates if this line item is a gift card. */
  giftCard: Scalars["Boolean"]["output"]
  /** The gift cards associated with the line item. */
  giftCards: Array<ShopifyGiftCard>
  /** Whether the line item represents the purchase of a gift card. */
  isGiftCard: Scalars["Boolean"]["output"]
  /** The line item associated with this object. */
  lineItem?: Maybe<ShopifyLineItem>
  /** The name of the product. */
  name: Scalars["String"]["output"]
  /** The total price, in shop and presentment currencies, before discounts are applied. */
  originalTotalSet: ShopifyMoneyBag
  /**
   * The price, in shop and presentment currencies,
   * of a single variant unit before line item discounts are applied.
   */
  originalUnitPriceSet: ShopifyMoneyBag
  /** The number of products that were purchased. */
  quantity: Scalars["Int"]["output"]
  /** Whether physical shipping is required for the variant. */
  requiresShipping: Scalars["Boolean"]["output"]
  /** The SKU number of the product variant. */
  sku?: Maybe<Scalars["String"]["output"]>
  /** The TaxLine object connected to this line item. */
  taxLines: Array<ShopifyTaxLine>
  /** Whether the variant is taxable. */
  taxable: Scalars["Boolean"]["output"]
  /** The title of the product or variant. This field only applies to custom line items. */
  title: Scalars["String"]["output"]
  /** The product variant of the line item. */
  variant?: Maybe<ShopifyProductVariant>
  /** The name of the variant. */
  variantTitle?: Maybe<Scalars["String"]["output"]>
  /** The name of the vendor who created the product variant. */
  vendor?: Maybe<Scalars["String"]["output"]>
}

/** Return items associated to the exchange. */
export interface ShopifyExchangeV2Returns {
  __typename?: "ExchangeV2Returns"
  /** The list of return items for the exchange. */
  lineItems: Array<ShopifyExchangeV2LineItem>
  /** The amount of the order-level discount for the items and shipping being returned, which doesn't contain any line item discounts. */
  orderDiscountAmountSet: ShopifyMoneyBag
  /** The amount of money to be refunded for shipping. */
  shippingRefundAmountSet: ShopifyMoneyBag
  /** The subtotal of the items being returned. */
  subtotalPriceSet: ShopifyMoneyBag
  /** The summary of all taxes of the items being returned. */
  taxLines: Array<ShopifyTaxLine>
  /** The amount of money to be refunded for tip. */
  tipRefundAmountSet: ShopifyMoneyBag
  /** The total value of the items being returned. */
  totalPriceSet: ShopifyMoneyBag
}

/** Represents a video hosted outside of Shopify. */
export interface ShopifyExternalVideo
  extends ShopifyFile,
    ShopifyMedia,
    ShopifyNode {
  __typename?: "ExternalVideo"
  /** A word or phrase to describe the contents or the function of a file. */
  alt?: Maybe<Scalars["String"]["output"]>
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The embed URL of the video for the respective host. */
  embedUrl: Scalars["URL"]["output"]
  /**
   * The URL.
   * @deprecated Use `originUrl` instead.
   */
  embeddedUrl: Scalars["URL"]["output"]
  /** Any errors that have occurred on the file. */
  fileErrors: Array<ShopifyFileError>
  /** The status of the file. */
  fileStatus: ShopifyFileStatus
  /** The host of the external video. */
  host: ShopifyMediaHost
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The media content type. */
  mediaContentType: ShopifyMediaContentType
  /** Any errors which have occurred on the media. */
  mediaErrors: Array<ShopifyMediaError>
  /** The warnings attached to the media. */
  mediaWarnings: Array<ShopifyMediaWarning>
  /** The origin URL of the video on the respective host. */
  originUrl: Scalars["URL"]["output"]
  /** The preview image for the media. */
  preview?: Maybe<ShopifyMediaPreviewImage>
  /** Current status of the media. */
  status: ShopifyMediaStatus
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** Requirements that must be met before an app can be installed. */
export interface ShopifyFailedRequirement {
  __typename?: "FailedRequirement"
  /** Action to be taken to resolve a failed requirement, including URL link. */
  action?: Maybe<ShopifyNavigationItem>
  /**
   * A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app
   * encounters when trying to make use of their Shop and its resources.
   */
  message: Scalars["String"]["output"]
}

/** A additional cost, charged by the merchant, on an order. Examples include return shipping fees and restocking fees. */
export interface ShopifyFee {
  /** The unique ID for the Fee. */
  id: Scalars["ID"]["output"]
}

/** A sale associated with a fee. */
export interface ShopifyFeeSale extends ShopifySale {
  __typename?: "FeeSale"
  /** The type of order action that the sale represents. */
  actionType: ShopifySaleActionType
  /** The fee associated with the sale. It can be null if the fee was deleted. */
  fee?: Maybe<ShopifyFee>
  /** The unique ID for the sale. */
  id: Scalars["ID"]["output"]
  /** The line type assocated with the sale. */
  lineType: ShopifySaleLineType
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars["Int"]["output"]>
  /** All individual taxes associated with the sale. */
  taxes: Array<ShopifySaleTax>
  /** The total sale amount after taxes and discounts. */
  totalAmount: ShopifyMoneyBag
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: ShopifyMoneyBag
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: ShopifyMoneyBag
  /** The total amount of taxes for the sale. */
  totalTaxAmount: ShopifyMoneyBag
}

/** A file interface. */
export interface ShopifyFile {
  /** A word or phrase to describe the contents or the function of a file. */
  alt?: Maybe<Scalars["String"]["output"]>
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** Any errors that have occurred on the file. */
  fileErrors: Array<ShopifyFileError>
  /** The status of the file. */
  fileStatus: ShopifyFileStatus
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The preview image for the media. */
  preview?: Maybe<ShopifyMediaPreviewImage>
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** Return type for `fileAcknowledgeUpdateFailed` mutation. */
export interface ShopifyFileAcknowledgeUpdateFailedPayload {
  __typename?: "FileAcknowledgeUpdateFailedPayload"
  /** The updated file(s). */
  files?: Maybe<Array<ShopifyFile>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyFilesUserError>
}

/** An auto-generated type for paginating through multiple Files. */
export interface ShopifyFileConnection {
  __typename?: "FileConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyFileEdge>
  /** A list of nodes that are contained in FileEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyFile>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The possible content types for a file object. */
export type ShopifyFileContentType =
  /** An externally hosted video. */
  | "EXTERNAL_VIDEO"
  /** A Shopify-hosted generic file. */
  | "FILE"
  /** A Shopify-hosted image. */
  | "IMAGE"
  /** A Shopify-hosted 3D model. */
  | "MODEL_3D"
  /** A Shopify-hosted video file. It's recommended to use this type for all video files. */
  | "VIDEO"
  | "%future added value"

/** The input fields that are required to create a file object. */
export interface ShopifyFileCreateInput {
  /** The alt text description of the file for screen readers and accessibility. */
  alt?: InputMaybe<Scalars["String"]["input"]>
  /** The file content type. If omitted, then Shopify will attempt to determine the content type during file processing. */
  contentType?: InputMaybe<ShopifyFileContentType>
  /** How to handle if filename is already in use. */
  duplicateResolutionMode?: InputMaybe<ShopifyFileCreateInputDuplicateResolutionMode>
  /**
   * The name of the file. If provided, then the file is created with the specified filename.
   * If not provided, then the filename from the `originalSource` is used.
   */
  filename?: InputMaybe<Scalars["String"]["input"]>
  /**
   * An external URL (for images only) or a
   * [staged upload URL](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
   */
  originalSource: Scalars["String"]["input"]
}

/** The input fields for handling if filename is already in use. */
export type ShopifyFileCreateInputDuplicateResolutionMode =
  /** Append a UUID if filename is already in use. */
  | "APPEND_UUID"
  /** Raise an error if filename is already in use. */
  | "RAISE_ERROR"
  /** Replace the existing file if filename is already in use. */
  | "REPLACE"
  | "%future added value"

/** Return type for `fileCreate` mutation. */
export interface ShopifyFileCreatePayload {
  __typename?: "FileCreatePayload"
  /** The newly created files. */
  files?: Maybe<Array<ShopifyFile>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyFilesUserError>
}

/** Return type for `fileDelete` mutation. */
export interface ShopifyFileDeletePayload {
  __typename?: "FileDeletePayload"
  /** The IDs of the deleted files. */
  deletedFileIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyFilesUserError>
}

/** An auto-generated type which holds one File and a cursor during pagination. */
export interface ShopifyFileEdge {
  __typename?: "FileEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of FileEdge. */
  node: ShopifyFile
}

/**
 * A file error. This typically occurs when there is an issue with the file itself causing it to fail validation.
 * Check the file before attempting to upload again.
 */
export interface ShopifyFileError {
  __typename?: "FileError"
  /** Code representing the type of error. */
  code: ShopifyFileErrorCode
  /** Additional details regarding the error. */
  details?: Maybe<Scalars["String"]["output"]>
  /** Translated error message. */
  message: Scalars["String"]["output"]
}

/** The error types for a file. */
export type ShopifyFileErrorCode =
  /** File could not be created because a file with the same name already exists. */
  | "DUPLICATE_FILENAME_ERROR"
  /** File could not be created because embed permissions are disabled for this video. */
  | "EXTERNAL_VIDEO_EMBED_DISABLED"
  /** File could not be created because video is either not found or still transcoding. */
  | "EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING"
  /** File could not be created because the external video has an invalid aspect ratio. */
  | "EXTERNAL_VIDEO_INVALID_ASPECT_RATIO"
  /** File could not be created because the external video could not be found. */
  | "EXTERNAL_VIDEO_NOT_FOUND"
  /** File could not be created because the external video is not listed or is private. */
  | "EXTERNAL_VIDEO_UNLISTED"
  /** File could not be created because the cumulative file storage limit would be exceeded. */
  | "FILE_STORAGE_LIMIT_EXCEEDED"
  /** File could not be processed because the source could not be downloaded. */
  | "GENERIC_FILE_DOWNLOAD_FAILURE"
  /** File could not be created because the size is too large. */
  | "GENERIC_FILE_INVALID_SIZE"
  /** File could not be processed because the image could not be downloaded. */
  | "IMAGE_DOWNLOAD_FAILURE"
  /** File could not be processed because the image could not be processed. */
  | "IMAGE_PROCESSING_FAILURE"
  /** File could not be created because the image has an invalid aspect ratio. */
  | "INVALID_IMAGE_ASPECT_RATIO"
  /** File could not be created because the image size is too large. */
  | "INVALID_IMAGE_FILE_SIZE"
  /** File could not be created because the image's resolution exceeds the max limit. */
  | "INVALID_IMAGE_RESOLUTION"
  /** File could not be processed because the signed URL was invalid. */
  | "INVALID_SIGNED_URL"
  /** File timed out because it is currently being modified by another operation. */
  | "MEDIA_TIMEOUT_ERROR"
  /** File could not be created because the model file failed processing. */
  | "MODEL3D_GLB_OUTPUT_CREATION_ERROR"
  /** File could not be created because the model can't be converted to USDZ format. */
  | "MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR"
  /** File could not be created because the model file failed processing. */
  | "MODEL3D_PROCESSING_FAILURE"
  /** File could not be created because the model's thumbnail generation failed. */
  | "MODEL3D_THUMBNAIL_GENERATION_ERROR"
  /** There was an issue while trying to generate a new thumbnail. */
  | "MODEL3D_THUMBNAIL_REGENERATION_ERROR"
  /** Model failed validation. */
  | "MODEL3D_VALIDATION_ERROR"
  /** File error has occurred for an unknown reason. */
  | "UNKNOWN"
  /** File could not be created because the image is an unsupported file type. */
  | "UNSUPPORTED_IMAGE_FILE_TYPE"
  /** File could not be created because it has an invalid file type. */
  | "VIDEO_INVALID_FILETYPE_ERROR"
  /** File could not be created because it does not meet the maximum duration requirement. */
  | "VIDEO_MAX_DURATION_ERROR"
  /** File could not be created because it does not meet the maximum height requirement. */
  | "VIDEO_MAX_HEIGHT_ERROR"
  /** File could not be created because it does not meet the maximum width requirement. */
  | "VIDEO_MAX_WIDTH_ERROR"
  /** File could not be created because the metadata could not be read. */
  | "VIDEO_METADATA_READ_ERROR"
  /** File could not be created because it does not meet the minimum duration requirement. */
  | "VIDEO_MIN_DURATION_ERROR"
  /** File could not be created because it does not meet the minimum height requirement. */
  | "VIDEO_MIN_HEIGHT_ERROR"
  /** File could not be created because it does not meet the minimum width requirement. */
  | "VIDEO_MIN_WIDTH_ERROR"
  /** Video failed validation. */
  | "VIDEO_VALIDATION_ERROR"
  | "%future added value"

/** The input fields required to create or update a file object. */
export interface ShopifyFileSetInput {
  /** The alt text description of the file for screen readers and accessibility. */
  alt?: InputMaybe<Scalars["String"]["input"]>
  /** The file content type. If omitted, then Shopify will attempt to determine the content type during file processing. */
  contentType?: InputMaybe<ShopifyFileContentType>
  /** How to handle if filename is already in use. */
  duplicateResolutionMode?: InputMaybe<ShopifyFileCreateInputDuplicateResolutionMode>
  /**
   * The name of the file. If provided, then the file is created with the specified filename.
   * If not provided, then the filename from the `originalSource` is used.
   */
  filename?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of an existing file. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /**
   * An external URL (for images only) or a
   * [staged upload URL](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
   */
  originalSource?: InputMaybe<Scalars["String"]["input"]>
}

/** The set of valid sort keys for the File query. */
export type ShopifyFileSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `filename` value. */
  | "FILENAME"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `original_upload_size` value. */
  | "ORIGINAL_UPLOAD_SIZE"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** The possible statuses for a file object. */
export type ShopifyFileStatus =
  /** File processing has failed. */
  | "FAILED"
  /** File is being processed. */
  | "PROCESSING"
  /** File is ready to be displayed. */
  | "READY"
  /** File has been uploaded but hasn't been processed. */
  | "UPLOADED"
  | "%future added value"

/** The input fields that are required to update a file object. */
export interface ShopifyFileUpdateInput {
  /** The alt text description of the file for screen readers and accessibility. */
  alt?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the file including its extension. */
  filename?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of the file to be updated. */
  id: Scalars["ID"]["input"]
  /**
   * The source from which to update a media image or generic file.
   * An external URL (for images only) or a
   * [staged upload URL](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
   */
  originalSource?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The source from which to update the media preview image.
   * May be an external URL or a
   * [staged upload URL](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
   */
  previewImageSource?: InputMaybe<Scalars["String"]["input"]>
  /** The IDs of the references to add to the file. Currently only accepts product IDs. */
  referencesToAdd?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The IDs of the references to remove from the file. Currently only accepts product IDs. */
  referencesToRemove?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** Return type for `fileUpdate` mutation. */
export interface ShopifyFileUpdatePayload {
  __typename?: "FileUpdatePayload"
  /** The list of updated files. */
  files?: Maybe<Array<ShopifyFile>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyFilesUserError>
}

/** Possible error codes that can be returned by `FilesUserError`. */
export type ShopifyFilesErrorCode =
  /** The alt value exceeds the maximum limit of 512 characters. */
  | "ALT_VALUE_LIMIT_EXCEEDED"
  /** The search term must not be blank. */
  | "BLANK_SEARCH"
  /** The provided filename already exists. */
  | "FILENAME_ALREADY_EXISTS"
  /** File does not exist. */
  | "FILE_DOES_NOT_EXIST"
  /** File has a pending operation. */
  | "FILE_LOCKED"
  /** The input value is invalid. */
  | "INVALID"
  /** Duplicate resolution mode is not supported for this file type. */
  | "INVALID_DUPLICATE_MODE_FOR_TYPE"
  /** Invalid duplicate resolution mode provided. */
  | "INVALID_DUPLICATE_RESOLUTION_MODE"
  /** File cannot be updated in a failed state. */
  | "INVALID_FAILED_MEDIA_STATE"
  /** The provided filename is invalid. */
  | "INVALID_FILENAME"
  /** Invalid filename extension. */
  | "INVALID_FILENAME_EXTENSION"
  /** Invalid image source url value provided. */
  | "INVALID_IMAGE_SOURCE_URL"
  /** Search query isn't supported. */
  | "INVALID_QUERY"
  /** Cannot create file with custom filename which does not match original source extension. */
  | "MISMATCHED_FILENAME_AND_ORIGINAL_SOURCE"
  /** At least one argument is required. */
  | "MISSING_ARGUMENTS"
  /** Duplicate resolution mode REPLACE cannot be used without specifying filename. */
  | "MISSING_FILENAME_FOR_DUPLICATE_MODE_REPLACE"
  /** Exceeded the limit of non-image media per shop. */
  | "NON_IMAGE_MEDIA_PER_SHOP_LIMIT_EXCEEDED"
  /** The file is not in the READY state. */
  | "NON_READY_STATE"
  /** Exceeded the limit of media per product. */
  | "PRODUCT_MEDIA_LIMIT_EXCEEDED"
  /** One or more associated products are suspended. */
  | "PRODUCT_SUSPENDED"
  /** The target resource does not exist. */
  | "REFERENCE_TARGET_DOES_NOT_EXIST"
  /** Specify one argument: search, IDs, or deleteAll. */
  | "TOO_MANY_ARGUMENTS"
  /** Cannot add more than 10000 references to a file. */
  | "TOO_MANY_FILE_REFERENCE"
  /** The file type is not supported. */
  | "UNACCEPTABLE_ASSET"
  /** The file is not supported on trial accounts. Select a plan to upload this file. */
  | "UNACCEPTABLE_TRIAL_ASSET"
  /** The file is not supported on trial accounts that have not validated their email. Either select a plan or verify the shop owner email to upload this file. */
  | "UNACCEPTABLE_UNVERIFIED_TRIAL_ASSET"
  /** The file type is not supported for referencing. */
  | "UNSUPPORTED_FILE_REFERENCE"
  /** Filename update is only supported on Image and GenericFile. */
  | "UNSUPPORTED_MEDIA_TYPE_FOR_FILENAME_UPDATE"
  | "%future added value"

/** An error that happens during the execution of a Files API query or mutation. */
export interface ShopifyFilesUserError extends ShopifyDisplayableError {
  __typename?: "FilesUserError"
  /** The error code. */
  code?: Maybe<ShopifyFilesErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** A filter option is one possible value in a search filter. */
export interface ShopifyFilterOption {
  __typename?: "FilterOption"
  /** The filter option's label for display purposes. */
  label: Scalars["String"]["output"]
  /** The filter option's value. */
  value: Scalars["String"]["output"]
}

/** Current user's access policy for a finance app. */
export interface ShopifyFinanceAppAccessPolicy {
  __typename?: "FinanceAppAccessPolicy"
  /** Current shop staff's access within the app. */
  access: Array<ShopifyBankingFinanceAppAccess>
}

/** Shopify Payments account information shared with embedded finance applications. */
export interface ShopifyFinanceKycInformation {
  __typename?: "FinanceKycInformation"
  /** The legal entity business address. */
  businessAddress?: Maybe<ShopifyShopifyPaymentsAddressBasic>
  /** The legal entity business type. */
  businessType?: Maybe<ShopifyShopifyPaymentsBusinessType>
  /** Business industry. */
  industry?: Maybe<ShopifyShopifyPaymentsMerchantCategoryCode>
  /** Returns the business legal name. */
  legalName?: Maybe<Scalars["String"]["output"]>
  /** The shop owner information for financial KYC purposes. */
  shopOwner: ShopifyFinancialKycShopOwner
  /** Tax identification information. */
  taxIdentification?: Maybe<ShopifyShopifyPaymentsTaxIdentification>
}

/** Represents the shop owner information for financial KYC purposes. */
export interface ShopifyFinancialKycShopOwner {
  __typename?: "FinancialKycShopOwner"
  /** The email of the shop owner. */
  email: Scalars["String"]["output"]
  /** The first name of the shop owner. */
  firstName?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The last name of the shop owner. */
  lastName?: Maybe<Scalars["String"]["output"]>
  /** The phone number of the shop owner. */
  phone?: Maybe<Scalars["String"]["output"]>
}

/** An amount that's allocated to a line item based on an associated discount application. */
export interface ShopifyFinancialSummaryDiscountAllocation {
  __typename?: "FinancialSummaryDiscountAllocation"
  /** The money amount that's allocated per unit on the associated line based on the discount application in shop and presentment currencies. If the allocated amount for the line cannot be evenly divided by the quantity, then this amount will be an approximate amount, avoiding fractional pennies. For example, if the associated line had a quantity of 3 with a discount of 4 cents, then the discount distribution would be [0.01, 0.01, 0.02]. This field returns the highest number of the distribution. In this example, this would be 0.02. */
  approximateAllocatedAmountPerItem: ShopifyMoneyBag
  /** The discount application that the allocated amount originated from. */
  discountApplication: ShopifyFinancialSummaryDiscountApplication
}

/**
 * Discount applications capture the intentions of a discount source at
 * the time of application on an order's line items or shipping lines.
 */
export interface ShopifyFinancialSummaryDiscountApplication {
  __typename?: "FinancialSummaryDiscountApplication"
  /** The method by which the discount's value is applied to its entitled items. */
  allocationMethod: ShopifyDiscountApplicationAllocationMethod
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: ShopifyDiscountApplicationTargetSelection
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: ShopifyDiscountApplicationTargetType
}

/** Return type for `flowGenerateSignature` mutation. */
export interface ShopifyFlowGenerateSignaturePayload {
  __typename?: "FlowGenerateSignaturePayload"
  /** The payload used to generate the signature. */
  payload?: Maybe<Scalars["String"]["output"]>
  /** The generated signature. */
  signature?: Maybe<Scalars["String"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `flowTriggerReceive` mutation. */
export interface ShopifyFlowTriggerReceivePayload {
  __typename?: "FlowTriggerReceivePayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/**
 * Represents a fulfillment.
 * In Shopify, a fulfillment represents a shipment of one or more items in an order.
 * When an order has been completely fulfilled, it means that all the items that are included
 * in the order have been sent to the customer.
 * There can be more than one fulfillment for an order.
 */
export interface ShopifyFulfillment
  extends ShopifyLegacyInteroperability,
    ShopifyNode {
  __typename?: "Fulfillment"
  /** The date and time when the fulfillment was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The date that this fulfillment was delivered. */
  deliveredAt?: Maybe<Scalars["DateTime"]["output"]>
  /** Human readable display status for this fulfillment. */
  displayStatus?: Maybe<ShopifyFulfillmentDisplayStatus>
  /** The estimated date that this fulfillment will arrive. */
  estimatedDeliveryAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The history of events associated with this fulfillment. */
  events: ShopifyFulfillmentEventConnection
  /** List of the fulfillment's line items. */
  fulfillmentLineItems: ShopifyFulfillmentLineItemConnection
  /** A paginated list of fulfillment orders for the fulfillment. */
  fulfillmentOrders: ShopifyFulfillmentOrderConnection
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The date and time when the fulfillment went into transit. */
  inTransitAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** The location that the fulfillment was processed at. */
  location?: Maybe<ShopifyLocation>
  /** Human readable reference identifier for this fulfillment. */
  name: Scalars["String"]["output"]
  /** The order for which the fulfillment was created. */
  order: ShopifyOrder
  /** The address at which the fulfillment occurred. This field is intended for tax purposes, as a full address is required for tax providers to accurately calculate taxes. Typically this is the address of the warehouse or fulfillment center. To retrieve a fulfillment location's address, use the `assignedLocation` field on the [`FulfillmentOrder`](/docs/api/admin-graphql/latest/objects/FulfillmentOrder) object instead. */
  originAddress?: Maybe<ShopifyFulfillmentOriginAddress>
  /** Whether any of the line items in the fulfillment require shipping. */
  requiresShipping: Scalars["Boolean"]["output"]
  /** Fulfillment service associated with the fulfillment. */
  service?: Maybe<ShopifyFulfillmentService>
  /** The status of the fulfillment. */
  status: ShopifyFulfillmentStatus
  /** Sum of all line item quantities for the fulfillment. */
  totalQuantity: Scalars["Int"]["output"]
  /**
   * Tracking information associated with the fulfillment,
   * such as the tracking company, tracking number, and tracking URL.
   */
  trackingInfo: Array<ShopifyFulfillmentTrackingInfo>
  /** The date and time when the fulfillment was last modified. */
  updatedAt: Scalars["DateTime"]["output"]
}

/**
 * Represents a fulfillment.
 * In Shopify, a fulfillment represents a shipment of one or more items in an order.
 * When an order has been completely fulfilled, it means that all the items that are included
 * in the order have been sent to the customer.
 * There can be more than one fulfillment for an order.
 */
export interface ShopifyFulfillmentEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyFulfillmentEventSortKeys>
}

/**
 * Represents a fulfillment.
 * In Shopify, a fulfillment represents a shipment of one or more items in an order.
 * When an order has been completely fulfilled, it means that all the items that are included
 * in the order have been sent to the customer.
 * There can be more than one fulfillment for an order.
 */
export interface ShopifyFulfillmentFulfillmentLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents a fulfillment.
 * In Shopify, a fulfillment represents a shipment of one or more items in an order.
 * When an order has been completely fulfilled, it means that all the items that are included
 * in the order have been sent to the customer.
 * There can be more than one fulfillment for an order.
 */
export interface ShopifyFulfillmentFulfillmentOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents a fulfillment.
 * In Shopify, a fulfillment represents a shipment of one or more items in an order.
 * When an order has been completely fulfilled, it means that all the items that are included
 * in the order have been sent to the customer.
 * There can be more than one fulfillment for an order.
 */
export interface ShopifyFulfillmentTrackingInfoArgs {
  first?: InputMaybe<Scalars["Int"]["input"]>
}

/** Return type for `fulfillmentCancel` mutation. */
export interface ShopifyFulfillmentCancelPayload {
  __typename?: "FulfillmentCancelPayload"
  /** The canceled fulfillment. */
  fulfillment?: Maybe<ShopifyFulfillment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type for paginating through multiple Fulfillments. */
export interface ShopifyFulfillmentConnection {
  __typename?: "FulfillmentConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyFulfillmentEdge>
  /** A list of nodes that are contained in FulfillmentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyFulfillment>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** A fulfillment constraint rule. */
export interface ShopifyFulfillmentConstraintRule
  extends ShopifyHasMetafields,
    ShopifyNode {
  __typename?: "FulfillmentConstraintRule"
  /** Delivery method types that the function is associated with. */
  deliveryMethodTypes: Array<ShopifyDeliveryMethodType>
  /** The ID for the fulfillment constraint function. */
  function: ShopifyShopifyFunction
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
}

/** A fulfillment constraint rule. */
export interface ShopifyFulfillmentConstraintRuleMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** A fulfillment constraint rule. */
export interface ShopifyFulfillmentConstraintRuleMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `fulfillmentConstraintRuleCreate` mutation. */
export interface ShopifyFulfillmentConstraintRuleCreatePayload {
  __typename?: "FulfillmentConstraintRuleCreatePayload"
  /** The newly created fulfillment constraint rule. */
  fulfillmentConstraintRule?: Maybe<ShopifyFulfillmentConstraintRule>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyFulfillmentConstraintRuleCreateUserError>
}

/** An error that occurs during the execution of `FulfillmentConstraintRuleCreate`. */
export interface ShopifyFulfillmentConstraintRuleCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "FulfillmentConstraintRuleCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyFulfillmentConstraintRuleCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `FulfillmentConstraintRuleCreateUserError`. */
export type ShopifyFulfillmentConstraintRuleCreateUserErrorCode =
  /** Shop must be on a Shopify Plus plan to activate functions from a custom app. */
  | "CUSTOM_APP_FUNCTION_NOT_ELIGIBLE"
  /** A fulfillment constraint rule already exists for the provided function_id. */
  | "FUNCTION_ALREADY_REGISTERED"
  /** Function does not implement the required interface for this fulfillment constraint rule. */
  | "FUNCTION_DOES_NOT_IMPLEMENT"
  /** No Shopify Function found for provided function_id. */
  | "FUNCTION_NOT_FOUND"
  /** Function is pending deletion and cannot have new rules created against it. */
  | "FUNCTION_PENDING_DELETION"
  /** Failed to create fulfillment constraint rule due to invalid input. */
  | "INPUT_INVALID"
  /** Maximum number of fulfillment constraint rules reached. Limit is 10. */
  | "MAXIMUM_FULFILLMENT_CONSTRAINT_RULES_REACHED"
  | "%future added value"

/** Return type for `fulfillmentConstraintRuleDelete` mutation. */
export interface ShopifyFulfillmentConstraintRuleDeletePayload {
  __typename?: "FulfillmentConstraintRuleDeletePayload"
  /** Whether or not the fulfillment constraint rule was successfully deleted. */
  success?: Maybe<Scalars["Boolean"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyFulfillmentConstraintRuleDeleteUserError>
}

/** An error that occurs during the execution of `FulfillmentConstraintRuleDelete`. */
export interface ShopifyFulfillmentConstraintRuleDeleteUserError
  extends ShopifyDisplayableError {
  __typename?: "FulfillmentConstraintRuleDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyFulfillmentConstraintRuleDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `FulfillmentConstraintRuleDeleteUserError`. */
export type ShopifyFulfillmentConstraintRuleDeleteUserErrorCode =
  /** Could not find fulfillment constraint rule for provided id. */
  | "NOT_FOUND"
  /** Unauthorized app scope. */
  | "UNAUTHORIZED_APP_SCOPE"
  | "%future added value"

/** Return type for `fulfillmentConstraintRuleUpdate` mutation. */
export interface ShopifyFulfillmentConstraintRuleUpdatePayload {
  __typename?: "FulfillmentConstraintRuleUpdatePayload"
  /** The updated fulfillment constraint rule. */
  fulfillmentConstraintRule?: Maybe<ShopifyFulfillmentConstraintRule>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyFulfillmentConstraintRuleUpdateUserError>
}

/** An error that occurs during the execution of `FulfillmentConstraintRuleUpdate`. */
export interface ShopifyFulfillmentConstraintRuleUpdateUserError
  extends ShopifyDisplayableError {
  __typename?: "FulfillmentConstraintRuleUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyFulfillmentConstraintRuleUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `FulfillmentConstraintRuleUpdateUserError`. */
export type ShopifyFulfillmentConstraintRuleUpdateUserErrorCode =
  /** Could not find fulfillment constraint rule for provided id. */
  | "NOT_FOUND"
  /** Unauthorized app scope. */
  | "UNAUTHORIZED_APP_SCOPE"
  | "%future added value"

/** Return type for `fulfillmentCreate` mutation. */
export interface ShopifyFulfillmentCreatePayload {
  __typename?: "FulfillmentCreatePayload"
  /** The created fulfillment. */
  fulfillment?: Maybe<ShopifyFulfillment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `fulfillmentCreateV2` mutation. */
export interface ShopifyFulfillmentCreateV2Payload {
  __typename?: "FulfillmentCreateV2Payload"
  /** The created fulfillment. */
  fulfillment?: Maybe<ShopifyFulfillment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The display status of a fulfillment. */
export type ShopifyFulfillmentDisplayStatus =
  /** Displayed as **Attempted delivery**. */
  | "ATTEMPTED_DELIVERY"
  /** Displayed as **Canceled**. */
  | "CANCELED"
  /** Displayed as **Confirmed**. */
  | "CONFIRMED"
  /** Displayed as **Delayed**. */
  | "DELAYED"
  /** Displayed as **Delivered**. */
  | "DELIVERED"
  /** Displayed as **Failure**. */
  | "FAILURE"
  /** Displayed as **Fulfilled**. */
  | "FULFILLED"
  /** Displayed as **In transit**. */
  | "IN_TRANSIT"
  /** Displayed as **Label printed**. */
  | "LABEL_PRINTED"
  /** Displayed as **Label purchased**. */
  | "LABEL_PURCHASED"
  /** Displayed as **Label voided**. */
  | "LABEL_VOIDED"
  /** Displayed as **Marked as fulfilled**. */
  | "MARKED_AS_FULFILLED"
  /** Displayed as **Not delivered**. */
  | "NOT_DELIVERED"
  /** Displayed as **Out for delivery**. */
  | "OUT_FOR_DELIVERY"
  /** Displayed as **Picked up**. */
  | "PICKED_UP"
  /** Displayed as **Ready for pickup**. */
  | "READY_FOR_PICKUP"
  /** Displayed as **Submitted**. */
  | "SUBMITTED"
  | "%future added value"

/** An auto-generated type which holds one Fulfillment and a cursor during pagination. */
export interface ShopifyFulfillmentEdge {
  __typename?: "FulfillmentEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of FulfillmentEdge. */
  node: ShopifyFulfillment
}

/** The fulfillment event that describes the fulfilllment status at a particular time. */
export interface ShopifyFulfillmentEvent extends ShopifyNode {
  __typename?: "FulfillmentEvent"
  /** The street address where this fulfillment event occurred. */
  address1?: Maybe<Scalars["String"]["output"]>
  /** The city where this fulfillment event occurred. */
  city?: Maybe<Scalars["String"]["output"]>
  /** The country where this fulfillment event occurred. */
  country?: Maybe<Scalars["String"]["output"]>
  /** The date and time when the fulfillment event was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The estimated delivery date and time of the fulfillment. */
  estimatedDeliveryAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The time at which this fulfillment event happened. */
  happenedAt: Scalars["DateTime"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The latitude where this fulfillment event occurred. */
  latitude?: Maybe<Scalars["Float"]["output"]>
  /** The longitude where this fulfillment event occurred. */
  longitude?: Maybe<Scalars["Float"]["output"]>
  /** A message associated with this fulfillment event. */
  message?: Maybe<Scalars["String"]["output"]>
  /** The province where this fulfillment event occurred. */
  province?: Maybe<Scalars["String"]["output"]>
  /** The status of this fulfillment event. */
  status: ShopifyFulfillmentEventStatus
  /** The zip code of the location where this fulfillment event occurred. */
  zip?: Maybe<Scalars["String"]["output"]>
}

/** An auto-generated type for paginating through multiple FulfillmentEvents. */
export interface ShopifyFulfillmentEventConnection {
  __typename?: "FulfillmentEventConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyFulfillmentEventEdge>
  /** A list of nodes that are contained in FulfillmentEventEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyFulfillmentEvent>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `fulfillmentEventCreate` mutation. */
export interface ShopifyFulfillmentEventCreatePayload {
  __typename?: "FulfillmentEventCreatePayload"
  /** The created fulfillment event. */
  fulfillmentEvent?: Maybe<ShopifyFulfillmentEvent>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type which holds one FulfillmentEvent and a cursor during pagination. */
export interface ShopifyFulfillmentEventEdge {
  __typename?: "FulfillmentEventEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of FulfillmentEventEdge. */
  node: ShopifyFulfillmentEvent
}

/** The input fields used to create a fulfillment event. */
export interface ShopifyFulfillmentEventInput {
  /** The street address where this fulfillment event occurred. */
  address1?: InputMaybe<Scalars["String"]["input"]>
  /** The city where this fulfillment event occurred. */
  city?: InputMaybe<Scalars["String"]["input"]>
  /** The country where this fulfillment event occurred. */
  country?: InputMaybe<Scalars["String"]["input"]>
  /** The estimated delivery date and time of the fulfillment. */
  estimatedDeliveryAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The ID for the fulfillment that's associated with this fulfillment event. */
  fulfillmentId: Scalars["ID"]["input"]
  /** The time at which this fulfillment event happened. */
  happenedAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The latitude where this fulfillment event occurred. */
  latitude?: InputMaybe<Scalars["Float"]["input"]>
  /** The longitude where this fulfillment event occurred. */
  longitude?: InputMaybe<Scalars["Float"]["input"]>
  /** A message associated with this fulfillment event. */
  message?: InputMaybe<Scalars["String"]["input"]>
  /** The province where this fulfillment event occurred. */
  province?: InputMaybe<Scalars["String"]["input"]>
  /** The status of this fulfillment event. */
  status: ShopifyFulfillmentEventStatus
  /** The zip code of the location where this fulfillment event occurred. */
  zip?: InputMaybe<Scalars["String"]["input"]>
}

/** The set of valid sort keys for the FulfillmentEvent query. */
export type ShopifyFulfillmentEventSortKeys =
  /** Sort by the `happened_at` value. */
  | "HAPPENED_AT"
  /** Sort by the `id` value. */
  | "ID"
  | "%future added value"

/** The status that describes a fulfillment or delivery event. */
export type ShopifyFulfillmentEventStatus =
  /** A delivery was attempted. */
  | "ATTEMPTED_DELIVERY"
  /** The fulfillment is confirmed. This is the default value when no other information is available. */
  | "CONFIRMED"
  /** The fulfillment is delayed. */
  | "DELAYED"
  /** The fulfillment was successfully delivered. */
  | "DELIVERED"
  /** The fulfillment request failed. */
  | "FAILURE"
  /** The fulfillment is in transit. */
  | "IN_TRANSIT"
  /** A purchased shipping label has been printed. */
  | "LABEL_PRINTED"
  /** A shipping label has been purchased. */
  | "LABEL_PURCHASED"
  /** The fulfillment is out for delivery. */
  | "OUT_FOR_DELIVERY"
  /** The fulfillment is ready to be picked up. */
  | "READY_FOR_PICKUP"
  | "%future added value"

/** A fulfillment hold currently applied on a fulfillment order. */
export interface ShopifyFulfillmentHold extends ShopifyNode {
  __typename?: "FulfillmentHold"
  /** The localized reason for the fulfillment hold for display purposes. */
  displayReason: Scalars["String"]["output"]
  /**
   * An identifier an app can use to reference one of many holds it applied to a fulfillment order.
   * This field must be unique among the holds that a single app applies to a single fulfillment order.
   */
  handle?: Maybe<Scalars["String"]["output"]>
  /** The app that created the fulfillment hold. */
  heldByApp?: Maybe<ShopifyApp>
  /** A boolean value that indicates whether the requesting app created the fulfillment hold. */
  heldByRequestingApp: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The reason for the fulfillment hold. */
  reason: ShopifyFulfillmentHoldReason
  /** Additional information about the fulfillment hold reason. */
  reasonNotes?: Maybe<Scalars["String"]["output"]>
}

/** The reason for a fulfillment hold. */
export type ShopifyFulfillmentHoldReason =
  /** The fulfillment hold is applied because payment is pending. */
  | "AWAITING_PAYMENT"
  /** The fulfillment hold is applied because of return items not yet received during an exchange. */
  | "AWAITING_RETURN_ITEMS"
  /** The fulfillment hold is applied because of a high risk of fraud. */
  | "HIGH_RISK_OF_FRAUD"
  /** The fulfillment hold is applied because of an incorrect address. */
  | "INCORRECT_ADDRESS"
  /** The fulfillment hold is applied because inventory is out of stock. */
  | "INVENTORY_OUT_OF_STOCK"
  /** The fulfillment hold is applied because of a post purchase upsell offer. */
  | "ONLINE_STORE_POST_PURCHASE_CROSS_SELL"
  /** The fulfillment hold is applied for another reason. */
  | "OTHER"
  /** The fulfillment hold is applied because of an unknown delivery date. */
  | "UNKNOWN_DELIVERY_DATE"
  | "%future added value"

/** The input fields used to create a fulfillment from fulfillment orders. */
export interface ShopifyFulfillmentInput {
  /**
   * Pairs of `fulfillment_order_id` and `fulfillment_order_line_items` that represent the fulfillment
   * order line items that have to be fulfilled for each fulfillment order.  For any given pair, if the
   * fulfillment order line items are left blank then all the fulfillment order line items of the
   * associated fulfillment order ID will be fulfilled.
   */
  lineItemsByFulfillmentOrder: Array<ShopifyFulfillmentOrderLineItemsInput>
  /**
   * Whether the customer is notified.
   * If `true`, then a notification is sent when the fulfillment is created. The default value is `false`.
   */
  notifyCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Address information about the location from which the order was fulfilled. */
  originAddress?: InputMaybe<ShopifyFulfillmentOriginAddressInput>
  /**
   * The fulfillment's tracking information, including a tracking URL, a tracking number,
   * and the company associated with the fulfillment.
   */
  trackingInfo?: InputMaybe<ShopifyFulfillmentTrackingInput>
}

/** Represents a line item from an order that's included in a fulfillment. */
export interface ShopifyFulfillmentLineItem extends ShopifyNode {
  __typename?: "FulfillmentLineItem"
  /**
   * The total price after discounts are applied.
   * @deprecated Use `discountedTotalSet` instead.
   */
  discountedTotal: Scalars["Money"]["output"]
  /** The total price after discounts are applied in shop and presentment currencies. This value doesn't include order-level discounts. */
  discountedTotalSet: ShopifyMoneyBag
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The associated order's line item. */
  lineItem: ShopifyLineItem
  /**
   * The total price before discounts are applied.
   * @deprecated Use `originalTotalSet` instead.
   */
  originalTotal: Scalars["Money"]["output"]
  /** The total price before discounts are applied in shop and presentment currencies. */
  originalTotalSet: ShopifyMoneyBag
  /** Number of line items in the fulfillment. */
  quantity?: Maybe<Scalars["Int"]["output"]>
}

/** An auto-generated type for paginating through multiple FulfillmentLineItems. */
export interface ShopifyFulfillmentLineItemConnection {
  __typename?: "FulfillmentLineItemConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyFulfillmentLineItemEdge>
  /** A list of nodes that are contained in FulfillmentLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyFulfillmentLineItem>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination. */
export interface ShopifyFulfillmentLineItemEdge {
  __typename?: "FulfillmentLineItemEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of FulfillmentLineItemEdge. */
  node: ShopifyFulfillmentLineItem
}

/**
 * The FulfillmentOrder object represents either an item or a group of items in an
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * that are expected to be fulfilled from the same location.
 * There can be more than one fulfillment order for an
 * [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * at a given location.
 *
 * {{ '/api/reference/fulfillment_order_relationships.png' | image }}
 *
 * Fulfillment orders represent the work which is intended to be done in relation to an order.
 * When fulfillment has started for one or more line items, a
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
 * is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
 *
 * [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
 *
 * > Note:
 * > Shopify creates fulfillment orders automatically when an order is created.
 * > It is not possible to manually create fulfillment orders.
 * >
 * > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
 *
 * ## Retrieving fulfillment orders
 *
 * ### Fulfillment orders from an order
 *
 * All fulfillment orders related to a given order can be retrieved with the
 * [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
 * connection.
 *
 * [API access scopes](#api-access-scopes)
 * govern which fulfillments orders are returned to clients.
 * An API client will only receive a subset of the fulfillment orders which belong to an order
 * if they don't have the necessary access scopes to view all of the fulfillment orders.
 *
 * ### Fulfillment orders assigned to the app for fulfillment
 *
 * Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
 * [assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/2024-07/objects/queryroot#connection-assignedfulfillmentorders)
 * connection.
 * Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
 * should be returned or only those where a merchant has sent a
 * [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
 * and it has yet to be responded to.
 *
 * The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
 * the assigned fulfillment orders.
 *
 * ### All fulfillment orders
 *
 * Apps can retrieve all fulfillment orders with the
 * [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
 * query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
 * which are accessible to the app according to the
 * [fulfillment order access scopes](#api-access-scopes) it was granted with.
 *
 * ## The lifecycle of a fulfillment order
 *
 * ### Fulfillment Order Creation
 *
 * After an order is created, a background worker performs the order routing process which determines
 * which locations will be responsible for fulfilling the purchased items.
 * Once the order routing process is complete, one or more fulfillment orders will be created
 * and assigned to these locations. It is not possible to manually create fulfillment orders.
 *
 * Once a fulfillment order has been created, it will have one of two different lifecycles depending on
 * the type of location which the fulfillment order is assigned to.
 *
 * ### The lifecycle of a fulfillment order at a merchant managed location
 *
 * Fulfillment orders are completed by creating
 * [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
 * Fulfillments represents the work done.
 *
 * For digital products a merchant or an order management app would create a fulfilment once the digital asset
 * has been provisioned.
 * For example, in the case of a digital gift card, a merchant would to do this once
 * the gift card has been activated - before the email has been shipped.
 *
 * On the other hand, for a traditional shipped order,
 * a merchant or an order management app would create a fulfillment after picking and packing the items relating
 * to a fulfillment order, but before the courier has collected the goods.
 *
 * [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
 *
 * ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
 *
 * For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
 * a merchant or an Order Management App can
 * [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
 * to the fulfillment service which operates the location to request that they fulfill the associated items.
 * A fulfillment service has the option to
 * [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
 * or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
 * this fulfillment request.
 *
 * Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
 * or order management app and instead a
 * [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
 * to the fulfillment service.
 *
 * Once a fulfillment service accepts a fulfillment request,
 * then after they are ready to pack items and send them for delivery, they create fulfillments with the
 * [fulfillmentCreate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentCreate)
 * mutation.
 * They can provide tracking information right away or create fulfillments without it and then
 * update the tracking information for fulfillments with the
 * [fulfillmentTrackingInfoUpdate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentTrackingInfoUpdate)
 * mutation.
 *
 * [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
 *
 * ## API access scopes
 *
 * Fulfillment orders are governed by the following API access scopes:
 *
 * * The `read_merchant_managed_fulfillment_orders` and
 *   `write_merchant_managed_fulfillment_orders` access scopes
 *   grant access to fulfillment orders assigned to merchant-managed locations.
 * * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
 *   access scopes are intended for fulfillment services.
 *   These scopes grant access to fulfillment orders assigned to locations that are being managed
 *   by fulfillment services.
 * * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
 *   access scopes grant access to fulfillment orders
 *   assigned to locations managed by other fulfillment services.
 *
 * ### Fulfillment service app access scopes
 *
 * Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
 * and don't have the `*_third_party_fulfillment_orders`
 * or `*_merchant_managed_fulfillment_orders` access scopes.
 * The app will only have access to the fulfillment orders assigned to their location
 * (or multiple locations if the app registers multiple fulfillment services on the shop).
 * The app will not have access to fulfillment orders assigned to merchant-managed locations
 * or locations owned by other fulfillment service apps.
 *
 * ### Order management app access scopes
 *
 * **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
 * `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
 * on behalf of a merchant.
 *
 * If an app combines the functions of an order management app and a fulfillment service,
 * then the app should request all
 * access scopes to manage all assigned and all unassigned fulfillment orders.
 *
 * ## Notifications about fulfillment orders
 *
 * Fulfillment services are required to
 * [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
 * a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
 * whenever a merchant submits a fulfillment or cancellation request.
 *
 * Both merchants and apps can
 * [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * to the
 * [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
 * to be notified whenever fulfillment order related domain events occur.
 *
 * [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
 */
export interface ShopifyFulfillmentOrder extends ShopifyNode {
  __typename?: "FulfillmentOrder"
  /**
   * The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.
   *
   * The fulfillment order's assigned location might change in the following cases:
   *
   * - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
   *   https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
   *   ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
   *   https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
   *   ) field within the mutation's response.
   * - Work on the fulfillment order hasn't yet begun, which means that the fulfillment order has the
   *     [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
   *     [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
   *     [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
   *     status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
   */
  assignedLocation: ShopifyFulfillmentOrderAssignedLocation
  /** ID of the channel that created the order. */
  channelId?: Maybe<Scalars["ID"]["output"]>
  /** Date and time when the fulfillment order was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** Delivery method of this fulfillment order. */
  deliveryMethod?: Maybe<ShopifyDeliveryMethod>
  /** The destination where the items should be sent. */
  destination?: Maybe<ShopifyFulfillmentOrderDestination>
  /** The date and time at which the fulfillment order will be fulfillable. When this date and time is reached, the scheduled fulfillment order is automatically transitioned to open. For example, the `fulfill_at` date for a subscription order might be the 1st of each month, a pre-order `fulfill_at` date would be `nil`, and a standard order `fulfill_at` date would be the order creation date. */
  fulfillAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The latest date and time by which all items in the fulfillment order need to be fulfilled. */
  fulfillBy?: Maybe<Scalars["DateTime"]["output"]>
  /** The fulfillment holds applied on the fulfillment order. */
  fulfillmentHolds: Array<ShopifyFulfillmentHold>
  /** Fulfillment orders eligible for merging with the given fulfillment order. */
  fulfillmentOrdersForMerge: ShopifyFulfillmentOrderConnection
  /** A list of fulfillments for the fulfillment order. */
  fulfillments: ShopifyFulfillmentConnection
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The duties delivery method of this fulfillment order. */
  internationalDuties?: Maybe<ShopifyFulfillmentOrderInternationalDuties>
  /** A list of the fulfillment order's line items. */
  lineItems: ShopifyFulfillmentOrderLineItemConnection
  /** A list of locations that the fulfillment order can potentially move to. */
  locationsForMove: ShopifyFulfillmentOrderLocationForMoveConnection
  /** A list of requests sent by the merchant or an order management app to the fulfillment service for the fulfillment order. */
  merchantRequests: ShopifyFulfillmentOrderMerchantRequestConnection
  /** The order that's associated with the fulfillment order. */
  order: ShopifyOrder
  /** ID of the order that's associated with the fulfillment order. */
  orderId: Scalars["ID"]["output"]
  /**
   * The unique identifier for the order that appears on the order page in the Shopify admin and the <b>Order status</b> page.
   * For example, "#1001", "EN1001", or "1001-A".
   * This value isn't unique across multiple stores.
   */
  orderName: Scalars["String"]["output"]
  /**
   * The date and time when the order was processed.
   * This date and time might not match the date and time when the order was created.
   */
  orderProcessedAt: Scalars["DateTime"]["output"]
  /** The request status of the fulfillment order. */
  requestStatus: ShopifyFulfillmentOrderRequestStatus
  /** The status of the fulfillment order. */
  status: ShopifyFulfillmentOrderStatus
  /** The actions that can be performed on this fulfillment order. */
  supportedActions: Array<ShopifyFulfillmentOrderSupportedAction>
  /** The date and time when the fulfillment order was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/**
 * The FulfillmentOrder object represents either an item or a group of items in an
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * that are expected to be fulfilled from the same location.
 * There can be more than one fulfillment order for an
 * [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * at a given location.
 *
 * {{ '/api/reference/fulfillment_order_relationships.png' | image }}
 *
 * Fulfillment orders represent the work which is intended to be done in relation to an order.
 * When fulfillment has started for one or more line items, a
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
 * is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
 *
 * [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
 *
 * > Note:
 * > Shopify creates fulfillment orders automatically when an order is created.
 * > It is not possible to manually create fulfillment orders.
 * >
 * > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
 *
 * ## Retrieving fulfillment orders
 *
 * ### Fulfillment orders from an order
 *
 * All fulfillment orders related to a given order can be retrieved with the
 * [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
 * connection.
 *
 * [API access scopes](#api-access-scopes)
 * govern which fulfillments orders are returned to clients.
 * An API client will only receive a subset of the fulfillment orders which belong to an order
 * if they don't have the necessary access scopes to view all of the fulfillment orders.
 *
 * ### Fulfillment orders assigned to the app for fulfillment
 *
 * Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
 * [assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/2024-07/objects/queryroot#connection-assignedfulfillmentorders)
 * connection.
 * Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
 * should be returned or only those where a merchant has sent a
 * [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
 * and it has yet to be responded to.
 *
 * The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
 * the assigned fulfillment orders.
 *
 * ### All fulfillment orders
 *
 * Apps can retrieve all fulfillment orders with the
 * [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
 * query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
 * which are accessible to the app according to the
 * [fulfillment order access scopes](#api-access-scopes) it was granted with.
 *
 * ## The lifecycle of a fulfillment order
 *
 * ### Fulfillment Order Creation
 *
 * After an order is created, a background worker performs the order routing process which determines
 * which locations will be responsible for fulfilling the purchased items.
 * Once the order routing process is complete, one or more fulfillment orders will be created
 * and assigned to these locations. It is not possible to manually create fulfillment orders.
 *
 * Once a fulfillment order has been created, it will have one of two different lifecycles depending on
 * the type of location which the fulfillment order is assigned to.
 *
 * ### The lifecycle of a fulfillment order at a merchant managed location
 *
 * Fulfillment orders are completed by creating
 * [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
 * Fulfillments represents the work done.
 *
 * For digital products a merchant or an order management app would create a fulfilment once the digital asset
 * has been provisioned.
 * For example, in the case of a digital gift card, a merchant would to do this once
 * the gift card has been activated - before the email has been shipped.
 *
 * On the other hand, for a traditional shipped order,
 * a merchant or an order management app would create a fulfillment after picking and packing the items relating
 * to a fulfillment order, but before the courier has collected the goods.
 *
 * [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
 *
 * ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
 *
 * For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
 * a merchant or an Order Management App can
 * [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
 * to the fulfillment service which operates the location to request that they fulfill the associated items.
 * A fulfillment service has the option to
 * [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
 * or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
 * this fulfillment request.
 *
 * Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
 * or order management app and instead a
 * [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
 * to the fulfillment service.
 *
 * Once a fulfillment service accepts a fulfillment request,
 * then after they are ready to pack items and send them for delivery, they create fulfillments with the
 * [fulfillmentCreate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentCreate)
 * mutation.
 * They can provide tracking information right away or create fulfillments without it and then
 * update the tracking information for fulfillments with the
 * [fulfillmentTrackingInfoUpdate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentTrackingInfoUpdate)
 * mutation.
 *
 * [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
 *
 * ## API access scopes
 *
 * Fulfillment orders are governed by the following API access scopes:
 *
 * * The `read_merchant_managed_fulfillment_orders` and
 *   `write_merchant_managed_fulfillment_orders` access scopes
 *   grant access to fulfillment orders assigned to merchant-managed locations.
 * * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
 *   access scopes are intended for fulfillment services.
 *   These scopes grant access to fulfillment orders assigned to locations that are being managed
 *   by fulfillment services.
 * * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
 *   access scopes grant access to fulfillment orders
 *   assigned to locations managed by other fulfillment services.
 *
 * ### Fulfillment service app access scopes
 *
 * Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
 * and don't have the `*_third_party_fulfillment_orders`
 * or `*_merchant_managed_fulfillment_orders` access scopes.
 * The app will only have access to the fulfillment orders assigned to their location
 * (or multiple locations if the app registers multiple fulfillment services on the shop).
 * The app will not have access to fulfillment orders assigned to merchant-managed locations
 * or locations owned by other fulfillment service apps.
 *
 * ### Order management app access scopes
 *
 * **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
 * `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
 * on behalf of a merchant.
 *
 * If an app combines the functions of an order management app and a fulfillment service,
 * then the app should request all
 * access scopes to manage all assigned and all unassigned fulfillment orders.
 *
 * ## Notifications about fulfillment orders
 *
 * Fulfillment services are required to
 * [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
 * a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
 * whenever a merchant submits a fulfillment or cancellation request.
 *
 * Both merchants and apps can
 * [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * to the
 * [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
 * to be notified whenever fulfillment order related domain events occur.
 *
 * [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
 */
export interface ShopifyFulfillmentOrderFulfillmentOrdersForMergeArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The FulfillmentOrder object represents either an item or a group of items in an
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * that are expected to be fulfilled from the same location.
 * There can be more than one fulfillment order for an
 * [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * at a given location.
 *
 * {{ '/api/reference/fulfillment_order_relationships.png' | image }}
 *
 * Fulfillment orders represent the work which is intended to be done in relation to an order.
 * When fulfillment has started for one or more line items, a
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
 * is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
 *
 * [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
 *
 * > Note:
 * > Shopify creates fulfillment orders automatically when an order is created.
 * > It is not possible to manually create fulfillment orders.
 * >
 * > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
 *
 * ## Retrieving fulfillment orders
 *
 * ### Fulfillment orders from an order
 *
 * All fulfillment orders related to a given order can be retrieved with the
 * [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
 * connection.
 *
 * [API access scopes](#api-access-scopes)
 * govern which fulfillments orders are returned to clients.
 * An API client will only receive a subset of the fulfillment orders which belong to an order
 * if they don't have the necessary access scopes to view all of the fulfillment orders.
 *
 * ### Fulfillment orders assigned to the app for fulfillment
 *
 * Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
 * [assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/2024-07/objects/queryroot#connection-assignedfulfillmentorders)
 * connection.
 * Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
 * should be returned or only those where a merchant has sent a
 * [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
 * and it has yet to be responded to.
 *
 * The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
 * the assigned fulfillment orders.
 *
 * ### All fulfillment orders
 *
 * Apps can retrieve all fulfillment orders with the
 * [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
 * query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
 * which are accessible to the app according to the
 * [fulfillment order access scopes](#api-access-scopes) it was granted with.
 *
 * ## The lifecycle of a fulfillment order
 *
 * ### Fulfillment Order Creation
 *
 * After an order is created, a background worker performs the order routing process which determines
 * which locations will be responsible for fulfilling the purchased items.
 * Once the order routing process is complete, one or more fulfillment orders will be created
 * and assigned to these locations. It is not possible to manually create fulfillment orders.
 *
 * Once a fulfillment order has been created, it will have one of two different lifecycles depending on
 * the type of location which the fulfillment order is assigned to.
 *
 * ### The lifecycle of a fulfillment order at a merchant managed location
 *
 * Fulfillment orders are completed by creating
 * [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
 * Fulfillments represents the work done.
 *
 * For digital products a merchant or an order management app would create a fulfilment once the digital asset
 * has been provisioned.
 * For example, in the case of a digital gift card, a merchant would to do this once
 * the gift card has been activated - before the email has been shipped.
 *
 * On the other hand, for a traditional shipped order,
 * a merchant or an order management app would create a fulfillment after picking and packing the items relating
 * to a fulfillment order, but before the courier has collected the goods.
 *
 * [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
 *
 * ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
 *
 * For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
 * a merchant or an Order Management App can
 * [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
 * to the fulfillment service which operates the location to request that they fulfill the associated items.
 * A fulfillment service has the option to
 * [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
 * or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
 * this fulfillment request.
 *
 * Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
 * or order management app and instead a
 * [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
 * to the fulfillment service.
 *
 * Once a fulfillment service accepts a fulfillment request,
 * then after they are ready to pack items and send them for delivery, they create fulfillments with the
 * [fulfillmentCreate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentCreate)
 * mutation.
 * They can provide tracking information right away or create fulfillments without it and then
 * update the tracking information for fulfillments with the
 * [fulfillmentTrackingInfoUpdate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentTrackingInfoUpdate)
 * mutation.
 *
 * [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
 *
 * ## API access scopes
 *
 * Fulfillment orders are governed by the following API access scopes:
 *
 * * The `read_merchant_managed_fulfillment_orders` and
 *   `write_merchant_managed_fulfillment_orders` access scopes
 *   grant access to fulfillment orders assigned to merchant-managed locations.
 * * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
 *   access scopes are intended for fulfillment services.
 *   These scopes grant access to fulfillment orders assigned to locations that are being managed
 *   by fulfillment services.
 * * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
 *   access scopes grant access to fulfillment orders
 *   assigned to locations managed by other fulfillment services.
 *
 * ### Fulfillment service app access scopes
 *
 * Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
 * and don't have the `*_third_party_fulfillment_orders`
 * or `*_merchant_managed_fulfillment_orders` access scopes.
 * The app will only have access to the fulfillment orders assigned to their location
 * (or multiple locations if the app registers multiple fulfillment services on the shop).
 * The app will not have access to fulfillment orders assigned to merchant-managed locations
 * or locations owned by other fulfillment service apps.
 *
 * ### Order management app access scopes
 *
 * **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
 * `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
 * on behalf of a merchant.
 *
 * If an app combines the functions of an order management app and a fulfillment service,
 * then the app should request all
 * access scopes to manage all assigned and all unassigned fulfillment orders.
 *
 * ## Notifications about fulfillment orders
 *
 * Fulfillment services are required to
 * [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
 * a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
 * whenever a merchant submits a fulfillment or cancellation request.
 *
 * Both merchants and apps can
 * [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * to the
 * [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
 * to be notified whenever fulfillment order related domain events occur.
 *
 * [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
 */
export interface ShopifyFulfillmentOrderFulfillmentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The FulfillmentOrder object represents either an item or a group of items in an
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * that are expected to be fulfilled from the same location.
 * There can be more than one fulfillment order for an
 * [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * at a given location.
 *
 * {{ '/api/reference/fulfillment_order_relationships.png' | image }}
 *
 * Fulfillment orders represent the work which is intended to be done in relation to an order.
 * When fulfillment has started for one or more line items, a
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
 * is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
 *
 * [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
 *
 * > Note:
 * > Shopify creates fulfillment orders automatically when an order is created.
 * > It is not possible to manually create fulfillment orders.
 * >
 * > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
 *
 * ## Retrieving fulfillment orders
 *
 * ### Fulfillment orders from an order
 *
 * All fulfillment orders related to a given order can be retrieved with the
 * [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
 * connection.
 *
 * [API access scopes](#api-access-scopes)
 * govern which fulfillments orders are returned to clients.
 * An API client will only receive a subset of the fulfillment orders which belong to an order
 * if they don't have the necessary access scopes to view all of the fulfillment orders.
 *
 * ### Fulfillment orders assigned to the app for fulfillment
 *
 * Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
 * [assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/2024-07/objects/queryroot#connection-assignedfulfillmentorders)
 * connection.
 * Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
 * should be returned or only those where a merchant has sent a
 * [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
 * and it has yet to be responded to.
 *
 * The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
 * the assigned fulfillment orders.
 *
 * ### All fulfillment orders
 *
 * Apps can retrieve all fulfillment orders with the
 * [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
 * query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
 * which are accessible to the app according to the
 * [fulfillment order access scopes](#api-access-scopes) it was granted with.
 *
 * ## The lifecycle of a fulfillment order
 *
 * ### Fulfillment Order Creation
 *
 * After an order is created, a background worker performs the order routing process which determines
 * which locations will be responsible for fulfilling the purchased items.
 * Once the order routing process is complete, one or more fulfillment orders will be created
 * and assigned to these locations. It is not possible to manually create fulfillment orders.
 *
 * Once a fulfillment order has been created, it will have one of two different lifecycles depending on
 * the type of location which the fulfillment order is assigned to.
 *
 * ### The lifecycle of a fulfillment order at a merchant managed location
 *
 * Fulfillment orders are completed by creating
 * [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
 * Fulfillments represents the work done.
 *
 * For digital products a merchant or an order management app would create a fulfilment once the digital asset
 * has been provisioned.
 * For example, in the case of a digital gift card, a merchant would to do this once
 * the gift card has been activated - before the email has been shipped.
 *
 * On the other hand, for a traditional shipped order,
 * a merchant or an order management app would create a fulfillment after picking and packing the items relating
 * to a fulfillment order, but before the courier has collected the goods.
 *
 * [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
 *
 * ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
 *
 * For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
 * a merchant or an Order Management App can
 * [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
 * to the fulfillment service which operates the location to request that they fulfill the associated items.
 * A fulfillment service has the option to
 * [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
 * or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
 * this fulfillment request.
 *
 * Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
 * or order management app and instead a
 * [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
 * to the fulfillment service.
 *
 * Once a fulfillment service accepts a fulfillment request,
 * then after they are ready to pack items and send them for delivery, they create fulfillments with the
 * [fulfillmentCreate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentCreate)
 * mutation.
 * They can provide tracking information right away or create fulfillments without it and then
 * update the tracking information for fulfillments with the
 * [fulfillmentTrackingInfoUpdate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentTrackingInfoUpdate)
 * mutation.
 *
 * [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
 *
 * ## API access scopes
 *
 * Fulfillment orders are governed by the following API access scopes:
 *
 * * The `read_merchant_managed_fulfillment_orders` and
 *   `write_merchant_managed_fulfillment_orders` access scopes
 *   grant access to fulfillment orders assigned to merchant-managed locations.
 * * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
 *   access scopes are intended for fulfillment services.
 *   These scopes grant access to fulfillment orders assigned to locations that are being managed
 *   by fulfillment services.
 * * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
 *   access scopes grant access to fulfillment orders
 *   assigned to locations managed by other fulfillment services.
 *
 * ### Fulfillment service app access scopes
 *
 * Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
 * and don't have the `*_third_party_fulfillment_orders`
 * or `*_merchant_managed_fulfillment_orders` access scopes.
 * The app will only have access to the fulfillment orders assigned to their location
 * (or multiple locations if the app registers multiple fulfillment services on the shop).
 * The app will not have access to fulfillment orders assigned to merchant-managed locations
 * or locations owned by other fulfillment service apps.
 *
 * ### Order management app access scopes
 *
 * **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
 * `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
 * on behalf of a merchant.
 *
 * If an app combines the functions of an order management app and a fulfillment service,
 * then the app should request all
 * access scopes to manage all assigned and all unassigned fulfillment orders.
 *
 * ## Notifications about fulfillment orders
 *
 * Fulfillment services are required to
 * [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
 * a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
 * whenever a merchant submits a fulfillment or cancellation request.
 *
 * Both merchants and apps can
 * [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * to the
 * [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
 * to be notified whenever fulfillment order related domain events occur.
 *
 * [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
 */
export interface ShopifyFulfillmentOrderLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The FulfillmentOrder object represents either an item or a group of items in an
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * that are expected to be fulfilled from the same location.
 * There can be more than one fulfillment order for an
 * [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * at a given location.
 *
 * {{ '/api/reference/fulfillment_order_relationships.png' | image }}
 *
 * Fulfillment orders represent the work which is intended to be done in relation to an order.
 * When fulfillment has started for one or more line items, a
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
 * is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
 *
 * [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
 *
 * > Note:
 * > Shopify creates fulfillment orders automatically when an order is created.
 * > It is not possible to manually create fulfillment orders.
 * >
 * > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
 *
 * ## Retrieving fulfillment orders
 *
 * ### Fulfillment orders from an order
 *
 * All fulfillment orders related to a given order can be retrieved with the
 * [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
 * connection.
 *
 * [API access scopes](#api-access-scopes)
 * govern which fulfillments orders are returned to clients.
 * An API client will only receive a subset of the fulfillment orders which belong to an order
 * if they don't have the necessary access scopes to view all of the fulfillment orders.
 *
 * ### Fulfillment orders assigned to the app for fulfillment
 *
 * Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
 * [assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/2024-07/objects/queryroot#connection-assignedfulfillmentorders)
 * connection.
 * Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
 * should be returned or only those where a merchant has sent a
 * [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
 * and it has yet to be responded to.
 *
 * The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
 * the assigned fulfillment orders.
 *
 * ### All fulfillment orders
 *
 * Apps can retrieve all fulfillment orders with the
 * [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
 * query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
 * which are accessible to the app according to the
 * [fulfillment order access scopes](#api-access-scopes) it was granted with.
 *
 * ## The lifecycle of a fulfillment order
 *
 * ### Fulfillment Order Creation
 *
 * After an order is created, a background worker performs the order routing process which determines
 * which locations will be responsible for fulfilling the purchased items.
 * Once the order routing process is complete, one or more fulfillment orders will be created
 * and assigned to these locations. It is not possible to manually create fulfillment orders.
 *
 * Once a fulfillment order has been created, it will have one of two different lifecycles depending on
 * the type of location which the fulfillment order is assigned to.
 *
 * ### The lifecycle of a fulfillment order at a merchant managed location
 *
 * Fulfillment orders are completed by creating
 * [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
 * Fulfillments represents the work done.
 *
 * For digital products a merchant or an order management app would create a fulfilment once the digital asset
 * has been provisioned.
 * For example, in the case of a digital gift card, a merchant would to do this once
 * the gift card has been activated - before the email has been shipped.
 *
 * On the other hand, for a traditional shipped order,
 * a merchant or an order management app would create a fulfillment after picking and packing the items relating
 * to a fulfillment order, but before the courier has collected the goods.
 *
 * [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
 *
 * ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
 *
 * For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
 * a merchant or an Order Management App can
 * [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
 * to the fulfillment service which operates the location to request that they fulfill the associated items.
 * A fulfillment service has the option to
 * [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
 * or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
 * this fulfillment request.
 *
 * Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
 * or order management app and instead a
 * [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
 * to the fulfillment service.
 *
 * Once a fulfillment service accepts a fulfillment request,
 * then after they are ready to pack items and send them for delivery, they create fulfillments with the
 * [fulfillmentCreate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentCreate)
 * mutation.
 * They can provide tracking information right away or create fulfillments without it and then
 * update the tracking information for fulfillments with the
 * [fulfillmentTrackingInfoUpdate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentTrackingInfoUpdate)
 * mutation.
 *
 * [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
 *
 * ## API access scopes
 *
 * Fulfillment orders are governed by the following API access scopes:
 *
 * * The `read_merchant_managed_fulfillment_orders` and
 *   `write_merchant_managed_fulfillment_orders` access scopes
 *   grant access to fulfillment orders assigned to merchant-managed locations.
 * * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
 *   access scopes are intended for fulfillment services.
 *   These scopes grant access to fulfillment orders assigned to locations that are being managed
 *   by fulfillment services.
 * * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
 *   access scopes grant access to fulfillment orders
 *   assigned to locations managed by other fulfillment services.
 *
 * ### Fulfillment service app access scopes
 *
 * Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
 * and don't have the `*_third_party_fulfillment_orders`
 * or `*_merchant_managed_fulfillment_orders` access scopes.
 * The app will only have access to the fulfillment orders assigned to their location
 * (or multiple locations if the app registers multiple fulfillment services on the shop).
 * The app will not have access to fulfillment orders assigned to merchant-managed locations
 * or locations owned by other fulfillment service apps.
 *
 * ### Order management app access scopes
 *
 * **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
 * `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
 * on behalf of a merchant.
 *
 * If an app combines the functions of an order management app and a fulfillment service,
 * then the app should request all
 * access scopes to manage all assigned and all unassigned fulfillment orders.
 *
 * ## Notifications about fulfillment orders
 *
 * Fulfillment services are required to
 * [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
 * a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
 * whenever a merchant submits a fulfillment or cancellation request.
 *
 * Both merchants and apps can
 * [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * to the
 * [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
 * to be notified whenever fulfillment order related domain events occur.
 *
 * [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
 */
export interface ShopifyFulfillmentOrderLocationsForMoveArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  lineItemIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
  locationIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The FulfillmentOrder object represents either an item or a group of items in an
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * that are expected to be fulfilled from the same location.
 * There can be more than one fulfillment order for an
 * [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
 * at a given location.
 *
 * {{ '/api/reference/fulfillment_order_relationships.png' | image }}
 *
 * Fulfillment orders represent the work which is intended to be done in relation to an order.
 * When fulfillment has started for one or more line items, a
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
 * is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
 *
 * [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
 *
 * > Note:
 * > Shopify creates fulfillment orders automatically when an order is created.
 * > It is not possible to manually create fulfillment orders.
 * >
 * > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
 *
 * ## Retrieving fulfillment orders
 *
 * ### Fulfillment orders from an order
 *
 * All fulfillment orders related to a given order can be retrieved with the
 * [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
 * connection.
 *
 * [API access scopes](#api-access-scopes)
 * govern which fulfillments orders are returned to clients.
 * An API client will only receive a subset of the fulfillment orders which belong to an order
 * if they don't have the necessary access scopes to view all of the fulfillment orders.
 *
 * ### Fulfillment orders assigned to the app for fulfillment
 *
 * Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
 * [assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/2024-07/objects/queryroot#connection-assignedfulfillmentorders)
 * connection.
 * Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
 * should be returned or only those where a merchant has sent a
 * [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
 * and it has yet to be responded to.
 *
 * The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
 * the assigned fulfillment orders.
 *
 * ### All fulfillment orders
 *
 * Apps can retrieve all fulfillment orders with the
 * [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
 * query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
 * which are accessible to the app according to the
 * [fulfillment order access scopes](#api-access-scopes) it was granted with.
 *
 * ## The lifecycle of a fulfillment order
 *
 * ### Fulfillment Order Creation
 *
 * After an order is created, a background worker performs the order routing process which determines
 * which locations will be responsible for fulfilling the purchased items.
 * Once the order routing process is complete, one or more fulfillment orders will be created
 * and assigned to these locations. It is not possible to manually create fulfillment orders.
 *
 * Once a fulfillment order has been created, it will have one of two different lifecycles depending on
 * the type of location which the fulfillment order is assigned to.
 *
 * ### The lifecycle of a fulfillment order at a merchant managed location
 *
 * Fulfillment orders are completed by creating
 * [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
 * Fulfillments represents the work done.
 *
 * For digital products a merchant or an order management app would create a fulfilment once the digital asset
 * has been provisioned.
 * For example, in the case of a digital gift card, a merchant would to do this once
 * the gift card has been activated - before the email has been shipped.
 *
 * On the other hand, for a traditional shipped order,
 * a merchant or an order management app would create a fulfillment after picking and packing the items relating
 * to a fulfillment order, but before the courier has collected the goods.
 *
 * [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
 *
 * ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
 *
 * For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
 * a merchant or an Order Management App can
 * [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
 * to the fulfillment service which operates the location to request that they fulfill the associated items.
 * A fulfillment service has the option to
 * [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
 * or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
 * this fulfillment request.
 *
 * Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
 * or order management app and instead a
 * [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
 * to the fulfillment service.
 *
 * Once a fulfillment service accepts a fulfillment request,
 * then after they are ready to pack items and send them for delivery, they create fulfillments with the
 * [fulfillmentCreate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentCreate)
 * mutation.
 * They can provide tracking information right away or create fulfillments without it and then
 * update the tracking information for fulfillments with the
 * [fulfillmentTrackingInfoUpdate](https://shopify.dev/api/admin-graphql/unstable/mutations/fulfillmentTrackingInfoUpdate)
 * mutation.
 *
 * [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
 *
 * ## API access scopes
 *
 * Fulfillment orders are governed by the following API access scopes:
 *
 * * The `read_merchant_managed_fulfillment_orders` and
 *   `write_merchant_managed_fulfillment_orders` access scopes
 *   grant access to fulfillment orders assigned to merchant-managed locations.
 * * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
 *   access scopes are intended for fulfillment services.
 *   These scopes grant access to fulfillment orders assigned to locations that are being managed
 *   by fulfillment services.
 * * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
 *   access scopes grant access to fulfillment orders
 *   assigned to locations managed by other fulfillment services.
 *
 * ### Fulfillment service app access scopes
 *
 * Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
 * and don't have the `*_third_party_fulfillment_orders`
 * or `*_merchant_managed_fulfillment_orders` access scopes.
 * The app will only have access to the fulfillment orders assigned to their location
 * (or multiple locations if the app registers multiple fulfillment services on the shop).
 * The app will not have access to fulfillment orders assigned to merchant-managed locations
 * or locations owned by other fulfillment service apps.
 *
 * ### Order management app access scopes
 *
 * **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
 * `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
 * on behalf of a merchant.
 *
 * If an app combines the functions of an order management app and a fulfillment service,
 * then the app should request all
 * access scopes to manage all assigned and all unassigned fulfillment orders.
 *
 * ## Notifications about fulfillment orders
 *
 * Fulfillment services are required to
 * [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
 * a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
 * whenever a merchant submits a fulfillment or cancellation request.
 *
 * Both merchants and apps can
 * [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * to the
 * [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
 * to be notified whenever fulfillment order related domain events occur.
 *
 * [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
 */
export interface ShopifyFulfillmentOrderMerchantRequestsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  kind?: InputMaybe<ShopifyFulfillmentOrderMerchantRequestKind>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `fulfillmentOrderAcceptCancellationRequest` mutation. */
export interface ShopifyFulfillmentOrderAcceptCancellationRequestPayload {
  __typename?: "FulfillmentOrderAcceptCancellationRequestPayload"
  /** The fulfillment order whose cancellation request was accepted. */
  fulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `fulfillmentOrderAcceptFulfillmentRequest` mutation. */
export interface ShopifyFulfillmentOrderAcceptFulfillmentRequestPayload {
  __typename?: "FulfillmentOrderAcceptFulfillmentRequestPayload"
  /** The fulfillment order whose fulfillment request was accepted. */
  fulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The actions that can be taken on a fulfillment order. */
export type ShopifyFulfillmentOrderAction =
  /** Cancels a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderCancel`. */
  | "CANCEL_FULFILLMENT_ORDER"
  /** Creates a fulfillment for selected line items in the fulfillment order. The corresponding mutation for this action is `fulfillmentCreateV2`. */
  | "CREATE_FULFILLMENT"
  /** Opens an external URL to initiate the fulfillment process outside Shopify. This action should be paired with `FulfillmentOrderSupportedAction.externalUrl`. */
  | "EXTERNAL"
  /** Applies a fulfillment hold on the fulfillment order. The corresponding mutation for this action is `fulfillmentOrderHold`. */
  | "HOLD"
  /** Marks the fulfillment order as open. The corresponding mutation for this action is `fulfillmentOrderOpen`. */
  | "MARK_AS_OPEN"
  /** Merges a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMerge`. */
  | "MERGE"
  /** Moves a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMove`. */
  | "MOVE"
  /** Releases the fulfillment hold on the fulfillment order. The corresponding mutation for this action is `fulfillmentOrderReleaseHold`. */
  | "RELEASE_HOLD"
  /** Sends a cancellation request to the fulfillment service of a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderSubmitCancellationRequest`. */
  | "REQUEST_CANCELLATION"
  /** Sends a request for fulfilling selected line items in a fulfillment order to a fulfillment service. The corresponding mutation for this action is `fulfillmentOrderSubmitFulfillmentRequest`. */
  | "REQUEST_FULFILLMENT"
  /** Splits a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderSplit`. */
  | "SPLIT"
  | "%future added value"

/**
 * The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.
 *
 *  The fulfillment order's assigned location might change in the following cases:
 *
 *   - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
 *     https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
 *     ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
 *     https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
 *     ) field within the mutation's response.
 *
 *   - Work on the fulfillment order has not yet begun, which means that the fulfillment order has the
 *       [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
 *       [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
 *       [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
 *       status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
 *
 * If the [fulfillmentOrderMove](
 * https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
 * ) mutation has moved the fulfillment order's line items to a new location,
 * but hasn't moved the fulfillment order instance itself, then the original fulfillment order's assigned location
 * doesn't change.
 * This happens if the fulfillment order is being split during the move, or if all line items can be moved
 * to an existing fulfillment order at a new location.
 *
 * Once the fulfillment order has been taken into work or canceled,
 * which means that the fulfillment order has the
 * [IN_PROGRESS](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-inprogress),
 * [CLOSED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-closed),
 * [CANCELLED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-cancelled), or
 * [INCOMPLETE](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-incomplete)
 * status, `FulfillmentOrderAssignedLocation` acts as a snapshot of the shop's location content.
 * Up-to-date shop's location data may be queried through [location](
 *   https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderAssignedLocation#field-fulfillmentorderassignedlocation-location
 * ) connection.
 */
export interface ShopifyFulfillmentOrderAssignedLocation {
  __typename?: "FulfillmentOrderAssignedLocation"
  /** The first line of the address for the location. */
  address1?: Maybe<Scalars["String"]["output"]>
  /** The second line of the address for the location. */
  address2?: Maybe<Scalars["String"]["output"]>
  /** The city of the location. */
  city?: Maybe<Scalars["String"]["output"]>
  /** The two-letter country code of the location. */
  countryCode: ShopifyCountryCode
  /**
   * The location where the fulfillment is expected to happen. This value might be different from
   * `FulfillmentOrderAssignedLocation` if the location's attributes were updated
   * after the fulfillment order was taken into work of canceled.
   */
  location?: Maybe<ShopifyLocation>
  /** The name of the location. */
  name: Scalars["String"]["output"]
  /** The phone number of the location. */
  phone?: Maybe<Scalars["String"]["output"]>
  /** The province of the location. */
  province?: Maybe<Scalars["String"]["output"]>
  /** The ZIP code of the location. */
  zip?: Maybe<Scalars["String"]["output"]>
}

/** The assigment status to be used to filter fulfillment orders. */
export type ShopifyFulfillmentOrderAssignmentStatus =
  /**
   * Fulfillment orders for which the merchant has requested cancellation of
   * the previously accepted fulfillment request.
   */
  | "CANCELLATION_REQUESTED"
  /**
   * Fulfillment orders for which the merchant's fulfillment request has been accepted.
   * Any number of fulfillments can be created on these fulfillment orders
   * to completely fulfill the requested items.
   */
  | "FULFILLMENT_ACCEPTED"
  /** Fulfillment orders for which the merchant has requested fulfillment. */
  | "FULFILLMENT_REQUESTED"
  /** Fulfillment orders for which the merchant hasn't yet requested fulfillment. */
  | "FULFILLMENT_UNSUBMITTED"
  | "%future added value"

/** Return type for `fulfillmentOrderCancel` mutation. */
export interface ShopifyFulfillmentOrderCancelPayload {
  __typename?: "FulfillmentOrderCancelPayload"
  /** The fulfillment order that was marked as canceled. */
  fulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /** The fulfillment order that was created to replace the canceled fulfillment order. */
  replacementFulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `fulfillmentOrderClose` mutation. */
export interface ShopifyFulfillmentOrderClosePayload {
  __typename?: "FulfillmentOrderClosePayload"
  /** The fulfillment order that was marked as incomplete. */
  fulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type for paginating through multiple FulfillmentOrders. */
export interface ShopifyFulfillmentOrderConnection {
  __typename?: "FulfillmentOrderConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyFulfillmentOrderEdge>
  /** A list of nodes that are contained in FulfillmentOrderEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyFulfillmentOrder>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Represents the destination where the items should be sent upon fulfillment. */
export interface ShopifyFulfillmentOrderDestination extends ShopifyNode {
  __typename?: "FulfillmentOrderDestination"
  /** The first line of the address of the destination. */
  address1?: Maybe<Scalars["String"]["output"]>
  /** The second line of the address of the destination. */
  address2?: Maybe<Scalars["String"]["output"]>
  /** The city of the destination. */
  city?: Maybe<Scalars["String"]["output"]>
  /** The company of the destination. */
  company?: Maybe<Scalars["String"]["output"]>
  /** The two-letter country code of the destination. */
  countryCode?: Maybe<ShopifyCountryCode>
  /** The email of the customer at the destination. */
  email?: Maybe<Scalars["String"]["output"]>
  /** The first name of the customer at the destination. */
  firstName?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The last name of the customer at the destination. */
  lastName?: Maybe<Scalars["String"]["output"]>
  /** The location designated for the pick-up of the fulfillment order. */
  location?: Maybe<ShopifyLocation>
  /** The phone number of the customer at the destination. */
  phone?: Maybe<Scalars["String"]["output"]>
  /** The province of the destination. */
  province?: Maybe<Scalars["String"]["output"]>
  /** The ZIP code of the destination. */
  zip?: Maybe<Scalars["String"]["output"]>
}

/** An auto-generated type which holds one FulfillmentOrder and a cursor during pagination. */
export interface ShopifyFulfillmentOrderEdge {
  __typename?: "FulfillmentOrderEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of FulfillmentOrderEdge. */
  node: ShopifyFulfillmentOrder
}

/** The input fields for the fulfillment hold applied on the fulfillment order. */
export interface ShopifyFulfillmentOrderHoldInput {
  /** A configurable ID used to track the automation system releasing these holds. */
  externalId?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The fulfillment order line items to be placed on hold.
   *
   * If left blank, all line items of the fulfillment order are placed on hold.
   *
   * Not supported when placing a hold on a fulfillment order that is already held.
   * If supplied when a fulfillment order is already on hold, [a user error](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderHoldUserErrorCode#value-fulfillmentordernotsplittable)
   * will be returned indicating that the fulfillment order is not able to be split.
   */
  fulfillmentOrderLineItems?: InputMaybe<
    Array<ShopifyFulfillmentOrderLineItemInput>
  >
  /**
   * An identifier that an app can use to reference one of the holds that it applies to a
   * fulfillment order.
   *
   * This field must be unique among the holds that a single app applies to a single fulfillment order.
   * It prevents apps from inadvertently creating duplicate holds.
   * This field cannot exceed 64 characters.
   *
   * For example, an app can place multiple holds on a single fulfillment order each with a different `handle`.
   * If an app attempts to place two holds with the same `handle`, the second hold will be rejected with
   * [a duplicate hold user error](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderHoldUserErrorCode#value-duplicatefulfillmentholdhandle).
   * The same `handle` can however be re-used on different fulfillment orders and by different apps.
   *
   * By default, `handle` will be an empty string. If an app wishes to place multiple holds on a single
   * fulfillment order, then a different `handle` must be provided for each.
   */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** Whether the merchant receives a notification about the fulfillment hold. The default value is `false`. */
  notifyMerchant?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The reason for the fulfillment hold. */
  reason: ShopifyFulfillmentHoldReason
  /** Additional information about the fulfillment hold reason. */
  reasonNotes?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `fulfillmentOrderHold` mutation. */
export interface ShopifyFulfillmentOrderHoldPayload {
  __typename?: "FulfillmentOrderHoldPayload"
  /** The fulfillment hold created for the fulfillment order. Null if no hold was created. */
  fulfillmentHold?: Maybe<ShopifyFulfillmentHold>
  /** The fulfillment order on which a fulfillment hold was applied. */
  fulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /**
   * The remaining fulfillment order containing the line items to which the hold wasn't applied,
   * if specific line items were specified to be placed on hold.
   */
  remainingFulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyFulfillmentOrderHoldUserError>
}

/** An error that occurs during the execution of `FulfillmentOrderHold`. */
export interface ShopifyFulfillmentOrderHoldUserError
  extends ShopifyDisplayableError {
  __typename?: "FulfillmentOrderHoldUserError"
  /** The error code. */
  code?: Maybe<ShopifyFulfillmentOrderHoldUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `FulfillmentOrderHoldUserError`. */
export type ShopifyFulfillmentOrderHoldUserErrorCode =
  /** The fulfillment order line items are not unique. */
  | "DUPLICATED_FULFILLMENT_ORDER_LINE_ITEMS"
  /** The handle provided for the fulfillment hold is already in use by this app for another hold on this fulfillment order. */
  | "DUPLICATE_FULFILLMENT_HOLD_HANDLE"
  /** The maximum number of fulfillment holds for this fulfillment order has been reached for this app. An app can only have up to 10 holds on a single fulfillment order at any one time. */
  | "FULFILLMENT_ORDER_HOLD_LIMIT_REACHED"
  /** The fulfillment order could not be found. */
  | "FULFILLMENT_ORDER_NOT_FOUND"
  /** The fulfillment order is not in a splittable state. */
  | "FULFILLMENT_ORDER_NOT_SPLITTABLE"
  /** The fulfillment order line item quantity must be greater than 0. */
  | "GREATER_THAN_ZERO"
  /** The fulfillment order line item quantity is invalid. */
  | "INVALID_LINE_ITEM_QUANTITY"
  /** The input value is already taken. */
  | "TAKEN"
  | "%future added value"

/** The international duties relevant to a fulfillment order. */
export interface ShopifyFulfillmentOrderInternationalDuties {
  __typename?: "FulfillmentOrderInternationalDuties"
  /** The method of duties payment. Example values: `DDP`, `DAP`. */
  incoterm: Scalars["String"]["output"]
}

/** Associates an order line item with quantities requiring fulfillment from the respective fulfillment order. */
export interface ShopifyFulfillmentOrderLineItem extends ShopifyNode {
  __typename?: "FulfillmentOrderLineItem"
  /** The financial summary for the Fulfillment Order's Line Items. */
  financialSummaries: Array<ShopifyFulfillmentOrderLineItemFinancialSummary>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The image associated to the line item's variant. */
  image?: Maybe<ShopifyImage>
  /** The ID of the inventory item. */
  inventoryItemId?: Maybe<Scalars["ID"]["output"]>
  /** The associated order line item. */
  lineItem: ShopifyLineItem
  /**
   * The variant unit price without discounts applied, in shop and presentment currencies.
   * @deprecated Use `financialSummaries` instead.
   */
  originalUnitPriceSet: ShopifyMoneyBag
  /** The title of the product. */
  productTitle: Scalars["String"]["output"]
  /** The number of units remaining to be fulfilled. */
  remainingQuantity: Scalars["Int"]["output"]
  /** Whether physical shipping is required for the variant. */
  requiresShipping: Scalars["Boolean"]["output"]
  /** The variant SKU number. */
  sku?: Maybe<Scalars["String"]["output"]>
  /** The total number of units to be fulfilled. */
  totalQuantity: Scalars["Int"]["output"]
  /** The product variant associated to the fulfillment order line item. */
  variant?: Maybe<ShopifyProductVariant>
  /** The name of the variant. */
  variantTitle?: Maybe<Scalars["String"]["output"]>
  /** The name of the vendor who made the variant. */
  vendor?: Maybe<Scalars["String"]["output"]>
  /** Warning messages for a fulfillment order line item. */
  warnings: Array<ShopifyFulfillmentOrderLineItemWarning>
  /** The weight of a line item unit. */
  weight?: Maybe<ShopifyWeight>
}

/** An auto-generated type for paginating through multiple FulfillmentOrderLineItems. */
export interface ShopifyFulfillmentOrderLineItemConnection {
  __typename?: "FulfillmentOrderLineItemConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyFulfillmentOrderLineItemEdge>
  /** A list of nodes that are contained in FulfillmentOrderLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyFulfillmentOrderLineItem>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination. */
export interface ShopifyFulfillmentOrderLineItemEdge {
  __typename?: "FulfillmentOrderLineItemEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of FulfillmentOrderLineItemEdge. */
  node: ShopifyFulfillmentOrderLineItem
}

/** The financial details of a fulfillment order line item. */
export interface ShopifyFulfillmentOrderLineItemFinancialSummary {
  __typename?: "FulfillmentOrderLineItemFinancialSummary"
  /** The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.For the full picture of applied discounts, see discountAllocations. */
  approximateDiscountedUnitPriceSet: ShopifyMoneyBag
  /** The discounts that have been allocated onto the line item by discount applications, not including order edits and refunds. */
  discountAllocations: Array<ShopifyFinancialSummaryDiscountAllocation>
  /** The variant unit price without discounts applied, in shop and presentment currencies. */
  originalUnitPriceSet: ShopifyMoneyBag
  /** Number of line items that this financial summary applies to. */
  quantity: Scalars["Int"]["output"]
}

/** The input fields used to include the quantity of the fulfillment order line item that should be fulfilled. */
export interface ShopifyFulfillmentOrderLineItemInput {
  /** The ID of the fulfillment order line item. */
  id: Scalars["ID"]["input"]
  /** The quantity of the fulfillment order line item. */
  quantity: Scalars["Int"]["input"]
}

/** A fulfillment order line item warning. For example, a warning about why a fulfillment request was rejected. */
export interface ShopifyFulfillmentOrderLineItemWarning {
  __typename?: "FulfillmentOrderLineItemWarning"
  /** The description of warning. */
  description?: Maybe<Scalars["String"]["output"]>
  /** The title of warning. */
  title?: Maybe<Scalars["String"]["output"]>
}

/** The input fields used to include the line items of a specified fulfillment order that should be fulfilled. */
export interface ShopifyFulfillmentOrderLineItemsInput {
  /** The ID of the fulfillment order. */
  fulfillmentOrderId: Scalars["ID"]["input"]
  /**
   * The fulfillment order line items to be fulfilled.
   * If left blank, all line items of the fulfillment order will be fulfilled.
   */
  fulfillmentOrderLineItems?: InputMaybe<
    Array<ShopifyFulfillmentOrderLineItemInput>
  >
}

/** The input fields for marking fulfillment order line items as ready for pickup. */
export interface ShopifyFulfillmentOrderLineItemsPreparedForPickupInput {
  /** The fulfillment orders associated with the line items which are ready to be picked up by a customer. */
  lineItemsByFulfillmentOrder: Array<ShopifyPreparedFulfillmentOrderLineItemsInput>
}

/** Return type for `fulfillmentOrderLineItemsPreparedForPickup` mutation. */
export interface ShopifyFulfillmentOrderLineItemsPreparedForPickupPayload {
  __typename?: "FulfillmentOrderLineItemsPreparedForPickupPayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyFulfillmentOrderLineItemsPreparedForPickupUserError>
}

/** An error that occurs during the execution of `FulfillmentOrderLineItemsPreparedForPickup`. */
export interface ShopifyFulfillmentOrderLineItemsPreparedForPickupUserError
  extends ShopifyDisplayableError {
  __typename?: "FulfillmentOrderLineItemsPreparedForPickupUserError"
  /** The error code. */
  code?: Maybe<ShopifyFulfillmentOrderLineItemsPreparedForPickupUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `FulfillmentOrderLineItemsPreparedForPickupUserError`. */
export type ShopifyFulfillmentOrderLineItemsPreparedForPickupUserErrorCode =
  /** Invalid fulfillment order ID provided. */
  | "FULFILLMENT_ORDER_INVALID"
  /** The fulfillment order does not have any line items that can be prepared. */
  | "NO_LINE_ITEMS_TO_PREPARE_FOR_FULFILLMENT_ORDER"
  /** Unable to prepare quantity. */
  | "UNABLE_TO_PREPARE_QUANTITY"
  | "%future added value"

/** A location that a fulfillment order can potentially move to. */
export interface ShopifyFulfillmentOrderLocationForMove {
  __typename?: "FulfillmentOrderLocationForMove"
  /** Fulfillment order line items that can be moved from their current location to the given location. */
  availableLineItems: ShopifyFulfillmentOrderLineItemConnection
  /**
   * Total number of fulfillment order line items that can be moved from their current assigned location to the
   * given location.
   */
  availableLineItemsCount?: Maybe<ShopifyCount>
  /** The location being considered as the fulfillment order's new assigned location. */
  location: ShopifyLocation
  /**
   * A human-readable string with the reason why the fulfillment order, or some of its line items, can't be
   * moved to the location.
   */
  message?: Maybe<Scalars["String"]["output"]>
  /** Whether the fulfillment order can be moved to the location. */
  movable: Scalars["Boolean"]["output"]
  /** Fulfillment order line items that cannot be moved from their current location to the given location. */
  unavailableLineItems: ShopifyFulfillmentOrderLineItemConnection
  /**
   * Total number of fulfillment order line items that can't be moved from their current assigned location to the
   * given location.
   */
  unavailableLineItemsCount?: Maybe<ShopifyCount>
}

/** A location that a fulfillment order can potentially move to. */
export interface ShopifyFulfillmentOrderLocationForMoveAvailableLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A location that a fulfillment order can potentially move to. */
export interface ShopifyFulfillmentOrderLocationForMoveUnavailableLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple FulfillmentOrderLocationForMoves. */
export interface ShopifyFulfillmentOrderLocationForMoveConnection {
  __typename?: "FulfillmentOrderLocationForMoveConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyFulfillmentOrderLocationForMoveEdge>
  /** A list of nodes that are contained in FulfillmentOrderLocationForMoveEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyFulfillmentOrderLocationForMove>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination. */
export interface ShopifyFulfillmentOrderLocationForMoveEdge {
  __typename?: "FulfillmentOrderLocationForMoveEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of FulfillmentOrderLocationForMoveEdge. */
  node: ShopifyFulfillmentOrderLocationForMove
}

/**
 * A request made by the merchant or an order management app to a fulfillment service
 * for a fulfillment order.
 */
export interface ShopifyFulfillmentOrderMerchantRequest extends ShopifyNode {
  __typename?: "FulfillmentOrderMerchantRequest"
  /** The fulfillment order associated with the merchant request. */
  fulfillmentOrder: ShopifyFulfillmentOrder
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The kind of request made. */
  kind: ShopifyFulfillmentOrderMerchantRequestKind
  /** The optional message that the merchant included in the request. */
  message?: Maybe<Scalars["String"]["output"]>
  /**
   * Additional options requested by the merchant. These depend on the `kind` of the request.
   * For example, for a `FULFILLMENT_REQUEST`, one option is `notify_customer`, which indicates whether the
   * merchant intends to notify the customer upon fulfillment. The fulfillment service can then set
   * `notifyCustomer` when making calls to `FulfillmentCreate`.
   */
  requestOptions?: Maybe<Scalars["JSON"]["output"]>
  /** The response from the fulfillment service. */
  responseData?: Maybe<Scalars["JSON"]["output"]>
  /** The timestamp when the request was made. */
  sentAt: Scalars["DateTime"]["output"]
}

/** An auto-generated type for paginating through multiple FulfillmentOrderMerchantRequests. */
export interface ShopifyFulfillmentOrderMerchantRequestConnection {
  __typename?: "FulfillmentOrderMerchantRequestConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyFulfillmentOrderMerchantRequestEdge>
  /** A list of nodes that are contained in FulfillmentOrderMerchantRequestEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyFulfillmentOrderMerchantRequest>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination. */
export interface ShopifyFulfillmentOrderMerchantRequestEdge {
  __typename?: "FulfillmentOrderMerchantRequestEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of FulfillmentOrderMerchantRequestEdge. */
  node: ShopifyFulfillmentOrderMerchantRequest
}

/** The kinds of request merchants can make to a fulfillment service. */
export type ShopifyFulfillmentOrderMerchantRequestKind =
  /** The merchant requests cancellation of an `IN_PROGRESS` fulfillment order. */
  | "CANCELLATION_REQUEST"
  /** The merchant requests fulfillment for an `OPEN` fulfillment order. */
  | "FULFILLMENT_REQUEST"
  | "%future added value"

/** The input fields for merging fulfillment orders. */
export interface ShopifyFulfillmentOrderMergeInput {
  /** The details of the fulfillment orders to be merged. */
  mergeIntents: Array<ShopifyFulfillmentOrderMergeInputMergeIntent>
}

/** The input fields for merging fulfillment orders into a single merged fulfillment order. */
export interface ShopifyFulfillmentOrderMergeInputMergeIntent {
  /** The ID of the fulfillment order to be merged. */
  fulfillmentOrderId: Scalars["ID"]["input"]
  /** The fulfillment order line items to be merged. */
  fulfillmentOrderLineItems?: InputMaybe<
    Array<ShopifyFulfillmentOrderLineItemInput>
  >
}

/** Return type for `fulfillmentOrderMerge` mutation. */
export interface ShopifyFulfillmentOrderMergePayload {
  __typename?: "FulfillmentOrderMergePayload"
  /** The result of the fulfillment order merges. */
  fulfillmentOrderMerges?: Maybe<Array<ShopifyFulfillmentOrderMergeResult>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyFulfillmentOrderMergeUserError>
}

/** The result of merging a set of fulfillment orders. */
export interface ShopifyFulfillmentOrderMergeResult {
  __typename?: "FulfillmentOrderMergeResult"
  /** The new fulfillment order as a result of the merge. */
  fulfillmentOrder: ShopifyFulfillmentOrder
}

/** An error that occurs during the execution of `FulfillmentOrderMerge`. */
export interface ShopifyFulfillmentOrderMergeUserError
  extends ShopifyDisplayableError {
  __typename?: "FulfillmentOrderMergeUserError"
  /** The error code. */
  code?: Maybe<ShopifyFulfillmentOrderMergeUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `FulfillmentOrderMergeUserError`. */
export type ShopifyFulfillmentOrderMergeUserErrorCode =
  /** The fulfillment order could not be found. */
  | "FULFILLMENT_ORDER_NOT_FOUND"
  /** The fulfillment order line item quantity must be greater than 0. */
  | "GREATER_THAN"
  /** The fulfillment order line item quantity is invalid. */
  | "INVALID_LINE_ITEM_QUANTITY"
  | "%future added value"

/** Return type for `fulfillmentOrderMove` mutation. */
export interface ShopifyFulfillmentOrderMovePayload {
  __typename?: "FulfillmentOrderMovePayload"
  /**
   * The fulfillment order which now contains the moved line items and is assigned to the destination location.
   *
   * If the original fulfillment order doesn't have any line items which are fully or partially fulfilled, the original fulfillment order will be moved to the new location.
   * However if this isn't the case, the moved fulfillment order will differ from the original one.
   */
  movedFulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /**
   * The final state of the original fulfillment order.
   *
   * As a result of the move operation, the original fulfillment order might be moved to the new location
   * or remain in the original location. The original fulfillment order might have the same status or be closed.
   */
  originalFulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /** This field is deprecated. */
  remainingFulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `fulfillmentOrderOpen` mutation. */
export interface ShopifyFulfillmentOrderOpenPayload {
  __typename?: "FulfillmentOrderOpenPayload"
  /** The fulfillment order that was transitioned to open and is fulfillable. */
  fulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `fulfillmentOrderRejectCancellationRequest` mutation. */
export interface ShopifyFulfillmentOrderRejectCancellationRequestPayload {
  __typename?: "FulfillmentOrderRejectCancellationRequestPayload"
  /** The fulfillment order whose cancellation request was rejected. */
  fulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `fulfillmentOrderRejectFulfillmentRequest` mutation. */
export interface ShopifyFulfillmentOrderRejectFulfillmentRequestPayload {
  __typename?: "FulfillmentOrderRejectFulfillmentRequestPayload"
  /** The fulfillment order whose fulfillment request was rejected. */
  fulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The reason for a fulfillment order rejection. */
export type ShopifyFulfillmentOrderRejectionReason =
  /** The fulfillment order was rejected because of an incorrect address. */
  | "INCORRECT_ADDRESS"
  /** The fulfillment order was rejected because product information is incorrect to be able to ship. */
  | "INCORRECT_PRODUCT_INFO"
  /** The fulfillment order was rejected because of an ineligible product. */
  | "INELIGIBLE_PRODUCT"
  /** The fulfillment order was rejected because international address shipping hasn't been enabled. */
  | "INTERNATIONAL_SHIPPING_UNAVAILABLE"
  /** The fulfillment order was rejected because of invalid customer contact information. */
  | "INVALID_CONTACT_INFORMATION"
  /** The fulfillment order was rejected because of an invalid SKU. */
  | "INVALID_SKU"
  /** The fulfillment order was rejected because inventory is out of stock. */
  | "INVENTORY_OUT_OF_STOCK"
  /** The fulfillment order was rejected because the merchant is blocked or suspended. */
  | "MERCHANT_BLOCKED_OR_SUSPENDED"
  /** The fulfillment order was rejected because customs information was missing for international shipping. */
  | "MISSING_CUSTOMS_INFO"
  /** The fulfillment order was rejected because the order is too large. */
  | "ORDER_TOO_LARGE"
  /** The fulfillment order was rejected for another reason. */
  | "OTHER"
  /** The fulfillment order was rejected because the package preference was not set. */
  | "PACKAGE_PREFERENCE_NOT_SET"
  /** The fulfillment order was rejected because the payment method was declined. */
  | "PAYMENT_DECLINED"
  /** The fulfillment order was rejected because of an undeliverable destination. */
  | "UNDELIVERABLE_DESTINATION"
  | "%future added value"

/** Return type for `fulfillmentOrderReleaseHold` mutation. */
export interface ShopifyFulfillmentOrderReleaseHoldPayload {
  __typename?: "FulfillmentOrderReleaseHoldPayload"
  /** The fulfillment order on which the hold was released. */
  fulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyFulfillmentOrderReleaseHoldUserError>
}

/** An error that occurs during the execution of `FulfillmentOrderReleaseHold`. */
export interface ShopifyFulfillmentOrderReleaseHoldUserError
  extends ShopifyDisplayableError {
  __typename?: "FulfillmentOrderReleaseHoldUserError"
  /** The error code. */
  code?: Maybe<ShopifyFulfillmentOrderReleaseHoldUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `FulfillmentOrderReleaseHoldUserError`. */
export type ShopifyFulfillmentOrderReleaseHoldUserErrorCode =
  /** The fulfillment order wasn't found. */
  | "FULFILLMENT_ORDER_NOT_FOUND"
  /** The app doesn't have access to release the fulfillment hold. */
  | "INVALID_ACCESS"
  | "%future added value"

/** The request status of a fulfillment order. */
export type ShopifyFulfillmentOrderRequestStatus =
  /** The fulfillment service accepted the merchant's fulfillment request. */
  | "ACCEPTED"
  /** The fulfillment service accepted the merchant's fulfillment cancellation request. */
  | "CANCELLATION_ACCEPTED"
  /** The fulfillment service rejected the merchant's fulfillment cancellation request. */
  | "CANCELLATION_REJECTED"
  /** The merchant requested a cancellation of the fulfillment request for this fulfillment order. */
  | "CANCELLATION_REQUESTED"
  /** The fulfillment service closed the fulfillment order without completing it. */
  | "CLOSED"
  /** The fulfillment service rejected the merchant's fulfillment request. */
  | "REJECTED"
  /** The merchant requested fulfillment for this fulfillment order. */
  | "SUBMITTED"
  /**
   * The initial request status for the newly-created fulfillment orders. This is the only valid
   * request status for fulfillment orders that aren't assigned to a fulfillment service.
   */
  | "UNSUBMITTED"
  | "%future added value"

/** Return type for `fulfillmentOrderReschedule` mutation. */
export interface ShopifyFulfillmentOrderReschedulePayload {
  __typename?: "FulfillmentOrderReschedulePayload"
  /**
   * A fulfillment order with the rescheduled line items.
   *
   * Fulfillment orders may be merged if they have the same `fulfillAt` datetime.
   *
   * If the fulfillment order is merged then the resulting fulfillment order will be returned.
   * Otherwise the original fulfillment order will be returned with an updated `fulfillAt` datetime.
   */
  fulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyFulfillmentOrderRescheduleUserError>
}

/** An error that occurs during the execution of `FulfillmentOrderReschedule`. */
export interface ShopifyFulfillmentOrderRescheduleUserError
  extends ShopifyDisplayableError {
  __typename?: "FulfillmentOrderRescheduleUserError"
  /** The error code. */
  code?: Maybe<ShopifyFulfillmentOrderRescheduleUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `FulfillmentOrderRescheduleUserError`. */
export type ShopifyFulfillmentOrderRescheduleUserErrorCode =
  /** Fulfillment order could not be found. */
  "FULFILLMENT_ORDER_NOT_FOUND" | "%future added value"

/** The set of valid sort keys for the FulfillmentOrder query. */
export type ShopifyFulfillmentOrderSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** The input fields for the split applied to the fulfillment order. */
export interface ShopifyFulfillmentOrderSplitInput {
  /** The ID of the fulfillment order to be split. */
  fulfillmentOrderId: Scalars["ID"]["input"]
  /** The fulfillment order line items to be split out. */
  fulfillmentOrderLineItems: Array<ShopifyFulfillmentOrderLineItemInput>
}

/** Return type for `fulfillmentOrderSplit` mutation. */
export interface ShopifyFulfillmentOrderSplitPayload {
  __typename?: "FulfillmentOrderSplitPayload"
  /** The result of the fulfillment order splits. */
  fulfillmentOrderSplits?: Maybe<Array<ShopifyFulfillmentOrderSplitResult>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyFulfillmentOrderSplitUserError>
}

/** The result of splitting a fulfillment order. */
export interface ShopifyFulfillmentOrderSplitResult {
  __typename?: "FulfillmentOrderSplitResult"
  /** The original fulfillment order as a result of the split. */
  fulfillmentOrder: ShopifyFulfillmentOrder
  /** The remaining fulfillment order as a result of the split. */
  remainingFulfillmentOrder: ShopifyFulfillmentOrder
  /** The replacement fulfillment order if the original fulfillment order wasn't in a state to be split. */
  replacementFulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
}

/** An error that occurs during the execution of `FulfillmentOrderSplit`. */
export interface ShopifyFulfillmentOrderSplitUserError
  extends ShopifyDisplayableError {
  __typename?: "FulfillmentOrderSplitUserError"
  /** The error code. */
  code?: Maybe<ShopifyFulfillmentOrderSplitUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `FulfillmentOrderSplitUserError`. */
export type ShopifyFulfillmentOrderSplitUserErrorCode =
  /** The fulfillment order could not be found. */
  | "FULFILLMENT_ORDER_NOT_FOUND"
  /** The fulfillment order line item quantity must be greater than 0. */
  | "GREATER_THAN"
  /** The fulfillment order line item quantity is invalid. */
  | "INVALID_LINE_ITEM_QUANTITY"
  /** The fulfillment order must have at least one line item input to split. */
  | "NO_LINE_ITEMS_PROVIDED_TO_SPLIT"
  | "%future added value"

/** The status of a fulfillment order. */
export type ShopifyFulfillmentOrderStatus =
  /** The fulfillment order has been cancelled by the merchant. */
  | "CANCELLED"
  /** The fulfillment order has been completed and closed. */
  | "CLOSED"
  /** The fulfillment order cannot be completed as requested. */
  | "INCOMPLETE"
  /** The fulfillment order is being processed. */
  | "IN_PROGRESS"
  /** The fulfillment order is on hold. The fulfillment process can't be initiated until the hold on the fulfillment order is released. */
  | "ON_HOLD"
  /** The fulfillment order is ready for fulfillment. */
  | "OPEN"
  /** The fulfillment order is deferred and will be ready for fulfillment after the date and time specified in `fulfill_at`. */
  | "SCHEDULED"
  | "%future added value"

/** Return type for `fulfillmentOrderSubmitCancellationRequest` mutation. */
export interface ShopifyFulfillmentOrderSubmitCancellationRequestPayload {
  __typename?: "FulfillmentOrderSubmitCancellationRequestPayload"
  /** The fulfillment order specified in the cancelation request. */
  fulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `fulfillmentOrderSubmitFulfillmentRequest` mutation. */
export interface ShopifyFulfillmentOrderSubmitFulfillmentRequestPayload {
  __typename?: "FulfillmentOrderSubmitFulfillmentRequestPayload"
  /** The original fulfillment order intended to request fulfillment for. */
  originalFulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /**
   * The fulfillment order that was submitted to the fulfillment service. This will be the same as
   * the original fulfillment order field. The exception to this is partial fulfillment requests or
   * fulfillment request for cancelled or incomplete fulfillment orders.
   */
  submittedFulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /**
   * This field will only be present for partial fulfillment requests. This will represent the new
   * fulfillment order with the remaining line items not submitted to the fulfillment service.
   */
  unsubmittedFulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** One of the actions that the fulfillment order supports in its current state. */
export interface ShopifyFulfillmentOrderSupportedAction {
  __typename?: "FulfillmentOrderSupportedAction"
  /** The action value. */
  action: ShopifyFulfillmentOrderAction
  /**
   * The external URL to be used to initiate the fulfillment process outside Shopify.
   * Applicable only when the `action` value is `EXTERNAL`.
   */
  externalUrl?: Maybe<Scalars["URL"]["output"]>
}

/** Return type for `fulfillmentOrdersSetFulfillmentDeadline` mutation. */
export interface ShopifyFulfillmentOrdersSetFulfillmentDeadlinePayload {
  __typename?: "FulfillmentOrdersSetFulfillmentDeadlinePayload"
  /** Whether the fulfillment deadline was successfully set. */
  success?: Maybe<Scalars["Boolean"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyFulfillmentOrdersSetFulfillmentDeadlineUserError>
}

/** An error that occurs during the execution of `FulfillmentOrdersSetFulfillmentDeadline`. */
export interface ShopifyFulfillmentOrdersSetFulfillmentDeadlineUserError
  extends ShopifyDisplayableError {
  __typename?: "FulfillmentOrdersSetFulfillmentDeadlineUserError"
  /** The error code. */
  code?: Maybe<ShopifyFulfillmentOrdersSetFulfillmentDeadlineUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `FulfillmentOrdersSetFulfillmentDeadlineUserError`. */
export type ShopifyFulfillmentOrdersSetFulfillmentDeadlineUserErrorCode =
  /** The fulfillment orders could not be found. */
  "FULFILLMENT_ORDERS_NOT_FOUND" | "%future added value"

/** The address at which the fulfillment occurred. This object is intended for tax purposes, as a full address is required for tax providers to accurately calculate taxes. Typically this is the address of the warehouse or fulfillment center. To retrieve a fulfillment location's address, use the `assignedLocation` field on the [`FulfillmentOrder`](/docs/api/admin-graphql/latest/objects/FulfillmentOrder) object instead. */
export interface ShopifyFulfillmentOriginAddress {
  __typename?: "FulfillmentOriginAddress"
  /** The street address of the fulfillment location. */
  address1?: Maybe<Scalars["String"]["output"]>
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: Maybe<Scalars["String"]["output"]>
  /** The city in which the fulfillment location is located. */
  city?: Maybe<Scalars["String"]["output"]>
  /** The country code of the fulfillment location. */
  countryCode: Scalars["String"]["output"]
  /** The province code of the fulfillment location. */
  provinceCode?: Maybe<Scalars["String"]["output"]>
  /** The zip code of the fulfillment location. */
  zip?: Maybe<Scalars["String"]["output"]>
}

/** The input fields used to include the address at which the fulfillment occurred. This input object is intended for tax purposes, as a full address is required for tax providers to accurately calculate taxes. Typically this is the address of the warehouse or fulfillment center. To retrieve a fulfillment location's address, use the `assignedLocation` field on the [`FulfillmentOrder`](/docs/api/admin-graphql/latest/objects/FulfillmentOrder) object instead. */
export interface ShopifyFulfillmentOriginAddressInput {
  /** The street address of the fulfillment location. */
  address1?: InputMaybe<Scalars["String"]["input"]>
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: InputMaybe<Scalars["String"]["input"]>
  /** The city in which the fulfillment location is located. */
  city?: InputMaybe<Scalars["String"]["input"]>
  /** The country of the fulfillment location. */
  countryCode: Scalars["String"]["input"]
  /** The province of the fulfillment location. */
  provinceCode?: InputMaybe<Scalars["String"]["input"]>
  /** The zip code of the fulfillment location. */
  zip?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * A **Fulfillment Service** is a third party warehouse that prepares and ships orders
 * on behalf of the store owner. Fulfillment services charge a fee to package and ship items
 * and update product inventory levels. Some well known fulfillment services with Shopify integrations
 * include: Amazon, Shipwire, and Rakuten. When an app registers a new `FulfillmentService` on a store,
 * Shopify automatically creates a `Location` that's associated to the fulfillment service.
 * To learn more about fulfillment services, refer to
 * [Manage fulfillments as a fulfillment service app](https://shopify.dev/apps/fulfillment/fulfillment-service-apps)
 * guide.
 *
 * ## Mutations
 *
 * You can work with the `FulfillmentService` object with the
 * [fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate),
 * [fulfillmentServiceUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceUpdate),
 * and [fulfillmentServiceDelete](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceDelete)
 * mutations.
 *
 * ## Hosted endpoints
 *
 * Fulfillment service providers integrate with Shopify by providing Shopify with a set of hosted endpoints that
 * Shopify can query on certain conditions.
 * These endpoints must have a common prefix, and this prefix should be supplied in the `callbackUrl` parameter
 * in the
 * [fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate)
 * mutation.
 *
 * - Shopify sends POST requests to the `<callbackUrl>/fulfillment_order_notification` endpoint
 *   to notify the fulfillment service about fulfillment requests and fulfillment cancellation requests.
 *
 *   For more information, refer to
 *   [Receive fulfillment requests and cancellations](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations).
 * - Shopify sends GET requests to the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers for orders
 *   if `trackingSupport` is set to `true`.
 *
 *   For more information, refer to
 *   [Enable tracking support](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-8-enable-tracking-support-optional).
 *
 *   Fulfillment services can also update tracking information using the
 *   [fulfillmentTrackingInfoUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdate) mutation,
 *   rather than waiting for Shopify to ask for tracking numbers.
 * - Shopify sends GET requests to the `<callbackUrl>/fetch_stock` endpoint to retrieve
 *   on hand inventory levels for the fulfillment service location if `inventoryManagement` is set to `true`.
 *
 *   For more information, refer to
 *   [Sharing inventory levels with Shopify](https://shopify.dev/apps/build/orders-fulfillment/fulfillment-service-apps/build-for-fulfillment-services#step-10-optional-share-inventory-levels-with-shopify).
 *
 * To make sure you have everything set up correctly, you can test the `callbackUrl`-prefixed endpoints
 * in your development store.
 *
 * ## Resources and webhooks
 *
 * There are a variety of objects and webhooks that enable a fulfillment service to work.
 * To exchange fulfillment information with Shopify, fulfillment services use the
 * [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder),
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment) and
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order) objects and related mutations.
 * To act on fulfillment process events that happen on the Shopify side,
 * besides awaiting calls to `callbackUrl`-prefixed endpoints,
 * fulfillment services can subscribe to the
 * [fulfillment order](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * and [order](https://shopify.dev/api/admin-rest/latest/resources/webhook)
 * webhooks.
 */
export interface ShopifyFulfillmentService {
  __typename?: "FulfillmentService"
  /**
   * The callback URL that the fulfillment service has registered for requests. The following considerations apply:
   *
   * - Shopify queries the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers
   *     for orders, if `trackingSupport` is set to `true`.
   * - Shopify queries the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
   *     if `inventoryManagement` is set to `true`.
   * - Shopify uses the `<callbackUrl>/fulfillment_order_notification` endpoint to send
   *     [fulfillment and cancellation requests](https://shopify.dev/apps/build/orders-fulfillment/fulfillment-service-apps/build-for-fulfillment-services#step-9-optional-enable-tracking-support).
   */
  callbackUrl?: Maybe<Scalars["URL"]["output"]>
  /**
   * Whether the fulfillment service uses the [fulfillment order based workflow](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments) for managing fulfillments.
   *
   * As the migration is now finished, the `fulfillmentOrdersOptIn` property is [deprecated](
   * https://shopify.dev/changelog/deprecation-of-the-fulfillmentservice-fulfillmentordersoptin-field)
   * and is always set to `true` on correctly functioning fulfillment services.
   * @deprecated Migration period ended. All correctly functioning fulfillment services have `fulfillmentOrdersOptIn` set to `true`.
   */
  fulfillmentOrdersOptIn: Scalars["Boolean"]["output"]
  /** Human-readable unique identifier for this fulfillment service. */
  handle: Scalars["String"]["output"]
  /** The ID of the fulfillment service. */
  id: Scalars["ID"]["output"]
  /** Whether the fulfillment service tracks product inventory and provides updates to Shopify. */
  inventoryManagement: Scalars["Boolean"]["output"]
  /** Location associated with the fulfillment service. */
  location?: Maybe<ShopifyLocation>
  /** Whether the fulfillment service can stock inventory alongside other locations. */
  permitsSkuSharing: Scalars["Boolean"]["output"]
  /** Whether the fulfillment service requires products to be physically shipped. */
  requiresShippingMethod: Scalars["Boolean"]["output"]
  /** The name of the fulfillment service as seen by merchants. */
  serviceName: Scalars["String"]["output"]
  /** Whether the fulfillment service implemented the /fetch_tracking_numbers endpoint. */
  trackingSupport: Scalars["Boolean"]["output"]
  /** Type associated with the fulfillment service. */
  type: ShopifyFulfillmentServiceType
}

/** Return type for `fulfillmentServiceCreate` mutation. */
export interface ShopifyFulfillmentServiceCreatePayload {
  __typename?: "FulfillmentServiceCreatePayload"
  /** The created fulfillment service. */
  fulfillmentService?: Maybe<ShopifyFulfillmentService>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Actions that can be taken at the location when a client requests the deletion of the fulfillment service. */
export type ShopifyFulfillmentServiceDeleteInventoryAction =
  /** Deactivate and delete the inventory and location. */
  | "DELETE"
  /** Keep the inventory in place and convert the Fulfillment Service's location to be merchant managed. */
  | "KEEP"
  /** Transfer the inventory and other dependencies to the provided location. */
  | "TRANSFER"
  | "%future added value"

/** Return type for `fulfillmentServiceDelete` mutation. */
export interface ShopifyFulfillmentServiceDeletePayload {
  __typename?: "FulfillmentServiceDeletePayload"
  /** The ID of the deleted fulfillment service. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The type of a fulfillment service. */
export type ShopifyFulfillmentServiceType =
  /** Fulfillment by gift card. */
  | "GIFT_CARD"
  /** Manual fulfillment by the merchant. */
  | "MANUAL"
  /** Fullfillment by a third-party fulfillment service. */
  | "THIRD_PARTY"
  | "%future added value"

/** Return type for `fulfillmentServiceUpdate` mutation. */
export interface ShopifyFulfillmentServiceUpdatePayload {
  __typename?: "FulfillmentServiceUpdatePayload"
  /** The updated fulfillment service. */
  fulfillmentService?: Maybe<ShopifyFulfillmentService>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The status of a fulfillment. */
export type ShopifyFulfillmentStatus =
  /** The fulfillment was canceled. */
  | "CANCELLED"
  /** There was an error with the fulfillment request. */
  | "ERROR"
  /** The fulfillment request failed. */
  | "FAILURE"
  /** The third-party fulfillment service has acknowledged the fulfillment and is processing it. */
  | "OPEN"
  /** Shopify has created the fulfillment and is waiting for the third-party fulfillment service to transition it to `open` or `success`. */
  | "PENDING"
  /** The fulfillment was completed successfully. */
  | "SUCCESS"
  | "%future added value"

/** Represents the tracking information for a fulfillment. */
export interface ShopifyFulfillmentTrackingInfo {
  __typename?: "FulfillmentTrackingInfo"
  /**
   * The name of the tracking company.
   *
   * For tracking company names from the list below
   * Shopify will automatically build tracking URLs for all provided tracking numbers,
   * which will make the tracking numbers clickable in the interface.
   *
   * Additionally, for the tracking companies listed on the
   * [Shipping Carriers help page](https://help.shopify.com/manual/shipping/understanding-shipping/shipping-carriers#integrated-shipping-carriers)
   * Shopify will automatically update the fulfillment's `shipment_status` field during the fulfillment process.
   *
   * ### Supported tracking companies
   *
   * The following tracking companies display for shops located in any country:
   *
   *   * 4PX
   *   * AGS
   *   * Amazon
   *   * Amazon Logistics UK
   *   * An Post
   *   * Anjun Logistics
   *   * APC
   *   * Asendia USA
   *   * Australia Post
   *   * Bonshaw
   *   * BPost
   *   * BPost International
   *   * Canada Post
   *   * Canpar
   *   * CDL Last Mile
   *   * China Post
   *   * Chronopost
   *   * Chukou1
   *   * Colissimo
   *   * Comingle
   *   * Coordinadora
   *   * Correios
   *   * Correos
   *   * CTT
   *   * CTT Express
   *   * Cyprus Post
   *   * Delnext
   *   * Deutsche Post
   *   * DHL eCommerce
   *   * DHL eCommerce Asia
   *   * DHL Express
   *   * DPD
   *   * DPD Local
   *   * DPD UK
   *   * DTD Express
   *   * DX
   *   * Eagle
   *   * Estes
   *   * Evri
   *   * FedEx
   *   * First Global Logistics
   *   * First Line
   *   * FSC
   *   * Fulfilla
   *   * GLS
   *   * Guangdong Weisuyi Information Technology (WSE)
   *   * Heppner Internationale Spedition GmbH & Co.
   *   * Iceland Post
   *   * IDEX
   *   * Israel Post
   *   * Japan Post (EN)
   *   * Japan Post (JA)
   *   * La Poste Colissimo
   *   * La Poste Burkina Faso
   *   * Lasership
   *   * Latvia Post
   *   * Lietuvos Paštas
   *   * Logisters
   *   * Lone Star Overnight
   *   * M3 Logistics
   *   * Meteor Space
   *   * Mondial Relay
   *   * New Zealand Post
   *   * NinjaVan
   *   * North Russia Supply Chain (Shenzhen) Co.
   *   * OnTrac
   *   * Packeta
   *   * Pago Logistics
   *   * Ping An Da Tengfei Express
   *   * Pitney Bowes
   *   * Portal PostNord
   *   * Poste Italiane
   *   * PostNL
   *   * PostNord DK
   *   * PostNord NO
   *   * PostNord SE
   *   * Purolator
   *   * Qxpress
   *   * Qyun Express
   *   * Royal Mail
   *   * Royal Shipments
   *   * Sagawa (EN)
   *   * Sagawa (JA)
   *   * Sendle
   *   * SF Express
   *   * SFC Fulfillment
   *   * SHREE NANDAN COURIER
   *   * Singapore Post
   *   * Southwest Air Cargo
   *   * StarTrack
   *   * Step Forward Freight
   *   * Swiss Post
   *   * TForce Final Mile
   *   * Tinghao
   *   * TNT
   *   * Toll IPEC
   *   * United Delivery Service
   *   * UPS
   *   * USPS
   *   * Venipak
   *   * We Post
   *   * Whistl
   *   * Wizmo
   *   * WMYC
   *   * Xpedigo
   *   * XPO Logistics
   *   * Yamato (EN)
   *   * Yamato (JA)
   *   * YiFan Express
   *   * YunExpress
   *
   * The following tracking companies are displayed for shops located in specific countries:
   *
   *   * **Australia**: Australia Post, Sendle, Aramex Australia, TNT Australia, Hunter Express, Couriers Please, Bonds, Allied Express, Direct Couriers, Northline, GO Logistics
   *   * **Austria**: Österreichische Post
   *   * **Bulgaria**: Speedy
   *   * **Canada**: Intelcom, BoxKnight, Loomis, GLS
   *   * **China**: China Post, DHL eCommerce Asia, WanbExpress, YunExpress, Anjun Logistics, SFC Fulfillment, FSC
   *   * **Czechia**: Zásilkovna
   *   * **Germany**: Deutsche Post (DE), Deutsche Post (EN), DHL, DHL Express, Swiship, Hermes, GLS
   *   * **Spain**: SEUR
   *   * **France**: Colissimo, Mondial Relay, Colis Privé, GLS
   *   * **United Kingdom**: Evri, DPD UK, Parcelforce, Yodel, DHL Parcel, Tuffnells
   *   * **Greece**: ACS Courier
   *   * **Hong Kong SAR**: SF Express
   *   * **Ireland**: Fastway, DPD Ireland
   *   * **India**: DTDC, India Post, Delhivery, Gati KWE, Professional Couriers, XpressBees, Ecom Express, Ekart, Shadowfax, Bluedart
   *   * **Italy**: BRT, GLS Italy
   *   * **Japan**: エコ配, 西濃運輸, 西濃スーパーエキスプレス, 福山通運, 日本通運, 名鉄運輸, 第一貨物
   *   * **Netherlands**: DHL Parcel, DPD
   *   * **Norway**: Bring
   *   * **Poland**: Inpost
   *   * **Turkey**: PTT, Yurtiçi Kargo, Aras Kargo, Sürat Kargo
   *   * **United States**: GLS, Alliance Air Freight, Pilot Freight, LSO, Old Dominion, Pandion, R+L Carriers, Southwest Air Cargo
   *   * **South Africa**: Fastway, Skynet.
   */
  company?: Maybe<Scalars["String"]["output"]>
  /**
   * The tracking number of the fulfillment.
   *
   * The tracking number is clickable in the interface if one of the following applies
   * (the highest in the list has the highest priority):
   *
   * * Tracking url provided in the `url` field.
   * * [Shopify-known tracking company name](#supported-tracking-companies) specified in the `company` field.
   *   Shopify will build the tracking URL automatically based on the tracking number specified.
   * * The tracking number has a Shopify-known format.
   *   Shopify will guess the tracking provider and build the tracking url based on the tracking number format.
   *   Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
   *   This can result in an invalid tracking URL.
   *   It is highly recommended that you send the tracking company and the tracking URL.
   */
  number?: Maybe<Scalars["String"]["output"]>
  /**
   * The URLs to track the fulfillment.
   *
   * The tracking URL is displayed in the merchant's admin on the order page.
   * The tracking URL is displayed in the shipping confirmation email, which can optionally be sent to the customer.
   * When accounts are enabled, it's also displayed in the customer's order history.
   */
  url?: Maybe<Scalars["URL"]["output"]>
}

/** Return type for `fulfillmentTrackingInfoUpdate` mutation. */
export interface ShopifyFulfillmentTrackingInfoUpdatePayload {
  __typename?: "FulfillmentTrackingInfoUpdatePayload"
  /** The updated fulfillment with tracking information. */
  fulfillment?: Maybe<ShopifyFulfillment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `fulfillmentTrackingInfoUpdateV2` mutation. */
export interface ShopifyFulfillmentTrackingInfoUpdateV2Payload {
  __typename?: "FulfillmentTrackingInfoUpdateV2Payload"
  /** The updated fulfillment with tracking information. */
  fulfillment?: Maybe<ShopifyFulfillment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/**
 * The input fields that specify all possible fields for tracking information.
 *
 * > Note:
 * > If you provide the `url` field, you should not provide the `urls` field.
 * >
 * > If you provide the `number` field, you should not provide the `numbers` field.
 * >
 * > If you provide the `url` field, you should provide the `number` field.
 * >
 * > If you provide the `urls` field, you should provide the `numbers` field.
 */
export interface ShopifyFulfillmentTrackingInput {
  /**
   * The name of the tracking company.
   *
   * If you specify a tracking company name from
   * [the list](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies),
   * Shopify will automatically build tracking URLs for all provided tracking numbers,
   * which will make the tracking numbers clickable in the interface.
   * The same tracking company will be applied to all tracking numbers specified.
   *
   * Additionally, for the tracking companies listed on the
   * [Shipping Carriers help page](https://help.shopify.com/manual/shipping/understanding-shipping/shipping-carriers#integrated-shipping-carriers)
   * Shopify will automatically update the fulfillment's `shipment_status` field during the fulfillment process.
   *
   * > Note:
   * > Send the tracking company name exactly as written in
   * > [the list](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
   * > (capitalization matters).
   */
  company?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The tracking number of the fulfillment.
   *
   * The tracking number will be clickable in the interface if one of the following applies
   * (the highest in the list has the highest priority):
   *
   * * Tracking url provided in the `url` field.
   * * [Shopify-known tracking company name](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
   *   specified in the `company` field.
   *   Shopify will build the tracking URL automatically based on the tracking number specified.
   * * The tracking number has a Shopify-known format.
   *   Shopify will guess the tracking provider and build the tracking url based on the tracking number format.
   *   Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
   *   This can result in an invalid tracking URL.
   *   It is highly recommended that you send the tracking company and the tracking URL.
   */
  number?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The tracking numbers of the fulfillment, one or many.
   *
   * With multiple tracking numbers, you can provide tracking information
   * for all shipments associated with the fulfillment, if there are more than one.
   * For example, if you're shipping assembly parts of one furniture item in several boxes.
   *
   * Tracking numbers will be clickable in the interface if one of the following applies
   * (the highest in the list has the highest priority):
   *
   * * Tracking URLs provided in the `urls` field.
   *   The tracking URLs will be matched to the tracking numbers based on their positions in the arrays.
   * * [Shopify-known tracking company name](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
   *   specified in the `company` field.
   *   Shopify will build tracking URLs automatically for all tracking numbers specified.
   *   The same tracking company will be applied to all tracking numbers.
   * * Tracking numbers have a Shopify-known format.
   *   Shopify will guess tracking providers and build tracking URLs based on the tracking number formats.
   *   Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
   *   This can result in an invalid tracking URL.
   *   It is highly recommended that you send the tracking company and the tracking URLs.
   */
  numbers?: InputMaybe<Array<Scalars["String"]["input"]>>
  /**
   * The URL to track the fulfillment.
   *
   * The tracking URL is displayed in the merchant's admin on the order page.
   * The tracking URL is displayed in the shipping confirmation email, which can optionally be sent to the customer.
   * When accounts are enabled, it's also displayed in the customer's order history.
   *
   * The URL must be an [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) and
   * [RFC 3987](https://datatracker.ietf.org/doc/html/rfc3987)-compliant URI string.
   * For example, `"https://www.myshipping.com/track/?tracknumbers=TRACKING_NUMBER"` is a valid URL.
   * It includes a scheme (`https`) and a host (`myshipping.com`).
   */
  url?: InputMaybe<Scalars["URL"]["input"]>
  /**
   * The URLs to track the fulfillment, one or many.
   *
   * The tracking URLs are displayed in the merchant's admin on the order page.
   * The tracking URLs are displayed in the shipping confirmation email, which can optionally be sent to the customer.
   * When accounts are enabled, the tracking URLs are also displayed in the customer's order history.
   *
   * If you're not specifying a
   * [Shopify-known](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
   * tracking company name in the `company` field,
   * then provide tracking URLs for all tracking numbers from the `numbers` field.
   *
   * Tracking URLs from the `urls` array field are being matched with the tracking numbers from the `numbers` array
   * field correspondingly their positions in the arrays.
   *
   * Each URL must be an [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) and
   * [RFC 3987](https://datatracker.ietf.org/doc/html/rfc3987)-compliant URI string.
   * For example, `"https://www.myshipping.com/track/?tracknumbers=TRACKING_NUMBER"` is a valid URL.
   * It includes a scheme (`https`) and a host (`myshipping.com`).
   */
  urls?: InputMaybe<Array<Scalars["URL"]["input"]>>
}

/** The input fields used to create a fulfillment from fulfillment orders. */
export interface ShopifyFulfillmentV2Input {
  /**
   * Pairs of `fulfillment_order_id` and `fulfillment_order_line_items` that represent the fulfillment
   * order line items that have to be fulfilled for each fulfillment order.  For any given pair, if the
   * fulfillment order line items are left blank then all the fulfillment order line items of the
   * associated fulfillment order ID will be fulfilled.
   */
  lineItemsByFulfillmentOrder: Array<ShopifyFulfillmentOrderLineItemsInput>
  /**
   * Whether the customer is notified.
   * If `true`, then a notification is sent when the fulfillment is created. The default value is `false`.
   */
  notifyCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Address information about the location from which the order was fulfilled. */
  originAddress?: InputMaybe<ShopifyFulfillmentOriginAddressInput>
  /**
   * The fulfillment's tracking information, including a tracking URL, a tracking number,
   * and the company associated with the fulfillment.
   */
  trackingInfo?: InputMaybe<ShopifyFulfillmentTrackingInput>
}

/** The App Bridge information for a Shopify Function. */
export interface ShopifyFunctionsAppBridge {
  __typename?: "FunctionsAppBridge"
  /** The relative path for creating a customization. */
  createPath: Scalars["String"]["output"]
  /** The relative path for viewing a customization. */
  detailsPath: Scalars["String"]["output"]
}

/** The error history from running a Shopify Function. */
export interface ShopifyFunctionsErrorHistory {
  __typename?: "FunctionsErrorHistory"
  /** The date and time that the first error occurred. */
  errorsFirstOccurredAt: Scalars["DateTime"]["output"]
  /** The date and time that the first error occurred. */
  firstOccurredAt: Scalars["DateTime"]["output"]
  /** Whether the merchant has shared all the recent errors with the developer. */
  hasBeenSharedSinceLastError: Scalars["Boolean"]["output"]
  /** Whether the merchant has shared all the recent errors with the developer. */
  hasSharedRecentErrors: Scalars["Boolean"]["output"]
}

/** Represents any file other than HTML. */
export interface ShopifyGenericFile extends ShopifyFile, ShopifyNode {
  __typename?: "GenericFile"
  /** A word or phrase to describe the contents or the function of a file. */
  alt?: Maybe<Scalars["String"]["output"]>
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** Any errors that have occurred on the file. */
  fileErrors: Array<ShopifyFileError>
  /** The status of the file. */
  fileStatus: ShopifyFileStatus
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The generic file's MIME type. */
  mimeType?: Maybe<Scalars["String"]["output"]>
  /** The generic file's size in bytes. */
  originalFileSize?: Maybe<Scalars["Int"]["output"]>
  /** The preview image for the media. */
  preview?: Maybe<ShopifyMediaPreviewImage>
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
  /** The generic file's URL. */
  url?: Maybe<Scalars["URL"]["output"]>
}

/** Represents an issued gift card. */
export interface ShopifyGiftCard extends ShopifyNode {
  __typename?: "GiftCard"
  /** The gift card's remaining balance. */
  balance: ShopifyMoneyV2
  /** The date and time at which the gift card was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The customer who will receive the gift card. */
  customer?: Maybe<ShopifyCustomer>
  /** The date and time at which the gift card was deactivated. */
  deactivatedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** Whether the gift card is enabled. */
  enabled: Scalars["Boolean"]["output"]
  /** The date at which the gift card will expire. */
  expiresOn?: Maybe<Scalars["Date"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The initial value of the gift card. */
  initialValue: ShopifyMoneyV2
  /** The final four characters of the gift card code. */
  lastCharacters: Scalars["String"]["output"]
  /** The gift card code. Everything but the final four characters is masked. */
  maskedCode: Scalars["String"]["output"]
  /** The note associated with the gift card, which isn't visible to the customer. */
  note?: Maybe<Scalars["String"]["output"]>
  /** The order associated with the gift card. This value is `null` if the gift card was issued manually. */
  order?: Maybe<ShopifyOrder>
  /** The recipient who will receive the gift card. */
  recipientAttributes?: Maybe<ShopifyGiftCardRecipient>
  /** The theme template used to render the gift card online. */
  templateSuffix?: Maybe<Scalars["String"]["output"]>
  /** The transaction history of the gift card. */
  transactions?: Maybe<ShopifyGiftCardTransactionConnection>
  /** The date and time at which the gift card was updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** Represents an issued gift card. */
export interface ShopifyGiftCardTransactionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents information about the configuration of gift cards on the shop. */
export interface ShopifyGiftCardConfiguration {
  __typename?: "GiftCardConfiguration"
  /** The issue limit for gift cards in the default shop currency. */
  issueLimit: ShopifyMoneyV2
  /** The purchase limit for gift cards in the default shop currency. */
  purchaseLimit: ShopifyMoneyV2
}

/** An auto-generated type for paginating through multiple GiftCards. */
export interface ShopifyGiftCardConnection {
  __typename?: "GiftCardConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyGiftCardEdge>
  /** A list of nodes that are contained in GiftCardEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyGiftCard>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields to issue a gift card. */
export interface ShopifyGiftCardCreateInput {
  /**
   * The gift card's code. It must be 8-20 characters long and contain only letters(a-z) and numbers(0-9).
   * It isn't case sensitive. If not provided, then a random code will be generated.
   */
  code?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of the customer who will receive the gift card. Requires `write_customers` access_scope. */
  customerId?: InputMaybe<Scalars["ID"]["input"]>
  /** The date at which the gift card will expire. If not provided, then the gift card will never expire. */
  expiresOn?: InputMaybe<Scalars["Date"]["input"]>
  /** The initial value of the gift card. */
  initialValue: Scalars["Decimal"]["input"]
  /** The note associated with the gift card, which isn't visible to the customer. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** The recipient attributes of the gift card. */
  recipientAttributes?: InputMaybe<ShopifyGiftCardRecipientInput>
  /**
   * The suffix of the Liquid template that's used to render the gift card online.
   * For example, if the value is `birthday`, then the gift card is rendered using the template `gift_card.birthday.liquid`.
   * If not provided, then the default `gift_card.liquid` template is used.
   */
  templateSuffix?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `giftCardCreate` mutation. */
export interface ShopifyGiftCardCreatePayload {
  __typename?: "GiftCardCreatePayload"
  /** The created gift card. */
  giftCard?: Maybe<ShopifyGiftCard>
  /** The created gift card's code. */
  giftCardCode?: Maybe<Scalars["String"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyGiftCardUserError>
}

/** The input fields for a gift card credit transaction. */
export interface ShopifyGiftCardCreditInput {
  /** The amount to credit the gift card. */
  creditAmount: ShopifyMoneyInput
  /** A note about the credit. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** The date and time the credit was processed. Defaults to current date and time. */
  processedAt?: InputMaybe<Scalars["DateTime"]["input"]>
}

/** Return type for `giftCardCredit` mutation. */
export interface ShopifyGiftCardCreditPayload {
  __typename?: "GiftCardCreditPayload"
  /** The gift card credit transaction that was created. */
  giftCardCreditTransaction?: Maybe<ShopifyGiftCardCreditTransaction>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyGiftCardTransactionUserError>
}

/** A credit transaction which increases the gift card balance. */
export interface ShopifyGiftCardCreditTransaction
  extends ShopifyGiftCardTransaction,
    ShopifyHasMetafields,
    ShopifyNode {
  __typename?: "GiftCardCreditTransaction"
  /** The amount of the transaction. */
  amount: ShopifyMoneyV2
  /** The gift card that the transaction belongs to. */
  giftCard: ShopifyGiftCard
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** A note about the transaction. */
  note?: Maybe<Scalars["String"]["output"]>
  /** The date and time when the transaction was processed. */
  processedAt: Scalars["DateTime"]["output"]
}

/** A credit transaction which increases the gift card balance. */
export interface ShopifyGiftCardCreditTransactionMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** A credit transaction which increases the gift card balance. */
export interface ShopifyGiftCardCreditTransactionMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `giftCardDeactivate` mutation. */
export interface ShopifyGiftCardDeactivatePayload {
  __typename?: "GiftCardDeactivatePayload"
  /** The deactivated gift card. */
  giftCard?: Maybe<ShopifyGiftCard>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyGiftCardDeactivateUserError>
}

/** An error that occurs during the execution of `GiftCardDeactivate`. */
export interface ShopifyGiftCardDeactivateUserError
  extends ShopifyDisplayableError {
  __typename?: "GiftCardDeactivateUserError"
  /** The error code. */
  code?: Maybe<ShopifyGiftCardDeactivateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `GiftCardDeactivateUserError`. */
export type ShopifyGiftCardDeactivateUserErrorCode =
  /** The gift card could not be found. */
  "GIFT_CARD_NOT_FOUND" | "%future added value"

/** The input fields for a gift card debit transaction. */
export interface ShopifyGiftCardDebitInput {
  /** The amount to debit the gift card. */
  debitAmount: ShopifyMoneyInput
  /** A note about the debit. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** The date and time the debit was processed. Defaults to current date and time. */
  processedAt?: InputMaybe<Scalars["DateTime"]["input"]>
}

/** Return type for `giftCardDebit` mutation. */
export interface ShopifyGiftCardDebitPayload {
  __typename?: "GiftCardDebitPayload"
  /** The gift card debit transaction that was created. */
  giftCardDebitTransaction?: Maybe<ShopifyGiftCardDebitTransaction>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyGiftCardTransactionUserError>
}

/** A debit transaction which decreases the gift card balance. */
export interface ShopifyGiftCardDebitTransaction
  extends ShopifyGiftCardTransaction,
    ShopifyHasMetafields,
    ShopifyNode {
  __typename?: "GiftCardDebitTransaction"
  /** The amount of the transaction. */
  amount: ShopifyMoneyV2
  /** The gift card that the transaction belongs to. */
  giftCard: ShopifyGiftCard
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** A note about the transaction. */
  note?: Maybe<Scalars["String"]["output"]>
  /** The date and time when the transaction was processed. */
  processedAt: Scalars["DateTime"]["output"]
}

/** A debit transaction which decreases the gift card balance. */
export interface ShopifyGiftCardDebitTransactionMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** A debit transaction which decreases the gift card balance. */
export interface ShopifyGiftCardDebitTransactionMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type which holds one GiftCard and a cursor during pagination. */
export interface ShopifyGiftCardEdge {
  __typename?: "GiftCardEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of GiftCardEdge. */
  node: ShopifyGiftCard
}

/** Possible error codes that can be returned by `GiftCardUserError`. */
export type ShopifyGiftCardErrorCode =
  /** The customer could not be found. */
  | "CUSTOMER_NOT_FOUND"
  /** The gift card's value exceeds the allowed limits. */
  | "GIFT_CARD_LIMIT_EXCEEDED"
  /** The input value should be greater than the minimum allowed value. */
  | "GREATER_THAN"
  /** Unexpected internal error happened. */
  | "INTERNAL_ERROR"
  /** The input value is invalid. */
  | "INVALID"
  /** Missing a required argument. */
  | "MISSING_ARGUMENT"
  /** The recipient could not be found. */
  | "RECIPIENT_NOT_FOUND"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too long. */
  | "TOO_LONG"
  /** The input value is too short. */
  | "TOO_SHORT"
  | "%future added value"

/** Represents a recipient who will receive the issued gift card. */
export interface ShopifyGiftCardRecipient {
  __typename?: "GiftCardRecipient"
  /** The message sent with the gift card. */
  message?: Maybe<Scalars["String"]["output"]>
  /** The preferred name of the recipient who will receive the gift card. */
  preferredName?: Maybe<Scalars["String"]["output"]>
  /** The recipient who will receive the gift card. */
  recipient: ShopifyCustomer
  /** The scheduled datetime on which the gift card will be sent to the recipient. The gift card will be sent within an hour of the specified datetime. */
  sendNotificationAt?: Maybe<Scalars["DateTime"]["output"]>
}

/** The input fields to add a recipient to a gift card. */
export interface ShopifyGiftCardRecipientInput {
  /** The ID of the customer who will be the recipient of the gift card. Requires `write_customers` access_scope. */
  id: Scalars["ID"]["input"]
  /** The personalized message intended for the recipient. */
  message?: InputMaybe<Scalars["String"]["input"]>
  /** The preferred name of the recipient. */
  preferredName?: InputMaybe<Scalars["String"]["input"]>
  /** The scheduled datetime on which the gift card will be sent to the recipient. The gift card will be sent within an hour of the specified datetime. */
  sendNotificationAt?: InputMaybe<Scalars["DateTime"]["input"]>
}

/** A sale associated with a gift card. */
export interface ShopifyGiftCardSale extends ShopifySale {
  __typename?: "GiftCardSale"
  /** The type of order action that the sale represents. */
  actionType: ShopifySaleActionType
  /** The unique ID for the sale. */
  id: Scalars["ID"]["output"]
  /** The line item for the associated sale. */
  lineItem: ShopifyLineItem
  /** The line type assocated with the sale. */
  lineType: ShopifySaleLineType
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars["Int"]["output"]>
  /** All individual taxes associated with the sale. */
  taxes: Array<ShopifySaleTax>
  /** The total sale amount after taxes and discounts. */
  totalAmount: ShopifyMoneyBag
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: ShopifyMoneyBag
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: ShopifyMoneyBag
  /** The total amount of taxes for the sale. */
  totalTaxAmount: ShopifyMoneyBag
}

/** Return type for `giftCardSendNotificationToCustomer` mutation. */
export interface ShopifyGiftCardSendNotificationToCustomerPayload {
  __typename?: "GiftCardSendNotificationToCustomerPayload"
  /** The gift card that was sent. */
  giftCard?: Maybe<ShopifyGiftCard>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyGiftCardSendNotificationToCustomerUserError>
}

/** An error that occurs during the execution of `GiftCardSendNotificationToCustomer`. */
export interface ShopifyGiftCardSendNotificationToCustomerUserError
  extends ShopifyDisplayableError {
  __typename?: "GiftCardSendNotificationToCustomerUserError"
  /** The error code. */
  code?: Maybe<ShopifyGiftCardSendNotificationToCustomerUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `GiftCardSendNotificationToCustomerUserError`. */
export type ShopifyGiftCardSendNotificationToCustomerUserErrorCode =
  /** The customer could not be found. */
  | "CUSTOMER_NOT_FOUND"
  /** The gift card could not be found. */
  | "GIFT_CARD_NOT_FOUND"
  /** The input value is invalid. */
  | "INVALID"
  | "%future added value"

/** Return type for `giftCardSendNotificationToRecipient` mutation. */
export interface ShopifyGiftCardSendNotificationToRecipientPayload {
  __typename?: "GiftCardSendNotificationToRecipientPayload"
  /** The gift card that was sent. */
  giftCard?: Maybe<ShopifyGiftCard>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyGiftCardSendNotificationToRecipientUserError>
}

/** An error that occurs during the execution of `GiftCardSendNotificationToRecipient`. */
export interface ShopifyGiftCardSendNotificationToRecipientUserError
  extends ShopifyDisplayableError {
  __typename?: "GiftCardSendNotificationToRecipientUserError"
  /** The error code. */
  code?: Maybe<ShopifyGiftCardSendNotificationToRecipientUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `GiftCardSendNotificationToRecipientUserError`. */
export type ShopifyGiftCardSendNotificationToRecipientUserErrorCode =
  /** The gift card could not be found. */
  | "GIFT_CARD_NOT_FOUND"
  /** The input value is invalid. */
  | "INVALID"
  /** The recipient could not be found. */
  | "RECIPIENT_NOT_FOUND"
  | "%future added value"

/** The set of valid sort keys for the GiftCard query. */
export type ShopifyGiftCardSortKeys =
  /** Sort by the `amount_spent` value. */
  | "AMOUNT_SPENT"
  /** Sort by the `balance` value. */
  | "BALANCE"
  /** Sort by the `code` value. */
  | "CODE"
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `customer_name` value. */
  | "CUSTOMER_NAME"
  /** Sort by the `disabled_at` value. */
  | "DISABLED_AT"
  /** Sort by the `expires_on` value. */
  | "EXPIRES_ON"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `initial_value` value. */
  | "INITIAL_VALUE"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** Interface for a gift card transaction. */
export interface ShopifyGiftCardTransaction {
  /** The amount of the transaction. */
  amount: ShopifyMoneyV2
  /** The gift card that the transaction belongs to. */
  giftCard: ShopifyGiftCard
  /** The unique ID for the transaction. */
  id: Scalars["ID"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** A note about the transaction. */
  note?: Maybe<Scalars["String"]["output"]>
  /** The date and time when the transaction was processed. */
  processedAt: Scalars["DateTime"]["output"]
}

/** Interface for a gift card transaction. */
export interface ShopifyGiftCardTransactionMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** Interface for a gift card transaction. */
export interface ShopifyGiftCardTransactionMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple GiftCardTransactions. */
export interface ShopifyGiftCardTransactionConnection {
  __typename?: "GiftCardTransactionConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyGiftCardTransactionEdge>
  /** A list of nodes that are contained in GiftCardTransactionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyGiftCardTransaction>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one GiftCardTransaction and a cursor during pagination. */
export interface ShopifyGiftCardTransactionEdge {
  __typename?: "GiftCardTransactionEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of GiftCardTransactionEdge. */
  node: ShopifyGiftCardTransaction
}

/** Represents an error that happens during the execution of a gift card transaction mutation. */
export interface ShopifyGiftCardTransactionUserError
  extends ShopifyDisplayableError {
  __typename?: "GiftCardTransactionUserError"
  /** The error code. */
  code?: Maybe<ShopifyGiftCardTransactionUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `GiftCardTransactionUserError`. */
export type ShopifyGiftCardTransactionUserErrorCode =
  /** The gift card's value exceeds the allowed limits. */
  | "GIFT_CARD_LIMIT_EXCEEDED"
  /** The gift card could not be found. */
  | "GIFT_CARD_NOT_FOUND"
  /** The gift card does not have sufficient funds to satisfy the request. */
  | "INSUFFICIENT_FUNDS"
  /** Unexpected internal error happened. */
  | "INTERNAL_ERROR"
  /** The input value is invalid. */
  | "INVALID"
  /** The currency provided does not match the currency of the gift card. */
  | "MISMATCHING_CURRENCY"
  /** A positive amount must be used. */
  | "NEGATIVE_OR_ZERO_AMOUNT"
  | "%future added value"

/** The input fields to update a gift card. */
export interface ShopifyGiftCardUpdateInput {
  /** The ID of the customer who will receive the gift card. The ID can't be changed if the gift card already has an assigned customer ID. */
  customerId?: InputMaybe<Scalars["ID"]["input"]>
  /** The date at which the gift card will expire. If set to `null`, then the gift card will never expire. */
  expiresOn?: InputMaybe<Scalars["Date"]["input"]>
  /** The note associated with the gift card, which isn't visible to the customer. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** The recipient attributes of the gift card. */
  recipientAttributes?: InputMaybe<ShopifyGiftCardRecipientInput>
  /**
   * The suffix of the Liquid template that's used to render the gift card online.
   * For example, if the value is `birthday`, then the gift card is rendered using the template `gift_card.birthday.liquid`.
   */
  templateSuffix?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `giftCardUpdate` mutation. */
export interface ShopifyGiftCardUpdatePayload {
  __typename?: "GiftCardUpdatePayload"
  /** The updated gift card. */
  giftCard?: Maybe<ShopifyGiftCard>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Represents an error that happens during the execution of a gift card mutation. */
export interface ShopifyGiftCardUserError extends ShopifyDisplayableError {
  __typename?: "GiftCardUserError"
  /** The error code. */
  code?: Maybe<ShopifyGiftCardErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/**
 * Represents a summary of the current version of data in a resource.
 *
 * The `compare_digest` field can be used as input for mutations that implement a compare-and-swap mechanism.
 */
export interface ShopifyHasCompareDigest {
  /** The data stored in the resource, represented as a digest. */
  compareDigest: Scalars["String"]["output"]
}

/** Represents an object that has a list of events. */
export interface ShopifyHasEvents {
  /** The paginated list of events associated with the host subject. */
  events: ShopifyEventConnection
}

/** Represents an object that has a list of events. */
export interface ShopifyHasEventsEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/** Localization extensions associated with the specified resource. For example, the tax id for government invoice. */
export interface ShopifyHasLocalizationExtensions {
  /**
   * List of localization extensions for the resource.
   * @deprecated This connection will be removed in a future version. Use `localizedFields` instead.
   */
  localizationExtensions: ShopifyLocalizationExtensionConnection
}

/** Localization extensions associated with the specified resource. For example, the tax id for government invoice. */
export interface ShopifyHasLocalizationExtensionsLocalizationExtensionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  countryCodes?: InputMaybe<Array<ShopifyCountryCode>>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  purposes?: InputMaybe<Array<ShopifyLocalizationExtensionPurpose>>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Localized fields associated with the specified resource. */
export interface ShopifyHasLocalizedFields {
  /** List of localized fields for the resource. */
  localizedFields: ShopifyLocalizedFieldConnection
}

/** Localized fields associated with the specified resource. */
export interface ShopifyHasLocalizedFieldsLocalizedFieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  countryCodes?: InputMaybe<Array<ShopifyCountryCode>>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  purposes?: InputMaybe<Array<ShopifyLocalizedFieldPurpose>>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Resources that metafield definitions can be applied to. */
export interface ShopifyHasMetafieldDefinitions {
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
}

/** Resources that metafield definitions can be applied to. */
export interface ShopifyHasMetafieldDefinitionsMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/** Represents information about the metafields associated to the specified resource. */
export interface ShopifyHasMetafields {
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
}

/** Represents information about the metafields associated to the specified resource. */
export interface ShopifyHasMetafieldsMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** Represents information about the metafields associated to the specified resource. */
export interface ShopifyHasMetafieldsMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The input fields that identify metafield definitions. */
export interface ShopifyHasMetafieldsMetafieldIdentifierInput {
  /** The unique identifier for the metafield definition within its namespace. */
  key: Scalars["String"]["input"]
  /**
   * The container for a group of metafields that the metafield definition will be associated with. If omitted, the
   * app-reserved namespace will be used.
   */
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** Published translations associated with the resource. */
export interface ShopifyHasPublishedTranslations {
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
}

/** Published translations associated with the resource. */
export interface ShopifyHasPublishedTranslationsTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/** Represents information about the store credit accounts associated to the specified owner. */
export interface ShopifyHasStoreCreditAccounts {
  /**
   * Returns a list of store credit accounts that belong to the owner resource.
   * A store credit account owner can hold multiple accounts each with a different currency.
   */
  storeCreditAccounts: ShopifyStoreCreditAccountConnection
}

/** Represents information about the store credit accounts associated to the specified owner. */
export interface ShopifyHasStoreCreditAccountsStoreCreditAccountsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
}

/** Represents an image resource. */
export interface ShopifyImage extends ShopifyHasMetafields {
  __typename?: "Image"
  /** A word or phrase to share the nature or contents of an image. */
  altText?: Maybe<Scalars["String"]["output"]>
  /** The original height of the image in pixels. Returns `null` if the image isn't hosted by Shopify. */
  height?: Maybe<Scalars["Int"]["output"]>
  /** A unique ID for the image. */
  id?: Maybe<Scalars["ID"]["output"]>
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /**
   * The location of the original image as a URL.
   *
   * If there are any existing transformations in the original source URL, they will remain and not be stripped.
   * @deprecated Use `url` instead.
   */
  originalSrc: Scalars["URL"]["output"]
  /**
   * The location of the image as a URL.
   * @deprecated Use `url` instead.
   */
  src: Scalars["URL"]["output"]
  /**
   * The ThumbHash of the image.
   *
   * Useful to display placeholder images while the original image is loading.
   */
  thumbhash?: Maybe<Scalars["String"]["output"]>
  /**
   * The location of the transformed image as a URL.
   *
   * All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
   * Otherwise any transformations which an image type doesn't support will be ignored.
   * @deprecated Use `url(transform:)` instead
   */
  transformedSrc: Scalars["URL"]["output"]
  /**
   * The location of the image as a URL.
   *
   * If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
   *
   * All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
   *
   * If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).
   */
  url: Scalars["URL"]["output"]
  /** The original width of the image in pixels. Returns `null` if the image isn't hosted by Shopify. */
  width?: Maybe<Scalars["Int"]["output"]>
}

/** Represents an image resource. */
export interface ShopifyImageMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** Represents an image resource. */
export interface ShopifyImageMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents an image resource. */
export interface ShopifyImageTransformedSrcArgs {
  crop?: InputMaybe<ShopifyCropRegion>
  maxHeight?: InputMaybe<Scalars["Int"]["input"]>
  maxWidth?: InputMaybe<Scalars["Int"]["input"]>
  preferredContentType?: InputMaybe<ShopifyImageContentType>
  scale?: InputMaybe<Scalars["Int"]["input"]>
}

/** Represents an image resource. */
export interface ShopifyImageUrlArgs {
  transform?: InputMaybe<ShopifyImageTransformInput>
}

/** An auto-generated type for paginating through multiple Images. */
export interface ShopifyImageConnection {
  __typename?: "ImageConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyImageEdge>
  /** A list of nodes that are contained in ImageEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyImage>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** List of supported image content types. */
export type ShopifyImageContentType =
  /** A JPG image. */
  | "JPG"
  /** A PNG image. */
  | "PNG"
  /** A WEBP image. */
  | "WEBP"
  | "%future added value"

/** An auto-generated type which holds one Image and a cursor during pagination. */
export interface ShopifyImageEdge {
  __typename?: "ImageEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ImageEdge. */
  node: ShopifyImage
}

/** The input fields for an image. */
export interface ShopifyImageInput {
  /** A word or phrase to share the nature or contents of an image. */
  altText?: InputMaybe<Scalars["String"]["input"]>
  /** A globally-unique ID. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** The URL of the image. May be a staged upload URL. */
  src?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * The available options for transforming an image.
 *
 * All transformation options are considered best effort. Any transformation that the original image type doesn't support will be ignored.
 */
export interface ShopifyImageTransformInput {
  /**
   * The region of the image to remain after cropping.
   * Must be used in conjunction with the `maxWidth` and/or `maxHeight` fields, where the `maxWidth` and `maxHeight` aren't equal.
   * The `crop` argument should coincide with the smaller value. A smaller `maxWidth` indicates a `LEFT` or `RIGHT` crop, while
   * a smaller `maxHeight` indicates a `TOP` or `BOTTOM` crop. For example, `{ maxWidth: 5, maxHeight: 10, crop: LEFT }` will result
   * in an image with a width of 5 and height of 10, where the right side of the image is removed.
   */
  crop?: InputMaybe<ShopifyCropRegion>
  /** Image height in pixels between 1 and 5760. */
  maxHeight?: InputMaybe<Scalars["Int"]["input"]>
  /** Image width in pixels between 1 and 5760. */
  maxWidth?: InputMaybe<Scalars["Int"]["input"]>
  /**
   * Convert the source image into the preferred content type.
   * Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
   */
  preferredContentType?: InputMaybe<ShopifyImageContentType>
  /** Image size multiplier for high-resolution retina displays. Must be within 1..3. */
  scale?: InputMaybe<Scalars["Int"]["input"]>
}

/**
 * A parameter to upload an image.
 *
 * Deprecated in favor of
 * [StagedUploadParameter](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadParameter),
 * which is used in
 * [StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget)
 * and returned by the
 * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
 */
export interface ShopifyImageUploadParameter {
  __typename?: "ImageUploadParameter"
  /** The parameter name. */
  name: Scalars["String"]["output"]
  /** The parameter value. */
  value: Scalars["String"]["output"]
}

/** Answers the question if prices include duties and / or taxes. */
export type ShopifyInclusiveDutiesPricingStrategy =
  /** Add duties at checkout when configured to collect. */
  | "ADD_DUTIES_AT_CHECKOUT"
  /** Include duties in price when configured to collect. */
  | "INCLUDE_DUTIES_IN_PRICE"
  | "%future added value"

/** Answers the question if prices include duties and / or taxes. */
export type ShopifyInclusiveTaxPricingStrategy =
  /** Add taxes at checkout when configured to collect. */
  | "ADD_TAXES_AT_CHECKOUT"
  /** Include taxes in price when configured to collect. */
  | "INCLUDES_TAXES_IN_PRICE"
  /** Include taxes in price based on country when configured to collect. */
  | "INCLUDES_TAXES_IN_PRICE_BASED_ON_COUNTRY"
  | "%future added value"

/** The input fields for the incoming line item. */
export interface ShopifyIncomingRequestLineItemInput {
  /** The ID of the rejected line item. */
  fulfillmentOrderLineItemId: Scalars["ID"]["input"]
  /** The rejection message of the line item. */
  message?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `inventoryActivate` mutation. */
export interface ShopifyInventoryActivatePayload {
  __typename?: "InventoryActivatePayload"
  /** The inventory level that was activated. */
  inventoryLevel?: Maybe<ShopifyInventoryLevel>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields required to adjust inventory quantities. */
export interface ShopifyInventoryAdjustQuantitiesInput {
  /** The quantity changes of items at locations to be made. */
  changes: Array<ShopifyInventoryChangeInput>
  /**
   * The quantity [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
   * to be adjusted.
   */
  name: Scalars["String"]["input"]
  /**
   * The reason for the quantity changes. The value must be one of the [possible
   * reasons](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#set-inventory-quantities-on-hand).
   */
  reason: Scalars["String"]["input"]
  /**
   * A URI that represents why the inventory change happened, identifying the source system and document that caused this adjustment. Enables complete audit trails and brand visibility in Shopify admin inventory history.
   *
   * Preferred format - Global ID (GID): gid://[your-app-name]/[entity-type]/[id]
   *
   * Examples:
   * - gid://warehouse-app/PurchaseOrder/PO-2024-001 (stock received)
   * - gid://3pl-system/CycleCount/CC-2024-0125 (cycle count adjustment)
   * - gid://pos-app/Transaction/TXN-98765 (in-store sale)
   * - gid://erp-connector/SyncJob/SYNC-2024-11-21-001 (ERP sync)
   * - gid://shopify/Order/1234567890 (Shopify order reference)
   *
   * Benefits: Your app name appears directly in merchant inventory history, reducing support tickets and providing clear audit trails for compliance.
   *
   * Alternative formats (also supported): https://myapp.com/documents/12345, custom-scheme://identifier
   *
   * Requirements: Valid URI with scheme and content. For GID format, all components (app, entity, id) must be present.
   */
  referenceDocumentUri?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `inventoryAdjustQuantities` mutation. */
export interface ShopifyInventoryAdjustQuantitiesPayload {
  __typename?: "InventoryAdjustQuantitiesPayload"
  /** The group of changes made by the operation. */
  inventoryAdjustmentGroup?: Maybe<ShopifyInventoryAdjustmentGroup>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryAdjustQuantitiesUserError>
}

/** An error that occurs during the execution of `InventoryAdjustQuantities`. */
export interface ShopifyInventoryAdjustQuantitiesUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryAdjustQuantitiesUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryAdjustQuantitiesUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryAdjustQuantitiesUserError`. */
export type ShopifyInventoryAdjustQuantitiesUserErrorCode =
  /** The quantities couldn't be adjusted. Try again. */
  | "ADJUST_QUANTITIES_FAILED"
  /** Internal (gid://shopify/) ledger documents are not allowed to be adjusted via API. */
  | "INTERNAL_LEDGER_DOCUMENT"
  /** A ledger document URI is not allowed when adjusting available. */
  | "INVALID_AVAILABLE_DOCUMENT"
  /** The specified inventory item could not be found. */
  | "INVALID_INVENTORY_ITEM"
  /** The specified ledger document is invalid. */
  | "INVALID_LEDGER_DOCUMENT"
  /** The specified location could not be found. */
  | "INVALID_LOCATION"
  /** A ledger document URI is required except when adjusting available. */
  | "INVALID_QUANTITY_DOCUMENT"
  /** The specified quantity name is invalid. */
  | "INVALID_QUANTITY_NAME"
  /** The quantity can't be higher than 2,000,000,000. */
  | "INVALID_QUANTITY_TOO_HIGH"
  /** The quantity can't be lower than -2,000,000,000. */
  | "INVALID_QUANTITY_TOO_LOW"
  /** The specified reason is invalid. */
  | "INVALID_REASON"
  /** The specified reference document is invalid. */
  | "INVALID_REFERENCE_DOCUMENT"
  /** The inventory item is not stocked at the location. */
  | "ITEM_NOT_STOCKED_AT_LOCATION"
  /** All changes must have the same ledger document URI or, in the case of adjusting available, no ledger document URI. */
  | "MAX_ONE_LEDGER_DOCUMENT"
  /** The specified inventory item is not allowed to be adjusted via API. Example: if the inventory item is a parent bundle. */
  | "NON_MUTABLE_INVENTORY_ITEM"
  | "%future added value"

/** Represents a group of adjustments made as part of the same operation. */
export interface ShopifyInventoryAdjustmentGroup extends ShopifyNode {
  __typename?: "InventoryAdjustmentGroup"
  /** The app that triggered the inventory event, if one exists. */
  app?: Maybe<ShopifyApp>
  /** The set of inventory quantity changes that occurred in the inventory event. */
  changes: Array<ShopifyInventoryChange>
  /** The date and time the inventory adjustment group was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The reason for the group of adjustments. */
  reason: Scalars["String"]["output"]
  /**
   * A freeform URI that represents why the inventory change happened. This can be the entity adjusting inventory
   * quantities or the Shopify resource that's associated with the inventory adjustment. For example, a unit in a
   * draft order might have been previously reserved, and a merchant later creates an order from the draft order.
   * In this case, the `referenceDocumentUri` for the inventory adjustment is a URI referencing the order ID.
   */
  referenceDocumentUri?: Maybe<Scalars["String"]["output"]>
  /** The staff member associated with the inventory event. */
  staffMember?: Maybe<ShopifyStaffMember>
}

/** Represents a group of adjustments made as part of the same operation. */
export interface ShopifyInventoryAdjustmentGroupChangesArgs {
  inventoryItemIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
  locationIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
  quantityNames?: InputMaybe<Array<Scalars["String"]["input"]>>
}

/** The input fields to specify whether the inventory item should be activated or not at the specified location. */
export interface ShopifyInventoryBulkToggleActivationInput {
  /** Whether the inventory item can be stocked at the specified location. To deactivate, set the value to false which removes an inventory item's quantities from that location, and turns off inventory at that location. */
  activate: Scalars["Boolean"]["input"]
  /** The ID of the location to modify the inventory item's stocked status. */
  locationId: Scalars["ID"]["input"]
}

/** Return type for `inventoryBulkToggleActivation` mutation. */
export interface ShopifyInventoryBulkToggleActivationPayload {
  __typename?: "InventoryBulkToggleActivationPayload"
  /** The inventory item that was updated. */
  inventoryItem?: Maybe<ShopifyInventoryItem>
  /** The activated inventory levels. */
  inventoryLevels?: Maybe<Array<ShopifyInventoryLevel>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryBulkToggleActivationUserError>
}

/** An error that occurred while setting the activation status of an inventory item. */
export interface ShopifyInventoryBulkToggleActivationUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryBulkToggleActivationUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryBulkToggleActivationUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryBulkToggleActivationUserError`. */
export type ShopifyInventoryBulkToggleActivationUserErrorCode =
  /** Cannot unstock an inventory item from the only location at which it is stocked. */
  | "CANNOT_DEACTIVATE_FROM_ONLY_LOCATION"
  /** Cannot unstock this inventory item from this location because it has committed and incoming quantities. */
  | "COMMITTED_AND_INCOMING_INVENTORY_AT_LOCATION"
  /** Cannot unstock this inventory item from this location because it has committed quantities. */
  | "COMMITTED_INVENTORY_AT_LOCATION"
  /** Failed to stock this inventory item at this location. */
  | "FAILED_TO_STOCK_AT_LOCATION"
  /** Failed to unstock this inventory item from this location. */
  | "FAILED_TO_UNSTOCK_FROM_LOCATION"
  /** An error occurred while setting the activation status. */
  | "GENERIC_ERROR"
  /** Cannot unstock this inventory item from this location because it has incoming quantities. */
  | "INCOMING_INVENTORY_AT_LOCATION"
  /** The inventory item was not found. */
  | "INVENTORY_ITEM_NOT_FOUND"
  /** Cannot stock this inventory item at this location because it is managed by a third-party fulfillment service. */
  | "INVENTORY_MANAGED_BY_3RD_PARTY"
  /** Cannot stock this inventory item at this location because it is managed by Shopify. */
  | "INVENTORY_MANAGED_BY_SHOPIFY"
  /** The location was not found. */
  | "LOCATION_NOT_FOUND"
  /** Cannot stock this inventory item at this location because the variant is missing a SKU. */
  | "MISSING_SKU"
  /** Cannot unstock this inventory item from this location because it has unavailable quantities. */
  | "RESERVED_INVENTORY_AT_LOCATION"
  | "%future added value"

/** Represents a change in an inventory quantity of an inventory item at a location. */
export interface ShopifyInventoryChange {
  __typename?: "InventoryChange"
  /** The amount by which the inventory quantity was changed. */
  delta: Scalars["Int"]["output"]
  /** The inventory item associated with this inventory change. */
  item?: Maybe<ShopifyInventoryItem>
  /** A URI that represents what the inventory quantity change was applied to. */
  ledgerDocumentUri?: Maybe<Scalars["String"]["output"]>
  /** The location associated with this inventory change. */
  location?: Maybe<ShopifyLocation>
  /**
   * The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
   * of the inventory quantity that was changed.
   */
  name: Scalars["String"]["output"]
  /** The quantity of named inventory after the change. */
  quantityAfterChange?: Maybe<Scalars["Int"]["output"]>
}

/** The input fields for the change to be made to an inventory item at a location. */
export interface ShopifyInventoryChangeInput {
  /** The amount by which the inventory quantity will be changed. */
  delta: Scalars["Int"]["input"]
  /** Specifies the inventory item to which the change will be applied. */
  inventoryItemId: Scalars["ID"]["input"]
  /**
   * A non-Shopify URI that identifies what specific inventory transaction or ledger entry was changed. Represents the exact inventory movement being referenced, distinct from the business reason for the change.
   *
   * Preferred format - Global ID (GID): gid://[your-app-name]/[transaction-type]/[id]
   *
   * Examples:
   * - gid://warehouse-app/InventoryTransaction/TXN-2024-001 (specific transaction)
   * - gid://3pl-system/StockMovement/SM-2024-0125 (stock movement record)
   * - gid://pos-app/InventoryUpdate/UPD-98765 (POS inventory update)
   * - gid://erp-connector/LedgerEntry/LE-2024-11-21-001 (ledger entry)
   *
   * Requirements: Valid non-Shopify URI with scheme and content. Required for all quantity names except `available`. Cannot use gid://shopify/* format.
   */
  ledgerDocumentUri?: InputMaybe<Scalars["String"]["input"]>
  /** Specifies the location at which the change will be applied. */
  locationId: Scalars["ID"]["input"]
}

/** Return type for `inventoryDeactivate` mutation. */
export interface ShopifyInventoryDeactivatePayload {
  __typename?: "InventoryDeactivatePayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/**
 * Represents the goods available to be shipped to a customer.
 * It holds essential information about the goods, including SKU and whether it is tracked.
 * Learn [more about the relationships between inventory objects](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps/manage-quantities-states#inventory-object-relationships).
 */
export interface ShopifyInventoryItem
  extends ShopifyLegacyInteroperability,
    ShopifyNode {
  __typename?: "InventoryItem"
  /** The ISO 3166-1 alpha-2 country code of where the item originated from. */
  countryCodeOfOrigin?: Maybe<ShopifyCountryCode>
  /** A list of country specific harmonized system codes. */
  countryHarmonizedSystemCodes: ShopifyCountryHarmonizedSystemCodeConnection
  /** The date and time when the inventory item was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The number of inventory items that share the same SKU with this item. */
  duplicateSkuCount: Scalars["Int"]["output"]
  /** The harmonized system code of the item. This must be a number between 6 and 13 digits. */
  harmonizedSystemCode?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The URL that points to the inventory history for the item. */
  inventoryHistoryUrl?: Maybe<Scalars["URL"]["output"]>
  /** The inventory item's quantities at the specified location. */
  inventoryLevel?: Maybe<ShopifyInventoryLevel>
  /** A list of the inventory item's quantities for each location that the inventory item can be stocked at. */
  inventoryLevels: ShopifyInventoryLevelConnection
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** The number of locations where this inventory item is stocked. */
  locationsCount?: Maybe<ShopifyCount>
  /** The packaging dimensions of the inventory item. */
  measurement: ShopifyInventoryItemMeasurement
  /** The ISO 3166-2 alpha-2 province code of where the item originated from. */
  provinceCodeOfOrigin?: Maybe<Scalars["String"]["output"]>
  /** Whether the inventory item requires shipping. */
  requiresShipping: Scalars["Boolean"]["output"]
  /** Inventory item SKU. Case-sensitive string. */
  sku?: Maybe<Scalars["String"]["output"]>
  /** Whether inventory levels are tracked for the item. */
  tracked: Scalars["Boolean"]["output"]
  /** Whether the value of the `tracked` field for the inventory item can be changed. */
  trackedEditable: ShopifyEditableProperty
  /** Unit cost associated with the inventory item. Note: the user must have "View product costs" permission granted in order to access this field once product granular permissions are enabled. */
  unitCost?: Maybe<ShopifyMoneyV2>
  /** The date and time when the inventory item was updated. */
  updatedAt: Scalars["DateTime"]["output"]
  /** The variant that owns this inventory item. */
  variant: ShopifyProductVariant
}

/**
 * Represents the goods available to be shipped to a customer.
 * It holds essential information about the goods, including SKU and whether it is tracked.
 * Learn [more about the relationships between inventory objects](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps/manage-quantities-states#inventory-object-relationships).
 */
export interface ShopifyInventoryItemCountryHarmonizedSystemCodesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents the goods available to be shipped to a customer.
 * It holds essential information about the goods, including SKU and whether it is tracked.
 * Learn [more about the relationships between inventory objects](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps/manage-quantities-states#inventory-object-relationships).
 */
export interface ShopifyInventoryItemInventoryLevelArgs {
  locationId: Scalars["ID"]["input"]
}

/**
 * Represents the goods available to be shipped to a customer.
 * It holds essential information about the goods, including SKU and whether it is tracked.
 * Learn [more about the relationships between inventory objects](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps/manage-quantities-states#inventory-object-relationships).
 */
export interface ShopifyInventoryItemInventoryLevelsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple InventoryItems. */
export interface ShopifyInventoryItemConnection {
  __typename?: "InventoryItemConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyInventoryItemEdge>
  /** A list of nodes that are contained in InventoryItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyInventoryItem>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one InventoryItem and a cursor during pagination. */
export interface ShopifyInventoryItemEdge {
  __typename?: "InventoryItemEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of InventoryItemEdge. */
  node: ShopifyInventoryItem
}

/** The input fields for an inventory item. */
export interface ShopifyInventoryItemInput {
  /** Unit cost associated with the inventory item, the currency is the shop's default currency. */
  cost?: InputMaybe<Scalars["Decimal"]["input"]>
  /** The country where the item was manufactured or produced, specified using the standard two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code. */
  countryCodeOfOrigin?: InputMaybe<ShopifyCountryCode>
  /** List of country-specific harmonized system codes. */
  countryHarmonizedSystemCodes?: InputMaybe<
    Array<ShopifyCountryHarmonizedSystemCodeInput>
  >
  /** The harmonized system code of the inventory item. This must be a number between 6 and 13 digits. */
  harmonizedSystemCode?: InputMaybe<Scalars["String"]["input"]>
  /** The measurements of an inventory item. */
  measurement?: InputMaybe<ShopifyInventoryItemMeasurementInput>
  /** The province where the item was manufactured or produced, specified using the standard two-letter [ISO 3166-2 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-2) province code. */
  provinceCodeOfOrigin?: InputMaybe<Scalars["String"]["input"]>
  /** Whether the inventory item needs to be physically shipped to the customer. Items that require shipping are physical products, while digital goods and services typically don't require shipping and can be fulfilled electronically. */
  requiresShipping?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The SKU (stock keeping unit) of the inventory item. */
  sku?: InputMaybe<Scalars["String"]["input"]>
  /** Whether the inventory item is tracked. */
  tracked?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents the packaged dimension for an inventory item. */
export interface ShopifyInventoryItemMeasurement extends ShopifyNode {
  __typename?: "InventoryItemMeasurement"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The weight of the inventory item. */
  weight?: Maybe<ShopifyWeight>
}

/** The input fields for an inventory item measurement. */
export interface ShopifyInventoryItemMeasurementInput {
  /** The weight of the inventory item. */
  weight?: InputMaybe<ShopifyWeightInput>
}

/** Return type for `inventoryItemUpdate` mutation. */
export interface ShopifyInventoryItemUpdatePayload {
  __typename?: "InventoryItemUpdatePayload"
  /** The inventory item that was updated. */
  inventoryItem?: Maybe<ShopifyInventoryItem>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/**
 * The quantities of an inventory item that are related to a specific location.
 * Learn [more about the relationships between inventory objects](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps/manage-quantities-states#inventory-object-relationships).
 */
export interface ShopifyInventoryLevel extends ShopifyNode {
  __typename?: "InventoryLevel"
  /** Whether the inventory items associated with the inventory level can be deactivated. */
  canDeactivate: Scalars["Boolean"]["output"]
  /** The date and time when the inventory level was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** Describes either the impact of deactivating the inventory level, or why the inventory level can't be deactivated. */
  deactivationAlert?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Inventory item associated with the inventory level. */
  item: ShopifyInventoryItem
  /** The location associated with the inventory level. */
  location: ShopifyLocation
  /** Quantities for the requested names. */
  quantities: Array<ShopifyInventoryQuantity>
  /** Scheduled changes for the requested quantity names. */
  scheduledChanges: ShopifyInventoryScheduledChangeConnection
  /** The date and time when the inventory level was updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/**
 * The quantities of an inventory item that are related to a specific location.
 * Learn [more about the relationships between inventory objects](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps/manage-quantities-states#inventory-object-relationships).
 */
export interface ShopifyInventoryLevelQuantitiesArgs {
  names: Array<Scalars["String"]["input"]>
}

/**
 * The quantities of an inventory item that are related to a specific location.
 * Learn [more about the relationships between inventory objects](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps/manage-quantities-states#inventory-object-relationships).
 */
export interface ShopifyInventoryLevelScheduledChangesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyScheduledChangeSortKeys>
}

/** An auto-generated type for paginating through multiple InventoryLevels. */
export interface ShopifyInventoryLevelConnection {
  __typename?: "InventoryLevelConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyInventoryLevelEdge>
  /** A list of nodes that are contained in InventoryLevelEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyInventoryLevel>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one InventoryLevel and a cursor during pagination. */
export interface ShopifyInventoryLevelEdge {
  __typename?: "InventoryLevelEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of InventoryLevelEdge. */
  node: ShopifyInventoryLevel
}

/** The input fields for an inventory level. */
export interface ShopifyInventoryLevelInput {
  /** The available quantity of an inventory item at a location. */
  availableQuantity: Scalars["Int"]["input"]
  /** The ID of a location associated with the inventory level. */
  locationId: Scalars["ID"]["input"]
}

/** The input fields required to move inventory quantities. */
export interface ShopifyInventoryMoveQuantitiesInput {
  /** The quantity changes of items at locations to be made. */
  changes: Array<ShopifyInventoryMoveQuantityChange>
  /**
   * The reason for the quantity changes. The value must be one of the [possible
   * reasons](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#set-inventory-quantities-on-hand).
   */
  reason: Scalars["String"]["input"]
  /**
   * A URI that represents why the inventory change happened, identifying the source system and document that caused this adjustment. Enables complete audit trails and brand visibility in Shopify admin inventory history.
   *
   * Preferred format - Global ID (GID): gid://[your-app-name]/[entity-type]/[id]
   *
   * Examples:
   * - gid://warehouse-app/PurchaseOrder/PO-2024-001 (stock received)
   * - gid://3pl-system/CycleCount/CC-2024-0125 (cycle count adjustment)
   * - gid://pos-app/Transaction/TXN-98765 (in-store sale)
   * - gid://erp-connector/SyncJob/SYNC-2024-11-21-001 (ERP sync)
   * - gid://shopify/Order/1234567890 (Shopify order reference)
   *
   * Benefits: Your app name appears directly in merchant inventory history, reducing support tickets and providing clear audit trails for compliance.
   *
   * Alternative formats (also supported): https://myapp.com/documents/12345, custom-scheme://identifier
   *
   * Requirements: Valid URI with scheme and content. For GID format, all components (app, entity, id) must be present.
   */
  referenceDocumentUri: Scalars["String"]["input"]
}

/** Return type for `inventoryMoveQuantities` mutation. */
export interface ShopifyInventoryMoveQuantitiesPayload {
  __typename?: "InventoryMoveQuantitiesPayload"
  /** The group of changes made by the operation. */
  inventoryAdjustmentGroup?: Maybe<ShopifyInventoryAdjustmentGroup>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryMoveQuantitiesUserError>
}

/** An error that occurs during the execution of `InventoryMoveQuantities`. */
export interface ShopifyInventoryMoveQuantitiesUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryMoveQuantitiesUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryMoveQuantitiesUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryMoveQuantitiesUserError`. */
export type ShopifyInventoryMoveQuantitiesUserErrorCode =
  /** The quantities can't be moved between different locations. */
  | "DIFFERENT_LOCATIONS"
  /** Internal (gid://shopify/) ledger documents are not allowed to be adjusted via API. */
  | "INTERNAL_LEDGER_DOCUMENT"
  /** A ledger document URI is not allowed when adjusting available. */
  | "INVALID_AVAILABLE_DOCUMENT"
  /** The specified inventory item could not be found. */
  | "INVALID_INVENTORY_ITEM"
  /** The specified ledger document is invalid. */
  | "INVALID_LEDGER_DOCUMENT"
  /** The specified location could not be found. */
  | "INVALID_LOCATION"
  /** A ledger document URI is required except when adjusting available. */
  | "INVALID_QUANTITY_DOCUMENT"
  /** The specified quantity name is invalid. */
  | "INVALID_QUANTITY_NAME"
  /** The quantity can't be negative. */
  | "INVALID_QUANTITY_NEGATIVE"
  /** The quantity can't be higher than 2,000,000,000. */
  | "INVALID_QUANTITY_TOO_HIGH"
  /** The specified reason is invalid. */
  | "INVALID_REASON"
  /** The specified reference document is invalid. */
  | "INVALID_REFERENCE_DOCUMENT"
  /** The inventory item is not stocked at the location. */
  | "ITEM_NOT_STOCKED_AT_LOCATION"
  /** Only a maximum of 2 ledger document URIs across all changes is allowed. */
  | "MAXIMUM_LEDGER_DOCUMENT_URIS"
  /** The quantities couldn't be moved. Try again. */
  | "MOVE_QUANTITIES_FAILED"
  /** The specified inventory item is not allowed to be adjusted via API. Example: if the inventory item is a parent bundle. */
  | "NON_MUTABLE_INVENTORY_ITEM"
  /** The quantity names for each change can't be the same. */
  | "SAME_QUANTITY_NAME"
  | "%future added value"

/**
 * Represents the change to be made to an inventory item at a location.
 * The change can either involve the same quantity name between different locations,
 * or involve different quantity names between the same location.
 */
export interface ShopifyInventoryMoveQuantityChange {
  /** Details about where the move will be made from. */
  from: ShopifyInventoryMoveQuantityTerminalInput
  /** Specifies the inventory item to which the change will be applied. */
  inventoryItemId: Scalars["ID"]["input"]
  /** The amount by which the inventory quantity will be changed. */
  quantity: Scalars["Int"]["input"]
  /** Details about where the move will be made to. */
  to: ShopifyInventoryMoveQuantityTerminalInput
}

/** The input fields representing the change to be made to an inventory item at a location. */
export interface ShopifyInventoryMoveQuantityTerminalInput {
  /**
   * A non-Shopify URI that identifies what specific inventory transaction or ledger entry was changed. Represents the exact inventory movement being referenced, distinct from the business reason for the change.
   *
   * Preferred format - Global ID (GID): gid://[your-app-name]/[transaction-type]/[id]
   *
   * Examples:
   * - gid://warehouse-app/InventoryTransaction/TXN-2024-001 (specific transaction)
   * - gid://3pl-system/StockMovement/SM-2024-0125 (stock movement record)
   * - gid://pos-app/InventoryUpdate/UPD-98765 (POS inventory update)
   * - gid://erp-connector/LedgerEntry/LE-2024-11-21-001 (ledger entry)
   *
   * Requirements: Valid non-Shopify URI with scheme and content. Required for all quantity names except `available`. Cannot use gid://shopify/* format.
   */
  ledgerDocumentUri?: InputMaybe<Scalars["String"]["input"]>
  /** Specifies the location at which the change will be applied. */
  locationId: Scalars["ID"]["input"]
  /**
   * The quantity
   * [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states) to be
   * moved.
   */
  name: Scalars["String"]["input"]
}

/** General inventory properties for the shop. */
export interface ShopifyInventoryProperties {
  __typename?: "InventoryProperties"
  /** All the quantity names. */
  quantityNames: Array<ShopifyInventoryQuantityName>
}

/** Represents a quantity of an inventory item at a specific location, for a specific name. */
export interface ShopifyInventoryQuantity extends ShopifyNode {
  __typename?: "InventoryQuantity"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
   * that identifies the inventory quantity.
   */
  name: Scalars["String"]["output"]
  /** The quantity for the quantity name. */
  quantity: Scalars["Int"]["output"]
  /** When the quantity was last updated. */
  updatedAt?: Maybe<Scalars["DateTime"]["output"]>
}

/** The input fields for the quantity to be set for an inventory item at a location. */
export interface ShopifyInventoryQuantityInput {
  /** The current quantity to be compared against the persisted quantity. */
  compareQuantity?: InputMaybe<Scalars["Int"]["input"]>
  /** Specifies the inventory item to which the quantity will be set. */
  inventoryItemId: Scalars["ID"]["input"]
  /** Specifies the location at which the quantity will be set. */
  locationId: Scalars["ID"]["input"]
  /** The quantity to which the inventory quantity will be set. */
  quantity: Scalars["Int"]["input"]
}

/** Details about an individual quantity name. */
export interface ShopifyInventoryQuantityName {
  __typename?: "InventoryQuantityName"
  /** List of quantity names that this quantity name belongs to. */
  belongsTo: Array<Scalars["String"]["output"]>
  /** List of quantity names that comprise this quantity name. */
  comprises: Array<Scalars["String"]["output"]>
  /** The display name for quantity names translated into applicable language. */
  displayName?: Maybe<Scalars["String"]["output"]>
  /** Whether the quantity name has been used by the merchant. */
  isInUse: Scalars["Boolean"]["output"]
  /**
   * The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states) of
   * the inventory quantity. Used by
   * [inventory queries and mutations](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#graphql-queries-and-mutations).
   */
  name: Scalars["String"]["output"]
}

/** Returns the scheduled changes to inventory states related to the ledger document. */
export interface ShopifyInventoryScheduledChange {
  __typename?: "InventoryScheduledChange"
  /** The date and time that the scheduled change is expected to happen. */
  expectedAt: Scalars["DateTime"]["output"]
  /**
   * The quantity
   * [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#move-inventory-quantities-between-states)
   * to transition from.
   */
  fromName: Scalars["String"]["output"]
  /** The quantities of an inventory item that are related to a specific location. */
  inventoryLevel: ShopifyInventoryLevel
  /** A freeform URI that represents what changed the inventory quantities. */
  ledgerDocumentUri: Scalars["URL"]["output"]
  /** The quantity of the scheduled change associated with the ledger document in the `fromName` state. */
  quantity: Scalars["Int"]["output"]
  /**
   * The quantity
   * [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#move-inventory-quantities-between-states)
   * to transition to.
   */
  toName: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple InventoryScheduledChanges. */
export interface ShopifyInventoryScheduledChangeConnection {
  __typename?: "InventoryScheduledChangeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyInventoryScheduledChangeEdge>
  /** A list of nodes that are contained in InventoryScheduledChangeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyInventoryScheduledChange>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one InventoryScheduledChange and a cursor during pagination. */
export interface ShopifyInventoryScheduledChangeEdge {
  __typename?: "InventoryScheduledChangeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of InventoryScheduledChangeEdge. */
  node: ShopifyInventoryScheduledChange
}

/** The input fields for a scheduled change of an inventory item. */
export interface ShopifyInventoryScheduledChangeInput {
  /** The date and time that the scheduled change is expected to happen. */
  expectedAt: Scalars["DateTime"]["input"]
  /**
   * The quantity
   * [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#move-inventory-quantities-between-states)
   * to transition from.
   */
  fromName: Scalars["String"]["input"]
  /**
   * The quantity
   * [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#move-inventory-quantities-between-states)
   * to transition to.
   */
  toName: Scalars["String"]["input"]
}

/** The input fields for the inventory item associated with the scheduled changes that need to be applied. */
export interface ShopifyInventoryScheduledChangeItemInput {
  /** The ID of the inventory item. */
  inventoryItemId: Scalars["ID"]["input"]
  /**
   * A non-Shopify URI that identifies what specific inventory transaction or ledger entry was changed. Represents the exact inventory movement being referenced, distinct from the business reason for the change.
   *
   * Preferred format - Global ID (GID): gid://[your-app-name]/[transaction-type]/[id]
   *
   * Examples:
   * - gid://warehouse-app/InventoryTransaction/TXN-2024-001 (specific transaction)
   * - gid://3pl-system/StockMovement/SM-2024-0125 (stock movement record)
   * - gid://pos-app/InventoryUpdate/UPD-98765 (POS inventory update)
   * - gid://erp-connector/LedgerEntry/LE-2024-11-21-001 (ledger entry)
   *
   * Requirements: Valid non-Shopify URI with scheme and content. Cannot use gid://shopify/* format.
   */
  ledgerDocumentUri: Scalars["URL"]["input"]
  /** The ID of the location. */
  locationId: Scalars["ID"]["input"]
  /** An array of all the scheduled changes for the item. */
  scheduledChanges: Array<ShopifyInventoryScheduledChangeInput>
}

/** The input fields required to set inventory on hand quantities. */
export interface ShopifyInventorySetOnHandQuantitiesInput {
  /**
   * The reason for the quantity changes. The value must be one of the [possible
   * reasons](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#set-inventory-quantities-on-hand).
   */
  reason: Scalars["String"]["input"]
  /**
   * A URI that represents why the inventory change happened, identifying the source system and document that caused this adjustment. Enables complete audit trails and brand visibility in Shopify admin inventory history.
   *
   * Preferred format - Global ID (GID): gid://[your-app-name]/[entity-type]/[id]
   *
   * Examples:
   * - gid://warehouse-app/PurchaseOrder/PO-2024-001 (stock received)
   * - gid://3pl-system/CycleCount/CC-2024-0125 (cycle count adjustment)
   * - gid://pos-app/Transaction/TXN-98765 (in-store sale)
   * - gid://erp-connector/SyncJob/SYNC-2024-11-21-001 (ERP sync)
   * - gid://shopify/Order/1234567890 (Shopify order reference)
   *
   * Benefits: Your app name appears directly in merchant inventory history, reducing support tickets and providing clear audit trails for compliance.
   *
   * Alternative formats (also supported): https://myapp.com/documents/12345, custom-scheme://identifier
   *
   * Requirements: Valid URI with scheme and content. For GID format, all components (app, entity, id) must be present.
   */
  referenceDocumentUri?: InputMaybe<Scalars["String"]["input"]>
  /** The value to which the on hand quantity will be set. */
  setQuantities: Array<ShopifyInventorySetQuantityInput>
}

/** Return type for `inventorySetOnHandQuantities` mutation. */
export interface ShopifyInventorySetOnHandQuantitiesPayload {
  __typename?: "InventorySetOnHandQuantitiesPayload"
  /** The group of changes made by the operation. */
  inventoryAdjustmentGroup?: Maybe<ShopifyInventoryAdjustmentGroup>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventorySetOnHandQuantitiesUserError>
}

/** An error that occurs during the execution of `InventorySetOnHandQuantities`. */
export interface ShopifyInventorySetOnHandQuantitiesUserError
  extends ShopifyDisplayableError {
  __typename?: "InventorySetOnHandQuantitiesUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventorySetOnHandQuantitiesUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventorySetOnHandQuantitiesUserError`. */
export type ShopifyInventorySetOnHandQuantitiesUserErrorCode =
  /** The specified inventory item could not be found. */
  | "INVALID_INVENTORY_ITEM"
  /** The specified location could not be found. */
  | "INVALID_LOCATION"
  /** The quantity can't be negative. */
  | "INVALID_QUANTITY_NEGATIVE"
  /** The total quantity can't be higher than 1,000,000,000. */
  | "INVALID_QUANTITY_TOO_HIGH"
  /** The specified reason is invalid. */
  | "INVALID_REASON"
  /** The specified reference document is invalid. */
  | "INVALID_REFERENCE_DOCUMENT"
  /** The inventory item is not stocked at the location. */
  | "ITEM_NOT_STOCKED_AT_LOCATION"
  /** The specified inventory item is not allowed to be adjusted via API. Example: if the inventory item is a parent bundle. */
  | "NON_MUTABLE_INVENTORY_ITEM"
  /** The on-hand quantities couldn't be set. Try again. */
  | "SET_ON_HAND_QUANTITIES_FAILED"
  | "%future added value"

/** The input fields required to set inventory quantities. */
export interface ShopifyInventorySetQuantitiesInput {
  /** Skip the compare quantity check in the quantities field. */
  ignoreCompareQuantity?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The name of quantities to be changed. The only accepted values are: `available` or `on_hand`. */
  name: Scalars["String"]["input"]
  /** The values to which each quantities will be set. */
  quantities: Array<ShopifyInventoryQuantityInput>
  /**
   * The reason for the quantity changes. The value must be one of the [possible
   * reasons](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#set-inventory-quantities-on-hand).
   */
  reason: Scalars["String"]["input"]
  /**
   * A URI that represents why the inventory change happened, identifying the source system and document that caused this adjustment. Enables complete audit trails and brand visibility in Shopify admin inventory history.
   *
   * Preferred format - Global ID (GID): gid://[your-app-name]/[entity-type]/[id]
   *
   * Examples:
   * - gid://warehouse-app/PurchaseOrder/PO-2024-001 (stock received)
   * - gid://3pl-system/CycleCount/CC-2024-0125 (cycle count adjustment)
   * - gid://pos-app/Transaction/TXN-98765 (in-store sale)
   * - gid://erp-connector/SyncJob/SYNC-2024-11-21-001 (ERP sync)
   * - gid://shopify/Order/1234567890 (Shopify order reference)
   *
   * Benefits: Your app name appears directly in merchant inventory history, reducing support tickets and providing clear audit trails for compliance.
   *
   * Alternative formats (also supported): https://myapp.com/documents/12345, custom-scheme://identifier
   *
   * Requirements: Valid URI with scheme and content. For GID format, all components (app, entity, id) must be present.
   */
  referenceDocumentUri?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `inventorySetQuantities` mutation. */
export interface ShopifyInventorySetQuantitiesPayload {
  __typename?: "InventorySetQuantitiesPayload"
  /** The group of changes made by the operation. */
  inventoryAdjustmentGroup?: Maybe<ShopifyInventoryAdjustmentGroup>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventorySetQuantitiesUserError>
}

/** An error that occurs during the execution of `InventorySetQuantities`. */
export interface ShopifyInventorySetQuantitiesUserError
  extends ShopifyDisplayableError {
  __typename?: "InventorySetQuantitiesUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventorySetQuantitiesUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventorySetQuantitiesUserError`. */
export type ShopifyInventorySetQuantitiesUserErrorCode =
  /** The compareQuantity argument must be given to each quantity or ignored using ignoreCompareQuantity. */
  | "COMPARE_QUANTITY_REQUIRED"
  /** The compareQuantity value does not match persisted value. */
  | "COMPARE_QUANTITY_STALE"
  /** The specified inventory item could not be found. */
  | "INVALID_INVENTORY_ITEM"
  /** The specified location could not be found. */
  | "INVALID_LOCATION"
  /** The quantity name must be either 'available' or 'on_hand'. */
  | "INVALID_NAME"
  /** The quantity can't be negative. */
  | "INVALID_QUANTITY_NEGATIVE"
  /** The total quantity can't be higher than 1,000,000,000. */
  | "INVALID_QUANTITY_TOO_HIGH"
  /** The total quantity can't be lower than -1,000,000,000. */
  | "INVALID_QUANTITY_TOO_LOW"
  /** The specified reason is invalid. */
  | "INVALID_REASON"
  /** The specified reference document is invalid. */
  | "INVALID_REFERENCE_DOCUMENT"
  /** The specified inventory item is not stocked at the location. */
  | "ITEM_NOT_STOCKED_AT_LOCATION"
  /** The specified inventory item is not allowed to be adjusted via API. Example: if the inventory item is a parent bundle. */
  | "NON_MUTABLE_INVENTORY_ITEM"
  /** The combination of inventoryItemId and locationId must be unique. */
  | "NO_DUPLICATE_INVENTORY_ITEM_ID_GROUP_ID_PAIR"
  | "%future added value"

/** The input fields for the quantity to be set for an inventory item at a location. */
export interface ShopifyInventorySetQuantityInput {
  /** Specifies the inventory item to which the quantity will be set. */
  inventoryItemId: Scalars["ID"]["input"]
  /** Specifies the location at which the quantity will be set. */
  locationId: Scalars["ID"]["input"]
  /** The quantity to which the inventory quantity will be set. */
  quantity: Scalars["Int"]["input"]
}

/** The input fields for setting up scheduled changes of inventory items. */
export interface ShopifyInventorySetScheduledChangesInput {
  /** The list of all the items on which the scheduled changes need to be applied. */
  items: Array<ShopifyInventoryScheduledChangeItemInput>
  /** The reason for setting up the scheduled changes. */
  reason: Scalars["String"]["input"]
  /**
   * A URI that represents why the inventory change happened, identifying the source system and document that caused this adjustment. Enables complete audit trails and brand visibility in Shopify admin inventory history.
   *
   * Preferred format - Global ID (GID): gid://[your-app-name]/[entity-type]/[id]
   *
   * Examples:
   * - gid://warehouse-app/PurchaseOrder/PO-2024-001 (stock received)
   * - gid://3pl-system/CycleCount/CC-2024-0125 (cycle count adjustment)
   * - gid://pos-app/Transaction/TXN-98765 (in-store sale)
   * - gid://erp-connector/SyncJob/SYNC-2024-11-21-001 (ERP sync)
   * - gid://shopify/Order/1234567890 (Shopify order reference)
   *
   * Benefits: Your app name appears directly in merchant inventory history, reducing support tickets and providing clear audit trails for compliance.
   *
   * Alternative formats (also supported): https://myapp.com/documents/12345, custom-scheme://identifier
   *
   * Requirements: Valid URI with scheme and content. For GID format, all components (app, entity, id) must be present.
   */
  referenceDocumentUri: Scalars["URL"]["input"]
}

/** Return type for `inventorySetScheduledChanges` mutation. */
export interface ShopifyInventorySetScheduledChangesPayload {
  __typename?: "InventorySetScheduledChangesPayload"
  /** The scheduled changes that were created. */
  scheduledChanges?: Maybe<Array<ShopifyInventoryScheduledChange>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventorySetScheduledChangesUserError>
}

/** An error that occurs during the execution of `InventorySetScheduledChanges`. */
export interface ShopifyInventorySetScheduledChangesUserError
  extends ShopifyDisplayableError {
  __typename?: "InventorySetScheduledChangesUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventorySetScheduledChangesUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventorySetScheduledChangesUserError`. */
export type ShopifyInventorySetScheduledChangesUserErrorCode =
  /** The item can only have one scheduled change for quantity name as the fromName. */
  | "DUPLICATE_FROM_NAME"
  /** The item can only have one scheduled change for quantity name as the toName. */
  | "DUPLICATE_TO_NAME"
  /** There was an error updating the scheduled changes. */
  | "ERROR_UPDATING_SCHEDULED"
  /** The specified field is invalid. */
  | "INCLUSION"
  /** The specified fromName is invalid. */
  | "INVALID_FROM_NAME"
  /** The specified reason is invalid. */
  | "INVALID_REASON"
  /** The specified toName is invalid. */
  | "INVALID_TO_NAME"
  /** The inventory item was not found. */
  | "INVENTORY_ITEM_NOT_FOUND"
  /** The inventory item was not found at the location specified. */
  | "INVENTORY_STATE_NOT_FOUND"
  /** At least 1 item must be provided. */
  | "ITEMS_EMPTY"
  /** The ledger document URI is invalid. */
  | "LEDGER_DOCUMENT_INVALID"
  /** The location couldn't be found. */
  | "LOCATION_NOT_FOUND"
  /** The from_name and to_name can't be the same. */
  | "SAME_FROM_TO_NAMES"
  | "%future added value"

/** Represents an inventory shipment. */
export interface ShopifyInventoryShipment extends ShopifyNode {
  __typename?: "InventoryShipment"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The total quantity of all items in the shipment. */
  lineItemTotalQuantity: Scalars["Int"]["output"]
  /** The line items included in this shipment. */
  lineItems?: Maybe<ShopifyInventoryShipmentLineItemConnection>
  /** The number of line items associated with the inventory shipment. Limited to a maximum of 10000 by default. */
  lineItemsCount?: Maybe<ShopifyCount>
  /** The name of the inventory shipment. */
  name: Scalars["String"]["output"]
  /** The current status of the shipment. */
  status: ShopifyInventoryShipmentStatus
  /** The total quantity of items accepted across all line items in this shipment. */
  totalAcceptedQuantity: Scalars["Int"]["output"]
  /** The total quantity of items received (both accepted and rejected) across all line items in this shipment. */
  totalReceivedQuantity: Scalars["Int"]["output"]
  /** The total quantity of items rejected across all line items in this shipment. */
  totalRejectedQuantity: Scalars["Int"]["output"]
  /** The tracking information for the shipment. */
  tracking?: Maybe<ShopifyInventoryShipmentTracking>
}

/** Represents an inventory shipment. */
export interface ShopifyInventoryShipmentLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyShipmentLineItemSortKeys>
}

/** Represents an inventory shipment. */
export interface ShopifyInventoryShipmentLineItemsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `inventoryShipmentAddItems` mutation. */
export interface ShopifyInventoryShipmentAddItemsPayload {
  __typename?: "InventoryShipmentAddItemsPayload"
  /** The list of added line items. */
  addedItems?: Maybe<Array<ShopifyInventoryShipmentLineItem>>
  /** The inventory shipment with the added items. */
  inventoryShipment?: Maybe<ShopifyInventoryShipment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryShipmentAddItemsUserError>
}

/** An error that occurs during the execution of `InventoryShipmentAddItems`. */
export interface ShopifyInventoryShipmentAddItemsUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryShipmentAddItemsUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryShipmentAddItemsUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryShipmentAddItemsUserError`. */
export type ShopifyInventoryShipmentAddItemsUserErrorCode =
  /** A single item can't be listed twice. */
  | "DUPLICATE_ITEM"
  /** The quantity is invalid. */
  | "INVALID_QUANTITY"
  /** Current shipment status does not support this operation. */
  | "INVALID_SHIPMENT_STATUS"
  /** The item was not found. */
  | "ITEM_NOT_FOUND"
  /** The location selected is not active. */
  | "LOCATION_NOT_ACTIVE"
  /** The location selected can't be found. */
  | "LOCATION_NOT_FOUND"
  /** The shipment was not found. */
  | "SHIPMENT_NOT_FOUND"
  /** The item does not track inventory. */
  | "UNTRACKED_ITEM"
  | "%future added value"

/** An auto-generated type for paginating through multiple InventoryShipments. */
export interface ShopifyInventoryShipmentConnection {
  __typename?: "InventoryShipmentConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyInventoryShipmentEdge>
  /** A list of nodes that are contained in InventoryShipmentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyInventoryShipment>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `inventoryShipmentCreateInTransit` mutation. */
export interface ShopifyInventoryShipmentCreateInTransitPayload {
  __typename?: "InventoryShipmentCreateInTransitPayload"
  /** The created inventory shipment. */
  inventoryShipment?: Maybe<ShopifyInventoryShipment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryShipmentCreateInTransitUserError>
}

/** An error that occurs during the execution of `InventoryShipmentCreateInTransit`. */
export interface ShopifyInventoryShipmentCreateInTransitUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryShipmentCreateInTransitUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryShipmentCreateInTransitUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryShipmentCreateInTransitUserError`. */
export type ShopifyInventoryShipmentCreateInTransitUserErrorCode =
  /** A single item can't be listed twice. */
  | "DUPLICATE_ITEM"
  /** The shipment input cannot be empty. */
  | "EMPTY_SHIPMENT_INPUT"
  /** One or more items are not valid. */
  | "INVALID_ITEM"
  /** The quantity is invalid. */
  | "INVALID_QUANTITY"
  /** The shipment input is invalid. */
  | "INVALID_SHIPMENT_INPUT"
  /** Current transfer status does not support this operation. */
  | "INVALID_TRANSFER_STATUS"
  /** The URL is invalid. */
  | "INVALID_URL"
  /** The item is not stocked at the intended location. */
  | "INVENTORY_STATE_NOT_ACTIVE"
  /** The list of line items is empty. */
  | "ITEMS_EMPTY"
  /** The item was not found. */
  | "ITEM_NOT_FOUND"
  /** The location selected is not active. */
  | "LOCATION_NOT_ACTIVE"
  /** The transfer was not found. */
  | "TRANSFER_NOT_FOUND"
  /** The item does not track inventory. */
  | "UNTRACKED_ITEM"
  | "%future added value"

/** The input fields to add a shipment. */
export interface ShopifyInventoryShipmentCreateInput {
  /** The list of line items for the inventory shipment. */
  lineItems: Array<ShopifyInventoryShipmentLineItemInput>
  /** The ID of the inventory movement (transfer or purchase order) this shipment belongs to. */
  movementId: Scalars["ID"]["input"]
  /** The tracking information for the shipment. */
  trackingInput?: InputMaybe<ShopifyInventoryShipmentTrackingInput>
}

/** Return type for `inventoryShipmentCreate` mutation. */
export interface ShopifyInventoryShipmentCreatePayload {
  __typename?: "InventoryShipmentCreatePayload"
  /** The created inventory shipment. */
  inventoryShipment?: Maybe<ShopifyInventoryShipment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryShipmentCreateUserError>
}

/** An error that occurs during the execution of `InventoryShipmentCreate`. */
export interface ShopifyInventoryShipmentCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryShipmentCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryShipmentCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryShipmentCreateUserError`. */
export type ShopifyInventoryShipmentCreateUserErrorCode =
  /** Bundled items cannot be used for this operation. */
  | "BUNDLED_ITEM"
  /** A single item can't be listed twice. */
  | "DUPLICATE_ITEM"
  /** The shipment input cannot be empty. */
  | "EMPTY_SHIPMENT_INPUT"
  /** One or more items are not valid. */
  | "INVALID_ITEM"
  /** The quantity is invalid. */
  | "INVALID_QUANTITY"
  /** The shipment input is invalid. */
  | "INVALID_SHIPMENT_INPUT"
  /** Current transfer status does not support this operation. */
  | "INVALID_TRANSFER_STATUS"
  /** The URL is invalid. */
  | "INVALID_URL"
  /** The item was not found. */
  | "ITEM_NOT_FOUND"
  /** The location selected is not active. */
  | "LOCATION_NOT_ACTIVE"
  /** The transfer was not found. */
  | "TRANSFER_NOT_FOUND"
  /** The item does not track inventory. */
  | "UNTRACKED_ITEM"
  | "%future added value"

/** Return type for `inventoryShipmentDelete` mutation. */
export interface ShopifyInventoryShipmentDeletePayload {
  __typename?: "InventoryShipmentDeletePayload"
  /** The ID of the inventory shipment that was deleted. */
  id?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryShipmentDeleteUserError>
}

/** An error that occurs during the execution of `InventoryShipmentDelete`. */
export interface ShopifyInventoryShipmentDeleteUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryShipmentDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryShipmentDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryShipmentDeleteUserError`. */
export type ShopifyInventoryShipmentDeleteUserErrorCode =
  /** Current shipment status does not support this operation. */
  | "INVALID_SHIPMENT_STATUS"
  /** The shipment was not found. */
  | "SHIPMENT_NOT_FOUND"
  | "%future added value"

/** An auto-generated type which holds one InventoryShipment and a cursor during pagination. */
export interface ShopifyInventoryShipmentEdge {
  __typename?: "InventoryShipmentEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of InventoryShipmentEdge. */
  node: ShopifyInventoryShipment
}

/** Represents a single line item within an inventory shipment. */
export interface ShopifyInventoryShipmentLineItem extends ShopifyNode {
  __typename?: "InventoryShipmentLineItem"
  /** The quantity of items that were accepted in this shipment line item. */
  acceptedQuantity: Scalars["Int"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The inventory item associated with this line item. */
  inventoryItem?: Maybe<ShopifyInventoryItem>
  /** The quantity of items in this shipment line item. */
  quantity: Scalars["Int"]["output"]
  /** The quantity of items that were rejected in this shipment line item. */
  rejectedQuantity: Scalars["Int"]["output"]
  /** The total quantity of units that haven't been received (neither accepted or rejected) in this shipment line item. */
  unreceivedQuantity: Scalars["Int"]["output"]
}

/** An auto-generated type for paginating through multiple InventoryShipmentLineItems. */
export interface ShopifyInventoryShipmentLineItemConnection {
  __typename?: "InventoryShipmentLineItemConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyInventoryShipmentLineItemEdge>
  /** A list of nodes that are contained in InventoryShipmentLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyInventoryShipmentLineItem>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one InventoryShipmentLineItem and a cursor during pagination. */
export interface ShopifyInventoryShipmentLineItemEdge {
  __typename?: "InventoryShipmentLineItemEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of InventoryShipmentLineItemEdge. */
  node: ShopifyInventoryShipmentLineItem
}

/** The input fields for a line item on an inventory shipment. */
export interface ShopifyInventoryShipmentLineItemInput {
  /** The inventory item ID for the shipment line item. */
  inventoryItemId: Scalars["ID"]["input"]
  /** The quantity for the shipment line item. */
  quantity: Scalars["Int"]["input"]
}

/** Return type for `inventoryShipmentMarkInTransit` mutation. */
export interface ShopifyInventoryShipmentMarkInTransitPayload {
  __typename?: "InventoryShipmentMarkInTransitPayload"
  /** The marked in transit inventory shipment. */
  inventoryShipment?: Maybe<ShopifyInventoryShipment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryShipmentMarkInTransitUserError>
}

/** An error that occurs during the execution of `InventoryShipmentMarkInTransit`. */
export interface ShopifyInventoryShipmentMarkInTransitUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryShipmentMarkInTransitUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryShipmentMarkInTransitUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryShipmentMarkInTransitUserError`. */
export type ShopifyInventoryShipmentMarkInTransitUserErrorCode =
  /** Failed to activate inventory at location. */
  | "ACTIVATION_FAILED"
  /** The quantity is invalid. */
  | "INVALID_QUANTITY"
  /** Current shipment status does not support this operation. */
  | "INVALID_SHIPMENT_STATUS"
  /** The item is not stocked at the intended location. */
  | "INVENTORY_STATE_NOT_ACTIVE"
  /** The list of line items is empty. */
  | "ITEMS_EMPTY"
  /** The item was not found. */
  | "ITEM_NOT_FOUND"
  /** The location selected is not active. */
  | "LOCATION_NOT_ACTIVE"
  /** The shipment was not found. */
  | "SHIPMENT_NOT_FOUND"
  /** The item does not track inventory. */
  | "UNTRACKED_ITEM"
  | "%future added value"

/** The input fields to receive an item on an inventory shipment. */
export interface ShopifyInventoryShipmentReceiveItemInput {
  /** The quantity for the item to be received. */
  quantity: Scalars["Int"]["input"]
  /** The reason for received item. */
  reason: ShopifyInventoryShipmentReceiveLineItemReason
  /** The shipment line item ID to be received. */
  shipmentLineItemId: Scalars["ID"]["input"]
}

/** The reason for receiving a line item on an inventory shipment. */
export type ShopifyInventoryShipmentReceiveLineItemReason =
  /** The line item was accepted. */
  | "ACCEPTED"
  /** The line item was rejected. */
  | "REJECTED"
  | "%future added value"

/** Return type for `inventoryShipmentReceive` mutation. */
export interface ShopifyInventoryShipmentReceivePayload {
  __typename?: "InventoryShipmentReceivePayload"
  /** The inventory shipment with received items. */
  inventoryShipment?: Maybe<ShopifyInventoryShipment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryShipmentReceiveUserError>
}

/** An error that occurs during the execution of `InventoryShipmentReceive`. */
export interface ShopifyInventoryShipmentReceiveUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryShipmentReceiveUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryShipmentReceiveUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryShipmentReceiveUserError`. */
export type ShopifyInventoryShipmentReceiveUserErrorCode =
  /** Unexpected internal error happened. */
  | "INTERNAL_ERROR"
  /** The quantity is invalid. */
  | "INVALID_QUANTITY"
  /** Current shipment status does not support this operation. */
  | "INVALID_SHIPMENT_STATUS"
  /** The item is not stocked at the intended location. */
  | "INVENTORY_STATE_NOT_ACTIVE"
  /** The item was not found. */
  | "ITEM_NOT_FOUND"
  /** The location selected is not active. */
  | "LOCATION_NOT_ACTIVE"
  /** The location selected can't be found. */
  | "LOCATION_NOT_FOUND"
  /** The shipment was not found. */
  | "SHIPMENT_NOT_FOUND"
  | "%future added value"

/** Return type for `inventoryShipmentRemoveItems` mutation. */
export interface ShopifyInventoryShipmentRemoveItemsPayload {
  __typename?: "InventoryShipmentRemoveItemsPayload"
  /** The inventory shipment with items removed. */
  inventoryShipment?: Maybe<ShopifyInventoryShipment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryShipmentRemoveItemsUserError>
}

/** An error that occurs during the execution of `InventoryShipmentRemoveItems`. */
export interface ShopifyInventoryShipmentRemoveItemsUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryShipmentRemoveItemsUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryShipmentRemoveItemsUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryShipmentRemoveItemsUserError`. */
export type ShopifyInventoryShipmentRemoveItemsUserErrorCode =
  /** Unexpected internal error happened. */
  | "INTERNAL_ERROR"
  /** Current shipment status does not support this operation. */
  | "INVALID_SHIPMENT_STATUS"
  /** The item was not found. */
  | "ITEM_NOT_FOUND"
  /** The location selected can't be found. */
  | "LOCATION_NOT_FOUND"
  /** The shipment was not found. */
  | "SHIPMENT_NOT_FOUND"
  | "%future added value"

/** Return type for `inventoryShipmentSetTracking` mutation. */
export interface ShopifyInventoryShipmentSetTrackingPayload {
  __typename?: "InventoryShipmentSetTrackingPayload"
  /** The inventory shipment with the edited tracking info. */
  inventoryShipment?: Maybe<ShopifyInventoryShipment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryShipmentSetTrackingUserError>
}

/** An error that occurs during the execution of `InventoryShipmentSetTracking`. */
export interface ShopifyInventoryShipmentSetTrackingUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryShipmentSetTrackingUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryShipmentSetTrackingUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryShipmentSetTrackingUserError`. */
export type ShopifyInventoryShipmentSetTrackingUserErrorCode =
  /** The URL is invalid. */
  | "INVALID_URL"
  /** The shipment was not found. */
  | "SHIPMENT_NOT_FOUND"
  | "%future added value"

/** The status of an inventory shipment. */
export type ShopifyInventoryShipmentStatus =
  /** The inventory shipment has been created but not yet shipped. */
  | "DRAFT"
  /** The inventory shipment is currently in transit. */
  | "IN_TRANSIT"
  /** Status not included in the current enumeration set. */
  | "OTHER"
  /** The inventory shipment has been partially received at the destination. */
  | "PARTIALLY_RECEIVED"
  /** The inventory shipment has been completely received at the destination. */
  | "RECEIVED"
  | "%future added value"

/** Represents the tracking information for an inventory shipment. */
export interface ShopifyInventoryShipmentTracking {
  __typename?: "InventoryShipmentTracking"
  /** The estimated date and time that the shipment will arrive. */
  arrivesAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The name of the shipping carrier company. */
  company?: Maybe<Scalars["String"]["output"]>
  /** The tracking number used by the carrier to identify the shipment. */
  trackingNumber?: Maybe<Scalars["String"]["output"]>
  /**
   * The URL to track the shipment.
   *
   * Given a tracking number and a shipping carrier company name from
   * [the list](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#field-company),
   * Shopify will return a generated tracking URL if no tracking URL was set manually.
   */
  trackingUrl?: Maybe<Scalars["URL"]["output"]>
}

/** The input fields for an inventory shipment's tracking information. */
export interface ShopifyInventoryShipmentTrackingInput {
  /** The estimated date and time that the shipment will arrive. */
  arrivesAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /**
   * The name of the shipping carrier company.
   *
   * Given a shipping carrier company name from
   * [the list](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#field-company),
   * Shopify can build a tracking URL for a provided tracking number.
   */
  company?: InputMaybe<Scalars["String"]["input"]>
  /** The tracking number for the shipment. */
  trackingNumber?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The URL to track the shipment.
   *
   * Use this field to specify a custom tracking URL. If no custom tracking URL is set, Shopify will automatically provide
   * this field on query for a tracking number and a supported shipping carrier company from
   * [the list](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#field-company).
   */
  trackingUrl?: InputMaybe<Scalars["URL"]["input"]>
}

/** The input fields for a line item on an inventory shipment. */
export interface ShopifyInventoryShipmentUpdateItemQuantitiesInput {
  /** The quantity for the shipment line item. */
  quantity: Scalars["Int"]["input"]
  /** The ID for the inventory shipment line item. */
  shipmentLineItemId: Scalars["ID"]["input"]
}

/** Return type for `inventoryShipmentUpdateItemQuantities` mutation. */
export interface ShopifyInventoryShipmentUpdateItemQuantitiesPayload {
  __typename?: "InventoryShipmentUpdateItemQuantitiesPayload"
  /** The inventory shipment with updated item quantities. */
  shipment?: Maybe<ShopifyInventoryShipment>
  /** The updated item quantities. */
  updatedLineItems?: Maybe<Array<ShopifyInventoryShipmentLineItem>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryShipmentUpdateItemQuantitiesUserError>
}

/** An error that occurs during the execution of `InventoryShipmentUpdateItemQuantities`. */
export interface ShopifyInventoryShipmentUpdateItemQuantitiesUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryShipmentUpdateItemQuantitiesUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryShipmentUpdateItemQuantitiesUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryShipmentUpdateItemQuantitiesUserError`. */
export type ShopifyInventoryShipmentUpdateItemQuantitiesUserErrorCode =
  /** The quantity is invalid. */
  | "INVALID_QUANTITY"
  /** Current shipment status does not support this operation. */
  | "INVALID_SHIPMENT_STATUS"
  /** The item was not found. */
  | "ITEM_NOT_FOUND"
  /** The location selected is not active. */
  | "LOCATION_NOT_ACTIVE"
  /** The location selected can't be found. */
  | "LOCATION_NOT_FOUND"
  /** The shipment was not found. */
  | "SHIPMENT_NOT_FOUND"
  | "%future added value"

/** Represents the intention to move inventory between locations. */
export interface ShopifyInventoryTransfer
  extends ShopifyCommentEventSubject,
    ShopifyHasEvents,
    ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyNode {
  __typename?: "InventoryTransfer"
  /** The date and time the inventory transfer was created in UTC format. */
  dateCreated?: Maybe<Scalars["DateTime"]["output"]>
  /** Snapshot of the destination location (name, address, when snapped) with an optional link to the live Location object. If the original location is deleted, the snapshot data will still be available but the location link will be nil. */
  destination?: Maybe<ShopifyLocationSnapshot>
  /** The list of events associated with the inventory transfer. */
  events: ShopifyEventConnection
  /** Whether the merchant has added timeline comments to the inventory transfer. */
  hasTimelineComment: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The line items associated with the inventory transfer. */
  lineItems: ShopifyInventoryTransferLineItemConnection
  /** The number of line items associated with the inventory transfer. Limited to a maximum of 10000 by default. */
  lineItemsCount?: Maybe<ShopifyCount>
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** The name of the inventory transfer. */
  name: Scalars["String"]["output"]
  /** Additional note attached to the inventory transfer. */
  note?: Maybe<Scalars["String"]["output"]>
  /** Snapshot of the origin location (name, address, when snapped) with an optional link to the live Location object. If the original location is deleted, the snapshot data will still be available but the location link will be nil. */
  origin?: Maybe<ShopifyLocationSnapshot>
  /** The total quantity of items received in the transfer. */
  receivedQuantity: Scalars["Int"]["output"]
  /** The reference name of the inventory transfer. */
  referenceName?: Maybe<Scalars["String"]["output"]>
  /** The shipments associated with the inventory transfer. */
  shipments: ShopifyInventoryShipmentConnection
  /** The current status of the transfer. */
  status: ShopifyInventoryTransferStatus
  /** A list of tags that have been added to the inventory transfer. */
  tags: Array<Scalars["String"]["output"]>
  /** The total quantity of items being transferred. */
  totalQuantity: Scalars["Int"]["output"]
}

/** Represents the intention to move inventory between locations. */
export interface ShopifyInventoryTransferEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/** Represents the intention to move inventory between locations. */
export interface ShopifyInventoryTransferLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents the intention to move inventory between locations. */
export interface ShopifyInventoryTransferLineItemsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
}

/** Represents the intention to move inventory between locations. */
export interface ShopifyInventoryTransferMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** Represents the intention to move inventory between locations. */
export interface ShopifyInventoryTransferMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/** Represents the intention to move inventory between locations. */
export interface ShopifyInventoryTransferMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents the intention to move inventory between locations. */
export interface ShopifyInventoryTransferShipmentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `inventoryTransferCancel` mutation. */
export interface ShopifyInventoryTransferCancelPayload {
  __typename?: "InventoryTransferCancelPayload"
  /** The cancelled inventory transfer. */
  inventoryTransfer?: Maybe<ShopifyInventoryTransfer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryTransferCancelUserError>
}

/** An error that occurs during the execution of `InventoryTransferCancel`. */
export interface ShopifyInventoryTransferCancelUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryTransferCancelUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryTransferCancelUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryTransferCancelUserError`. */
export type ShopifyInventoryTransferCancelUserErrorCode =
  /** Current transfer status does not support this operation. */
  | "INVALID_TRANSFER_STATUS"
  /** Shipment already exists for the transfer. */
  | "SHIPMENT_EXISTS"
  /** The transfer was not found. */
  | "TRANSFER_NOT_FOUND"
  | "%future added value"

/** An auto-generated type for paginating through multiple InventoryTransfers. */
export interface ShopifyInventoryTransferConnection {
  __typename?: "InventoryTransferConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyInventoryTransferEdge>
  /** A list of nodes that are contained in InventoryTransferEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyInventoryTransfer>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields to create an inventory transfer. */
export interface ShopifyInventoryTransferCreateAsReadyToShipInput {
  /** The date and time the inventory transfer was created. If left blank, defaults to the current date and time in UTC format. */
  dateCreated?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The destination location for the inventory transfer. */
  destinationLocationId: Scalars["ID"]["input"]
  /** The list of line items for the inventory transfer. */
  lineItems?: Array<ShopifyInventoryTransferLineItemInput>
  /** A note to add to the Inventory Transfer. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** The origin location for the inventory transfer. */
  originLocationId: Scalars["ID"]["input"]
  /** The reference name to add to the inventory transfer. */
  referenceName?: InputMaybe<Scalars["String"]["input"]>
  /** The tags to add to the inventory transfer. */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
}

/** Return type for `inventoryTransferCreateAsReadyToShip` mutation. */
export interface ShopifyInventoryTransferCreateAsReadyToShipPayload {
  __typename?: "InventoryTransferCreateAsReadyToShipPayload"
  /** The created inventory transfer. */
  inventoryTransfer?: Maybe<ShopifyInventoryTransfer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryTransferCreateAsReadyToShipUserError>
}

/** An error that occurs during the execution of `InventoryTransferCreateAsReadyToShip`. */
export interface ShopifyInventoryTransferCreateAsReadyToShipUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryTransferCreateAsReadyToShipUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryTransferCreateAsReadyToShipUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryTransferCreateAsReadyToShipUserError`. */
export type ShopifyInventoryTransferCreateAsReadyToShipUserErrorCode =
  /** Bundled items cannot be used for this operation. */
  | "BUNDLED_ITEM"
  /** A single item can't be listed twice. */
  | "DUPLICATE_ITEM"
  /** The quantity is invalid. */
  | "INVALID_QUANTITY"
  /** Current transfer status does not support this operation. */
  | "INVALID_TRANSFER_STATUS"
  /** The item is not stocked at the intended location. */
  | "INVENTORY_STATE_NOT_ACTIVE"
  /** The list of line items is empty. */
  | "ITEMS_EMPTY"
  /** The item was not found. */
  | "ITEM_NOT_FOUND"
  /** The location selected is not active. */
  | "LOCATION_NOT_ACTIVE"
  /** The location selected can't be found. */
  | "LOCATION_NOT_FOUND"
  /** The tag exceeds the maximum length. */
  | "TAG_EXCEEDS_MAX_LENGTH"
  /** The transfer was not found. */
  | "TRANSFER_NOT_FOUND"
  /** The origin location cannot be the same as the destination location. */
  | "TRANSFER_ORIGIN_CANNOT_BE_THE_SAME_AS_DESTINATION"
  /** The item does not track inventory. */
  | "UNTRACKED_ITEM"
  | "%future added value"

/** The input fields to create an inventory transfer. */
export interface ShopifyInventoryTransferCreateInput {
  /** The date and time the inventory transfer was created. If left blank, defaults to the current date and time in UTC format. */
  dateCreated?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The destination location for the inventory transfer. */
  destinationLocationId?: InputMaybe<Scalars["ID"]["input"]>
  /** The list of line items for the inventory transfer. */
  lineItems?: Array<ShopifyInventoryTransferLineItemInput>
  /** A note to add to the Inventory Transfer. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** The origin location for the inventory transfer. */
  originLocationId?: InputMaybe<Scalars["ID"]["input"]>
  /** The reference name to add to the inventory transfer. */
  referenceName?: InputMaybe<Scalars["String"]["input"]>
  /** The tags to add to the inventory transfer. */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
}

/** Return type for `inventoryTransferCreate` mutation. */
export interface ShopifyInventoryTransferCreatePayload {
  __typename?: "InventoryTransferCreatePayload"
  /** The created inventory transfer. */
  inventoryTransfer?: Maybe<ShopifyInventoryTransfer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryTransferCreateUserError>
}

/** An error that occurs during the execution of `InventoryTransferCreate`. */
export interface ShopifyInventoryTransferCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryTransferCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryTransferCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryTransferCreateUserError`. */
export type ShopifyInventoryTransferCreateUserErrorCode =
  /** Bundled items cannot be used for this operation. */
  | "BUNDLED_ITEM"
  /** A single item can't be listed twice. */
  | "DUPLICATE_ITEM"
  /** The quantity is invalid. */
  | "INVALID_QUANTITY"
  /** The item is not stocked at the intended location. */
  | "INVENTORY_STATE_NOT_ACTIVE"
  /** The item was not found. */
  | "ITEM_NOT_FOUND"
  /** The location selected is not active. */
  | "LOCATION_NOT_ACTIVE"
  /** The location selected can't be found. */
  | "LOCATION_NOT_FOUND"
  /** The tag exceeds the maximum length. */
  | "TAG_EXCEEDS_MAX_LENGTH"
  /** The transfer was not found. */
  | "TRANSFER_NOT_FOUND"
  /** The origin location cannot be the same as the destination location. */
  | "TRANSFER_ORIGIN_CANNOT_BE_THE_SAME_AS_DESTINATION"
  /** The item does not track inventory. */
  | "UNTRACKED_ITEM"
  | "%future added value"

/** Return type for `inventoryTransferDelete` mutation. */
export interface ShopifyInventoryTransferDeletePayload {
  __typename?: "InventoryTransferDeletePayload"
  /** The ID of the deleted inventory transfer. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryTransferDeleteUserError>
}

/** An error that occurs during the execution of `InventoryTransferDelete`. */
export interface ShopifyInventoryTransferDeleteUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryTransferDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryTransferDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryTransferDeleteUserError`. */
export type ShopifyInventoryTransferDeleteUserErrorCode =
  /** Current transfer status does not support this operation. */
  | "INVALID_TRANSFER_STATUS"
  /** The transfer was not found. */
  | "TRANSFER_NOT_FOUND"
  | "%future added value"

/** Return type for `inventoryTransferDuplicate` mutation. */
export interface ShopifyInventoryTransferDuplicatePayload {
  __typename?: "InventoryTransferDuplicatePayload"
  /** The duplicated inventory transfer. */
  inventoryTransfer?: Maybe<ShopifyInventoryTransfer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryTransferDuplicateUserError>
}

/** An error that occurs during the execution of `InventoryTransferDuplicate`. */
export interface ShopifyInventoryTransferDuplicateUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryTransferDuplicateUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryTransferDuplicateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryTransferDuplicateUserError`. */
export type ShopifyInventoryTransferDuplicateUserErrorCode =
  /** The transfer was not found. */
  "TRANSFER_NOT_FOUND" | "%future added value"

/** An auto-generated type which holds one InventoryTransfer and a cursor during pagination. */
export interface ShopifyInventoryTransferEdge {
  __typename?: "InventoryTransferEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of InventoryTransferEdge. */
  node: ShopifyInventoryTransfer
}

/** The input fields to edit an inventory transfer. */
export interface ShopifyInventoryTransferEditInput {
  /** The date the inventory transfer was created. */
  dateCreated?: InputMaybe<Scalars["Date"]["input"]>
  /**
   * The destination location for the inventory transfer. The destination location can only be
   * changed for draft transfers.
   */
  destinationId?: InputMaybe<Scalars["ID"]["input"]>
  /** A note to add to the Inventory Transfer. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The origin location for the inventory transfer. The origin location can only be changed
   * for draft transfers.
   */
  originId?: InputMaybe<Scalars["ID"]["input"]>
  /** The reference name to add to the inventory transfer. */
  referenceName?: InputMaybe<Scalars["String"]["input"]>
  /** The tags to add to the inventory transfer. */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
}

/** Return type for `inventoryTransferEdit` mutation. */
export interface ShopifyInventoryTransferEditPayload {
  __typename?: "InventoryTransferEditPayload"
  /** The edited inventory transfer. */
  inventoryTransfer?: Maybe<ShopifyInventoryTransfer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryTransferEditUserError>
}

/** An error that occurs during the execution of `InventoryTransferEdit`. */
export interface ShopifyInventoryTransferEditUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryTransferEditUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryTransferEditUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryTransferEditUserError`. */
export type ShopifyInventoryTransferEditUserErrorCode =
  /** Unexpected internal error happened. */
  | "INTERNAL_ERROR"
  /** The item is not stocked at the intended location. */
  | "INVENTORY_STATE_NOT_ACTIVE"
  /** The location selected is not active. */
  | "LOCATION_NOT_ACTIVE"
  /** The location selected can't be found. */
  | "LOCATION_NOT_FOUND"
  /** The tag exceeds the maximum length. */
  | "TAG_EXCEEDS_MAX_LENGTH"
  /** The location of a transfer cannot be updated. Only Draft Transfers can mutate their locations. */
  | "TRANSFER_LOCATION_IMMUTABLE"
  /** The transfer was not found. */
  | "TRANSFER_NOT_FOUND"
  /** The origin location cannot be the same as the destination location. */
  | "TRANSFER_ORIGIN_CANNOT_BE_THE_SAME_AS_DESTINATION"
  | "%future added value"

/** Represents a line item belonging to an inventory transfer. */
export interface ShopifyInventoryTransferLineItem extends ShopifyNode {
  __typename?: "InventoryTransferLineItem"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The inventory item associated with this line item. */
  inventoryItem?: Maybe<ShopifyInventoryItem>
  /** The quantity of the item that has been picked for a draft shipment but not yet shipped. */
  pickedForShipmentQuantity: Scalars["Int"]["output"]
  /** The quantity of the item that can be actioned upon, such as editing the item quantity on the transfer or adding to a shipment. */
  processableQuantity: Scalars["Int"]["output"]
  /** The quantity of the item that can be shipped. */
  shippableQuantity: Scalars["Int"]["output"]
  /** The quantity of the item that has been shipped. */
  shippedQuantity: Scalars["Int"]["output"]
  /** The title of the product associated with this line item. */
  title?: Maybe<Scalars["String"]["output"]>
  /** The total quantity of items being transferred. */
  totalQuantity: Scalars["Int"]["output"]
}

/** An auto-generated type for paginating through multiple InventoryTransferLineItems. */
export interface ShopifyInventoryTransferLineItemConnection {
  __typename?: "InventoryTransferLineItemConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyInventoryTransferLineItemEdge>
  /** A list of nodes that are contained in InventoryTransferLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyInventoryTransferLineItem>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one InventoryTransferLineItem and a cursor during pagination. */
export interface ShopifyInventoryTransferLineItemEdge {
  __typename?: "InventoryTransferLineItemEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of InventoryTransferLineItemEdge. */
  node: ShopifyInventoryTransferLineItem
}

/** The input fields for a line item on an inventory transfer. */
export interface ShopifyInventoryTransferLineItemInput {
  /** The inventory item ID for the transfer line item. */
  inventoryItemId: Scalars["ID"]["input"]
  /** The quantity for the transfer line item. */
  quantity: Scalars["Int"]["input"]
}

/** Represents an update to a single transfer line item. */
export interface ShopifyInventoryTransferLineItemUpdate {
  __typename?: "InventoryTransferLineItemUpdate"
  /** The delta quantity for the transfer line item. */
  deltaQuantity?: Maybe<Scalars["Int"]["output"]>
  /** The inventory item ID for the transfer line item. */
  inventoryItemId?: Maybe<Scalars["ID"]["output"]>
  /** The new quantity for the transfer line item. */
  newQuantity?: Maybe<Scalars["Int"]["output"]>
}

/** Return type for `inventoryTransferMarkAsReadyToShip` mutation. */
export interface ShopifyInventoryTransferMarkAsReadyToShipPayload {
  __typename?: "InventoryTransferMarkAsReadyToShipPayload"
  /** The ready to ship inventory transfer. */
  inventoryTransfer?: Maybe<ShopifyInventoryTransfer>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryTransferMarkAsReadyToShipUserError>
}

/** An error that occurs during the execution of `InventoryTransferMarkAsReadyToShip`. */
export interface ShopifyInventoryTransferMarkAsReadyToShipUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryTransferMarkAsReadyToShipUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryTransferMarkAsReadyToShipUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryTransferMarkAsReadyToShipUserError`. */
export type ShopifyInventoryTransferMarkAsReadyToShipUserErrorCode =
  /** One or more items are not valid. */
  | "INVALID_ITEM"
  /** Current transfer status does not support this operation. */
  | "INVALID_TRANSFER_STATUS"
  /** The list of line items is empty. */
  | "ITEMS_EMPTY"
  /** The location selected is not active. */
  | "LOCATION_NOT_ACTIVE"
  /** The location selected can't be found. */
  | "LOCATION_NOT_FOUND"
  /** The transfer was not found. */
  | "TRANSFER_NOT_FOUND"
  | "%future added value"

/** The input fields to remove inventory items from a transfer. */
export interface ShopifyInventoryTransferRemoveItemsInput {
  /** The ID of the inventory transfer where the items will be removed. */
  id: Scalars["ID"]["input"]
  /** The IDs of the transfer line items to be removed from the transfer. */
  transferLineItemIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** Return type for `inventoryTransferRemoveItems` mutation. */
export interface ShopifyInventoryTransferRemoveItemsPayload {
  __typename?: "InventoryTransferRemoveItemsPayload"
  /** The transfer with line items removed. */
  inventoryTransfer?: Maybe<ShopifyInventoryTransfer>
  /** The line items that have had their shippable quantity removed. */
  removedQuantities?: Maybe<Array<ShopifyInventoryTransferLineItemUpdate>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryTransferRemoveItemsUserError>
}

/** An error that occurs during the execution of `InventoryTransferRemoveItems`. */
export interface ShopifyInventoryTransferRemoveItemsUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryTransferRemoveItemsUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryTransferRemoveItemsUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryTransferRemoveItemsUserError`. */
export type ShopifyInventoryTransferRemoveItemsUserErrorCode =
  /** The item cannot have its shippable quantity removed if all of its quantity is fully allocated in one or more shipments. */
  | "ALL_QUANTITY_SHIPPED"
  /** A ready to ship transfer must have at least one item. */
  | "CANT_REMOVE_ALL_ITEMS_FROM_READY_TO_SHIP_TRANSFER"
  /** Current transfer status does not support this operation. */
  | "INVALID_TRANSFER_STATUS"
  /** The item was not found. */
  | "ITEM_NOT_FOUND"
  /** The item cannot be removed because it exists in a draft shipment with zero quantity. */
  | "ITEM_PRESENT_ON_DRAFT_SHIPMENT_WITH_ZERO_QUANTITY"
  /** The location selected can't be found. */
  | "LOCATION_NOT_FOUND"
  /** The transfer was not found. */
  | "TRANSFER_NOT_FOUND"
  | "%future added value"

/** The input fields to the InventoryTransferSetItems mutation. */
export interface ShopifyInventoryTransferSetItemsInput {
  /** The ID of the inventory transfer where the items will be set. */
  id: Scalars["ID"]["input"]
  /** The line items to be set on the Transfer. */
  lineItems: Array<ShopifyInventoryTransferLineItemInput>
}

/** Return type for `inventoryTransferSetItems` mutation. */
export interface ShopifyInventoryTransferSetItemsPayload {
  __typename?: "InventoryTransferSetItemsPayload"
  /** The Transfer with its line items updated. */
  inventoryTransfer?: Maybe<ShopifyInventoryTransfer>
  /** The updated line items. */
  updatedLineItems?: Maybe<Array<ShopifyInventoryTransferLineItemUpdate>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyInventoryTransferSetItemsUserError>
}

/** An error that occurs during the execution of `InventoryTransferSetItems`. */
export interface ShopifyInventoryTransferSetItemsUserError
  extends ShopifyDisplayableError {
  __typename?: "InventoryTransferSetItemsUserError"
  /** The error code. */
  code?: Maybe<ShopifyInventoryTransferSetItemsUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `InventoryTransferSetItemsUserError`. */
export type ShopifyInventoryTransferSetItemsUserErrorCode =
  /** Bundled items cannot be used for this operation. */
  | "BUNDLED_ITEM"
  /** A single item can't be listed twice. */
  | "DUPLICATE_ITEM"
  /** The quantity is invalid. */
  | "INVALID_QUANTITY"
  /** Current transfer status does not support this operation. */
  | "INVALID_TRANSFER_STATUS"
  /** The item is not stocked at the intended location. */
  | "INVENTORY_STATE_NOT_ACTIVE"
  /** The item was not found. */
  | "ITEM_NOT_FOUND"
  /** The location selected is not active. */
  | "LOCATION_NOT_ACTIVE"
  /** The location selected can't be found. */
  | "LOCATION_NOT_FOUND"
  /** The transfer was not found. */
  | "TRANSFER_NOT_FOUND"
  /** The item does not track inventory. */
  | "UNTRACKED_ITEM"
  | "%future added value"

/** The status of a transfer. */
export type ShopifyInventoryTransferStatus =
  /** The inventory transfer has been canceled. */
  | "CANCELED"
  /** The inventory transfer has been created but not yet finalized. */
  | "DRAFT"
  /** The inventory transfer is in progress, with a shipment currently underway or received. */
  | "IN_PROGRESS"
  /** Status not included in the current enumeration set. */
  | "OTHER"
  /** The inventory transfer has been created, but not yet shipped. */
  | "READY_TO_SHIP"
  /** The inventory transfer has been completely received at the destination. */
  | "TRANSFERRED"
  | "%future added value"

/** The financial transfer details for a return outcome that results in an invoice. */
export interface ShopifyInvoiceReturnOutcome {
  __typename?: "InvoiceReturnOutcome"
  /** The total monetary value to be invoiced in shop and presentment currencies. */
  amount: ShopifyMoneyBag
}

/** A job corresponds to some long running task that the client should poll for status. */
export interface ShopifyJob {
  __typename?: "Job"
  /** This indicates if the job is still queued or has been run. */
  done: Scalars["Boolean"]["output"]
  /** A globally-unique ID that's returned when running an asynchronous mutation. */
  id: Scalars["ID"]["output"]
  /** This field will only resolve once the job is done. Can be used to ask for object(s) that have been changed by the job. */
  query?: Maybe<ShopifyQueryRoot>
}

/** A job corresponds to some long running task that the client should poll for status. */
export interface ShopifyJobResult {
  /** This indicates if the job is still queued or has been run. */
  done: Scalars["Boolean"]["output"]
  /** A globally-unique ID that's returned when running an asynchronous mutation. */
  id: Scalars["ID"]["output"]
}

/** Language codes supported by Shopify. */
export type ShopifyLanguageCode =
  /** Afrikaans. */
  | "AF"
  /** Akan. */
  | "AK"
  /** Amharic. */
  | "AM"
  /** Arabic. */
  | "AR"
  /** Assamese. */
  | "AS"
  /** Azerbaijani. */
  | "AZ"
  /** Belarusian. */
  | "BE"
  /** Bulgarian. */
  | "BG"
  /** Bambara. */
  | "BM"
  /** Bangla. */
  | "BN"
  /** Tibetan. */
  | "BO"
  /** Breton. */
  | "BR"
  /** Bosnian. */
  | "BS"
  /** Catalan. */
  | "CA"
  /** Chechen. */
  | "CE"
  /** Central Kurdish. */
  | "CKB"
  /** Czech. */
  | "CS"
  /** Church Slavic. */
  | "CU"
  /** Welsh. */
  | "CY"
  /** Danish. */
  | "DA"
  /** German. */
  | "DE"
  /** Dzongkha. */
  | "DZ"
  /** Ewe. */
  | "EE"
  /** Greek. */
  | "EL"
  /** English. */
  | "EN"
  /** Esperanto. */
  | "EO"
  /** Spanish. */
  | "ES"
  /** Estonian. */
  | "ET"
  /** Basque. */
  | "EU"
  /** Persian. */
  | "FA"
  /** Fulah. */
  | "FF"
  /** Finnish. */
  | "FI"
  /** Filipino. */
  | "FIL"
  /** Faroese. */
  | "FO"
  /** French. */
  | "FR"
  /** Western Frisian. */
  | "FY"
  /** Irish. */
  | "GA"
  /** Scottish Gaelic. */
  | "GD"
  /** Galician. */
  | "GL"
  /** Gujarati. */
  | "GU"
  /** Manx. */
  | "GV"
  /** Hausa. */
  | "HA"
  /** Hebrew. */
  | "HE"
  /** Hindi. */
  | "HI"
  /** Croatian. */
  | "HR"
  /** Hungarian. */
  | "HU"
  /** Armenian. */
  | "HY"
  /** Interlingua. */
  | "IA"
  /** Indonesian. */
  | "ID"
  /** Igbo. */
  | "IG"
  /** Sichuan Yi. */
  | "II"
  /** Icelandic. */
  | "IS"
  /** Italian. */
  | "IT"
  /** Japanese. */
  | "JA"
  /** Javanese. */
  | "JV"
  /** Georgian. */
  | "KA"
  /** Kikuyu. */
  | "KI"
  /** Kazakh. */
  | "KK"
  /** Kalaallisut. */
  | "KL"
  /** Khmer. */
  | "KM"
  /** Kannada. */
  | "KN"
  /** Korean. */
  | "KO"
  /** Kashmiri. */
  | "KS"
  /** Kurdish. */
  | "KU"
  /** Cornish. */
  | "KW"
  /** Kyrgyz. */
  | "KY"
  /** Luxembourgish. */
  | "LB"
  /** Ganda. */
  | "LG"
  /** Lingala. */
  | "LN"
  /** Lao. */
  | "LO"
  /** Lithuanian. */
  | "LT"
  /** Luba-Katanga. */
  | "LU"
  /** Latvian. */
  | "LV"
  /** Malagasy. */
  | "MG"
  /** Māori. */
  | "MI"
  /** Macedonian. */
  | "MK"
  /** Malayalam. */
  | "ML"
  /** Mongolian. */
  | "MN"
  /** Marathi. */
  | "MR"
  /** Malay. */
  | "MS"
  /** Maltese. */
  | "MT"
  /** Burmese. */
  | "MY"
  /** Norwegian (Bokmål). */
  | "NB"
  /** North Ndebele. */
  | "ND"
  /** Nepali. */
  | "NE"
  /** Dutch. */
  | "NL"
  /** Norwegian Nynorsk. */
  | "NN"
  /** Norwegian. */
  | "NO"
  /** Oromo. */
  | "OM"
  /** Odia. */
  | "OR"
  /** Ossetic. */
  | "OS"
  /** Punjabi. */
  | "PA"
  /** Polish. */
  | "PL"
  /** Pashto. */
  | "PS"
  /** Portuguese. */
  | "PT"
  /** Portuguese (Brazil). */
  | "PT_BR"
  /** Portuguese (Portugal). */
  | "PT_PT"
  /** Quechua. */
  | "QU"
  /** Romansh. */
  | "RM"
  /** Rundi. */
  | "RN"
  /** Romanian. */
  | "RO"
  /** Russian. */
  | "RU"
  /** Kinyarwanda. */
  | "RW"
  /** Sanskrit. */
  | "SA"
  /** Sardinian. */
  | "SC"
  /** Sindhi. */
  | "SD"
  /** Northern Sami. */
  | "SE"
  /** Sango. */
  | "SG"
  /** Sinhala. */
  | "SI"
  /** Slovak. */
  | "SK"
  /** Slovenian. */
  | "SL"
  /** Shona. */
  | "SN"
  /** Somali. */
  | "SO"
  /** Albanian. */
  | "SQ"
  /** Serbian. */
  | "SR"
  /** Sundanese. */
  | "SU"
  /** Swedish. */
  | "SV"
  /** Swahili. */
  | "SW"
  /** Tamil. */
  | "TA"
  /** Telugu. */
  | "TE"
  /** Tajik. */
  | "TG"
  /** Thai. */
  | "TH"
  /** Tigrinya. */
  | "TI"
  /** Turkmen. */
  | "TK"
  /** Tongan. */
  | "TO"
  /** Turkish. */
  | "TR"
  /** Tatar. */
  | "TT"
  /** Uyghur. */
  | "UG"
  /** Ukrainian. */
  | "UK"
  /** Urdu. */
  | "UR"
  /** Uzbek. */
  | "UZ"
  /** Vietnamese. */
  | "VI"
  /** Volapük. */
  | "VO"
  /** Wolof. */
  | "WO"
  /** Xhosa. */
  | "XH"
  /** Yiddish. */
  | "YI"
  /** Yoruba. */
  | "YO"
  /** Chinese. */
  | "ZH"
  /** Chinese (Simplified). */
  | "ZH_CN"
  /** Chinese (Traditional). */
  | "ZH_TW"
  /** Zulu. */
  | "ZU"
  | "%future added value"

/**
 * Interoperability metadata for types that directly correspond to a REST Admin API resource.
 * For example, on the Product type, LegacyInteroperability returns metadata for the corresponding [Product object](https://shopify.dev/api/admin-graphql/latest/objects/product) in the REST Admin API.
 */
export interface ShopifyLegacyInteroperability {
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
}

/** Units of measurement for length. */
export type ShopifyLengthUnit =
  /** 100 centimeters equals 1 meter. */
  | "CENTIMETERS"
  /** Imperial system unit of length. */
  | "FEET"
  /** 12 inches equals 1 foot. */
  | "INCHES"
  /** Metric system unit of length. */
  | "METERS"
  /** 1000 millimeters equals 1 meter. */
  | "MILLIMETERS"
  /** 1 yard equals 3 feet. */
  | "YARDS"
  | "%future added value"

/**
 * The total number of pending orders on a shop if less then a maximum, or that maximum.
 * The atMax field indicates when this maximum has been reached.
 */
export interface ShopifyLimitedPendingOrderCount {
  __typename?: "LimitedPendingOrderCount"
  /** This is set when the number of pending orders has reached the maximum. */
  atMax: Scalars["Boolean"]["output"]
  /**
   * The number of pendings orders on the shop.
   * Limited to a maximum of 10000.
   */
  count: Scalars["Int"]["output"]
}

/**
 * The `LineItem` object represents a single product or service that a customer purchased in an
 * [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order).
 * Each line item is associated with a
 * [product variant](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)
 * and can have multiple [discount allocations](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAllocation).
 * Line items contain details about what was purchased, including the product variant, quantity, pricing,
 * and fulfillment status.
 *
 * Use the `LineItem` object to manage the following processes:
 *
 * - [Track the quantity of items](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps/build-fulfillment-solutions) ordered, fulfilled, and unfulfilled.
 * - [Calculate prices](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps/edit-orders), including discounts and taxes.
 * - Manage fulfillment through [fulfillment services](https://shopify.dev/docs/apps/build/orders-fulfillment/fulfillment-service-apps).
 * - Manage [returns](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management) and [exchanges](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-exchanges).
 * - Handle [subscriptions](https://shopify.dev/docs/apps/build/purchase-options/subscriptions) and recurring orders.
 *
 * Line items can also include custom attributes and properties, allowing merchants to add specific details
 * about each item in an order. Learn more about
 * [managing orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyLineItem extends ShopifyNode {
  __typename?: "LineItem"
  /**
   * Whether the line item can be restocked.
   * @deprecated Use `restockable` instead.
   */
  canRestock: Scalars["Boolean"]["output"]
  /** The subscription contract associated with this line item. */
  contract?: Maybe<ShopifySubscriptionContract>
  /** The number of units ordered, excluding refunded and removed units. */
  currentQuantity: Scalars["Int"]["output"]
  /** A list of attributes that represent custom features or special requests. */
  customAttributes: Array<ShopifyAttribute>
  /** The discounts that have been allocated to the line item by discount applications, including discounts allocated to refunded and removed quantities. */
  discountAllocations: Array<ShopifyDiscountAllocation>
  /**
   * The total discounted price of the line item in shop currency, including refunded and removed quantities. This value doesn't include order-level discounts.
   * @deprecated Use `discountedTotalSet` instead.
   */
  discountedTotal: Scalars["Money"]["output"]
  /** The total discounted price of the line item in shop and presentment currencies, including refunded and removed quantities. This value doesn't include order-level discounts. Code-based discounts aren't included by default. */
  discountedTotalSet: ShopifyMoneyBag
  /**
   * The approximate unit price of the line item in shop currency. This value includes line-level discounts and discounts applied to refunded and removed quantities. It doesn't include order-level or code-based discounts.
   * @deprecated Use `discountedUnitPriceSet` instead.
   */
  discountedUnitPrice: Scalars["Money"]["output"]
  /** The approximate unit price of the line item in shop and presentment currencies. This value includes discounts applied to refunded and removed quantities. */
  discountedUnitPriceAfterAllDiscountsSet: ShopifyMoneyBag
  /** The approximate unit price of the line item in shop and presentment currencies. This value includes line-level discounts and discounts applied to refunded and removed quantities. It doesn't include order-level or code-based discounts. */
  discountedUnitPriceSet: ShopifyMoneyBag
  /** The duties associated with the line item. */
  duties: Array<ShopifyDuty>
  /**
   * The total number of units to fulfill.
   * @deprecated Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead.
   */
  fulfillableQuantity: Scalars["Int"]["output"]
  /**
   * The fulfillment service that stocks the product variant belonging to a line item.
   *
   * This is a third-party fulfillment service in the following scenarios:
   *
   * **Scenario 1**
   * - The product variant is stocked by a single fulfillment service.
   * - The [FulfillmentService](/api/admin-graphql/latest/objects/FulfillmentService) is a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
   *
   * **Scenario 2**
   * - Multiple fulfillment services stock the product variant.
   * - The last time that the line item was unfulfilled, it was awaiting fulfillment by a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
   *
   * If none of the above conditions are met, then the fulfillment service has the `manual` handle.
   * @deprecated
   * The [relationship between a product variant and a fulfillment service was changed](/changelog/fulfillment-service-sku-sharing). A [ProductVariant](/api/admin-graphql/latest/objects/ProductVariant) can be stocked by multiple fulfillment services. As a result, we recommend that you use the [inventoryItem field](/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryitem) if you need to determine where a product variant is stocked.
   *
   * If you need to determine whether a product is a gift card, then you should continue to use this field until an alternative is available.
   *
   * Altering the locations which stock a product variant won't change the value of this field for existing orders.
   *
   * Learn about [managing inventory quantities and states](/apps/fulfillment/inventory-management-apps/quantities-states).
   *
   */
  fulfillmentService?: Maybe<ShopifyFulfillmentService>
  /**
   * The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
   * 'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
   * @deprecated Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead
   */
  fulfillmentStatus: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The image associated to the line item's variant. */
  image?: Maybe<ShopifyImage>
  /** Whether the line item represents the purchase of a gift card. */
  isGiftCard: Scalars["Boolean"]["output"]
  /** The line item group associated to the line item. */
  lineItemGroup?: Maybe<ShopifyLineItemGroup>
  /** Whether the line item can be edited or not. */
  merchantEditable: Scalars["Boolean"]["output"]
  /** The title of the product, optionally appended with the title of the variant (if applicable). */
  name: Scalars["String"]["output"]
  /** The total number of units that can't be fulfilled. For example, if items have been refunded, or the item is not something that can be fulfilled, like a tip. Please see the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object for more fulfillment details. */
  nonFulfillableQuantity: Scalars["Int"]["output"]
  /**
   * In shop currency, the total price of the line item when the order was created.
   * This value doesn't include discounts.
   * @deprecated Use `originalTotalSet` instead.
   */
  originalTotal: Scalars["Money"]["output"]
  /**
   * In shop and presentment currencies, the total price of the line item when the order was created.
   * This value doesn't include discounts.
   */
  originalTotalSet: ShopifyMoneyBag
  /**
   * In shop currency, the unit price of the line item when the order was created. This value doesn't include discounts.
   * @deprecated Use `originalUnitPriceSet` instead.
   */
  originalUnitPrice: Scalars["Money"]["output"]
  /** In shop and presentment currencies, the unit price of the line item when the order was created. This value doesn't include discounts. */
  originalUnitPriceSet: ShopifyMoneyBag
  /** The Product object associated with this line item's variant. */
  product?: Maybe<ShopifyProduct>
  /** The number of units ordered, including refunded and removed units. */
  quantity: Scalars["Int"]["output"]
  /** The number of units ordered, excluding refunded units and removed units. */
  refundableQuantity: Scalars["Int"]["output"]
  /** Whether physical shipping is required for the variant. */
  requiresShipping: Scalars["Boolean"]["output"]
  /** Whether the line item can be restocked. */
  restockable: Scalars["Boolean"]["output"]
  /** The selling plan details associated with the line item. */
  sellingPlan?: Maybe<ShopifyLineItemSellingPlan>
  /** The variant SKU number. */
  sku?: Maybe<Scalars["String"]["output"]>
  /** Staff attributed to the line item. */
  staffMember?: Maybe<ShopifyStaffMember>
  /** The taxes charged for the line item, including taxes charged for refunded and removed quantities. */
  taxLines: Array<ShopifyTaxLine>
  /** Whether the variant is taxable. */
  taxable: Scalars["Boolean"]["output"]
  /** The title of the product at time of order creation. */
  title: Scalars["String"]["output"]
  /**
   * The total discount allocated to the line item in shop currency, including the total allocated to refunded and removed quantities. This value doesn't include order-level discounts.
   * @deprecated Use `totalDiscountSet` instead.
   */
  totalDiscount: Scalars["Money"]["output"]
  /** The total discount allocated to the line item in shop and presentment currencies, including the total allocated to refunded and removed quantities. This value doesn't include order-level discounts. */
  totalDiscountSet: ShopifyMoneyBag
  /**
   * In shop currency, the total discounted price of the unfulfilled quantity for the line item.
   * @deprecated Use `unfulfilledDiscountedTotalSet` instead.
   */
  unfulfilledDiscountedTotal: Scalars["Money"]["output"]
  /** In shop and presentment currencies, the total discounted price of the unfulfilled quantity for the line item. */
  unfulfilledDiscountedTotalSet: ShopifyMoneyBag
  /**
   * In shop currency, the total price of the unfulfilled quantity for the line item. This value doesn't include discounts.
   * @deprecated Use `unfulfilledOriginalTotalSet` instead.
   */
  unfulfilledOriginalTotal: Scalars["Money"]["output"]
  /** In shop and presentment currencies, the total price of the unfulfilled quantity for the line item. This value doesn't include discounts. */
  unfulfilledOriginalTotalSet: ShopifyMoneyBag
  /** The number of units not yet fulfilled. */
  unfulfilledQuantity: Scalars["Int"]["output"]
  /** The Variant object associated with this line item. */
  variant?: Maybe<ShopifyProductVariant>
  /** The title of the variant at time of order creation. */
  variantTitle?: Maybe<Scalars["String"]["output"]>
  /** The name of the vendor who made the variant. */
  vendor?: Maybe<Scalars["String"]["output"]>
}

/**
 * The `LineItem` object represents a single product or service that a customer purchased in an
 * [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order).
 * Each line item is associated with a
 * [product variant](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)
 * and can have multiple [discount allocations](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAllocation).
 * Line items contain details about what was purchased, including the product variant, quantity, pricing,
 * and fulfillment status.
 *
 * Use the `LineItem` object to manage the following processes:
 *
 * - [Track the quantity of items](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps/build-fulfillment-solutions) ordered, fulfilled, and unfulfilled.
 * - [Calculate prices](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps/edit-orders), including discounts and taxes.
 * - Manage fulfillment through [fulfillment services](https://shopify.dev/docs/apps/build/orders-fulfillment/fulfillment-service-apps).
 * - Manage [returns](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management) and [exchanges](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-exchanges).
 * - Handle [subscriptions](https://shopify.dev/docs/apps/build/purchase-options/subscriptions) and recurring orders.
 *
 * Line items can also include custom attributes and properties, allowing merchants to add specific details
 * about each item in an order. Learn more about
 * [managing orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyLineItemDiscountedTotalSetArgs {
  withCodeDiscounts?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `LineItem` object represents a single product or service that a customer purchased in an
 * [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order).
 * Each line item is associated with a
 * [product variant](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)
 * and can have multiple [discount allocations](https://shopify.dev/docs/api/admin-graphql/latest/objects/DiscountAllocation).
 * Line items contain details about what was purchased, including the product variant, quantity, pricing,
 * and fulfillment status.
 *
 * Use the `LineItem` object to manage the following processes:
 *
 * - [Track the quantity of items](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps/build-fulfillment-solutions) ordered, fulfilled, and unfulfilled.
 * - [Calculate prices](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps/edit-orders), including discounts and taxes.
 * - Manage fulfillment through [fulfillment services](https://shopify.dev/docs/apps/build/orders-fulfillment/fulfillment-service-apps).
 * - Manage [returns](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management) and [exchanges](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-exchanges).
 * - Handle [subscriptions](https://shopify.dev/docs/apps/build/purchase-options/subscriptions) and recurring orders.
 *
 * Line items can also include custom attributes and properties, allowing merchants to add specific details
 * about each item in an order. Learn more about
 * [managing orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyLineItemTaxLinesArgs {
  first?: InputMaybe<Scalars["Int"]["input"]>
}

/** An auto-generated type for paginating through multiple LineItems. */
export interface ShopifyLineItemConnection {
  __typename?: "LineItemConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyLineItemEdge>
  /** A list of nodes that are contained in LineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyLineItem>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one LineItem and a cursor during pagination. */
export interface ShopifyLineItemEdge {
  __typename?: "LineItemEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of LineItemEdge. */
  node: ShopifyLineItem
}

/** A line item group (bundle) to which a line item belongs to. */
export interface ShopifyLineItemGroup extends ShopifyNode {
  __typename?: "LineItemGroup"
  /** A list of attributes that represent custom features or special requests. */
  customAttributes: Array<ShopifyAttribute>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** ID of the product of the line item group. */
  productId?: Maybe<Scalars["ID"]["output"]>
  /** Quantity of the line item group on the order. */
  quantity: Scalars["Int"]["output"]
  /** Title of the line item group. */
  title: Scalars["String"]["output"]
  /** ID of the variant of the line item group. */
  variantId?: Maybe<Scalars["ID"]["output"]>
  /** SKU of the variant of the line item group. */
  variantSku?: Maybe<Scalars["String"]["output"]>
}

/** Represents the selling plan for a line item. */
export interface ShopifyLineItemSellingPlan {
  __typename?: "LineItemSellingPlan"
  /** The name of the selling plan for display purposes. */
  name: Scalars["String"]["output"]
  /** The ID of the selling plan associated with the line item. */
  sellingPlanId?: Maybe<Scalars["ID"]["output"]>
}

/** A link to direct users to. */
export interface ShopifyLink extends ShopifyHasPublishedTranslations {
  __typename?: "Link"
  /** A context-sensitive label for the link. */
  label: Scalars["String"]["output"]
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
  /** The URL that the link visits. */
  url: Scalars["URL"]["output"]
}

/** A link to direct users to. */
export interface ShopifyLinkTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/**
 * The identifier for the metafield linked to this option.
 *
 * This API is currently in early access. See [Metafield-linked product options](https://shopify.dev/docs/api/admin/migrate/new-product-model/metafield-linked) for more details.
 */
export interface ShopifyLinkedMetafield {
  __typename?: "LinkedMetafield"
  /** Key of the metafield the option is linked to. */
  key?: Maybe<Scalars["String"]["output"]>
  /** Namespace of the metafield the option is linked to. */
  namespace?: Maybe<Scalars["String"]["output"]>
}

/** The input fields required to link a product option to a metafield. */
export interface ShopifyLinkedMetafieldCreateInput {
  /** The key of the metafield this option is linked to. */
  key: Scalars["String"]["input"]
  /** The namespace of the metafield this option is linked to. */
  namespace: Scalars["String"]["input"]
  /** Values associated with the option. */
  values?: InputMaybe<Array<Scalars["String"]["input"]>>
}

/** The input fields for linking a combined listing option to a metafield. */
export interface ShopifyLinkedMetafieldInput {
  /** The key of the linked metafield. */
  key: Scalars["String"]["input"]
  /** The namespace of the linked metafield. */
  namespace: Scalars["String"]["input"]
  /** The values of the linked metafield. */
  values: Array<Scalars["String"]["input"]>
}

/**
 * The input fields required to link a product option to a metafield.
 *
 * This API is currently in early access. See [Metafield-linked product options](https://shopify.dev/docs/api/admin/migrate/new-product-model/metafield-linked) for more details.
 */
export interface ShopifyLinkedMetafieldUpdateInput {
  /** The key of the metafield this option is linked to. */
  key: Scalars["String"]["input"]
  /** The namespace of the metafield this option is linked to. */
  namespace: Scalars["String"]["input"]
}

/** Local payment methods payment details related to a transaction. */
export interface ShopifyLocalPaymentMethodsPaymentDetails
  extends ShopifyBasePaymentDetails {
  __typename?: "LocalPaymentMethodsPaymentDetails"
  /** The descriptor by the payment provider. Only available for Amazon Pay and Buy with Prime. */
  paymentDescriptor?: Maybe<Scalars["String"]["output"]>
  /** The name of payment method used by the buyer. */
  paymentMethodName?: Maybe<Scalars["String"]["output"]>
}

/** A locale. */
export interface ShopifyLocale {
  __typename?: "Locale"
  /** Locale ISO code. */
  isoCode: Scalars["String"]["output"]
  /** Human-readable locale name. */
  name: Scalars["String"]["output"]
}

/** Specifies the type of the underlying localizable content. This can be used to conditionally render different UI elements such as input fields. */
export type ShopifyLocalizableContentType =
  /** A file reference. */
  | "FILE_REFERENCE"
  /** An HTML. */
  | "HTML"
  /** An inline rich text. */
  | "INLINE_RICH_TEXT"
  /** A JSON. */
  | "JSON"
  /** A JSON string. */
  | "JSON_STRING"
  /** A link. */
  | "LINK"
  /** A list of file references. */
  | "LIST_FILE_REFERENCE"
  /** A list of links. */
  | "LIST_LINK"
  /** A list of multi-line texts. */
  | "LIST_MULTI_LINE_TEXT_FIELD"
  /** A list of single-line texts. */
  | "LIST_SINGLE_LINE_TEXT_FIELD"
  /** A list of URLs. */
  | "LIST_URL"
  /** A multi-line text. */
  | "MULTI_LINE_TEXT_FIELD"
  /** A rich text. */
  | "RICH_TEXT_FIELD"
  /** A single-line text. */
  | "SINGLE_LINE_TEXT_FIELD"
  /** A string. */
  | "STRING"
  /** A URI. */
  | "URI"
  /** A URL. */
  | "URL"
  | "%future added value"

/** Represents the value captured by a localization extension. Localization extensions are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers. */
export interface ShopifyLocalizationExtension {
  __typename?: "LocalizationExtension"
  /** Country ISO 3166-1 alpha-2 code. */
  countryCode: ShopifyCountryCode
  /** The localized extension keys that are allowed. */
  key: ShopifyLocalizationExtensionKey
  /** The purpose of this localization extension. */
  purpose: ShopifyLocalizationExtensionPurpose
  /** The localized extension title. */
  title: Scalars["String"]["output"]
  /** The value of the field. */
  value: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple LocalizationExtensions. */
export interface ShopifyLocalizationExtensionConnection {
  __typename?: "LocalizationExtensionConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyLocalizationExtensionEdge>
  /** A list of nodes that are contained in LocalizationExtensionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyLocalizationExtension>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one LocalizationExtension and a cursor during pagination. */
export interface ShopifyLocalizationExtensionEdge {
  __typename?: "LocalizationExtensionEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of LocalizationExtensionEdge. */
  node: ShopifyLocalizationExtension
}

/** The input fields for a LocalizationExtensionInput. */
export interface ShopifyLocalizationExtensionInput {
  /** The key for the localization extension. */
  key: ShopifyLocalizationExtensionKey
  /** The localization extension value. */
  value: Scalars["String"]["input"]
}

/** The key of a localization extension. */
export type ShopifyLocalizationExtensionKey =
  /** Extension key 'shipping_credential_br' for country BR. */
  | "SHIPPING_CREDENTIAL_BR"
  /** Extension key 'shipping_credential_cl' for country CL. */
  | "SHIPPING_CREDENTIAL_CL"
  /** Extension key 'shipping_credential_cn' for country CN. */
  | "SHIPPING_CREDENTIAL_CN"
  /** Extension key 'shipping_credential_co' for country CO. */
  | "SHIPPING_CREDENTIAL_CO"
  /** Extension key 'shipping_credential_cr' for country CR. */
  | "SHIPPING_CREDENTIAL_CR"
  /** Extension key 'shipping_credential_ec' for country EC. */
  | "SHIPPING_CREDENTIAL_EC"
  /** Extension key 'shipping_credential_es' for country ES. */
  | "SHIPPING_CREDENTIAL_ES"
  /** Extension key 'shipping_credential_gt' for country GT. */
  | "SHIPPING_CREDENTIAL_GT"
  /** Extension key 'shipping_credential_id' for country ID. */
  | "SHIPPING_CREDENTIAL_ID"
  /** Extension key 'shipping_credential_kr' for country KR. */
  | "SHIPPING_CREDENTIAL_KR"
  /** Extension key 'shipping_credential_mx' for country MX. */
  | "SHIPPING_CREDENTIAL_MX"
  /** Extension key 'shipping_credential_my' for country MY. */
  | "SHIPPING_CREDENTIAL_MY"
  /** Extension key 'shipping_credential_pe' for country PE. */
  | "SHIPPING_CREDENTIAL_PE"
  /** Extension key 'shipping_credential_pt' for country PT. */
  | "SHIPPING_CREDENTIAL_PT"
  /** Extension key 'shipping_credential_py' for country PY. */
  | "SHIPPING_CREDENTIAL_PY"
  /** Extension key 'shipping_credential_tr' for country TR. */
  | "SHIPPING_CREDENTIAL_TR"
  /** Extension key 'shipping_credential_tw' for country TW. */
  | "SHIPPING_CREDENTIAL_TW"
  /** Extension key 'shipping_credential_type_co' for country CO. */
  | "SHIPPING_CREDENTIAL_TYPE_CO"
  /** Extension key 'tax_credential_br' for country BR. */
  | "TAX_CREDENTIAL_BR"
  /** Extension key 'tax_credential_cl' for country CL. */
  | "TAX_CREDENTIAL_CL"
  /** Extension key 'tax_credential_co' for country CO. */
  | "TAX_CREDENTIAL_CO"
  /** Extension key 'tax_credential_cr' for country CR. */
  | "TAX_CREDENTIAL_CR"
  /** Extension key 'tax_credential_ec' for country EC. */
  | "TAX_CREDENTIAL_EC"
  /** Extension key 'tax_credential_es' for country ES. */
  | "TAX_CREDENTIAL_ES"
  /** Extension key 'tax_credential_gt' for country GT. */
  | "TAX_CREDENTIAL_GT"
  /** Extension key 'tax_credential_id' for country ID. */
  | "TAX_CREDENTIAL_ID"
  /** Extension key 'tax_credential_it' for country IT. */
  | "TAX_CREDENTIAL_IT"
  /** Extension key 'tax_credential_mx' for country MX. */
  | "TAX_CREDENTIAL_MX"
  /** Extension key 'tax_credential_my' for country MY. */
  | "TAX_CREDENTIAL_MY"
  /** Extension key 'tax_credential_pe' for country PE. */
  | "TAX_CREDENTIAL_PE"
  /** Extension key 'tax_credential_pt' for country PT. */
  | "TAX_CREDENTIAL_PT"
  /** Extension key 'tax_credential_py' for country PY. */
  | "TAX_CREDENTIAL_PY"
  /** Extension key 'tax_credential_tr' for country TR. */
  | "TAX_CREDENTIAL_TR"
  /** Extension key 'tax_credential_type_co' for country CO. */
  | "TAX_CREDENTIAL_TYPE_CO"
  /** Extension key 'tax_credential_type_mx' for country MX. */
  | "TAX_CREDENTIAL_TYPE_MX"
  /** Extension key 'tax_credential_use_mx' for country MX. */
  | "TAX_CREDENTIAL_USE_MX"
  /** Extension key 'tax_email_it' for country IT. */
  | "TAX_EMAIL_IT"
  | "%future added value"

/** The purpose of a localization extension. */
export type ShopifyLocalizationExtensionPurpose =
  /** Extensions that are used for shipping purposes, for example, customs clearance. */
  | "SHIPPING"
  /** Extensions that are used for taxes purposes, for example, invoicing. */
  | "TAX"
  | "%future added value"

/** Represents the value captured by a localized field. Localized fields are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers. */
export interface ShopifyLocalizedField {
  __typename?: "LocalizedField"
  /** Country ISO 3166-1 alpha-2 code. */
  countryCode: ShopifyCountryCode
  /** The localized field keys that are allowed. */
  key: ShopifyLocalizedFieldKey
  /** The purpose of this localized field. */
  purpose: ShopifyLocalizedFieldPurpose
  /** The localized field title. */
  title: Scalars["String"]["output"]
  /** The value of the field. */
  value: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple LocalizedFields. */
export interface ShopifyLocalizedFieldConnection {
  __typename?: "LocalizedFieldConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyLocalizedFieldEdge>
  /** A list of nodes that are contained in LocalizedFieldEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyLocalizedField>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one LocalizedField and a cursor during pagination. */
export interface ShopifyLocalizedFieldEdge {
  __typename?: "LocalizedFieldEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of LocalizedFieldEdge. */
  node: ShopifyLocalizedField
}

/** The input fields for a LocalizedFieldInput. */
export interface ShopifyLocalizedFieldInput {
  /** The key for the localized field. */
  key: ShopifyLocalizedFieldKey
  /** The localized field value. */
  value: Scalars["String"]["input"]
}

/** The key of a localized field. */
export type ShopifyLocalizedFieldKey =
  /** Localized field key 'shipping_credential_br' for country Brazil. */
  | "SHIPPING_CREDENTIAL_BR"
  /** Localized field key 'shipping_credential_cl' for country Chile. */
  | "SHIPPING_CREDENTIAL_CL"
  /** Localized field key 'shipping_credential_cn' for country China. */
  | "SHIPPING_CREDENTIAL_CN"
  /** Localized field key 'shipping_credential_co' for country Colombia. */
  | "SHIPPING_CREDENTIAL_CO"
  /** Localized field key 'shipping_credential_cr' for country Costa Rica. */
  | "SHIPPING_CREDENTIAL_CR"
  /** Localized field key 'shipping_credential_ec' for country Ecuador. */
  | "SHIPPING_CREDENTIAL_EC"
  /** Localized field key 'shipping_credential_es' for country Spain. */
  | "SHIPPING_CREDENTIAL_ES"
  /** Localized field key 'shipping_credential_gt' for country Guatemala. */
  | "SHIPPING_CREDENTIAL_GT"
  /** Localized field key 'shipping_credential_id' for country Indonesia. */
  | "SHIPPING_CREDENTIAL_ID"
  /** Localized field key 'shipping_credential_kr' for country South Korea. */
  | "SHIPPING_CREDENTIAL_KR"
  /** Localized field key 'shipping_credential_mx' for country Mexico. */
  | "SHIPPING_CREDENTIAL_MX"
  /** Localized field key 'shipping_credential_my' for country Malaysia. */
  | "SHIPPING_CREDENTIAL_MY"
  /** Localized field key 'shipping_credential_pe' for country Peru. */
  | "SHIPPING_CREDENTIAL_PE"
  /** Localized field key 'shipping_credential_pt' for country Portugal. */
  | "SHIPPING_CREDENTIAL_PT"
  /** Localized field key 'shipping_credential_py' for country Paraguay. */
  | "SHIPPING_CREDENTIAL_PY"
  /** Localized field key 'shipping_credential_tr' for country Turkey. */
  | "SHIPPING_CREDENTIAL_TR"
  /** Localized field key 'shipping_credential_tw' for country Taiwan. */
  | "SHIPPING_CREDENTIAL_TW"
  /** Localized field key 'shipping_credential_type_co' for country Colombia. */
  | "SHIPPING_CREDENTIAL_TYPE_CO"
  /** Localized field key 'tax_credential_br' for country Brazil. */
  | "TAX_CREDENTIAL_BR"
  /** Localized field key 'tax_credential_cl' for country Chile. */
  | "TAX_CREDENTIAL_CL"
  /** Localized field key 'tax_credential_co' for country Colombia. */
  | "TAX_CREDENTIAL_CO"
  /** Localized field key 'tax_credential_cr' for country Costa Rica. */
  | "TAX_CREDENTIAL_CR"
  /** Localized field key 'tax_credential_ec' for country Ecuador. */
  | "TAX_CREDENTIAL_EC"
  /** Localized field key 'tax_credential_es' for country Spain. */
  | "TAX_CREDENTIAL_ES"
  /** Localized field key 'tax_credential_gt' for country Guatemala. */
  | "TAX_CREDENTIAL_GT"
  /** Localized field key 'tax_credential_id' for country Indonesia. */
  | "TAX_CREDENTIAL_ID"
  /** Localized field key 'tax_credential_it' for country Italy. */
  | "TAX_CREDENTIAL_IT"
  /** Localized field key 'tax_credential_mx' for country Mexico. */
  | "TAX_CREDENTIAL_MX"
  /** Localized field key 'tax_credential_my' for country Malaysia. */
  | "TAX_CREDENTIAL_MY"
  /** Localized field key 'tax_credential_pe' for country Peru. */
  | "TAX_CREDENTIAL_PE"
  /** Localized field key 'tax_credential_pt' for country Portugal. */
  | "TAX_CREDENTIAL_PT"
  /** Localized field key 'tax_credential_py' for country Paraguay. */
  | "TAX_CREDENTIAL_PY"
  /** Localized field key 'tax_credential_tr' for country Turkey. */
  | "TAX_CREDENTIAL_TR"
  /** Localized field key 'tax_credential_type_co' for country Colombia. */
  | "TAX_CREDENTIAL_TYPE_CO"
  /** Localized field key 'tax_credential_type_mx' for country Mexico. */
  | "TAX_CREDENTIAL_TYPE_MX"
  /** Localized field key 'tax_credential_use_mx' for country Mexico. */
  | "TAX_CREDENTIAL_USE_MX"
  /** Localized field key 'tax_email_it' for country Italy. */
  | "TAX_EMAIL_IT"
  | "%future added value"

/** The purpose of a localized field. */
export type ShopifyLocalizedFieldPurpose =
  /** Fields that are used for shipping purposes, for example, customs clearance. */
  | "SHIPPING"
  /** Fields that are used for taxes purposes, for example, invoicing. */
  | "TAX"
  | "%future added value"

/**
 * Represents the location where the physical good resides. You can stock inventory at active locations. Active
 * locations that have `fulfills_online_orders: true` and are configured with a shipping rate, pickup enabled or
 * local delivery will be able to sell from their storefront.
 */
export interface ShopifyLocation
  extends ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyLegacyInteroperability,
    ShopifyNode {
  __typename?: "Location"
  /**
   * Whether the location can be reactivated. If `false`, then trying to activate the location with the
   * [`LocationActivate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/locationActivate)
   * mutation will return an error that describes why the location can't be activated.
   */
  activatable: Scalars["Boolean"]["output"]
  /** The address of this location. */
  address: ShopifyLocationAddress
  /** Whether the location address has been verified. */
  addressVerified: Scalars["Boolean"]["output"]
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) that the location was added to a shop. */
  createdAt: Scalars["DateTime"]["output"]
  /**
   * Whether this location can be deactivated. If `true`, then the location can be deactivated by calling the
   * [`LocationDeactivate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/locationDeactivate)
   * mutation. If `false`, then calling the mutation to deactivate it will return an error that describes why the
   * location can't be deactivated.
   */
  deactivatable: Scalars["Boolean"]["output"]
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) that the location was deactivated at. For example, 3:30 pm on September 7, 2019 in the time zone of UTC (Universal Time Coordinated) is represented as `"2019-09-07T15:50:00Z`". */
  deactivatedAt?: Maybe<Scalars["String"]["output"]>
  /** Whether this location can be deleted. */
  deletable: Scalars["Boolean"]["output"]
  /** Name of the service provider that fulfills from this location. */
  fulfillmentService?: Maybe<ShopifyFulfillmentService>
  /** Whether this location can fulfill online orders. */
  fulfillsOnlineOrders: Scalars["Boolean"]["output"]
  /** Whether this location has active inventory. */
  hasActiveInventory: Scalars["Boolean"]["output"]
  /** Whether this location has orders that need to be fulfilled. */
  hasUnfulfilledOrders: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The quantities of an inventory item at this location. */
  inventoryLevel?: Maybe<ShopifyInventoryLevel>
  /** A list of the quantities of the inventory items that can be stocked at this location. */
  inventoryLevels: ShopifyInventoryLevelConnection
  /**
   * Whether the location is active. A deactivated location can be activated (change `isActive: true`) if it has
   * `activatable` set to `true` by calling the
   * [`locationActivate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/locationActivate)
   * mutation.
   */
  isActive: Scalars["Boolean"]["output"]
  /** Whether this location is a fulfillment service. */
  isFulfillmentService: Scalars["Boolean"]["output"]
  /**
   * Whether the location is your primary location for shipping inventory.
   * @deprecated The concept of a primary location is deprecated, shipsInventory can be used to get a fallback location
   */
  isPrimary: Scalars["Boolean"]["output"]
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** Local pickup settings for the location. */
  localPickupSettingsV2?: Maybe<ShopifyDeliveryLocalPickupSettings>
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** The name of the location. */
  name: Scalars["String"]["output"]
  /** Whether this location is used for calculating shipping rates. In multi-origin shipping mode, this flag is ignored. */
  shipsInventory: Scalars["Boolean"]["output"]
  /** List of suggested addresses for this location (empty if none). */
  suggestedAddresses: Array<ShopifyLocationSuggestedAddress>
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the location was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/**
 * Represents the location where the physical good resides. You can stock inventory at active locations. Active
 * locations that have `fulfills_online_orders: true` and are configured with a shipping rate, pickup enabled or
 * local delivery will be able to sell from their storefront.
 */
export interface ShopifyLocationInventoryLevelArgs {
  inventoryItemId: Scalars["ID"]["input"]
}

/**
 * Represents the location where the physical good resides. You can stock inventory at active locations. Active
 * locations that have `fulfills_online_orders: true` and are configured with a shipping rate, pickup enabled or
 * local delivery will be able to sell from their storefront.
 */
export interface ShopifyLocationInventoryLevelsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents the location where the physical good resides. You can stock inventory at active locations. Active
 * locations that have `fulfills_online_orders: true` and are configured with a shipping rate, pickup enabled or
 * local delivery will be able to sell from their storefront.
 */
export interface ShopifyLocationMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * Represents the location where the physical good resides. You can stock inventory at active locations. Active
 * locations that have `fulfills_online_orders: true` and are configured with a shipping rate, pickup enabled or
 * local delivery will be able to sell from their storefront.
 */
export interface ShopifyLocationMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/**
 * Represents the location where the physical good resides. You can stock inventory at active locations. Active
 * locations that have `fulfills_online_orders: true` and are configured with a shipping rate, pickup enabled or
 * local delivery will be able to sell from their storefront.
 */
export interface ShopifyLocationMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `locationActivate` mutation. */
export interface ShopifyLocationActivatePayload {
  __typename?: "LocationActivatePayload"
  /** The location that was activated. */
  location?: Maybe<ShopifyLocation>
  /** The list of errors that occurred from executing the mutation. */
  locationActivateUserErrors: Array<ShopifyLocationActivateUserError>
}

/** An error that occurs while activating a location. */
export interface ShopifyLocationActivateUserError
  extends ShopifyDisplayableError {
  __typename?: "LocationActivateUserError"
  /** The error code. */
  code?: Maybe<ShopifyLocationActivateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `LocationActivateUserError`. */
export type ShopifyLocationActivateUserErrorCode =
  /** An error occurred while activating the location. */
  | "GENERIC_ERROR"
  /** There is already an active location with this name. */
  | "HAS_NON_UNIQUE_NAME"
  /** This location currently cannot be activated as inventory, pending orders or transfers are being relocated from this location. */
  | "HAS_ONGOING_RELOCATION"
  /** Shop has reached its location limit. */
  | "LOCATION_LIMIT"
  /** Location not found. */
  | "LOCATION_NOT_FOUND"
  | "%future added value"

/** The input fields to use to specify the address while adding a location. */
export interface ShopifyLocationAddAddressInput {
  /** The first line of the address. */
  address1?: InputMaybe<Scalars["String"]["input"]>
  /** The second line of the address. */
  address2?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the city, district, village, or town. */
  city?: InputMaybe<Scalars["String"]["input"]>
  /** The two-letter code of country for the address. */
  countryCode: ShopifyCountryCode
  /** The phone number of the location. */
  phone?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The code for the region of the address, such as the state, province, or district.
   * For example CA for California, United States.
   */
  provinceCode?: InputMaybe<Scalars["String"]["input"]>
  /** The ZIP code or postal code of the address. */
  zip?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields to use to add a location. */
export interface ShopifyLocationAddInput {
  /** The address of the location. */
  address: ShopifyLocationAddAddressInput
  /** Whether inventory at this location is available for sale online. */
  fulfillsOnlineOrders?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Additional customizable information to associate with the location. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The name of the location. */
  name: Scalars["String"]["input"]
}

/** Return type for `locationAdd` mutation. */
export interface ShopifyLocationAddPayload {
  __typename?: "LocationAddPayload"
  /** The location that was added. */
  location?: Maybe<ShopifyLocation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyLocationAddUserError>
}

/** An error that occurs while adding a location. */
export interface ShopifyLocationAddUserError extends ShopifyDisplayableError {
  __typename?: "LocationAddUserError"
  /** The error code. */
  code?: Maybe<ShopifyLocationAddUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `LocationAddUserError`. */
export type ShopifyLocationAddUserErrorCode =
  /** ApiPermission metafields can only be created or updated by the app owner. */
  | "APP_NOT_AUTHORIZED"
  /** The input value is blank. */
  | "BLANK"
  /** The metafield violates a capability restriction. */
  | "CAPABILITY_VIOLATION"
  /** Owner type can't be used in this mutation. */
  | "DISALLOWED_OWNER_TYPE"
  /** An error occurred while adding the location. */
  | "GENERIC_ERROR"
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** An internal error occurred. */
  | "INTERNAL_ERROR"
  /** The input value is invalid. */
  | "INVALID"
  /** The type is invalid. */
  | "INVALID_TYPE"
  /** The ZIP code is not a valid US ZIP code. */
  | "INVALID_US_ZIPCODE"
  /** The value is invalid for the metafield type or for the definition options. */
  | "INVALID_VALUE"
  /** The input value needs to be blank. */
  | "PRESENT"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too long. */
  | "TOO_LONG"
  /** The input value is too short. */
  | "TOO_SHORT"
  /** Unstructured reserved namespace. */
  | "UNSTRUCTURED_RESERVED_NAMESPACE"
  | "%future added value"

/** Represents the address of a location. */
export interface ShopifyLocationAddress {
  __typename?: "LocationAddress"
  /** The first line of the address for the location. */
  address1?: Maybe<Scalars["String"]["output"]>
  /** The second line of the address for the location. */
  address2?: Maybe<Scalars["String"]["output"]>
  /** The city of the location. */
  city?: Maybe<Scalars["String"]["output"]>
  /** The country of the location. */
  country?: Maybe<Scalars["String"]["output"]>
  /** The country code of the location. */
  countryCode?: Maybe<Scalars["String"]["output"]>
  /** A formatted version of the address for the location. */
  formatted: Array<Scalars["String"]["output"]>
  /** The approximate latitude coordinates of the location. */
  latitude?: Maybe<Scalars["Float"]["output"]>
  /** The approximate longitude coordinates of the location. */
  longitude?: Maybe<Scalars["Float"]["output"]>
  /** The phone number of the location. */
  phone?: Maybe<Scalars["String"]["output"]>
  /** The province of the location. */
  province?: Maybe<Scalars["String"]["output"]>
  /** The code for the province, state, or district of the address of the location. */
  provinceCode?: Maybe<Scalars["String"]["output"]>
  /** The ZIP code of the location. */
  zip?: Maybe<Scalars["String"]["output"]>
}

/** An auto-generated type for paginating through multiple Locations. */
export interface ShopifyLocationConnection {
  __typename?: "LocationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyLocationEdge>
  /** A list of nodes that are contained in LocationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyLocation>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `locationDeactivate` mutation. */
export interface ShopifyLocationDeactivatePayload {
  __typename?: "LocationDeactivatePayload"
  /** The location that was deactivated. */
  location?: Maybe<ShopifyLocation>
  /** The list of errors that occurred from executing the mutation. */
  locationDeactivateUserErrors: Array<ShopifyLocationDeactivateUserError>
}

/** The possible errors that can be returned when executing the `locationDeactivate` mutation. */
export interface ShopifyLocationDeactivateUserError
  extends ShopifyDisplayableError {
  __typename?: "LocationDeactivateUserError"
  /** The error code. */
  code?: Maybe<ShopifyLocationDeactivateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `LocationDeactivateUserError`. */
export type ShopifyLocationDeactivateUserErrorCode =
  /** At least one location must fulfill online orders. */
  | "CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT"
  /** Destination location is the same as the location to be deactivated. */
  | "DESTINATION_LOCATION_IS_THE_SAME_LOCATION"
  /** Destination location is not found or inactive. */
  | "DESTINATION_LOCATION_NOT_FOUND_OR_INACTIVE"
  /** Destination location is not Shopify managed. */
  | "DESTINATION_LOCATION_NOT_SHOPIFY_MANAGED"
  /** Failed to relocate active inventories to the destination location. */
  | "FAILED_TO_RELOCATE_ACTIVE_INVENTORIES"
  /** Failed to relocate incoming movements to the destination location. */
  | "FAILED_TO_RELOCATE_INCOMING_MOVEMENTS"
  /** Failed to relocate open purchase orders to the destination location. */
  | "FAILED_TO_RELOCATE_OPEN_PURCHASE_ORDERS"
  /** Location could not be deactivated without specifying where to relocate inventory at the location. */
  | "HAS_ACTIVE_INVENTORY_ERROR"
  /** Location needs to be removed from Shopify POS for Retail subscription in Point of Sale channel. */
  | "HAS_ACTIVE_RETAIL_SUBSCRIPTIONS"
  /** Location could not be deactivated because it has pending orders. */
  | "HAS_FULFILLMENT_ORDERS_ERROR"
  /** Location could not be deactivated because it has open Shopify Fulfillment Network transfers. */
  | "HAS_INCOMING_MOVEMENTS_ERROR"
  /** Location could not be deactivated because it has open purchase orders. */
  | "HAS_OPEN_PURCHASE_ORDERS_ERROR"
  /** Location not found. */
  | "LOCATION_NOT_FOUND"
  /** Location either has a fulfillment service or is the only location with a shipping address. */
  | "PERMANENTLY_BLOCKED_FROM_DEACTIVATION_ERROR"
  /** Location has incoming inventory. The location can be deactivated after the inventory has been received. */
  | "TEMPORARILY_BLOCKED_FROM_DEACTIVATION_ERROR"
  | "%future added value"

/** Return type for `locationDelete` mutation. */
export interface ShopifyLocationDeletePayload {
  __typename?: "LocationDeletePayload"
  /** The ID of the location that was deleted. */
  deletedLocationId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  locationDeleteUserErrors: Array<ShopifyLocationDeleteUserError>
}

/** An error that occurs while deleting a location. */
export interface ShopifyLocationDeleteUserError
  extends ShopifyDisplayableError {
  __typename?: "LocationDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyLocationDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `LocationDeleteUserError`. */
export type ShopifyLocationDeleteUserErrorCode =
  /** An error occurred while deleting the location. */
  | "GENERIC_ERROR"
  /** The location cannot be deleted while it has any active Retail subscriptions in the Point of Sale channel. */
  | "LOCATION_HAS_ACTIVE_RETAIL_SUBSCRIPTION"
  /** The location cannot be deleted while it has inventory. */
  | "LOCATION_HAS_INVENTORY"
  /** The location cannot be deleted while it has pending orders. */
  | "LOCATION_HAS_PENDING_ORDERS"
  /** The location cannot be deleted while it is active. */
  | "LOCATION_IS_ACTIVE"
  /** Location not found. */
  | "LOCATION_NOT_FOUND"
  | "%future added value"

/** An auto-generated type which holds one Location and a cursor during pagination. */
export interface ShopifyLocationEdge {
  __typename?: "LocationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of LocationEdge. */
  node: ShopifyLocation
}

/** The input fields to use to edit the address of a location. */
export interface ShopifyLocationEditAddressInput {
  /** The first line of the address. */
  address1?: InputMaybe<Scalars["String"]["input"]>
  /** The second line of the address. */
  address2?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the city, district, village, or town. */
  city?: InputMaybe<Scalars["String"]["input"]>
  /** The two-letter code of country for the address. */
  countryCode?: InputMaybe<ShopifyCountryCode>
  /** The phone number of the location. */
  phone?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The code for the region of the address, such as the state, province, or district.
   * For example CA for California, United States.
   */
  provinceCode?: InputMaybe<Scalars["String"]["input"]>
  /** The ZIP code or postal code of the location. */
  zip?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields to use to edit a location. */
export interface ShopifyLocationEditInput {
  /** The address of the location. */
  address?: InputMaybe<ShopifyLocationEditAddressInput>
  /**
   * Whether inventory at this location is available for sale online.
   *
   * **Note:** This can't be disabled for fulfillment service locations.
   */
  fulfillsOnlineOrders?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Additional customizable information to associate with the location. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The name of the location. */
  name?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `locationEdit` mutation. */
export interface ShopifyLocationEditPayload {
  __typename?: "LocationEditPayload"
  /** The location that was edited. */
  location?: Maybe<ShopifyLocation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyLocationEditUserError>
}

/** An error that occurs while editing a location. */
export interface ShopifyLocationEditUserError extends ShopifyDisplayableError {
  __typename?: "LocationEditUserError"
  /** The error code. */
  code?: Maybe<ShopifyLocationEditUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `LocationEditUserError`. */
export type ShopifyLocationEditUserErrorCode =
  /** ApiPermission metafields can only be created or updated by the app owner. */
  | "APP_NOT_AUTHORIZED"
  /** The input value is blank. */
  | "BLANK"
  /** At least one location must fulfill online orders. */
  | "CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT"
  /** Cannot modify the online order fulfillment preference for fulfillment service locations. */
  | "CANNOT_MODIFY_ONLINE_ORDER_FULFILLMENT_FOR_FS_LOCATION"
  /** The metafield violates a capability restriction. */
  | "CAPABILITY_VIOLATION"
  /** Owner type can't be used in this mutation. */
  | "DISALLOWED_OWNER_TYPE"
  /** An error occurred while editing the location. */
  | "GENERIC_ERROR"
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** An internal error occurred. */
  | "INTERNAL_ERROR"
  /** The input value is invalid. */
  | "INVALID"
  /** The type is invalid. */
  | "INVALID_TYPE"
  /** The ZIP code is not a valid US ZIP code. */
  | "INVALID_US_ZIPCODE"
  /** The value is invalid for the metafield type or for the definition options. */
  | "INVALID_VALUE"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** The input value needs to be blank. */
  | "PRESENT"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too long. */
  | "TOO_LONG"
  /** The input value is too short. */
  | "TOO_SHORT"
  /** Unstructured reserved namespace. */
  | "UNSTRUCTURED_RESERVED_NAMESPACE"
  | "%future added value"

/** The input fields for identifying a location. */
export interface ShopifyLocationIdentifierInput {
  /** The [custom ID](https://shopify.dev/docs/apps/build/custom-data/metafields/working-with-custom-ids) of the location. */
  customId?: InputMaybe<ShopifyUniqueMetafieldValueInput>
  /** The ID of the location. */
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** Return type for `locationLocalPickupDisable` mutation. */
export interface ShopifyLocationLocalPickupDisablePayload {
  __typename?: "LocationLocalPickupDisablePayload"
  /** The ID of the location for which local pickup was disabled. */
  locationId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDeliveryLocationLocalPickupSettingsError>
}

/** Return type for `locationLocalPickupEnable` mutation. */
export interface ShopifyLocationLocalPickupEnablePayload {
  __typename?: "LocationLocalPickupEnablePayload"
  /** The local pickup settings that were enabled. */
  localPickupSettings?: Maybe<ShopifyDeliveryLocalPickupSettings>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyDeliveryLocationLocalPickupSettingsError>
}

/** A snapshot of location details including name and address captured at a specific point in time. Refer to the parent model to know the lifecycle. */
export interface ShopifyLocationSnapshot {
  __typename?: "LocationSnapshot"
  /** The address details of the location as they were when the snapshot was recorded. */
  address: ShopifyLocationAddress
  /** A reference to the live Location object, if it still exists and is accessible. This provides current details of the location, which may differ from the snapshotted name and address. */
  location?: Maybe<ShopifyLocation>
  /** The name of the location as it was when the snapshot was recorded. */
  name: Scalars["String"]["output"]
  /** The date and time when these snapshot details (name and address) were recorded. */
  snapshottedAt: Scalars["DateTime"]["output"]
}

/** The set of valid sort keys for the Location query. */
export type ShopifyLocationSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `name` value. */
  | "NAME"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  | "%future added value"

/** Represents a suggested address for a location. */
export interface ShopifyLocationSuggestedAddress {
  __typename?: "LocationSuggestedAddress"
  /** The first line of the suggested address. */
  address1?: Maybe<Scalars["String"]["output"]>
  /** The second line of the suggested address. */
  address2?: Maybe<Scalars["String"]["output"]>
  /** The city of the suggested address. */
  city?: Maybe<Scalars["String"]["output"]>
  /** The country of the suggested address. */
  country?: Maybe<Scalars["String"]["output"]>
  /** The country code of the suggested address. */
  countryCode?: Maybe<ShopifyCountryCode>
  /** A formatted version of the suggested address. */
  formatted: Array<Scalars["String"]["output"]>
  /** The province of the suggested address. */
  province?: Maybe<Scalars["String"]["output"]>
  /** The code for the province, state, or district of the suggested address. */
  provinceCode?: Maybe<Scalars["String"]["output"]>
  /** The ZIP code of the suggested address. */
  zip?: Maybe<Scalars["String"]["output"]>
}

/** A condition checking the location that the visitor is shopping from. */
export interface ShopifyLocationsCondition {
  __typename?: "LocationsCondition"
  /** The application level for the condition. */
  applicationLevel?: Maybe<ShopifyMarketConditionApplicationType>
  /** The locations that comprise the market. */
  locations: ShopifyLocationConnection
}

/** A condition checking the location that the visitor is shopping from. */
export interface ShopifyLocationsConditionLocationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents a customer mailing address.
 *
 * For example, a customer's default address and an order's billing address are both mailling addresses.
 */
export interface ShopifyMailingAddress extends ShopifyNode {
  __typename?: "MailingAddress"
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars["String"]["output"]>
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: Maybe<Scalars["String"]["output"]>
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars["String"]["output"]>
  /** The name of the customer's company or organization. */
  company?: Maybe<Scalars["String"]["output"]>
  /** Whether the address corresponds to recognized latitude and longitude values. */
  coordinatesValidated: Scalars["Boolean"]["output"]
  /** The name of the country. */
  country?: Maybe<Scalars["String"]["output"]>
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   * @deprecated Use `countryCodeV2` instead.
   */
  countryCode?: Maybe<Scalars["String"]["output"]>
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   */
  countryCodeV2?: Maybe<ShopifyCountryCode>
  /** The first name of the customer. */
  firstName?: Maybe<Scalars["String"]["output"]>
  /** A formatted version of the address, customized by the provided arguments. */
  formatted: Array<Scalars["String"]["output"]>
  /** A comma-separated list of the values for city, province, and country. */
  formattedArea?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The last name of the customer. */
  lastName?: Maybe<Scalars["String"]["output"]>
  /** The latitude coordinate of the customer address. */
  latitude?: Maybe<Scalars["Float"]["output"]>
  /** The longitude coordinate of the customer address. */
  longitude?: Maybe<Scalars["Float"]["output"]>
  /** The full name of the customer, based on firstName and lastName. */
  name?: Maybe<Scalars["String"]["output"]>
  /** A unique phone number for the customer. */
  phone?: Maybe<Scalars["String"]["output"]>
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars["String"]["output"]>
  /**
   * The alphanumeric code for the region.
   *
   * For example, ON.
   */
  provinceCode?: Maybe<Scalars["String"]["output"]>
  /** The time zone of the address. */
  timeZone?: Maybe<Scalars["String"]["output"]>
  /**
   * The validation status that is leveraged by the address validation feature in the Shopify Admin.
   * See ["Validating addresses in your Shopify admin"](https://help.shopify.com/manual/fulfillment/managing-orders/validating-order-address) for more details.
   */
  validationResultSummary?: Maybe<ShopifyMailingAddressValidationResult>
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars["String"]["output"]>
}

/**
 * Represents a customer mailing address.
 *
 * For example, a customer's default address and an order's billing address are both mailling addresses.
 */
export interface ShopifyMailingAddressFormattedArgs {
  withCompany?: InputMaybe<Scalars["Boolean"]["input"]>
  withName?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple MailingAddresses. */
export interface ShopifyMailingAddressConnection {
  __typename?: "MailingAddressConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMailingAddressEdge>
  /** A list of nodes that are contained in MailingAddressEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMailingAddress>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one MailingAddress and a cursor during pagination. */
export interface ShopifyMailingAddressEdge {
  __typename?: "MailingAddressEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MailingAddressEdge. */
  node: ShopifyMailingAddress
}

/** The input fields to create or update a mailing address. */
export interface ShopifyMailingAddressInput {
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: InputMaybe<Scalars["String"]["input"]>
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the city, district, village, or town. */
  city?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the customer's company or organization. */
  company?: InputMaybe<Scalars["String"]["input"]>
  /** The two-letter code for the country of the address. */
  countryCode?: InputMaybe<ShopifyCountryCode>
  /** The first name of the customer. */
  firstName?: InputMaybe<Scalars["String"]["input"]>
  /** The last name of the customer. */
  lastName?: InputMaybe<Scalars["String"]["input"]>
  /**
   * A unique phone number for the customer.
   *
   * Formatted using E.164 standard. For example, _+16135551111_.
   */
  phone?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The code for the region of the address, such as the province, state, or district.
   * For example QC for Quebec, Canada.
   */
  provinceCode?: InputMaybe<Scalars["String"]["input"]>
  /** The zip or postal code of the address. */
  zip?: InputMaybe<Scalars["String"]["input"]>
}

/** Highest level of validation concerns identified for the address. */
export type ShopifyMailingAddressValidationResult =
  /** Indicates that the address has been validated and is very likely to contain invalid information. */
  | "ERROR"
  /** Indicates that the address has been validated and no issues were found. */
  | "NO_ISSUES"
  /** Indicates that the address has been validated and might contain invalid information. */
  | "WARNING"
  | "%future added value"

/**
 * Manual discount applications capture the intentions of a discount that was manually created for an order.
 *
 * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
 */
export interface ShopifyManualDiscountApplication
  extends ShopifyDiscountApplication {
  __typename?: "ManualDiscountApplication"
  /** The method by which the discount's value is applied to its entitled items. */
  allocationMethod: ShopifyDiscountApplicationAllocationMethod
  /** The description of the discount application. */
  description?: Maybe<Scalars["String"]["output"]>
  /**
   * An ordered index that can be used to identify the discount application and indicate the precedence
   * of the discount application for calculations.
   */
  index: Scalars["Int"]["output"]
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: ShopifyDiscountApplicationTargetSelection
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: ShopifyDiscountApplicationTargetType
  /** The title of the discount application. */
  title: Scalars["String"]["output"]
  /** The value of the discount application. */
  value: ShopifyPricingValue
}

/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export interface ShopifyMarket
  extends ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyNode {
  __typename?: "Market"
  /** Whether the market has a customization with the given ID. */
  assignedCustomization: Scalars["Boolean"]["output"]
  /** The catalogs that belong to the market. */
  catalogs: ShopifyMarketCatalogConnection
  /** The number of catalogs that belong to the market. */
  catalogsCount?: Maybe<ShopifyCount>
  /** The conditions under which a visitor is in the market. */
  conditions?: Maybe<ShopifyMarketConditions>
  /** The market’s currency settings. */
  currencySettings?: Maybe<ShopifyMarketCurrencySettings>
  /**
   * Whether the market is enabled to receive visitors and sales. **Note**: Regions in inactive
   * markets can't be selected on the storefront or in checkout.
   * @deprecated Use `status` instead.
   */
  enabled: Scalars["Boolean"]["output"]
  /** A short, human-readable unique identifier for the market. This is changeable by the merchant. */
  handle: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** The name of the market. Not shown to customers. */
  name: Scalars["String"]["output"]
  /** The inclusive pricing strategy for a market. This determines if prices include duties and / or taxes. */
  priceInclusions?: Maybe<ShopifyMarketPriceInclusions>
  /**
   * The market’s price list, which specifies a percentage-based price adjustment as well as
   * fixed price overrides for specific variants.
   *
   * Markets with multiple catalogs can have multiple price lists. To query which price lists are connected to
   * a market, please query for price lists through the catalogs connection.
   * @deprecated Use `catalogs` instead.
   */
  priceList?: Maybe<ShopifyPriceList>
  /**
   * Whether the market is the shop’s primary market.
   * @deprecated This field is deprecated and will be removed in the future.
   */
  primary: Scalars["Boolean"]["output"]
  /**
   * The regions that comprise the market.
   * @deprecated This field is deprecated and will be removed in the future. Use `conditions.regionConditions` instead.
   */
  regions: ShopifyMarketRegionConnection
  /** Status of the market. Replaces the enabled field. */
  status: ShopifyMarketStatus
  /** The type of the market. */
  type: ShopifyMarketType
  /**
   * The market’s web presence, which defines its SEO strategy. This can be a different domain,
   * subdomain, or subfolders of the primary domain. Each web presence comprises one or more
   * language variants. If a market doesn't have its own web presence, then the market is accessible on the
   * primary market's domains using [country
   * selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
   * If it's the primary market and it has multiple web presences, then this field will return the primary domain web presence.
   * @deprecated Use `webPresences` instead.
   */
  webPresence?: Maybe<ShopifyMarketWebPresence>
  /**
   * The market’s web presences, which defines its SEO strategy. This can be a different domain,
   * subdomain, or subfolders of the primary domain. Each web presence comprises one or more
   * language variants. If a market doesn't have any web presences, then the market is accessible on the
   * primary market's domains using [country
   * selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
   */
  webPresences: ShopifyMarketWebPresenceConnection
}

/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export interface ShopifyMarketAssignedCustomizationArgs {
  customizationId: Scalars["ID"]["input"]
}

/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export interface ShopifyMarketCatalogsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export interface ShopifyMarketMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export interface ShopifyMarketMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export interface ShopifyMarketMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export interface ShopifyMarketRegionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 */
export interface ShopifyMarketWebPresencesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A list of products with publishing and pricing information associated with markets. */
export interface ShopifyMarketCatalog extends ShopifyCatalog, ShopifyNode {
  __typename?: "MarketCatalog"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The markets associated with the catalog. */
  markets: ShopifyMarketConnection
  /** The number of markets associated with the catalog. */
  marketsCount?: Maybe<ShopifyCount>
  /** Most recent catalog operations. */
  operations: Array<ShopifyResourceOperation>
  /** The price list associated with the catalog. */
  priceList?: Maybe<ShopifyPriceList>
  /** A group of products and collections that's published to a catalog. */
  publication?: Maybe<ShopifyPublication>
  /** The status of the catalog. */
  status: ShopifyCatalogStatus
  /** The name of the catalog. */
  title: Scalars["String"]["output"]
}

/** A list of products with publishing and pricing information associated with markets. */
export interface ShopifyMarketCatalogMarketsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  status?: InputMaybe<ShopifyMarketStatus>
  type?: InputMaybe<ShopifyMarketType>
}

/** A list of products with publishing and pricing information associated with markets. */
export interface ShopifyMarketCatalogMarketsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  status?: InputMaybe<ShopifyMarketStatus>
  type?: InputMaybe<ShopifyMarketType>
}

/** An auto-generated type for paginating through multiple MarketCatalogs. */
export interface ShopifyMarketCatalogConnection {
  __typename?: "MarketCatalogConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMarketCatalogEdge>
  /** A list of nodes that are contained in MarketCatalogEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMarketCatalog>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one MarketCatalog and a cursor during pagination. */
export interface ShopifyMarketCatalogEdge {
  __typename?: "MarketCatalogEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MarketCatalogEdge. */
  node: ShopifyMarketCatalog
}

/** The application level for a market condition. */
export type ShopifyMarketConditionApplicationType =
  /** The condition matches all records of a given type. */
  | "ALL"
  /** The condition matches specified records of a given type. */
  | "SPECIFIED"
  | "%future added value"

/** The condition types for the condition set. */
export type ShopifyMarketConditionType =
  /** The condition checks the company location that the visitor is purchasing for. */
  | "COMPANY_LOCATION"
  /** The condition checks the location that the visitor is shopping from. */
  | "LOCATION"
  /** The condition checks the visitor's region. */
  | "REGION"
  | "%future added value"

/** The conditions that determine whether a visitor is in a market. */
export interface ShopifyMarketConditions {
  __typename?: "MarketConditions"
  /** The company location conditions that determine whether a visitor is in the market. */
  companyLocationsCondition?: Maybe<ShopifyCompanyLocationsCondition>
  /** The set of condition types that are defined for the market. */
  conditionTypes: Array<ShopifyMarketConditionType>
  /** The retail location conditions that determine whether a visitor is in the market. */
  locationsCondition?: Maybe<ShopifyLocationsCondition>
  /** The region conditions that determine whether a visitor is in the market. */
  regionsCondition?: Maybe<ShopifyRegionsCondition>
}

/** The input fields required to create or update a company location market condition. */
export interface ShopifyMarketConditionsCompanyLocationsInput {
  /** A type of market condition (e.g. ALL) to apply. */
  applicationLevel?: InputMaybe<ShopifyMarketConditionApplicationType>
  /** A list of company location IDs to include in the market condition. */
  companyLocationIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** The input fields required to create or update the market conditions. */
export interface ShopifyMarketConditionsInput {
  /** The company locations to include in the market conditions. */
  companyLocationsCondition?: InputMaybe<ShopifyMarketConditionsCompanyLocationsInput>
  /** The locations to include in the market conditions. */
  locationsCondition?: InputMaybe<ShopifyMarketConditionsLocationsInput>
  /** The regions to include in the market conditions. */
  regionsCondition?: InputMaybe<ShopifyMarketConditionsRegionsInput>
}

/** The input fields required to create or update a location market condition. */
export interface ShopifyMarketConditionsLocationsInput {
  /** A type of market condition (e.g. ALL) to apply. */
  applicationLevel?: InputMaybe<ShopifyMarketConditionApplicationType>
  /** A list of location IDs to include in the market condition. */
  locationIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** The input fields to specify a region condition. */
export interface ShopifyMarketConditionsRegionInput {
  /** A country code to which this condition should apply. */
  countryCode: ShopifyCountryCode
}

/** The input fields required to create or update a region market condition. */
export interface ShopifyMarketConditionsRegionsInput {
  /** A type of market condition (e.g. ALL) to apply. */
  applicationLevel?: InputMaybe<ShopifyMarketConditionApplicationType>
  /** A list of market region IDs to include in the market condition. */
  regionIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** A list of market regions to include in the market condition. */
  regions?: InputMaybe<Array<ShopifyMarketConditionsRegionInput>>
}

/** The input fields required to update a market condition. */
export interface ShopifyMarketConditionsUpdateInput {
  /** The conditions to update to the market condition. */
  conditionsToAdd?: InputMaybe<ShopifyMarketConditionsInput>
  /** The conditions to delete from the market condition. */
  conditionsToDelete?: InputMaybe<ShopifyMarketConditionsInput>
}

/** An auto-generated type for paginating through multiple Markets. */
export interface ShopifyMarketConnection {
  __typename?: "MarketConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMarketEdge>
  /** A list of nodes that are contained in MarketEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMarket>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields required to create a market. */
export interface ShopifyMarketCreateInput {
  /** Catalog IDs to include in the market. */
  catalogs?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The conditions that apply to the market. */
  conditions?: InputMaybe<ShopifyMarketConditionsInput>
  /** Currency settings for the market. */
  currencySettings?: InputMaybe<ShopifyMarketCurrencySettingsUpdateInput>
  /**
   * A unique identifier for the market. For example `"ca"`.
   * If the handle isn't provided, then the handle is auto-generated based on the country or name.
   */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** Whether to update duplicate region or wildcard markets' status to draft. */
  makeDuplicateUniqueMarketsDraft?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The name of the market. Not shown to customers. */
  name: Scalars["String"]["input"]
  /** The strategy used to determine how prices are displayed to the customer. */
  priceInclusions?: InputMaybe<ShopifyMarketPriceInclusionsInput>
  /** The status of the market. */
  status?: InputMaybe<ShopifyMarketStatus>
  /** Web presence IDs to include in the market. */
  webPresences?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** Return type for `marketCreate` mutation. */
export interface ShopifyMarketCreatePayload {
  __typename?: "MarketCreatePayload"
  /** The market object. */
  market?: Maybe<ShopifyMarket>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketUserError>
}

/** A market's currency settings. */
export interface ShopifyMarketCurrencySettings {
  __typename?: "MarketCurrencySettings"
  /** The currency which this market's customers must use if local currencies are disabled. */
  baseCurrency: ShopifyCurrencySetting
  /**
   * Whether or not local currencies are enabled. If enabled, then prices will
   * be converted to give each customer the best experience based on their
   * region. If disabled, then all customers in this market will see prices
   * in the market's base currency.
   */
  localCurrencies: Scalars["Boolean"]["output"]
  /** Whether or not rounding is enabled on multi-currency prices. */
  roundingEnabled: Scalars["Boolean"]["output"]
}

/** The input fields used to update the currency settings of a market. */
export interface ShopifyMarketCurrencySettingsUpdateInput {
  /** The currency which this market’s customers must use if local currencies are disabled. */
  baseCurrency?: InputMaybe<ShopifyCurrencyCode>
  /** The manual exchange rate that will be used to convert shop currency prices. If null, then the automatic exchange rates will be used. */
  baseCurrencyManualRate?: InputMaybe<Scalars["Decimal"]["input"]>
  /**
   * Whether or not local currencies are enabled. If enabled, then prices will
   * be converted to give each customer the best experience based on their
   * region. If disabled, then all customers in this market will see prices
   * in the market's base currency.
   */
  localCurrencies?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether or not rounding is enabled on multi-currency prices. */
  roundingEnabled?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `marketCurrencySettingsUpdate` mutation. */
export interface ShopifyMarketCurrencySettingsUpdatePayload {
  __typename?: "MarketCurrencySettingsUpdatePayload"
  /**
   * The market object.
   * @deprecated Use `marketCreate` and `marketUpdate` mutations instead.
   */
  market?: Maybe<ShopifyMarket>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketCurrencySettingsUserError>
}

/** Error codes for failed market multi-currency operations. */
export interface ShopifyMarketCurrencySettingsUserError
  extends ShopifyDisplayableError {
  __typename?: "MarketCurrencySettingsUserError"
  /** The error code. */
  code?: Maybe<ShopifyMarketCurrencySettingsUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `MarketCurrencySettingsUserError`. */
export type ShopifyMarketCurrencySettingsUserErrorCode =
  /** The currency settings of the given market cannot be changed because the market manager has exclusive control of pricing. */
  | "MANAGED_MARKET"
  /** The specified market wasn't found. */
  | "MARKET_NOT_FOUND"
  /** The shop's payment gateway does not support enabling more than one currency. */
  | "MULTIPLE_CURRENCIES_NOT_SUPPORTED"
  /** Can't enable or disable local currencies on a single country market. */
  | "NO_LOCAL_CURRENCIES_ON_SINGLE_COUNTRY_MARKET"
  /** The primary market must use the shop currency. */
  | "PRIMARY_MARKET_USES_SHOP_CURRENCY"
  /** This action is restricted if unified markets is enabled. */
  | "UNIFIED_MARKETS_ENABLED"
  /** The specified currency is not supported. */
  | "UNSUPPORTED_CURRENCY"
  | "%future added value"

/** Return type for `marketDelete` mutation. */
export interface ShopifyMarketDeletePayload {
  __typename?: "MarketDeletePayload"
  /** The ID of the deleted market. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketUserError>
}

/** An auto-generated type which holds one Market and a cursor during pagination. */
export interface ShopifyMarketEdge {
  __typename?: "MarketEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MarketEdge. */
  node: ShopifyMarket
}

/** The market localizable content of a resource's field. */
export interface ShopifyMarketLocalizableContent {
  __typename?: "MarketLocalizableContent"
  /** The hash digest representation of the content value. */
  digest?: Maybe<Scalars["String"]["output"]>
  /** The resource field that's being localized. */
  key: Scalars["String"]["output"]
  /** The content value. */
  value?: Maybe<Scalars["String"]["output"]>
}

/** A resource that has market localizable fields. */
export interface ShopifyMarketLocalizableResource {
  __typename?: "MarketLocalizableResource"
  /** The market localizable content. */
  marketLocalizableContent: Array<ShopifyMarketLocalizableContent>
  /** Market localizations for the market localizable content. */
  marketLocalizations: Array<ShopifyMarketLocalization>
  /** The GID of the resource. */
  resourceId: Scalars["ID"]["output"]
}

/** A resource that has market localizable fields. */
export interface ShopifyMarketLocalizableResourceMarketLocalizationsArgs {
  marketId: Scalars["ID"]["input"]
}

/** An auto-generated type for paginating through multiple MarketLocalizableResources. */
export interface ShopifyMarketLocalizableResourceConnection {
  __typename?: "MarketLocalizableResourceConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMarketLocalizableResourceEdge>
  /** A list of nodes that are contained in MarketLocalizableResourceEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMarketLocalizableResource>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one MarketLocalizableResource and a cursor during pagination. */
export interface ShopifyMarketLocalizableResourceEdge {
  __typename?: "MarketLocalizableResourceEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MarketLocalizableResourceEdge. */
  node: ShopifyMarketLocalizableResource
}

/** The type of resources that are market localizable. */
export type ShopifyMarketLocalizableResourceType =
  /** A metafield. Market localizable fields: `value`. */
  | "METAFIELD"
  /** A Metaobject. Market Localizable fields are determined by the Metaobject type. */
  | "METAOBJECT"
  | "%future added value"

/** The market localization of a field within a resource, which is determined by the market ID. */
export interface ShopifyMarketLocalization {
  __typename?: "MarketLocalization"
  /** A reference to the value being localized on the resource that this market localization belongs to. */
  key: Scalars["String"]["output"]
  /** The market that the localization is specific to. */
  market: ShopifyMarket
  /** Whether the original content has changed since this market localization was updated. */
  outdated: Scalars["Boolean"]["output"]
  /** The date and time when the market localization was updated. */
  updatedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The value of the market localization. */
  value?: Maybe<Scalars["String"]["output"]>
}

/** The input fields and values for creating or updating a market localization. */
export interface ShopifyMarketLocalizationRegisterInput {
  /** A reference to the value being localized on the resource that this market localization belongs to. */
  key: Scalars["String"]["input"]
  /** The ID of the market that the localization is specific to. */
  marketId: Scalars["ID"]["input"]
  /** A hash digest representation of the content being localized. */
  marketLocalizableContentDigest: Scalars["String"]["input"]
  /** The value of the market localization. */
  value: Scalars["String"]["input"]
}

/** Return type for `marketLocalizationsRegister` mutation. */
export interface ShopifyMarketLocalizationsRegisterPayload {
  __typename?: "MarketLocalizationsRegisterPayload"
  /** The market localizations that were created or updated. */
  marketLocalizations?: Maybe<Array<ShopifyMarketLocalization>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyTranslationUserError>
}

/** Return type for `marketLocalizationsRemove` mutation. */
export interface ShopifyMarketLocalizationsRemovePayload {
  __typename?: "MarketLocalizationsRemovePayload"
  /** The market localizations that were deleted. */
  marketLocalizations?: Maybe<Array<ShopifyMarketLocalization>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyTranslationUserError>
}

/** The inclusive pricing strategy for a market. */
export interface ShopifyMarketPriceInclusions {
  __typename?: "MarketPriceInclusions"
  /** The inclusive duties pricing strategy of the market. This determines if prices include duties. */
  inclusiveDutiesPricingStrategy: ShopifyInclusiveDutiesPricingStrategy
  /** The inclusive tax pricing strategy of the market. This determines if prices include taxes. */
  inclusiveTaxPricingStrategy: ShopifyInclusiveTaxPricingStrategy
}

/** The input fields used to create a price inclusion. */
export interface ShopifyMarketPriceInclusionsInput {
  /** The inclusive duties pricing strategy for the market. */
  dutiesPricingStrategy?: InputMaybe<ShopifyInclusiveDutiesPricingStrategy>
  /** The inclusive tax pricing strategy for the market. */
  taxPricingStrategy?: InputMaybe<ShopifyInclusiveTaxPricingStrategy>
}

/** A geographic region which comprises a market. */
export interface ShopifyMarketRegion {
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The name of the region. */
  name: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple MarketRegions. */
export interface ShopifyMarketRegionConnection {
  __typename?: "MarketRegionConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMarketRegionEdge>
  /** A list of nodes that are contained in MarketRegionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMarketRegion>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** A country which comprises a market. */
export interface ShopifyMarketRegionCountry
  extends ShopifyMarketRegion,
    ShopifyNode {
  __typename?: "MarketRegionCountry"
  /** The ISO code identifying the country. */
  code: ShopifyCountryCode
  /** The currency which this country uses given its market settings. */
  currency: ShopifyCurrencySetting
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The name of the region. */
  name: Scalars["String"]["output"]
}

/** The input fields for creating a market region with exactly one required option. */
export interface ShopifyMarketRegionCreateInput {
  /** A country code for the region. */
  countryCode: ShopifyCountryCode
}

/** Return type for `marketRegionDelete` mutation. */
export interface ShopifyMarketRegionDeletePayload {
  __typename?: "MarketRegionDeletePayload"
  /** The ID of the deleted market region. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The parent market object of the deleted region. */
  market?: Maybe<ShopifyMarket>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketUserError>
}

/** An auto-generated type which holds one MarketRegion and a cursor during pagination. */
export interface ShopifyMarketRegionEdge {
  __typename?: "MarketRegionEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MarketRegionEdge. */
  node: ShopifyMarketRegion
}

/** Return type for `marketRegionsCreate` mutation. */
export interface ShopifyMarketRegionsCreatePayload {
  __typename?: "MarketRegionsCreatePayload"
  /** The market object. */
  market?: Maybe<ShopifyMarket>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketUserError>
}

/** Return type for `marketRegionsDelete` mutation. */
export interface ShopifyMarketRegionsDeletePayload {
  __typename?: "MarketRegionsDeletePayload"
  /** The ID of the deleted market region. */
  deletedIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketUserError>
}

/** The possible market statuses. */
export type ShopifyMarketStatus =
  /** The market is active. */
  | "ACTIVE"
  /** The market is in draft. */
  | "DRAFT"
  | "%future added value"

/** The market types. */
export type ShopifyMarketType =
  /** The market applies to the visitor based on the company location. */
  | "COMPANY_LOCATION"
  /** The market applies to the visitor based on the location. */
  | "LOCATION"
  /** The market does not apply to any visitor. */
  | "NONE"
  /** The market applies to the visitor based on region. */
  | "REGION"
  | "%future added value"

/** The input fields used to update a market. */
export interface ShopifyMarketUpdateInput {
  /** Catalog IDs to include in the market. */
  catalogsToAdd?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** Catalog IDs to remove from the market. */
  catalogsToDelete?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The conditions to update. */
  conditions?: InputMaybe<ShopifyMarketConditionsUpdateInput>
  /** Currency settings for the market. */
  currencySettings?: InputMaybe<ShopifyMarketCurrencySettingsUpdateInput>
  /** A unique identifier for the market. For example `"ca"`. */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** Whether to update duplicate region or wildcard markets' status to draft. */
  makeDuplicateUniqueMarketsDraft?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The name of the market. Not shown to customers. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** The strategy used to determine how prices are displayed to the customer. */
  priceInclusions?: InputMaybe<ShopifyMarketPriceInclusionsInput>
  /** Remove any currency settings that are defined for the market. */
  removeCurrencySettings?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The price inclusions to remove from the market. */
  removePriceInclusions?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The status of the market. */
  status?: InputMaybe<ShopifyMarketStatus>
  /** The web presences to add to the market. */
  webPresencesToAdd?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The web presences to remove from the market. */
  webPresencesToDelete?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** Return type for `marketUpdate` mutation. */
export interface ShopifyMarketUpdatePayload {
  __typename?: "MarketUpdatePayload"
  /** The market object. */
  market?: Maybe<ShopifyMarket>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketUserError>
}

/** Defines errors encountered while managing a Market. */
export interface ShopifyMarketUserError extends ShopifyDisplayableError {
  __typename?: "MarketUserError"
  /** The error code. */
  code?: Maybe<ShopifyMarketUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `MarketUserError`. */
export type ShopifyMarketUserErrorCode =
  /** B2B markets must be merchant managed. */
  | "B2B_MARKET_MUST_BE_MERCHANT_MANAGED"
  /** The input value is blank. */
  | "BLANK"
  /** Can't add customer account domain to a market. */
  | "CANNOT_ADD_CUSTOMER_DOMAIN"
  /** Can't add regions to the primary market. */
  | "CANNOT_ADD_REGIONS_TO_PRIMARY_MARKET"
  /** Can't add the web presence to the primary market. */
  | "CANNOT_ADD_WEB_PRESENCE_TO_PRIMARY_MARKET"
  /** Can't delete the only region in a market. */
  | "CANNOT_DELETE_ONLY_REGION"
  /** Can't delete the primary market. */
  | "CANNOT_DELETE_PRIMARY_MARKET"
  /** Can't delete the primary market's web presence. */
  | "CANNOT_DELETE_PRIMARY_MARKET_WEB_PRESENCE"
  /** Can't disable the primary market. */
  | "CANNOT_DISABLE_PRIMARY_MARKET"
  /** Can't have both subfolder and domain web presences. */
  | "CANNOT_HAVE_BOTH_SUBFOLDER_AND_DOMAIN_WEB_PRESENCES"
  /** Can't have multiple subfolder web presences per market. */
  | "CANNOT_HAVE_MULTIPLE_SUBFOLDERS_PER_MARKET"
  /** Can't pass both `subfolderSuffix` and `domainId`. */
  | "CANNOT_HAVE_SUBFOLDER_AND_DOMAIN"
  /** Can't set default locale to null. */
  | "CANNOT_SET_DEFAULT_LOCALE_TO_NULL"
  /** Catalogs with volume pricing or quantity rules are not supported for the specified condition types. */
  | "CATALOGS_WITH_VOLUME_PRICING_OR_QUANTITY_RULES_NOT_SUPPORTED"
  /** Catalog condition types must be the same for all conditions on a catalog. */
  | "CATALOG_CONDITION_TYPES_MUST_BE_THE_SAME"
  /** Catalogs and condition types are not compatible with each other. */
  | "CATALOG_NOT_COMPATIBLE_WITH_CONDITION_TYPES"
  /** A market can only have market catalogs. */
  | "CATALOG_TYPE_NOT_SUPPORTED"
  /** One or more condition IDs were not found. */
  | "CONDITIONS_NOT_FOUND"
  /** Contains regions that cannot be managed. */
  | "CONTAINS_REGIONS_THAT_CANNOT_BE_MANAGED"
  /** One or more customizations were not found. */
  | "CUSTOMIZATIONS_NOT_FOUND"
  /** The language isn't enabled on the store. */
  | "DISABLED_LANGUAGE"
  /** Domain was not found. */
  | "DOMAIN_NOT_FOUND"
  /** Duplicates found in languages. */
  | "DUPLICATE_LANGUAGES"
  /** Duplicate region market. */
  | "DUPLICATE_REGION_MARKET"
  /** Duplicate unique market. */
  | "DUPLICATE_UNIQUE_MARKET"
  /** Exceeds max multi-context markets. */
  | "EXCEEDS_MAX_MULTI_CONTEXT_MARKETS"
  /** An error occurred. See the message for details. */
  | "GENERIC_ERROR"
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** Inclusive pricing cannot be added to a market with the specified condition types. */
  | "INCLUSIVE_PRICING_NOT_COMPATIBLE_WITH_CONDITION_TYPES"
  /** The specified conditions are not compatible with each other. */
  | "INCOMPATIBLE_CONDITIONS"
  /** The input value is invalid. */
  | "INVALID"
  /** The province format is invalid. */
  | "INVALID_PROVINCE_FORMAT"
  /** Invalid combination of status and enabled. */
  | "INVALID_STATUS_AND_ENABLED_COMBINATION"
  /** Location match all is only valid with one non-match all region. */
  | "LOCATION_MATCH_ALL_REQUIRES_ONE_SPECIFIC_REGION"
  /** A location's country does not match the region's country. */
  | "LOCATION_REGION_COUNTRY_MISMATCH"
  /** The currency settings of the given market cannot be changed because the market manager has exclusive control of pricing. */
  | "MANAGED_MARKET"
  /** Catalogs created by Managed Markets cannot be added to a market. */
  | "MANAGED_MARKETS_CATALOG_NOT_ALLOWED"
  /** A direct connection catalog can't be attached to a market. */
  | "MARKET_CANT_HAVE_DIRECT_CONNECTION_CATALOG"
  /** Market and condition types are not compatible with each other. */
  | "MARKET_NOT_COMPATIBLE_WITH_CONDITION_TYPES"
  /** The market wasn't found. */
  | "MARKET_NOT_FOUND"
  /** Can't add another web presence to the market. */
  | "MARKET_REACHED_WEB_PRESENCE_LIMIT"
  /** The province code is missing. */
  | "MISSING_PROVINCE_CODE"
  /** All retail locations in a market must be in the same country. */
  | "MIXED_COUNTRY_LOCATIONS_NOT_ALLOWED"
  /** The shop's payment gateway does not support enabling more than one currency. */
  | "MULTIPLE_CURRENCIES_NOT_SUPPORTED"
  /** Can’t delete, disable, or change the type of the last region market. */
  | "MUST_HAVE_AT_LEAST_ONE_ACTIVE_REGION_MARKET"
  /** Your shop is not entitled to activate markets of this type. */
  | "NOT_ENTITLED_TO_ACTIVATE_MARKET"
  /** No languages selected. */
  | "NO_LANGUAGES"
  /** Can't enable or disable local currencies on a single country market. */
  | "NO_LOCAL_CURRENCIES_ON_SINGLE_COUNTRY_MARKET"
  /** Rounding is not supported if unified markets are not enabled. */
  | "NO_ROUNDING_ON_LEGACY_MARKET"
  /** POS location markets must be merchant managed. */
  | "POS_LOCATION_MARKET_MUST_BE_MERCHANT_MANAGED"
  /** The primary market must use the primary domain. */
  | "PRIMARY_MARKET_MUST_USE_PRIMARY_DOMAIN"
  /** The province doesn't exist. */
  | "PROVINCE_DOES_NOT_EXIST"
  /** The market region wasn't found. */
  | "REGION_NOT_FOUND"
  /** Cannot add region-specific language. */
  | "REGION_SPECIFIC_LANGUAGE"
  /** One of `subfolderSuffix` or `domainId` is required. */
  | "REQUIRES_DOMAIN_OR_SUBFOLDER"
  /** Exactly one input option is required. */
  | "REQUIRES_EXACTLY_ONE_OPTION"
  /** Retail location currency must be local. */
  | "RETAIL_LOCATION_CURRENCY_MUST_BE_LOCAL"
  /** The shop must have a web presence that uses the primary domain. */
  | "SHOP_MUST_HAVE_PRIMARY_DOMAIN_WEB_PRESENCE"
  /** Can't have more than 50 markets. */
  | "SHOP_REACHED_MARKETS_LIMIT"
  /** Specified conditions cannot be empty. */
  | "SPECIFIED_CONDITIONS_CANNOT_BE_EMPTY"
  /** With an ID list in input, SPECIFIED is not needed. */
  | "SPECIFIED_NOT_VALID_FOR_INPUT"
  /** The subfolder suffix is invalid, please provide a different value. */
  | "SUBFOLDER_SUFFIX_CANNOT_BE_SCRIPT_CODE"
  /** The subfolder suffix must be at least 2 letters. */
  | "SUBFOLDER_SUFFIX_MUST_BE_AT_LEAST_2_LETTERS"
  /** The subfolder suffix must contain only letters. */
  | "SUBFOLDER_SUFFIX_MUST_CONTAIN_ONLY_LETTERS"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too long. */
  | "TOO_LONG"
  /** The input value is too short. */
  | "TOO_SHORT"
  /** Unified markets are not enabled. */
  | "UNIFIED_MARKETS_NOT_ENABLED"
  /** Managing this catalog is not supported by your plan. */
  | "UNPERMITTED_ENTITLEMENTS_MARKET_CATALOGS"
  /** The language isn't published to the store. */
  | "UNPUBLISHED_LANGUAGE"
  /** Can't add unsupported country or region. */
  | "UNSUPPORTED_COUNTRY_REGION"
  /** The specified currency is not supported. */
  | "UNSUPPORTED_CURRENCY"
  /** The user doesn't have permission access to create or edit markets. */
  | "USER_LACKS_PERMISSION"
  /** Web presences and condition types are not compatible with each other. */
  | "WEB_PRESENCE_NOT_COMPATIBLE_WITH_CONDITION_TYPES"
  /** The market web presence wasn't found. */
  | "WEB_PRESENCE_NOT_FOUND"
  /** Can't add web presence to the another market. */
  | "WEB_PRESENCE_REACHED_MARKETS_LIMIT"
  /** Matching ALL or NONE isn't supported for this driver type. */
  | "WILDCARD_NOT_SUPPORTED"
  | "%future added value"

/**
 * The market’s web presence, which defines its SEO strategy. This can be a different domain
 * (e.g. `example.ca`), subdomain (e.g. `ca.example.com`), or subfolders of the primary
 * domain (e.g. `example.com/en-ca`). Each web presence comprises one or more language
 * variants. If a market does not have its own web presence, it is accessible on the shop’s
 * primary domain via [country
 * selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
 *
 * Note: while the domain/subfolders defined by a market’s web presence are not applicable to
 * custom storefronts, which must manage their own domains and routing, the languages chosen
 * here do govern [the languages available on the Storefront
 * API](https://shopify.dev/custom-storefronts/internationalization/multiple-languages) for the countries in
 * this market.
 */
export interface ShopifyMarketWebPresence extends ShopifyNode {
  __typename?: "MarketWebPresence"
  /**
   * The ShopLocale object for the alternate locales. When a domain is used, these locales will be
   * available as language-specific subfolders. For example, if English is an
   * alternate locale, and `example.ca` is the market’s domain, then
   * `example.ca/en` will load in English.
   */
  alternateLocales: Array<ShopifyShopLocale>
  /**
   * The ShopLocale object for the default locale. When a domain is used, this is the locale that will
   * be used when the domain root is accessed. For example, if French is the default locale,
   * and `example.ca` is the market’s domain, then `example.ca` will load in French.
   */
  defaultLocale: ShopifyShopLocale
  /**
   * The web presence’s domain.
   * This field will be null if `subfolderSuffix` isn't null.
   */
  domain?: Maybe<ShopifyDomain>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * The associated market. This can be null for a web presence that isn't associated with a market.
   * @deprecated Use `markets` instead.
   */
  market?: Maybe<ShopifyMarket>
  /** The associated markets for this web presence. */
  markets?: Maybe<ShopifyMarketConnection>
  /** The list of root URLs for each of the web presence’s locales. As of version `2024-04` this value will no longer have a trailing slash. */
  rootUrls: Array<ShopifyMarketWebPresenceRootUrl>
  /** The market-specific suffix of the subfolders defined by the web presence. Example: in `/en-us` the subfolder suffix is `us`. This field will be null if `domain` isn't null. */
  subfolderSuffix?: Maybe<Scalars["String"]["output"]>
}

/**
 * The market’s web presence, which defines its SEO strategy. This can be a different domain
 * (e.g. `example.ca`), subdomain (e.g. `ca.example.com`), or subfolders of the primary
 * domain (e.g. `example.com/en-ca`). Each web presence comprises one or more language
 * variants. If a market does not have its own web presence, it is accessible on the shop’s
 * primary domain via [country
 * selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
 *
 * Note: while the domain/subfolders defined by a market’s web presence are not applicable to
 * custom storefronts, which must manage their own domains and routing, the languages chosen
 * here do govern [the languages available on the Storefront
 * API](https://shopify.dev/custom-storefronts/internationalization/multiple-languages) for the countries in
 * this market.
 */
export interface ShopifyMarketWebPresenceMarketsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple MarketWebPresences. */
export interface ShopifyMarketWebPresenceConnection {
  __typename?: "MarketWebPresenceConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMarketWebPresenceEdge>
  /** A list of nodes that are contained in MarketWebPresenceEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMarketWebPresence>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields used to create a web presence for a market. */
export interface ShopifyMarketWebPresenceCreateInput {
  /** The alternate locales for the market’s web presence. */
  alternateLocales?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The default locale for the market’s web presence. */
  defaultLocale: Scalars["String"]["input"]
  /** The web presence's domain ID. This field must be `null` if the `subfolderSuffix` isn't `null`. */
  domainId?: InputMaybe<Scalars["ID"]["input"]>
  /**
   * The market-specific suffix of the subfolders defined by the web presence.
   * For example: in `/en-us`, the subfolder suffix is `us`.
   * Only ASCII characters are allowed. This field must be `null` if the `domainId` isn't `null`.
   */
  subfolderSuffix?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `marketWebPresenceCreate` mutation. */
export interface ShopifyMarketWebPresenceCreatePayload {
  __typename?: "MarketWebPresenceCreatePayload"
  /** The market object. */
  market?: Maybe<ShopifyMarket>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketUserError>
}

/** Return type for `marketWebPresenceDelete` mutation. */
export interface ShopifyMarketWebPresenceDeletePayload {
  __typename?: "MarketWebPresenceDeletePayload"
  /** The ID of the deleted web presence. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The market for which the web presence was deleted. */
  market?: Maybe<ShopifyMarket>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketUserError>
}

/** An auto-generated type which holds one MarketWebPresence and a cursor during pagination. */
export interface ShopifyMarketWebPresenceEdge {
  __typename?: "MarketWebPresenceEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MarketWebPresenceEdge. */
  node: ShopifyMarketWebPresence
}

/**
 * The URL for the homepage of the online store in the context of a particular market and a
 * particular locale.
 */
export interface ShopifyMarketWebPresenceRootUrl {
  __typename?: "MarketWebPresenceRootUrl"
  /** The locale that the storefront loads in. */
  locale: Scalars["String"]["output"]
  /** The URL. */
  url: Scalars["URL"]["output"]
}

/** The input fields used to update a web presence for a market. */
export interface ShopifyMarketWebPresenceUpdateInput {
  /** The alternate locales for the market’s web presence. */
  alternateLocales?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The default locale for the market’s web presence. */
  defaultLocale?: InputMaybe<Scalars["String"]["input"]>
  /** The web presence's domain ID. This field must be null if `subfolderSuffix` is not null. */
  domainId?: InputMaybe<Scalars["ID"]["input"]>
  /**
   * The market-specific suffix of the subfolders defined by the web presence.
   * Example: in `/en-us` the subfolder suffix is `us`.
   * Only ASCII characters are allowed. This field must be null if `domainId` is not null.
   */
  subfolderSuffix?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `marketWebPresenceUpdate` mutation. */
export interface ShopifyMarketWebPresenceUpdatePayload {
  __typename?: "MarketWebPresenceUpdatePayload"
  /** The market object. */
  market?: Maybe<ShopifyMarket>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketUserError>
}

/** Return type for `marketingActivitiesDeleteAllExternal` mutation. */
export interface ShopifyMarketingActivitiesDeleteAllExternalPayload {
  __typename?: "MarketingActivitiesDeleteAllExternalPayload"
  /** The asynchronous job that performs the deletion. The status of the job may be used to determine when it's safe again to create new activities. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketingActivityUserError>
}

/**
 * The marketing activity resource represents marketing that a
 *         merchant created through an app.
 */
export interface ShopifyMarketingActivity extends ShopifyNode {
  __typename?: "MarketingActivity"
  /** The URL of the marketing activity listing page in the marketing section. */
  activityListUrl?: Maybe<Scalars["URL"]["output"]>
  /** The amount spent on the marketing activity. */
  adSpend?: Maybe<ShopifyMoneyV2>
  /** The app which created this marketing activity. */
  app: ShopifyApp
  /** The errors generated when an app publishes the marketing activity. */
  appErrors?: Maybe<ShopifyMarketingActivityExtensionAppErrors>
  /** The allocated budget for the marketing activity. */
  budget?: Maybe<ShopifyMarketingBudget>
  /** The date and time when the marketing activity was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The completed content in the marketing activity creation form. */
  formData?: Maybe<Scalars["String"]["output"]>
  /** The hierarchy level of the marketing activity. */
  hierarchyLevel?: Maybe<ShopifyMarketingActivityHierarchyLevel>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Whether the marketing activity is in the main workflow version of the marketing automation. */
  inMainWorkflowVersion: Scalars["Boolean"]["output"]
  /** The marketing activity represents an external marketing activity. */
  isExternal: Scalars["Boolean"]["output"]
  /**
   * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
   * @deprecated Use `marketingChannelType` instead.
   */
  marketingChannel: ShopifyMarketingChannel
  /** The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation. */
  marketingChannelType: ShopifyMarketingChannel
  /** Associated marketing event of this marketing activity. */
  marketingEvent?: Maybe<ShopifyMarketingEvent>
  /** ID of the parent activity of this marketing activity. */
  parentActivityId?: Maybe<Scalars["ID"]["output"]>
  /** ID of the parent activity of this marketing activity. */
  parentRemoteId?: Maybe<Scalars["String"]["output"]>
  /** A contextual description of the marketing activity based on the platform and tactic used. */
  sourceAndMedium: Scalars["String"]["output"]
  /** The current state of the marketing activity. */
  status: ShopifyMarketingActivityStatus
  /**
   * The severity of the marketing activity's status.
   * @deprecated Use `statusBadgeTypeV2` instead.
   */
  statusBadgeType?: Maybe<ShopifyMarketingActivityStatusBadgeType>
  /** The severity of the marketing activity's status. */
  statusBadgeTypeV2?: Maybe<ShopifyBadgeType>
  /** The rendered status of the marketing activity. */
  statusLabel: Scalars["String"]["output"]
  /**
   * The [date and time](
   *           https://help.shopify.com/https://en.wikipedia.org/wiki/ISO_8601
   *           ) when the activity's status last changed.
   */
  statusTransitionedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The method of marketing used for this marketing activity. */
  tactic: ShopifyMarketingTactic
  /** The status to which the marketing activity is currently transitioning. */
  targetStatus?: Maybe<ShopifyMarketingActivityStatus>
  /** The marketing activity's title, which is rendered on the marketing listing page. */
  title: Scalars["String"]["output"]
  /** The date and time when the marketing activity was updated. */
  updatedAt: Scalars["DateTime"]["output"]
  /** The value portion of the URL query parameter used in attributing sessions to this activity. */
  urlParameterValue?: Maybe<Scalars["String"]["output"]>
  /**
   * The set of [Urchin Tracking Module](
   *           https://help.shopify.com/https://en.wikipedia.org/wiki/UTM_parameters
   *           ) used in the URL for tracking this marketing activity.
   */
  utmParameters?: Maybe<ShopifyUtmParameters>
}

/** The input fields combining budget amount and its marketing budget type. */
export interface ShopifyMarketingActivityBudgetInput {
  /** Budget type for marketing activity. */
  budgetType?: InputMaybe<ShopifyMarketingBudgetBudgetType>
  /** Amount of budget for the marketing activity. */
  total?: InputMaybe<ShopifyMoneyInput>
}

/** An auto-generated type for paginating through multiple MarketingActivities. */
export interface ShopifyMarketingActivityConnection {
  __typename?: "MarketingActivityConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMarketingActivityEdge>
  /** A list of nodes that are contained in MarketingActivityEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMarketingActivity>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields for creating an externally-managed marketing activity. */
export interface ShopifyMarketingActivityCreateExternalInput {
  /** The amount spent on the marketing activity. */
  adSpend?: InputMaybe<ShopifyMoneyInput>
  /** The budget for this marketing activity. */
  budget?: InputMaybe<ShopifyMarketingActivityBudgetInput>
  /** The unique string identifier of the channel to which this activity belongs. For the correct handle for your channel, contact your partner manager. */
  channelHandle?: InputMaybe<Scalars["String"]["input"]>
  /** The date and time at which the activity ended. If omitted or set to `null`, the current time will be used if the status is set to `INACTIVE` or `DELETED_EXTERNALLY`. */
  end?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The hierarchy level of the activity within a campaign. The hierarchy level can't be updated. */
  hierarchyLevel?: InputMaybe<ShopifyMarketingActivityHierarchyLevel>
  /** The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation. */
  marketingChannelType: ShopifyMarketingChannel
  /** The ID for the parent marketing activity, if creating hierarchical activities. */
  parentActivityId?: InputMaybe<Scalars["ID"]["input"]>
  /** The remote ID for the parent marketing activity, if creating hierarchical activities. */
  parentRemoteId?: InputMaybe<Scalars["String"]["input"]>
  /** The domain from which ad clicks are forwarded to the shop. */
  referringDomain?: InputMaybe<Scalars["String"]["input"]>
  /** A custom unique identifier for the marketing activity, which can be used to manage the activity and send engagement metrics without having to store our marketing activity ID in your systems. */
  remoteId?: InputMaybe<Scalars["String"]["input"]>
  /** The URL for a preview image that's used for the marketing activity. */
  remotePreviewImageUrl?: InputMaybe<Scalars["URL"]["input"]>
  /** The URL for viewing and/or managing the activity outside of Shopify. */
  remoteUrl: Scalars["URL"]["input"]
  /** The date and time at which the activity is scheduled to end. */
  scheduledEnd?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The date and time at which the activity is scheduled to start. */
  scheduledStart?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The date and time at which the activity started. If omitted or set to `null`, the current time will be used. */
  start?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The status of the marketing activity. If status isn't set it will default to UNDEFINED. */
  status?: InputMaybe<ShopifyMarketingActivityExternalStatus>
  /** The method of marketing used for this marketing activity. The marketing tactic determines which default fields are included in the marketing activity. */
  tactic: ShopifyMarketingTactic
  /** The title of the marketing activity. */
  title: Scalars["String"]["input"]
  /** Value for a query parameter that gets inserted into storefront URLs for matching storefront traffic to this activity. This feature is currently available on a limited basis to some partners only. UTMs should continue to be used for most partners. Both the URL parameter value and UTM parameters can be set. */
  urlParameterValue?: InputMaybe<Scalars["String"]["input"]>
  /** Specifies the [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters) that are associated with a related marketing campaign. Either the URL parameter value or UTM can be set, but not both. */
  utm?: InputMaybe<ShopifyUtmInput>
}

/** Return type for `marketingActivityCreateExternal` mutation. */
export interface ShopifyMarketingActivityCreateExternalPayload {
  __typename?: "MarketingActivityCreateExternalPayload"
  /** The external marketing activity that was created. */
  marketingActivity?: Maybe<ShopifyMarketingActivity>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketingActivityUserError>
}

/** The input fields required to create a marketing activity. Marketing activity app extensions are deprecated and will be removed in the near future. */
export interface ShopifyMarketingActivityCreateInput {
  /** The ID of the marketing activity extension. */
  marketingActivityExtensionId: Scalars["ID"]["input"]
  /** The current state of the marketing activity. */
  status: ShopifyMarketingActivityStatus
}

/** Return type for `marketingActivityCreate` mutation. */
export interface ShopifyMarketingActivityCreatePayload {
  __typename?: "MarketingActivityCreatePayload"
  /**
   * The created marketing activity.
   * @deprecated Marketing activity app extensions are deprecated and will be removed in the near future.
   */
  marketingActivity?: Maybe<ShopifyMarketingActivity>
  /**
   * The path to return back to shopify admin from embedded editor.
   * @deprecated Marketing activity app extensions are deprecated and will be removed in the near future.
   */
  redirectPath?: Maybe<Scalars["String"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `marketingActivityDeleteExternal` mutation. */
export interface ShopifyMarketingActivityDeleteExternalPayload {
  __typename?: "MarketingActivityDeleteExternalPayload"
  /** The ID of the marketing activity that was deleted, if one was deleted. */
  deletedMarketingActivityId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketingActivityUserError>
}

/** An auto-generated type which holds one MarketingActivity and a cursor during pagination. */
export interface ShopifyMarketingActivityEdge {
  __typename?: "MarketingActivityEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MarketingActivityEdge. */
  node: ShopifyMarketingActivity
}

/** The error code resulted from the marketing activity extension integration. */
export type ShopifyMarketingActivityExtensionAppErrorCode =
  /** The app is either not responding or returning unexpected data. */
  | "API_ERROR"
  /** The app needs to be installed. */
  | "INSTALL_REQUIRED_ERROR"
  /** The shop/user must be onboarded to use the app. */
  | "NOT_ONBOARDED_ERROR"
  /** The app has returned an error when invoking the platform. */
  | "PLATFORM_ERROR"
  /** The app has returned validation errors. */
  | "VALIDATION_ERROR"
  | "%future added value"

/** Represents errors returned from apps when using the marketing activity extension. */
export interface ShopifyMarketingActivityExtensionAppErrors {
  __typename?: "MarketingActivityExtensionAppErrors"
  /** The app error type. */
  code: ShopifyMarketingActivityExtensionAppErrorCode
  /** The list of errors returned by the app. */
  userErrors: Array<ShopifyUserError>
}

/** Set of possible statuses for an external marketing activity. */
export type ShopifyMarketingActivityExternalStatus =
  /** This marketing activity is currently running. */
  | "ACTIVE"
  /** This marketing activity was deleted and it was triggered from outside of Shopify. */
  | "DELETED_EXTERNALLY"
  /** This marketing activity has completed running. */
  | "INACTIVE"
  /** This marketing activity is currently not running. */
  | "PAUSED"
  /** This marketing activity is scheduled to run. */
  | "SCHEDULED"
  /** The marketing activity's status is unknown. */
  | "UNDEFINED"
  | "%future added value"

/** Hierarchy levels for external marketing activities. */
export type ShopifyMarketingActivityHierarchyLevel =
  /** An advertisement activity. Must be parented by an ad group or a campaign activity, and must be assigned tracking parameters (URL or UTM). */
  | "AD"
  /** A group of advertisement activities. Must be parented by a campaign activity. */
  | "AD_GROUP"
  /** A campaign activity. May contain either ad groups or ads as child activities. If childless, then the campaign activity should have tracking parameters assigned (URL or UTM) otherwise it won't appear in marketing reports. */
  | "CAMPAIGN"
  | "%future added value"

/** The set of valid sort keys for the MarketingActivity query. */
export type ShopifyMarketingActivitySortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `title` value. */
  | "TITLE"
  | "%future added value"

/** Status helps to identify if this marketing activity has been completed, queued, failed etc. */
export type ShopifyMarketingActivityStatus =
  /** This marketing activity is currently running. */
  | "ACTIVE"
  /** This marketing activity is permanently unavailable. */
  | "DELETED"
  /** This marketing activity was deleted and it was triggered from outside of Shopify. */
  | "DELETED_EXTERNALLY"
  /** This marketing activity is disconnected and no longer editable. */
  | "DISCONNECTED"
  /** This marketing activity has been edited, but it is not yet created. */
  | "DRAFT"
  /** This marketing activity is unable to run. */
  | "FAILED"
  /** This marketing activity has completed running. */
  | "INACTIVE"
  /** This marketing activity is currently not running. */
  | "PAUSED"
  /** This marketing activity is pending creation on the app's marketing platform. */
  | "PENDING"
  /** This marketing activity is scheduled to run. */
  | "SCHEDULED"
  /** The marketing activity's status is unknown. */
  | "UNDEFINED"
  | "%future added value"

/** StatusBadgeType helps to identify the color of the status badge. */
export type ShopifyMarketingActivityStatusBadgeType =
  /** This status badge has type attention. */
  | "ATTENTION"
  /** This status badge has type critical. */
  | "CRITICAL"
  /** This status badge has type default. */
  | "DEFAULT"
  /** This status badge has type info. */
  | "INFO"
  /** This status badge has type success. */
  | "SUCCESS"
  /** This status badge has type warning. */
  | "WARNING"
  | "%future added value"

/** The input fields required to update an externally managed marketing activity. */
export interface ShopifyMarketingActivityUpdateExternalInput {
  /** The amount spent on the marketing activity. */
  adSpend?: InputMaybe<ShopifyMoneyInput>
  /** The budget for this marketing activity. */
  budget?: InputMaybe<ShopifyMarketingActivityBudgetInput>
  /** The date and time at which the activity ended. */
  end?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation. */
  marketingChannelType?: InputMaybe<ShopifyMarketingChannel>
  /** The domain from which ad clicks are forwarded to the shop. */
  referringDomain?: InputMaybe<Scalars["String"]["input"]>
  /** The URL for a preview image that's used for the marketing activity. */
  remotePreviewImageUrl?: InputMaybe<Scalars["URL"]["input"]>
  /** The URL for viewing and/or managing the activity outside of Shopify. */
  remoteUrl?: InputMaybe<Scalars["URL"]["input"]>
  /** The date and time at which the activity is scheduled to end. */
  scheduledEnd?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The date and time at which the activity is scheduled to start. */
  scheduledStart?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The date and time at which the activity started. */
  start?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The status of the marketing activity. */
  status?: InputMaybe<ShopifyMarketingActivityExternalStatus>
  /** The method of marketing used for this marketing activity. The marketing tactic determines which default fields are included in the marketing activity. */
  tactic?: InputMaybe<ShopifyMarketingTactic>
  /** The title of the marketing activity. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `marketingActivityUpdateExternal` mutation. */
export interface ShopifyMarketingActivityUpdateExternalPayload {
  __typename?: "MarketingActivityUpdateExternalPayload"
  /** The updated marketing activity. */
  marketingActivity?: Maybe<ShopifyMarketingActivity>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketingActivityUserError>
}

/** The input fields required to update a marketing activity. Marketing activity app extensions are deprecated and will be removed in the near future. */
export interface ShopifyMarketingActivityUpdateInput {
  /** The ID of the marketing activity. */
  id: Scalars["ID"]["input"]
}

/** Return type for `marketingActivityUpdate` mutation. */
export interface ShopifyMarketingActivityUpdatePayload {
  __typename?: "MarketingActivityUpdatePayload"
  /** The updated marketing activity. */
  marketingActivity?: Maybe<ShopifyMarketingActivity>
  /** The redirect path from the embedded editor to the Shopify admin. */
  redirectPath?: Maybe<Scalars["String"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields for creating or updating an externally-managed marketing activity. */
export interface ShopifyMarketingActivityUpsertExternalInput {
  /** The amount spent on the marketing activity. */
  adSpend?: InputMaybe<ShopifyMoneyInput>
  /** The budget for this marketing activity. */
  budget?: InputMaybe<ShopifyMarketingActivityBudgetInput>
  /** The unique string identifier of the channel to which this activity belongs. For the correct handle for your channel, contact your partner manager. */
  channelHandle?: InputMaybe<Scalars["String"]["input"]>
  /** The date and time at which the activity started. On creation, if this field is omitted or set to `null`, the current time will be used if the status is set to `INACTIVE` or `DELETED_EXTERNALLY` . */
  end?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The hierarchy level of the activity within a campaign. The hierarchy level can't be updated. */
  hierarchyLevel?: InputMaybe<ShopifyMarketingActivityHierarchyLevel>
  /** The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation. */
  marketingChannelType: ShopifyMarketingChannel
  /** The remote ID for the parent marketing activity, if creating hierarchical activities. */
  parentRemoteId?: InputMaybe<Scalars["String"]["input"]>
  /** The domain from which ad clicks are forwarded to the shop. */
  referringDomain?: InputMaybe<Scalars["String"]["input"]>
  /** A custom unique identifier for the marketing activity, which can be used to manage the activity and send engagement metrics without having to store our marketing activity ID in your systems. */
  remoteId: Scalars["String"]["input"]
  /** The URL for a preview image that's used for the marketing activity. */
  remotePreviewImageUrl?: InputMaybe<Scalars["URL"]["input"]>
  /** The URL for viewing and/or managing the activity outside of Shopify. */
  remoteUrl: Scalars["URL"]["input"]
  /** The date and time at which the activity is scheduled to end. */
  scheduledEnd?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The date and time at which the activity is scheduled to start. */
  scheduledStart?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The date and time at which the activity started. On creation, if this field is omitted or set to `null`, the current time will be used. */
  start?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The status of the marketing activity. */
  status: ShopifyMarketingActivityExternalStatus
  /** The method of marketing used for this marketing activity. The marketing tactic determines which default fields are included in the marketing activity. */
  tactic: ShopifyMarketingTactic
  /** The title of the marketing activity. */
  title: Scalars["String"]["input"]
  /** Value for a query parameter that gets inserted into storefront URLs for matching storefront traffic to this activity. This feature is currently available on a limited basis to some partners only. UTMs should continue to be used for most partners. Both the URL parameter value and UTM parameters can be set. */
  urlParameterValue?: InputMaybe<Scalars["String"]["input"]>
  /** Specifies the [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters) that are associated with a related marketing campaign. Either the URL parameter value or UTM can be set, but not both. */
  utm?: InputMaybe<ShopifyUtmInput>
}

/** Return type for `marketingActivityUpsertExternal` mutation. */
export interface ShopifyMarketingActivityUpsertExternalPayload {
  __typename?: "MarketingActivityUpsertExternalPayload"
  /** The external marketing activity that was created or updated. */
  marketingActivity?: Maybe<ShopifyMarketingActivity>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketingActivityUserError>
}

/** An error that occurs during the execution of marketing activity and engagement mutations. */
export interface ShopifyMarketingActivityUserError
  extends ShopifyDisplayableError {
  __typename?: "MarketingActivityUserError"
  /** The error code. */
  code?: Maybe<ShopifyMarketingActivityUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `MarketingActivityUserError`. */
export type ShopifyMarketingActivityUserErrorCode =
  /** The marketing activity must be an external activity. */
  | "ACTIVITY_NOT_EXTERNAL"
  /** This activity has child activities and thus cannot be deleted. Child activities must be deleted before a parent activity. */
  | "CANNOT_DELETE_ACTIVITY_WITH_CHILD_EVENTS"
  /** The activity's tactic can not be updated from STOREFRONT_APP. */
  | "CANNOT_UPDATE_TACTIC_IF_ORIGINALLY_STOREFRONT_APP"
  /** The activity's tactic can not be updated to STOREFRONT_APP. This type of tactic can only be specified when creating a new activity. */
  | "CANNOT_UPDATE_TACTIC_TO_STOREFRONT_APP"
  /** All currency codes provided in the input need to match. */
  | "CURRENCY_CODE_MISMATCH_INPUT"
  /** A mutation can not be ran because a job to delete all external activities has been enqueued, which happens either from calling the marketingActivitiesDeleteAllExternal mutation or as a result of an app uninstall. */
  | "DELETE_JOB_ENQUEUED"
  /** The job to delete all external activities failed to enqueue. */
  | "DELETE_JOB_FAILED_TO_ENQUEUE"
  /** The channel handle value cannot be modified. */
  | "IMMUTABLE_CHANNEL_HANDLE"
  /** The hierarchy level cannot be modified. */
  | "IMMUTABLE_HIERARCHY_LEVEL"
  /** The parent activity cannot be modified. */
  | "IMMUTABLE_PARENT_ID"
  /** The URL parameter value cannot be modified. */
  | "IMMUTABLE_URL_PARAMETER"
  /** The UTM parameters cannot be modified. */
  | "IMMUTABLE_UTM_PARAMETERS"
  /** The input value is invalid. */
  | "INVALID"
  /** The channel handle is not recognized. */
  | "INVALID_CHANNEL_HANDLE"
  /** Either the marketing activity ID or remote ID must be provided for the activity to be deleted. */
  | "INVALID_DELETE_ACTIVITY_EXTERNAL_ARGUMENTS"
  /** Either the channel_handle or delete_engagements_for_all_channels must be provided when deleting a marketing engagement. */
  | "INVALID_DELETE_ENGAGEMENTS_ARGUMENTS"
  /** Either the marketing activity ID, remote ID, or UTM must be provided. */
  | "INVALID_MARKETING_ACTIVITY_EXTERNAL_ARGUMENTS"
  /** For activity level engagement, either the marketing activity ID or remote ID must be provided. For channel level engagement, the channel handle must be provided. */
  | "INVALID_MARKETING_ENGAGEMENT_ARGUMENTS"
  /** No identifier found. For activity level engagement, either the marketing activity ID or remote ID must be provided. For channel level engagement, the channel handle must be provided. */
  | "INVALID_MARKETING_ENGAGEMENT_ARGUMENT_MISSING"
  /** The remote ID does not correspond to an existing activity. */
  | "INVALID_REMOTE_ID"
  /** The currency codes provided need to match the referenced marketing activity's currency code. */
  | "MARKETING_ACTIVITY_CURRENCY_CODE_MISMATCH"
  /** Marketing activity does not exist. */
  | "MARKETING_ACTIVITY_DOES_NOT_EXIST"
  /** A marketing activity with the same remote ID already exists. */
  | "MARKETING_ACTIVITY_WITH_REMOTE_ID_ALREADY_EXISTS"
  /** A marketing activity with the same URL parameter value already exists. */
  | "MARKETING_ACTIVITY_WITH_URL_PARAMETER_VALUE_ALREADY_EXISTS"
  /** A marketing activity with the same UTM campaign, medium, and source already exists. */
  | "MARKETING_ACTIVITY_WITH_UTM_CAMPAIGN_ALREADY_EXISTS"
  /** Marketing activity is not valid, the associated marketing event does not exist. */
  | "MARKETING_EVENT_DOES_NOT_EXIST"
  /** Non-hierarchical marketing activities must have UTM parameters or a URL parameter value. */
  | "NON_HIERARCHIAL_REQUIRES_UTM_URL_PARAMETER"
  /** The input value is already taken. */
  | "TAKEN"
  | "%future added value"

/** This type combines budget amount and its marketing budget type. */
export interface ShopifyMarketingBudget {
  __typename?: "MarketingBudget"
  /** The budget type for a marketing activity. */
  budgetType: ShopifyMarketingBudgetBudgetType
  /** The amount of budget for marketing activity. */
  total: ShopifyMoneyV2
}

/** The budget type for a marketing activity. */
export type ShopifyMarketingBudgetBudgetType =
  /** A daily budget. */
  | "DAILY"
  /** A budget for the lifetime of a marketing activity. */
  | "LIFETIME"
  | "%future added value"

/** The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation. */
export type ShopifyMarketingChannel =
  /** Displayed ads. */
  | "DISPLAY"
  /** Email. */
  | "EMAIL"
  /** Referral links. */
  | "REFERRAL"
  /** Paid search. */
  | "SEARCH"
  /** Social media. */
  | "SOCIAL"
  | "%future added value"

/** Marketing engagement represents customer activity taken on a marketing activity or a marketing channel. */
export interface ShopifyMarketingEngagement {
  __typename?: "MarketingEngagement"
  /** The total ad spend for the marketing content. Recurring weekly, monthly, or yearly spend needs to be divided into daily amounts. */
  adSpend?: Maybe<ShopifyMoneyV2>
  /** The unique string identifier of the channel to which the engagement metrics are being provided. This should be set when and only when providing channel-level engagements. This should be nil when providing activity-level engagements. For the correct handle for your channel, contact your partner manager. */
  channelHandle?: Maybe<Scalars["String"]["output"]>
  /** The total number of interactions, such as a button press or a screen touch, that occurred on the marketing content. */
  clicksCount?: Maybe<Scalars["Int"]["output"]>
  /** The total number of comments on the marketing content. */
  commentsCount?: Maybe<Scalars["Int"]["output"]>
  /** The total number of complaints on the marketing content. For message-based platforms such as email or SMS, this represents the number of marketing emails or messages that were marked as spam. For social media platforms, this represents the number of dislikes or the number of times marketing content was reported. */
  complaintsCount?: Maybe<Scalars["Int"]["output"]>
  /** The total number of fails for the marketing content. For message-based platforms such as email or SMS, this represents the number of bounced marketing emails or messages. */
  failsCount?: Maybe<Scalars["Int"]["output"]>
  /** The total number of favorites, likes, saves, or bookmarks on the marketing content. */
  favoritesCount?: Maybe<Scalars["Int"]["output"]>
  /** The number of customers that have placed their first order. Doesn't include adjustments such as edits, exchanges, or returns. */
  firstTimeCustomers?: Maybe<Scalars["Decimal"]["output"]>
  /** The total number of times marketing content was displayed to users, whether or not an interaction occurred. For message-based platforms such as email or SMS, this represents the number of marketing emails or messages that were delivered. */
  impressionsCount?: Maybe<Scalars["Int"]["output"]>
  /** Specifies how the provided metrics have been aggregated. Cumulative metrics are aggregated from the first day of reporting up to and including `occuredOn`. Non-cumulative metrics are aggregated over the single day indicated in `occuredOn`. Cumulative metrics will monotonically increase in time as each record includes the previous day's values, and so on. Non-cumulative is strongly preferred, and support for cumulative metrics may be deprecated in the future. */
  isCumulative: Scalars["Boolean"]["output"]
  /** The marketing activity object related to this engagement. This corresponds to the marketingActivityId passed in on creation of the engagement. */
  marketingActivity?: Maybe<ShopifyMarketingActivity>
  /** The calendar date (in the time zone offset specified by the utcOffset field) for which the metrics are being reported. For example, a shop in UTC-5 would set utcOffset="-05:00" and aggregate all engagements from 05:00:00Z up to 29:00:00Z (5am UTC next day) for each call. */
  occurredOn: Scalars["Date"]["output"]
  /** The number of orders generated from the marketing content. */
  orders?: Maybe<Scalars["Decimal"]["output"]>
  /** The number of returning customers that have placed an order. Doesn't include adjustments such as edits, exchanges, or returns. */
  returningCustomers?: Maybe<Scalars["Decimal"]["output"]>
  /** The amount of sales generated from the marketing content. */
  sales?: Maybe<ShopifyMoneyV2>
  /** The total number of marketing emails or messages that were sent. */
  sendsCount?: Maybe<Scalars["Int"]["output"]>
  /** The number of online store sessions generated from the marketing content. */
  sessionsCount?: Maybe<Scalars["Int"]["output"]>
  /** The total number of times marketing content was distributed or reposted to either one's own network of followers through a social media platform or other digital channels. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were forwarded. */
  sharesCount?: Maybe<Scalars["Int"]["output"]>
  /** The total number of unique clicks on the marketing content. */
  uniqueClicksCount?: Maybe<Scalars["Int"]["output"]>
  /** The total number of all users who saw marketing content since it was published. For  message-based platforms such as email or SMS, this represents the number of unique users that opened a  marketing email or message. For video-based content, this represents the number of unique users that  played video content. */
  uniqueViewsCount?: Maybe<Scalars["Int"]["output"]>
  /** The total number of unsubscribes on the marketing content. For social media platforms, this represents the number of unfollows. */
  unsubscribesCount?: Maybe<Scalars["Int"]["output"]>
  /** The UTC offset for the time zone in which the metrics are being reported, in the format `"+HH:MM"` or `"-HH:MM"`. Used in combination with occurredOn when aggregating daily metrics. Must match the account settings for the shop to minimize eventual discrepancies in reporting. */
  utcOffset: Scalars["UtcOffset"]["output"]
  /** The total number of views on the marketing content. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were opened. For video-based content, this represents the number of times videos were played. */
  viewsCount?: Maybe<Scalars["Int"]["output"]>
}

/** Return type for `marketingEngagementCreate` mutation. */
export interface ShopifyMarketingEngagementCreatePayload {
  __typename?: "MarketingEngagementCreatePayload"
  /** The marketing engagement that was created. This represents customer activity taken on a marketing activity or a marketing channel. */
  marketingEngagement?: Maybe<ShopifyMarketingEngagement>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketingActivityUserError>
}

/** The input fields for a marketing engagement. */
export interface ShopifyMarketingEngagementInput {
  /** The total ad spend for the marketing content. Recurring weekly, monthly, or yearly spend needs to be divided into daily amounts. */
  adSpend?: InputMaybe<ShopifyMoneyInput>
  /** The total number of interactions, such as a button press or a screen touch, that occurred on the marketing content. */
  clicksCount?: InputMaybe<Scalars["Int"]["input"]>
  /** The total number of comments on the marketing content. */
  commentsCount?: InputMaybe<Scalars["Int"]["input"]>
  /** The total number of complaints on the marketing content. For message-based platforms such as email or SMS, this represents the number of marketing emails or messages that were marked as spam. For social media platforms, this represents the number of dislikes or the number of times marketing content was reported. */
  complaintsCount?: InputMaybe<Scalars["Int"]["input"]>
  /** The total number of fails for the marketing content. For message-based platforms such as email or SMS, this represents the number of bounced marketing emails or messages. */
  failsCount?: InputMaybe<Scalars["Int"]["input"]>
  /** The total number of favorites, likes, saves, or bookmarks on the marketing content. */
  favoritesCount?: InputMaybe<Scalars["Int"]["input"]>
  /** The number of customers that have placed their first order. Doesn't include adjustments such as edits, exchanges, or returns. */
  firstTimeCustomers?: InputMaybe<Scalars["Decimal"]["input"]>
  /** The total number of times marketing content was displayed to users, whether or not an interaction occurred. For message-based platforms such as email or SMS, this represents the number of marketing emails or messages that were delivered. */
  impressionsCount?: InputMaybe<Scalars["Int"]["input"]>
  /** Specifies how the provided metrics have been aggregated. Cumulative metrics are aggregated from the first day of reporting up to and including `occuredOn`. Non-cumulative metrics are aggregated over the single day indicated in `occuredOn`. Cumulative metrics will monotonically increase in time as each record includes the previous day's values, and so on. Non-cumulative is strongly preferred, and support for cumulative metrics may be deprecated in the future. */
  isCumulative: Scalars["Boolean"]["input"]
  /** The calendar date (in the time zone offset specified by the utcOffset field) for which the metrics are being reported. For example, a shop in UTC-5 would set utcOffset="-05:00" and aggregate all engagements from 05:00:00Z up to 29:00:00Z (5am UTC next day) for each call. */
  occurredOn: Scalars["Date"]["input"]
  /** The number of orders generated from the marketing content. */
  orders?: InputMaybe<Scalars["Decimal"]["input"]>
  /** The number of returning customers that have placed an order. Doesn't include adjustments such as edits, exchanges, or returns. */
  returningCustomers?: InputMaybe<Scalars["Decimal"]["input"]>
  /** The amount of sales generated from the marketing content. */
  sales?: InputMaybe<ShopifyMoneyInput>
  /** The total number of marketing emails or messages that were sent. */
  sendsCount?: InputMaybe<Scalars["Int"]["input"]>
  /** The number of online store sessions generated from the marketing content. */
  sessionsCount?: InputMaybe<Scalars["Int"]["input"]>
  /** The total number of times marketing content was distributed or reposted to either one's own network of followers through a social media platform or other digital channels. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were forwarded. */
  sharesCount?: InputMaybe<Scalars["Int"]["input"]>
  /** The total number of unique clicks on the marketing content. */
  uniqueClicksCount?: InputMaybe<Scalars["Int"]["input"]>
  /** The total number of all users who saw marketing content since it was published. For  message-based platforms such as email or SMS, this represents the number of unique users that opened a  marketing email or message. For video-based content, this represents the number of unique users that  played video content. */
  uniqueViewsCount?: InputMaybe<Scalars["Int"]["input"]>
  /** The total number of unsubscribes on the marketing content. For social media platforms, this represents the number of unfollows. */
  unsubscribesCount?: InputMaybe<Scalars["Int"]["input"]>
  /** The UTC offset for the time zone in which the metrics are being reported, in the format `"+HH:MM"` or `"-HH:MM"`. Used in combination with occurredOn when aggregating daily metrics. Must match the account settings for the shop to minimize eventual discrepancies in reporting. */
  utcOffset: Scalars["UtcOffset"]["input"]
  /** The total number of views on the marketing content. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were opened. For video-based content, this represents the number of times videos were played. */
  viewsCount?: InputMaybe<Scalars["Int"]["input"]>
}

/** Return type for `marketingEngagementsDelete` mutation. */
export interface ShopifyMarketingEngagementsDeletePayload {
  __typename?: "MarketingEngagementsDeletePayload"
  /** Informational message about the engagement data that has been marked for deletion. */
  result?: Maybe<Scalars["String"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketingActivityUserError>
}

/** Represents actions that market a merchant's store or products. */
export interface ShopifyMarketingEvent
  extends ShopifyLegacyInteroperability,
    ShopifyNode {
  __typename?: "MarketingEvent"
  /** The app that the marketing event is attributed to. */
  app: ShopifyApp
  /**
   * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
   * @deprecated Use `marketingChannelType` instead.
   */
  channel?: Maybe<ShopifyMarketingChannel>
  /** The unique string identifier of the channel to which this activity belongs. For the correct handle for your channel, contact your partner manager. */
  channelHandle?: Maybe<Scalars["String"]["output"]>
  /** A human-readable description of the marketing event. */
  description?: Maybe<Scalars["String"]["output"]>
  /** The date and time when the marketing event ended. */
  endedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** The URL where the marketing event can be managed. */
  manageUrl?: Maybe<Scalars["URL"]["output"]>
  /** The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation. */
  marketingChannelType?: Maybe<ShopifyMarketingChannel>
  /** The URL where the marketing event can be previewed. */
  previewUrl?: Maybe<Scalars["URL"]["output"]>
  /** An optional ID that helps Shopify validate engagement data. */
  remoteId?: Maybe<Scalars["String"]["output"]>
  /** The date and time when the marketing event is scheduled to end. */
  scheduledToEndAt?: Maybe<Scalars["DateTime"]["output"]>
  /**
   * Where the `MarketingEvent` occurred and what kind of content was used.
   * Because `utmSource` and `utmMedium` are often used interchangeably, this is
   * based on a combination of `marketingChannel`, `referringDomain`, and `type` to
   * provide a consistent representation for any given piece of marketing
   * regardless of the app that created it.
   */
  sourceAndMedium: Scalars["String"]["output"]
  /** The date and time when the marketing event started. */
  startedAt: Scalars["DateTime"]["output"]
  /**
   * The display text for the marketing event type.
   * @deprecated Use `sourceAndMedium` instead.
   */
  targetTypeDisplayText: Scalars["String"]["output"]
  /** The marketing event type. */
  type: ShopifyMarketingTactic
  /** The name of the marketing campaign. */
  utmCampaign?: Maybe<Scalars["String"]["output"]>
  /** The medium that the marketing campaign is using. Example values: `cpc`, `banner`. */
  utmMedium?: Maybe<Scalars["String"]["output"]>
  /** The referrer of the marketing event. Example values: `google`, `newsletter`. */
  utmSource?: Maybe<Scalars["String"]["output"]>
}

/** An auto-generated type for paginating through multiple MarketingEvents. */
export interface ShopifyMarketingEventConnection {
  __typename?: "MarketingEventConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMarketingEventEdge>
  /** A list of nodes that are contained in MarketingEventEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMarketingEvent>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one MarketingEvent and a cursor during pagination. */
export interface ShopifyMarketingEventEdge {
  __typename?: "MarketingEventEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MarketingEventEdge. */
  node: ShopifyMarketingEvent
}

/** The set of valid sort keys for the MarketingEvent query. */
export type ShopifyMarketingEventSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `started_at` value. */
  | "STARTED_AT"
  | "%future added value"

/** The available types of tactics for a marketing activity. */
export type ShopifyMarketingTactic =
  /** An abandoned cart recovery email. */
  | "ABANDONED_CART"
  /** An ad, such as a Facebook ad. */
  | "AD"
  /** An affiliate link. */
  | "AFFILIATE"
  /** A link. */
  | "LINK"
  /** A loyalty program. */
  | "LOYALTY"
  /** A messaging app, such as Facebook Messenger. */
  | "MESSAGE"
  /** A newsletter. */
  | "NEWSLETTER"
  /** A notification in the Shopify admin. */
  | "NOTIFICATION"
  /** A blog post. */
  | "POST"
  /** A retargeting ad. */
  | "RETARGETING"
  /** Search engine optimization. */
  | "SEO"
  /** A popup on the online store. */
  | "STOREFRONT_APP"
  /** A transactional email. */
  | "TRANSACTIONAL"
  | "%future added value"

/** The entitlements for B2B markets. */
export interface ShopifyMarketsB2BEntitlement {
  __typename?: "MarketsB2BEntitlement"
  /** The entitlements for B2B market catalogs. */
  catalogs: ShopifyMarketsCatalogsEntitlement
  /** Whether B2B markets are enabled. */
  enabled: Scalars["Boolean"]["output"]
}

/** The entitlements for catalogs. */
export interface ShopifyMarketsCatalogsEntitlement {
  __typename?: "MarketsCatalogsEntitlement"
  /** Whether catalogs are enabled. */
  enabled: Scalars["Boolean"]["output"]
}

/** The entitlements for region markets. */
export interface ShopifyMarketsRegionsEntitlement {
  __typename?: "MarketsRegionsEntitlement"
  /** The entitlements for region market catalogs. */
  catalogs: ShopifyMarketsCatalogsEntitlement
  /** Whether region markets are enabled. */
  enabled: Scalars["Boolean"]["output"]
}

/** The resolved values based on the markets configuration for a buyer signal. Resolved values include the resolved catalogs, web presences, currency, and price inclusivity. */
export interface ShopifyMarketsResolvedValues {
  __typename?: "MarketsResolvedValues"
  /** The resolved catalogs. */
  catalogs: ShopifyMarketCatalogConnection
  /** The resolved currency code. */
  currencyCode: ShopifyCurrencyCode
  /** The resolved price inclusivity attributes. */
  priceInclusivity: ShopifyResolvedPriceInclusivity
  /** The resolved web presences ordered by priority. */
  webPresences: ShopifyMarketWebPresenceConnection
}

/** The resolved values based on the markets configuration for a buyer signal. Resolved values include the resolved catalogs, web presences, currency, and price inclusivity. */
export interface ShopifyMarketsResolvedValuesCatalogsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The resolved values based on the markets configuration for a buyer signal. Resolved values include the resolved catalogs, web presences, currency, and price inclusivity. */
export interface ShopifyMarketsResolvedValuesWebPresencesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The entitlements for retail markets. */
export interface ShopifyMarketsRetailEntitlement {
  __typename?: "MarketsRetailEntitlement"
  /** The entitlements for retail market catalogs. */
  catalogs: ShopifyMarketsCatalogsEntitlement
  /** Whether retail markets are enabled. */
  enabled: Scalars["Boolean"]["output"]
}

/** The set of valid sort keys for the Markets query. */
export type ShopifyMarketsSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `market_condition_types` value. */
  | "MARKET_CONDITION_TYPES"
  /** Sort by the `market_type` value. */
  | "MARKET_TYPE"
  /** Sort by the `name` value. */
  | "NAME"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** The entitlements for themes. */
export interface ShopifyMarketsThemesEntitlement {
  __typename?: "MarketsThemesEntitlement"
  /** Whether themes are enabled. */
  enabled: Scalars["Boolean"]["output"]
}

/** Markets entitlement information. */
export interface ShopifyMarketsType {
  __typename?: "MarketsType"
  /** The entitlements for B2B markets. */
  b2b: ShopifyMarketsB2BEntitlement
  /** The entitlements for region markets. */
  regions: ShopifyMarketsRegionsEntitlement
  /** The entitlements for retail markets. */
  retail: ShopifyMarketsRetailEntitlement
  /** The entitlements for themes. */
  themes: ShopifyMarketsThemesEntitlement
}

/** Represents a media interface. */
export interface ShopifyMedia {
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The media content type. */
  mediaContentType: ShopifyMediaContentType
  /** Any errors which have occurred on the media. */
  mediaErrors: Array<ShopifyMediaError>
  /** The warnings attached to the media. */
  mediaWarnings: Array<ShopifyMediaWarning>
  /** The preview image for the media. */
  preview?: Maybe<ShopifyMediaPreviewImage>
  /** Current status of the media. */
  status: ShopifyMediaStatus
}

/** An auto-generated type for paginating through multiple Media. */
export interface ShopifyMediaConnection {
  __typename?: "MediaConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMediaEdge>
  /** A list of nodes that are contained in MediaEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMedia>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The possible content types for a media object. */
export type ShopifyMediaContentType =
  /** An externally hosted video. */
  | "EXTERNAL_VIDEO"
  /** A Shopify-hosted image. */
  | "IMAGE"
  /** A 3d model. */
  | "MODEL_3D"
  /** A Shopify-hosted video. */
  | "VIDEO"
  | "%future added value"

/** An auto-generated type which holds one Media and a cursor during pagination. */
export interface ShopifyMediaEdge {
  __typename?: "MediaEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MediaEdge. */
  node: ShopifyMedia
}

/**
 * Represents a media error. This typically occurs when there is an issue with the media itself causing it to fail validation.
 * Check the media before attempting to upload again.
 */
export interface ShopifyMediaError {
  __typename?: "MediaError"
  /** Code representing the type of error. */
  code: ShopifyMediaErrorCode
  /** Additional details regarding the error. */
  details?: Maybe<Scalars["String"]["output"]>
  /** Translated error message. */
  message: Scalars["String"]["output"]
}

/** Error types for media. */
export type ShopifyMediaErrorCode =
  /** Media could not be created because a file with the same name already exists. */
  | "DUPLICATE_FILENAME_ERROR"
  /** Media could not be created because embed permissions are disabled for this video. */
  | "EXTERNAL_VIDEO_EMBED_DISABLED"
  /** Media could not be created because video is either not found or still transcoding. */
  | "EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING"
  /** Media could not be created because the external video has an invalid aspect ratio. */
  | "EXTERNAL_VIDEO_INVALID_ASPECT_RATIO"
  /** Media could not be created because the external video could not be found. */
  | "EXTERNAL_VIDEO_NOT_FOUND"
  /** Media could not be created because the external video is not listed or is private. */
  | "EXTERNAL_VIDEO_UNLISTED"
  /** Media could not be created because the cumulative file storage limit would be exceeded. */
  | "FILE_STORAGE_LIMIT_EXCEEDED"
  /** File could not be processed because the source could not be downloaded. */
  | "GENERIC_FILE_DOWNLOAD_FAILURE"
  /** File could not be created because the size is too large. */
  | "GENERIC_FILE_INVALID_SIZE"
  /** Media could not be processed because the image could not be downloaded. */
  | "IMAGE_DOWNLOAD_FAILURE"
  /** Media could not be processed because the image could not be processed. */
  | "IMAGE_PROCESSING_FAILURE"
  /** Media could not be created because the image has an invalid aspect ratio. */
  | "INVALID_IMAGE_ASPECT_RATIO"
  /** Media could not be created because the image size is too large. */
  | "INVALID_IMAGE_FILE_SIZE"
  /** Media could not be created because the image's resolution exceeds the max limit. */
  | "INVALID_IMAGE_RESOLUTION"
  /** Media could not be processed because the signed URL was invalid. */
  | "INVALID_SIGNED_URL"
  /** Media timed out because it is currently being modified by another operation. */
  | "MEDIA_TIMEOUT_ERROR"
  /** Media could not be created because the model file failed processing. */
  | "MODEL3D_GLB_OUTPUT_CREATION_ERROR"
  /** Media could not be created because the model can't be converted to USDZ format. */
  | "MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR"
  /** Media could not be created because the model file failed processing. */
  | "MODEL3D_PROCESSING_FAILURE"
  /** Media could not be created because the model's thumbnail generation failed. */
  | "MODEL3D_THUMBNAIL_GENERATION_ERROR"
  /** There was an issue while trying to generate a new thumbnail. */
  | "MODEL3D_THUMBNAIL_REGENERATION_ERROR"
  /** Model failed validation. */
  | "MODEL3D_VALIDATION_ERROR"
  /** Media error has occured for unknown reason. */
  | "UNKNOWN"
  /** Media could not be created because the image is an unsupported file type. */
  | "UNSUPPORTED_IMAGE_FILE_TYPE"
  /** Media could not be created because it has an invalid file type. */
  | "VIDEO_INVALID_FILETYPE_ERROR"
  /** Media could not be created because it does not meet the maximum duration requirement. */
  | "VIDEO_MAX_DURATION_ERROR"
  /** Media could not be created because it does not meet the maximum height requirement. */
  | "VIDEO_MAX_HEIGHT_ERROR"
  /** Media could not be created because it does not meet the maximum width requirement. */
  | "VIDEO_MAX_WIDTH_ERROR"
  /** Media could not be created because the metadata could not be read. */
  | "VIDEO_METADATA_READ_ERROR"
  /** Media could not be created because it does not meet the minimum duration requirement. */
  | "VIDEO_MIN_DURATION_ERROR"
  /** Media could not be created because it does not meet the minimum height requirement. */
  | "VIDEO_MIN_HEIGHT_ERROR"
  /** Media could not be created because it does not meet the minimum width requirement. */
  | "VIDEO_MIN_WIDTH_ERROR"
  /** Video failed validation. */
  | "VIDEO_VALIDATION_ERROR"
  | "%future added value"

/** Host for a Media Resource. */
export type ShopifyMediaHost =
  /** Host for Vimeo embedded videos. */
  | "VIMEO"
  /** Host for YouTube embedded videos. */
  | "YOUTUBE"
  | "%future added value"

/**
 * The `MediaImage` object represents an image hosted on Shopify's
 * [content delivery network (CDN)](https://shopify.dev/docs/storefronts/themes/best-practices/performance/platform#shopify-cdn).
 * Shopify CDN is a content system that serves as the primary way to store,
 * manage, and deliver visual content for products, variants, and other resources across the Shopify platform.
 *
 * The `MediaImage` object provides information to:
 *
 * - Store and display product and variant images across online stores, admin interfaces, and mobile apps.
 * - Retrieve visual branding elements, including logos, banners, favicons, and background images in checkout flows.
 * - Retrieve signed URLs for secure, time-limited access to original image files.
 *
 * Each `MediaImage` object provides both the processed image data (with automatic optimization and CDN delivery)
 * and access to the original source file. The image processing is handled asynchronously, so images
 * might not be immediately available after upload. The
 * [`status`](https://shopify.dev/docs/api/admin-graphql/latest/objects/mediaimage#field-MediaImage.fields.status)
 * field indicates when processing is complete and the image is ready for use.
 *
 * The `MediaImage` object implements the [`Media`](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/Media)
 * interface alongside other media types, like videos and 3D models.
 *
 * Learn about
 * managing media for [products](https://shopify.dev/docs/apps/build/online-store/product-media),
 * [product variants](https://shopify.dev/docs/apps/build/online-store/product-variant-media), and
 * [asynchronous media management](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components#asynchronous-media-management).
 */
export interface ShopifyMediaImage
  extends ShopifyFile,
    ShopifyHasMetafields,
    ShopifyMedia,
    ShopifyNode {
  __typename?: "MediaImage"
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars["String"]["output"]>
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** Any errors that have occurred on the file. */
  fileErrors: Array<ShopifyFileError>
  /** The status of the file. */
  fileStatus: ShopifyFileStatus
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The image for the media. Returns `null` until `status` is `READY`. */
  image?: Maybe<ShopifyImage>
  /** The media content type. */
  mediaContentType: ShopifyMediaContentType
  /** Any errors which have occurred on the media. */
  mediaErrors: Array<ShopifyMediaError>
  /** The warnings attached to the media. */
  mediaWarnings: Array<ShopifyMediaWarning>
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   * @deprecated No longer supported. Use metaobjects instead.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   * @deprecated No longer supported. Use metaobjects instead.
   */
  metafields: ShopifyMetafieldConnection
  /** The MIME type of the image. */
  mimeType?: Maybe<Scalars["String"]["output"]>
  /** The original source of the image. */
  originalSource?: Maybe<ShopifyMediaImageOriginalSource>
  /** The preview image for the media. */
  preview?: Maybe<ShopifyMediaPreviewImage>
  /** Current status of the media. */
  status: ShopifyMediaStatus
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/**
 * The `MediaImage` object represents an image hosted on Shopify's
 * [content delivery network (CDN)](https://shopify.dev/docs/storefronts/themes/best-practices/performance/platform#shopify-cdn).
 * Shopify CDN is a content system that serves as the primary way to store,
 * manage, and deliver visual content for products, variants, and other resources across the Shopify platform.
 *
 * The `MediaImage` object provides information to:
 *
 * - Store and display product and variant images across online stores, admin interfaces, and mobile apps.
 * - Retrieve visual branding elements, including logos, banners, favicons, and background images in checkout flows.
 * - Retrieve signed URLs for secure, time-limited access to original image files.
 *
 * Each `MediaImage` object provides both the processed image data (with automatic optimization and CDN delivery)
 * and access to the original source file. The image processing is handled asynchronously, so images
 * might not be immediately available after upload. The
 * [`status`](https://shopify.dev/docs/api/admin-graphql/latest/objects/mediaimage#field-MediaImage.fields.status)
 * field indicates when processing is complete and the image is ready for use.
 *
 * The `MediaImage` object implements the [`Media`](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/Media)
 * interface alongside other media types, like videos and 3D models.
 *
 * Learn about
 * managing media for [products](https://shopify.dev/docs/apps/build/online-store/product-media),
 * [product variants](https://shopify.dev/docs/apps/build/online-store/product-variant-media), and
 * [asynchronous media management](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components#asynchronous-media-management).
 */
export interface ShopifyMediaImageMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * The `MediaImage` object represents an image hosted on Shopify's
 * [content delivery network (CDN)](https://shopify.dev/docs/storefronts/themes/best-practices/performance/platform#shopify-cdn).
 * Shopify CDN is a content system that serves as the primary way to store,
 * manage, and deliver visual content for products, variants, and other resources across the Shopify platform.
 *
 * The `MediaImage` object provides information to:
 *
 * - Store and display product and variant images across online stores, admin interfaces, and mobile apps.
 * - Retrieve visual branding elements, including logos, banners, favicons, and background images in checkout flows.
 * - Retrieve signed URLs for secure, time-limited access to original image files.
 *
 * Each `MediaImage` object provides both the processed image data (with automatic optimization and CDN delivery)
 * and access to the original source file. The image processing is handled asynchronously, so images
 * might not be immediately available after upload. The
 * [`status`](https://shopify.dev/docs/api/admin-graphql/latest/objects/mediaimage#field-MediaImage.fields.status)
 * field indicates when processing is complete and the image is ready for use.
 *
 * The `MediaImage` object implements the [`Media`](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/Media)
 * interface alongside other media types, like videos and 3D models.
 *
 * Learn about
 * managing media for [products](https://shopify.dev/docs/apps/build/online-store/product-media),
 * [product variants](https://shopify.dev/docs/apps/build/online-store/product-variant-media), and
 * [asynchronous media management](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components#asynchronous-media-management).
 */
export interface ShopifyMediaImageMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The original source for an image. */
export interface ShopifyMediaImageOriginalSource {
  __typename?: "MediaImageOriginalSource"
  /** The size of the original file in bytes. */
  fileSize?: Maybe<Scalars["Int"]["output"]>
  /** The URL of the original image, valid only for a short period. */
  url?: Maybe<Scalars["URL"]["output"]>
}

/** Represents the preview image for a media. */
export interface ShopifyMediaPreviewImage {
  __typename?: "MediaPreviewImage"
  /** The preview image for the media. Returns `null` until `status` is `READY`. */
  image?: Maybe<ShopifyImage>
  /** Current status of the preview image. */
  status: ShopifyMediaPreviewImageStatus
}

/** The possible statuses for a media preview image. */
export type ShopifyMediaPreviewImageStatus =
  /** Preview image processing has failed. */
  | "FAILED"
  /** Preview image is being processed. */
  | "PROCESSING"
  /** Preview image is ready to be displayed. */
  | "READY"
  /** Preview image is uploaded but not yet processed. */
  | "UPLOADED"
  | "%future added value"

/** The possible statuses for a media object. */
export type ShopifyMediaStatus =
  /** Media processing has failed. */
  | "FAILED"
  /** Media is being processed. */
  | "PROCESSING"
  /** Media is ready to be displayed. */
  | "READY"
  /** Media has been uploaded but not yet processed. */
  | "UPLOADED"
  | "%future added value"

/** Represents an error that happens during execution of a Media query or mutation. */
export interface ShopifyMediaUserError extends ShopifyDisplayableError {
  __typename?: "MediaUserError"
  /** The error code. */
  code?: Maybe<ShopifyMediaUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `MediaUserError`. */
export type ShopifyMediaUserErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** The input value is invalid. */
  | "INVALID"
  /** Invalid media type. */
  | "INVALID_MEDIA_TYPE"
  /** Exceeded the maximum number of 100 variant-media pairs per mutation call. */
  | "MAXIMUM_VARIANT_MEDIA_PAIRS_EXCEEDED"
  /** Media cannot be modified. It is currently being modified by another operation. */
  | "MEDIA_CANNOT_BE_MODIFIED"
  /** Media does not exist. */
  | "MEDIA_DOES_NOT_EXIST"
  /** Media does not exist on the given product. */
  | "MEDIA_DOES_NOT_EXIST_ON_PRODUCT"
  /** The specified media is not attached to the specified variant. */
  | "MEDIA_IS_NOT_ATTACHED_TO_VARIANT"
  /** Missing arguments. */
  | "MISSING_ARGUMENTS"
  /** Model3d creation throttle was exceeded. */
  | "MODEL3D_THROTTLE_EXCEEDED"
  /** Model validation failed. */
  | "MODEL3D_VALIDATION_ERROR"
  /** Non-ready media are not supported. */
  | "NON_READY_MEDIA"
  /** Product does not exist. */
  | "PRODUCT_DOES_NOT_EXIST"
  /** Exceeded the limit of media per product. */
  | "PRODUCT_MEDIA_LIMIT_EXCEEDED"
  /** Product is suspended. */
  | "PRODUCT_SUSPENDED"
  /** Product variant already has attached media. */
  | "PRODUCT_VARIANT_ALREADY_HAS_MEDIA"
  /** Variant does not exist on the given product. */
  | "PRODUCT_VARIANT_DOES_NOT_EXIST_ON_PRODUCT"
  /** Variant specified in more than one pair. */
  | "PRODUCT_VARIANT_SPECIFIED_MULTIPLE_TIMES"
  /** Exceeded the limit of media per shop. */
  | "SHOP_MEDIA_LIMIT_EXCEEDED"
  /** Only one mediaId is allowed per variant-media input pair. */
  | "TOO_MANY_MEDIA_PER_INPUT_PAIR"
  /** Video creation throttle was exceeded. */
  | "VIDEO_THROTTLE_EXCEEDED"
  /** Video validation failed. */
  | "VIDEO_VALIDATION_ERROR"
  | "%future added value"

/**
 * Represents a media warning. This occurs when there is a non-blocking concern regarding your media.
 * Consider reviewing your media to ensure it is correct and its parameters are as expected.
 */
export interface ShopifyMediaWarning {
  __typename?: "MediaWarning"
  /** The code representing the type of warning. */
  code: ShopifyMediaWarningCode
  /** Translated warning message. */
  message?: Maybe<Scalars["String"]["output"]>
}

/** Warning types for media. */
export type ShopifyMediaWarningCode =
  /** 3D model physical size might be invalid. The dimensions of your model are very large. Consider reviewing your model to ensure they are correct. */
  | "MODEL_LARGE_PHYSICAL_SIZE"
  /** The thumbnail failed to regenerate.Try applying the changes again to regenerate the thumbnail. */
  | "MODEL_PREVIEW_IMAGE_FAIL"
  /** 3D model physical size might be invalid. The dimensions of your model are very small. Consider reviewing your model to ensure they are correct. */
  | "MODEL_SMALL_PHYSICAL_SIZE"
  | "%future added value"

/** A menu for display on the storefront. */
export interface ShopifyMenu
  extends ShopifyHasPublishedTranslations,
    ShopifyNode {
  __typename?: "Menu"
  /** The menu's handle. */
  handle: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Whether the menu is a default. The handle for default menus can't be updated and default menus can't be deleted. */
  isDefault: Scalars["Boolean"]["output"]
  /** A list of items on the menu sorted by position. */
  items: Array<ShopifyMenuItem>
  /** The menu's title. */
  title: Scalars["String"]["output"]
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
}

/** A menu for display on the storefront. */
export interface ShopifyMenuItemsArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
}

/** A menu for display on the storefront. */
export interface ShopifyMenuTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/** An auto-generated type for paginating through multiple Menus. */
export interface ShopifyMenuConnection {
  __typename?: "MenuConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMenuEdge>
  /** A list of nodes that are contained in MenuEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMenu>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `menuCreate` mutation. */
export interface ShopifyMenuCreatePayload {
  __typename?: "MenuCreatePayload"
  /** The created menu. */
  menu?: Maybe<ShopifyMenu>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMenuCreateUserError>
}

/** An error that occurs during the execution of `MenuCreate`. */
export interface ShopifyMenuCreateUserError extends ShopifyDisplayableError {
  __typename?: "MenuCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyMenuCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `MenuCreateUserError`. */
export type ShopifyMenuCreateUserErrorCode =
  /** The menu cannot be nested more than 3 level deep. */
  | "NESTING_TOO_DEEP"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  | "%future added value"

/** Return type for `menuDelete` mutation. */
export interface ShopifyMenuDeletePayload {
  __typename?: "MenuDeletePayload"
  /** The ID of the deleted menu. */
  deletedMenuId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMenuDeleteUserError>
}

/** An error that occurs during the execution of `MenuDelete`. */
export interface ShopifyMenuDeleteUserError extends ShopifyDisplayableError {
  __typename?: "MenuDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyMenuDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `MenuDeleteUserError`. */
export type ShopifyMenuDeleteUserErrorCode =
  /** Menu does not exist. */
  | "MENU_DOES_NOT_EXIST"
  /** Default menu cannot be deleted. */
  | "UNABLE_TO_DELETE_DEFAULT_MENU"
  | "%future added value"

/** An auto-generated type which holds one Menu and a cursor during pagination. */
export interface ShopifyMenuEdge {
  __typename?: "MenuEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MenuEdge. */
  node: ShopifyMenu
}

/** A menu item for display on the storefront. */
export interface ShopifyMenuItem {
  __typename?: "MenuItem"
  /** A globally-unique ID of the navigation menu item. */
  id: Scalars["ID"]["output"]
  /** List of the menu items nested under this item sorted by position. */
  items: Array<ShopifyMenuItem>
  /** The ID of the resource to link to. */
  resourceId?: Maybe<Scalars["ID"]["output"]>
  /** The menu item's tags to filter a collection. */
  tags: Array<Scalars["String"]["output"]>
  /** The menu item's title. */
  title: Scalars["String"]["output"]
  /** The menu item's type. */
  type: ShopifyMenuItemType
  /** The menu item's url. */
  url?: Maybe<Scalars["String"]["output"]>
}

/** The input fields required to create a valid menu item. */
export interface ShopifyMenuItemCreateInput {
  /** List of the menu items nested under this item sorted by position. */
  items?: InputMaybe<Array<ShopifyMenuItemCreateInput>>
  /** The menu item's association with an existing resource. */
  resourceId?: InputMaybe<Scalars["ID"]["input"]>
  /** The menu item's tags to filter a collection. */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The menu item's title. */
  title: Scalars["String"]["input"]
  /** The menu item's type. */
  type: ShopifyMenuItemType
  /** The menu item's url to be used when the item doesn't point to a resource. */
  url?: InputMaybe<Scalars["String"]["input"]>
}

/** A menu item type. */
export type ShopifyMenuItemType =
  /** The article menu item type. */
  | "ARTICLE"
  /** The blog menu item type. */
  | "BLOG"
  /** The catalog menu item type. */
  | "CATALOG"
  /** The collection menu item type. */
  | "COLLECTION"
  /** The collections menu item type. */
  | "COLLECTIONS"
  /** The customer_account_page menu item type. */
  | "CUSTOMER_ACCOUNT_PAGE"
  /** The frontpage menu item type. */
  | "FRONTPAGE"
  /** The http menu item type. */
  | "HTTP"
  /** The metaobject menu item type. */
  | "METAOBJECT"
  /** The page menu item type. */
  | "PAGE"
  /** The product menu item type. */
  | "PRODUCT"
  /** The search menu item type. */
  | "SEARCH"
  /** The shop_policy menu item type. */
  | "SHOP_POLICY"
  | "%future added value"

/** The input fields required to update a valid menu item. */
export interface ShopifyMenuItemUpdateInput {
  /** A globally-unique ID of the online store navigation menu item. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** List of the menu items nested under this item sorted by position. */
  items?: InputMaybe<Array<ShopifyMenuItemUpdateInput>>
  /** The menu item's association with an existing resource. */
  resourceId?: InputMaybe<Scalars["ID"]["input"]>
  /** The menu item's tags to filter a collection. */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The menu item's title. */
  title: Scalars["String"]["input"]
  /** The menu item's type. */
  type: ShopifyMenuItemType
  /** The menu item's url to be used when the item doesn't point to a resource. */
  url?: InputMaybe<Scalars["String"]["input"]>
}

/** The set of valid sort keys for the Menu query. */
export type ShopifyMenuSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `title` value. */
  | "TITLE"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** Return type for `menuUpdate` mutation. */
export interface ShopifyMenuUpdatePayload {
  __typename?: "MenuUpdatePayload"
  /** The updated menu. */
  menu?: Maybe<ShopifyMenu>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMenuUpdateUserError>
}

/** An error that occurs during the execution of `MenuUpdate`. */
export interface ShopifyMenuUpdateUserError extends ShopifyDisplayableError {
  __typename?: "MenuUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyMenuUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `MenuUpdateUserError`. */
export type ShopifyMenuUpdateUserErrorCode =
  /** The menu cannot be nested more than 3 level deep. */
  | "NESTING_TOO_DEEP"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  | "%future added value"

/**
 * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that's used to control how discounts can be combined.
 */
export type ShopifyMerchandiseDiscountClass =
  /**
   * The discount is combined with an
   * [order discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * class.
   */
  | "ORDER"
  /**
   * The discount is combined with a
   * [product discount](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * class.
   */
  | "PRODUCT"
  | "%future added value"

/** Merchant approval for accelerated onboarding to channel integration apps. */
export interface ShopifyMerchantApprovalSignals {
  __typename?: "MerchantApprovalSignals"
  /** Whether the shop's Shopify Payments account identity is verified. Returns `false` if the identity is unverified or if the shop doesn't have a Shopify Payments account. */
  identityVerified: Scalars["Boolean"]["output"]
  /** Whether Shopify has pre-verified the merchant's business for onboarding to channel integration apps. Returns `false` if the shop isn't marked for verification. */
  verifiedByShopify: Scalars["Boolean"]["output"]
  /** Which tier of the Shopify verification was determined for the merchant's business for onboarding to channel integration apps. */
  verifiedByShopifyTier: Scalars["String"]["output"]
}

/**
 * Metafields enable you to attach additional information to a Shopify resource, such as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
 * For more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin-graphql/latest/interfaces/HasMetafields).
 * Some examples of the data that metafields enable you to store are specifications, size charts, downloadable documents, release dates, images, or part numbers.
 * Metafields are identified by an owner resource, namespace, and key. and store a value along with type information for that value.
 */
export interface ShopifyMetafield
  extends ShopifyHasCompareDigest,
    ShopifyLegacyInteroperability,
    ShopifyNode {
  __typename?: "Metafield"
  /** The data stored in the resource, represented as a digest. */
  compareDigest: Scalars["String"]["output"]
  /** The date and time when the metafield was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The metafield definition that the metafield belongs to, if any. */
  definition?: Maybe<ShopifyMetafieldDefinition>
  /**
   * The description of the metafield.
   * @deprecated This field will be removed in a future release. Use the `description` on the metafield definition instead.
   *
   */
  description?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The data stored in the metafield in JSON format. */
  jsonValue: Scalars["JSON"]["output"]
  /** The unique identifier for the metafield within its namespace. */
  key: Scalars["String"]["output"]
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** The container for a group of metafields that the metafield is associated with. */
  namespace: Scalars["String"]["output"]
  /** The resource that the metafield is attached to. */
  owner: ShopifyHasMetafields
  /** The type of resource that the metafield is attached to. */
  ownerType: ShopifyMetafieldOwnerType
  /** Returns a reference object if the metafield definition's type is a resource reference. */
  reference?: Maybe<ShopifyMetafieldReference>
  /** A list of reference objects if the metafield's type is a resource reference list. */
  references?: Maybe<ShopifyMetafieldReferenceConnection>
  /**
   * The type of data that is stored in the metafield.
   * Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
   */
  type: Scalars["String"]["output"]
  /** The date and time when the metafield was updated. */
  updatedAt: Scalars["DateTime"]["output"]
  /** The data stored in the metafield. Always stored as a string, regardless of the metafield's type. */
  value: Scalars["String"]["output"]
}

/**
 * Metafields enable you to attach additional information to a Shopify resource, such as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
 * For more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin-graphql/latest/interfaces/HasMetafields).
 * Some examples of the data that metafields enable you to store are specifications, size charts, downloadable documents, release dates, images, or part numbers.
 * Metafields are identified by an owner resource, namespace, and key. and store a value along with type information for that value.
 */
export interface ShopifyMetafieldReferencesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
}

/** Access permissions for the definition's metafields. */
export interface ShopifyMetafieldAccess {
  __typename?: "MetafieldAccess"
  /** The access permitted on the Admin API. */
  admin?: Maybe<ShopifyMetafieldAdminAccess>
  /** The access permitted on the Customer Account API. */
  customerAccount: ShopifyMetafieldCustomerAccountAccess
  /** The access permitted on the Storefront API. */
  storefront?: Maybe<ShopifyMetafieldStorefrontAccess>
}

/** The input fields that set access permissions for the definition's metafields. */
export interface ShopifyMetafieldAccessInput {
  /** The access permitted on the Admin API. */
  admin?: InputMaybe<ShopifyMetafieldAdminAccessInput>
  /** The access permitted on the Customer Account API. */
  customerAccount?: InputMaybe<ShopifyMetafieldCustomerAccountAccessInput>
  /** The access permitted on the Storefront API. */
  storefront?: InputMaybe<ShopifyMetafieldStorefrontAccessInput>
}

/** The input fields for the access settings for the metafields under the definition. */
export interface ShopifyMetafieldAccessUpdateInput {
  /** The admin access setting to use for the metafields under this definition. */
  admin?: InputMaybe<ShopifyMetafieldAdminAccessInput>
  /** The Customer Account API access setting to use for the metafields under this definition. */
  customerAccount?: InputMaybe<ShopifyMetafieldCustomerAccountAccessInput>
  /** The storefront access setting to use for the metafields under this definition. */
  storefront?: InputMaybe<ShopifyMetafieldStorefrontAccessInput>
}

/** Metafield access permissions for the Admin API. */
export type ShopifyMetafieldAdminAccess =
  /** The merchant has read-only access. No other apps have access. */
  | "MERCHANT_READ"
  /** The merchant has read and write access. No other apps have access. */
  | "MERCHANT_READ_WRITE"
  /** The merchant and other apps have no access. */
  | "PRIVATE"
  /** The merchant and other apps have read-only access. */
  | "PUBLIC_READ"
  /** The merchant and other apps have read and write access. */
  | "PUBLIC_READ_WRITE"
  | "%future added value"

/** Metafield access permissions for the Admin API. */
export type ShopifyMetafieldAdminAccessInput =
  /** The merchant has read-only access. No other apps have access. */
  | "MERCHANT_READ"
  /** The merchant has read and write access. No other apps have access. */
  | "MERCHANT_READ_WRITE"
  | "%future added value"

/** Provides the capabilities of a metafield definition. */
export interface ShopifyMetafieldCapabilities {
  __typename?: "MetafieldCapabilities"
  /** Indicate whether a metafield definition is configured for filtering. */
  adminFilterable: ShopifyMetafieldCapabilityAdminFilterable
  /** Indicate whether a metafield definition can be used as a smart collection condition. */
  smartCollectionCondition: ShopifyMetafieldCapabilitySmartCollectionCondition
  /** Indicate whether the metafield values for a metafield definition are required to be unique. */
  uniqueValues: ShopifyMetafieldCapabilityUniqueValues
}

/** Information about the admin filterable capability on a metafield definition. */
export interface ShopifyMetafieldCapabilityAdminFilterable {
  __typename?: "MetafieldCapabilityAdminFilterable"
  /** Indicates if the definition is eligible to have the capability. */
  eligible: Scalars["Boolean"]["output"]
  /** Indicates if the capability is enabled. */
  enabled: Scalars["Boolean"]["output"]
  /** Determines the metafield definition's filter status for use in admin filtering. */
  status: ShopifyMetafieldDefinitionAdminFilterStatus
}

/** The input fields for enabling and disabling the admin filterable capability. */
export interface ShopifyMetafieldCapabilityAdminFilterableInput {
  /** Indicates whether the capability should be enabled or disabled. */
  enabled: Scalars["Boolean"]["input"]
}

/** The input fields for creating a metafield capability. */
export interface ShopifyMetafieldCapabilityCreateInput {
  /** The input for updating the admin filterable capability. */
  adminFilterable?: InputMaybe<ShopifyMetafieldCapabilityAdminFilterableInput>
  /** The input for updating the smart collection condition capability. */
  smartCollectionCondition?: InputMaybe<ShopifyMetafieldCapabilitySmartCollectionConditionInput>
  /** The input for updating the unique values capability. */
  uniqueValues?: InputMaybe<ShopifyMetafieldCapabilityUniqueValuesInput>
}

/** Information about the smart collection condition capability on a metafield definition. */
export interface ShopifyMetafieldCapabilitySmartCollectionCondition {
  __typename?: "MetafieldCapabilitySmartCollectionCondition"
  /** Indicates if the definition is eligible to have the capability. */
  eligible: Scalars["Boolean"]["output"]
  /** Indicates if the capability is enabled. */
  enabled: Scalars["Boolean"]["output"]
}

/** The input fields for enabling and disabling the smart collection condition capability. */
export interface ShopifyMetafieldCapabilitySmartCollectionConditionInput {
  /** Indicates whether the capability should be enabled or disabled. */
  enabled: Scalars["Boolean"]["input"]
}

/** Information about the unique values capability on a metafield definition. */
export interface ShopifyMetafieldCapabilityUniqueValues {
  __typename?: "MetafieldCapabilityUniqueValues"
  /** Indicates if the definition is eligible to have the capability. */
  eligible: Scalars["Boolean"]["output"]
  /** Indicates if the capability is enabled. */
  enabled: Scalars["Boolean"]["output"]
}

/** The input fields for enabling and disabling the unique values capability. */
export interface ShopifyMetafieldCapabilityUniqueValuesInput {
  /** Indicates whether the capability should be enabled or disabled. */
  enabled: Scalars["Boolean"]["input"]
}

/** The input fields for updating a metafield capability. */
export interface ShopifyMetafieldCapabilityUpdateInput {
  /** The input for updating the admin filterable capability. */
  adminFilterable?: InputMaybe<ShopifyMetafieldCapabilityAdminFilterableInput>
  /** The input for updating the smart collection condition capability. */
  smartCollectionCondition?: InputMaybe<ShopifyMetafieldCapabilitySmartCollectionConditionInput>
  /** The input for updating the unique values capability. */
  uniqueValues?: InputMaybe<ShopifyMetafieldCapabilityUniqueValuesInput>
}

/** An auto-generated type for paginating through multiple Metafields. */
export interface ShopifyMetafieldConnection {
  __typename?: "MetafieldConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMetafieldEdge>
  /** A list of nodes that are contained in MetafieldEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMetafield>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Metafield access permissions for the Customer Account API. */
export type ShopifyMetafieldCustomerAccountAccess =
  /** No access. */
  | "NONE"
  /** Read-only access. */
  | "READ"
  /** Read and write access. */
  | "READ_WRITE"
  | "%future added value"

/** Metafield access permissions for the Customer Account API. */
export type ShopifyMetafieldCustomerAccountAccessInput =
  /** No access. */
  | "NONE"
  /** Read-only access. */
  | "READ"
  /** Read and write access. */
  | "READ_WRITE"
  | "%future added value"

/**
 * Metafield definitions enable you to define additional validation constraints for metafields, and enable the
 * merchant to edit metafield values in context.
 */
export interface ShopifyMetafieldDefinition extends ShopifyNode {
  __typename?: "MetafieldDefinition"
  /** The access settings associated with the metafield definition. */
  access: ShopifyMetafieldAccess
  /** The capabilities of the metafield definition. */
  capabilities: ShopifyMetafieldCapabilities
  /**
   * The [constraints](https://shopify.dev/apps/build/custom-data/metafields/conditional-metafield-definitions)
   * that determine what subtypes of resources a metafield definition applies to.
   */
  constraints?: Maybe<ShopifyMetafieldDefinitionConstraints>
  /** The description of the metafield definition. */
  description?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The unique identifier for the metafield definition within its namespace. */
  key: Scalars["String"]["output"]
  /** The metafields that belong to the metafield definition. */
  metafields: ShopifyMetafieldConnection
  /** The count of the metafields that belong to the metafield definition. */
  metafieldsCount: Scalars["Int"]["output"]
  /** The human-readable name of the metafield definition. */
  name: Scalars["String"]["output"]
  /** The container for a group of metafields that the metafield definition is associated with. */
  namespace: Scalars["String"]["output"]
  /** The resource type that the metafield definition is attached to. */
  ownerType: ShopifyMetafieldOwnerType
  /** The position of the metafield definition in the pinned list. */
  pinnedPosition?: Maybe<Scalars["Int"]["output"]>
  /** The standard metafield definition template associated with the metafield definition. */
  standardTemplate?: Maybe<ShopifyStandardMetafieldDefinitionTemplate>
  /**
   * The type of data that each of the metafields that belong to the metafield definition will store.
   * Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
   */
  type: ShopifyMetafieldDefinitionType
  /** Whether the metafield definition can be used as a collection condition. */
  useAsCollectionCondition: Scalars["Boolean"]["output"]
  /** The validation status for the metafields that belong to the metafield definition. */
  validationStatus: ShopifyMetafieldDefinitionValidationStatus
  /**
   * A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
   * the metafields that belong to the metafield definition. For example, for a metafield definition with the
   * type `date`, you can set a minimum date validation so that each of the metafields that belong to it can only
   * store dates after the specified minimum.
   */
  validations: Array<ShopifyMetafieldDefinitionValidation>
}

/**
 * Metafield definitions enable you to define additional validation constraints for metafields, and enable the
 * merchant to edit metafield values in context.
 */
export interface ShopifyMetafieldDefinitionMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  validationStatus?: InputMaybe<ShopifyMetafieldValidationStatus>
}

/**
 * Metafield definitions enable you to define additional validation constraints for metafields, and enable the
 * merchant to edit metafield values in context.
 */
export interface ShopifyMetafieldDefinitionMetafieldsCountArgs {
  validationStatus?: InputMaybe<ShopifyMetafieldValidationStatus>
}

/** Possible filter statuses associated with a metafield definition for use in admin filtering. */
export type ShopifyMetafieldDefinitionAdminFilterStatus =
  /** The metafield definition has failed to be enabled for admin filtering. */
  | "FAILED"
  /** The metafield definition allows admin filtering by matching metafield values. */
  | "FILTERABLE"
  /** The metafield definition's metafields are currently being processed for admin filtering. */
  | "IN_PROGRESS"
  /** The metafield definition cannot be used for admin filtering. */
  | "NOT_FILTERABLE"
  | "%future added value"

/** An auto-generated type for paginating through multiple MetafieldDefinitions. */
export interface ShopifyMetafieldDefinitionConnection {
  __typename?: "MetafieldDefinitionConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMetafieldDefinitionEdge>
  /** A list of nodes that are contained in MetafieldDefinitionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMetafieldDefinition>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Metafield definition constraint criteria to filter metafield definitions by. */
export type ShopifyMetafieldDefinitionConstraintStatus =
  /** Returns both constrained and unconstrained metafield definitions. */
  | "CONSTRAINED_AND_UNCONSTRAINED"
  /** Only returns metafield definitions that are constrained to a resource subtype. */
  | "CONSTRAINED_ONLY"
  /** Only returns metafield definitions that are not constrained to a resource subtype. */
  | "UNCONSTRAINED_ONLY"
  | "%future added value"

/** The input fields used to identify a subtype of a resource for the purposes of metafield definition constraints. */
export interface ShopifyMetafieldDefinitionConstraintSubtypeIdentifier {
  /** The category of the resource subtype. */
  key: Scalars["String"]["input"]
  /** The specific subtype value within the identified subtype category. */
  value: Scalars["String"]["input"]
}

/** A constraint subtype value that the metafield definition applies to. */
export interface ShopifyMetafieldDefinitionConstraintValue {
  __typename?: "MetafieldDefinitionConstraintValue"
  /** The subtype value of the constraint. */
  value: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple MetafieldDefinitionConstraintValues. */
export interface ShopifyMetafieldDefinitionConstraintValueConnection {
  __typename?: "MetafieldDefinitionConstraintValueConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMetafieldDefinitionConstraintValueEdge>
  /** A list of nodes that are contained in MetafieldDefinitionConstraintValueEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMetafieldDefinitionConstraintValue>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one MetafieldDefinitionConstraintValue and a cursor during pagination. */
export interface ShopifyMetafieldDefinitionConstraintValueEdge {
  __typename?: "MetafieldDefinitionConstraintValueEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MetafieldDefinitionConstraintValueEdge. */
  node: ShopifyMetafieldDefinitionConstraintValue
}

/**
 * The inputs fields for modifying a metafield definition's constraint subtype values.
 * Exactly one option is required.
 */
export interface ShopifyMetafieldDefinitionConstraintValueUpdateInput {
  /** The constraint subtype value to create. */
  create?: InputMaybe<Scalars["String"]["input"]>
  /** The constraint subtype value to delete. */
  delete?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * The [constraints](https://shopify.dev/apps/build/custom-data/metafields/conditional-metafield-definitions)
 * that determine what subtypes of resources a metafield definition applies to.
 */
export interface ShopifyMetafieldDefinitionConstraints {
  __typename?: "MetafieldDefinitionConstraints"
  /** The category of resource subtypes that the definition applies to. */
  key?: Maybe<Scalars["String"]["output"]>
  /** The specific constraint subtype values that the definition applies to. */
  values: ShopifyMetafieldDefinitionConstraintValueConnection
}

/**
 * The [constraints](https://shopify.dev/apps/build/custom-data/metafields/conditional-metafield-definitions)
 * that determine what subtypes of resources a metafield definition applies to.
 */
export interface ShopifyMetafieldDefinitionConstraintsValuesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The input fields required to create metafield definition [constraints](https://shopify.dev/apps/build/custom-data/metafields/conditional-metafield-definitions).
 * Each constraint applies a metafield definition to a subtype of a resource.
 */
export interface ShopifyMetafieldDefinitionConstraintsInput {
  /** The category of resource subtypes that the definition applies to. */
  key: Scalars["String"]["input"]
  /** The specific constraint subtype values that the definition applies to. */
  values: Array<Scalars["String"]["input"]>
}

/**
 * The input fields required to update metafield definition [constraints](https://shopify.dev/apps/build/custom-data/metafields/conditional-metafield-definitions).
 * Each constraint applies a metafield definition to a subtype of a resource.
 */
export interface ShopifyMetafieldDefinitionConstraintsUpdatesInput {
  /**
   * The category of resource subtypes that the definition applies to.
   * If omitted and the definition is already constrained, the existing constraint key will be used.
   * If set to `null`, all constraints will be removed.
   */
  key?: InputMaybe<Scalars["String"]["input"]>
  /** The specific constraint subtype values to create or delete. */
  values?: InputMaybe<
    Array<ShopifyMetafieldDefinitionConstraintValueUpdateInput>
  >
}

/** Return type for `metafieldDefinitionCreate` mutation. */
export interface ShopifyMetafieldDefinitionCreatePayload {
  __typename?: "MetafieldDefinitionCreatePayload"
  /** The metafield definition that was created. */
  createdDefinition?: Maybe<ShopifyMetafieldDefinition>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMetafieldDefinitionCreateUserError>
}

/** An error that occurs during the execution of `MetafieldDefinitionCreate`. */
export interface ShopifyMetafieldDefinitionCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "MetafieldDefinitionCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyMetafieldDefinitionCreateUserErrorCode>
  /** The index of the array element that's causing the error. */
  elementIndex?: Maybe<Scalars["Int"]["output"]>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `MetafieldDefinitionCreateUserError`. */
export type ShopifyMetafieldDefinitionCreateUserErrorCode =
  /** Admin access can only be specified for app-owned metafield definitions. */
  | "ADMIN_ACCESS_INPUT_NOT_ALLOWED"
  /** The input value is blank. */
  | "BLANK"
  /** A capability is required for the definition type but is disabled. */
  | "CAPABILITY_REQUIRED_BUT_DISABLED"
  /** A duplicate option. */
  | "DUPLICATE_OPTION"
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** The input value is invalid. */
  | "INVALID"
  /** The metafield definition capability is invalid. */
  | "INVALID_CAPABILITY"
  /** A field contains an invalid character. */
  | "INVALID_CHARACTER"
  /** The metafield definition constraints are invalid. */
  | "INVALID_CONSTRAINTS"
  /** The input combination is invalid. */
  | "INVALID_INPUT_COMBINATION"
  /** An invalid option. */
  | "INVALID_OPTION"
  /** The maximum limit of definitions per owner type has exceeded. */
  | "LIMIT_EXCEEDED"
  /** You have reached the maximum allowed definitions for automated collections. */
  | "OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS"
  /** The pinned limit has been reached for the owner type. */
  | "PINNED_LIMIT_REACHED"
  /** The input value needs to be blank. */
  | "PRESENT"
  /** This namespace and key combination is reserved for standard definitions. */
  | "RESERVED_NAMESPACE_KEY"
  /** The definition limit per owner type has exceeded. */
  | "RESOURCE_TYPE_LIMIT_EXCEEDED"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too long. */
  | "TOO_LONG"
  /** The input value is too short. */
  | "TOO_SHORT"
  /** The definition type is not eligible to be used as collection condition. */
  | "TYPE_NOT_ALLOWED_FOR_CONDITIONS"
  /** This namespace and key combination is already in use for a set of your metafields. */
  | "UNSTRUCTURED_ALREADY_EXISTS"
  /** The metafield definition does not support pinning. */
  | "UNSUPPORTED_PINNING"
  | "%future added value"

/** Return type for `metafieldDefinitionDelete` mutation. */
export interface ShopifyMetafieldDefinitionDeletePayload {
  __typename?: "MetafieldDefinitionDeletePayload"
  /** The metafield definition that was deleted. */
  deletedDefinition?: Maybe<ShopifyMetafieldDefinitionIdentifier>
  /** The ID of the deleted metafield definition. */
  deletedDefinitionId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMetafieldDefinitionDeleteUserError>
}

/** An error that occurs during the execution of `MetafieldDefinitionDelete`. */
export interface ShopifyMetafieldDefinitionDeleteUserError
  extends ShopifyDisplayableError {
  __typename?: "MetafieldDefinitionDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyMetafieldDefinitionDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `MetafieldDefinitionDeleteUserError`. */
export type ShopifyMetafieldDefinitionDeleteUserErrorCode =
  /** Definition is managed by app configuration and cannot be modified through the API. */
  | "APP_CONFIG_MANAGED"
  /** Owner type can't be used in this mutation. */
  | "DISALLOWED_OWNER_TYPE"
  /** Deleting an id type metafield definition requires deletion of its associated metafields. */
  | "ID_TYPE_DELETION_ERROR"
  /** An internal error occurred. */
  | "INTERNAL_ERROR"
  /** Action cannot proceed. Definition is currently in use. */
  | "METAFIELD_DEFINITION_IN_USE"
  /** Definition not found. */
  | "NOT_FOUND"
  /** The input value needs to be blank. */
  | "PRESENT"
  /** Deleting a reference type metafield definition requires deletion of its associated metafields. */
  | "REFERENCE_TYPE_DELETION_ERROR"
  /** Deleting a definition in a reserved namespace requires deletion of its associated metafields. */
  | "RESERVED_NAMESPACE_ORPHANED_METAFIELDS"
  | "%future added value"

/** An auto-generated type which holds one MetafieldDefinition and a cursor during pagination. */
export interface ShopifyMetafieldDefinitionEdge {
  __typename?: "MetafieldDefinitionEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MetafieldDefinitionEdge. */
  node: ShopifyMetafieldDefinition
}

/** Identifies a metafield definition by its owner type, namespace, and key. */
export interface ShopifyMetafieldDefinitionIdentifier {
  __typename?: "MetafieldDefinitionIdentifier"
  /** The unique identifier for the metafield definition within its namespace. */
  key: Scalars["String"]["output"]
  /** The container for a group of metafields that the metafield definition is associated with. */
  namespace: Scalars["String"]["output"]
  /** The resource type that the metafield definition is attached to. */
  ownerType: ShopifyMetafieldOwnerType
}

/** The input fields that identify metafield definitions. */
export interface ShopifyMetafieldDefinitionIdentifierInput {
  /** The unique identifier for the metafield definition within its namespace. */
  key: Scalars["String"]["input"]
  /**
   * The container for a group of metafields that the metafield definition will be associated with. If omitted, the
   * app-reserved namespace will be used.
   */
  namespace?: InputMaybe<Scalars["String"]["input"]>
  /** The resource type that the metafield definition is attached to. */
  ownerType: ShopifyMetafieldOwnerType
}

/** The input fields required to create a metafield definition. */
export interface ShopifyMetafieldDefinitionInput {
  /** The access settings that apply to each of the metafields that belong to the metafield definition. */
  access?: InputMaybe<ShopifyMetafieldAccessInput>
  /** The capabilities of the metafield definition. */
  capabilities?: InputMaybe<ShopifyMetafieldCapabilityCreateInput>
  /**
   * The [constraints](https://shopify.dev/apps/build/custom-data/metafields/conditional-metafield-definitions)
   * that determine what resources a metafield definition applies to.
   */
  constraints?: InputMaybe<ShopifyMetafieldDefinitionConstraintsInput>
  /** The description for the metafield definition. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The unique identifier for the metafield definition within its namespace.
   *
   * Must be 2-64 characters long and only contain alphanumeric, hyphen, and underscore characters.
   */
  key: Scalars["String"]["input"]
  /** The human-readable name for the metafield definition. */
  name: Scalars["String"]["input"]
  /**
   * The container for a group of metafields that the metafield definition will be associated with. If omitted, the
   * app-reserved namespace will be used.
   *
   * Must be 3-255 characters long and only contain alphanumeric, hyphen, and underscore characters.
   */
  namespace?: InputMaybe<Scalars["String"]["input"]>
  /** The resource type that the metafield definition is attached to. */
  ownerType: ShopifyMetafieldOwnerType
  /**
   * Whether to [pin](https://help.shopify.com/manual/custom-data/metafields/pinning-metafield-definitions)
   * the metafield definition.
   */
  pin?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * The type of data that each of the metafields that belong to the metafield definition will store.
   * Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
   */
  type: Scalars["String"]["input"]
  /**
   * A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
   * the metafields that belong to the metafield definition. For example, for a metafield definition with the
   * type `date`, you can set a minimum date validation so that each of the metafields that belong to it can only
   * store dates after the specified minimum.
   */
  validations?: InputMaybe<Array<ShopifyMetafieldDefinitionValidationInput>>
}

/** Return type for `metafieldDefinitionPin` mutation. */
export interface ShopifyMetafieldDefinitionPinPayload {
  __typename?: "MetafieldDefinitionPinPayload"
  /** The metafield definition that was pinned. */
  pinnedDefinition?: Maybe<ShopifyMetafieldDefinition>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMetafieldDefinitionPinUserError>
}

/** An error that occurs during the execution of `MetafieldDefinitionPin`. */
export interface ShopifyMetafieldDefinitionPinUserError
  extends ShopifyDisplayableError {
  __typename?: "MetafieldDefinitionPinUserError"
  /** The error code. */
  code?: Maybe<ShopifyMetafieldDefinitionPinUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `MetafieldDefinitionPinUserError`. */
export type ShopifyMetafieldDefinitionPinUserErrorCode =
  /** The metafield definition is already pinned. */
  | "ALREADY_PINNED"
  /** Owner type can't be used in this mutation. */
  | "DISALLOWED_OWNER_TYPE"
  /** An internal error occurred. */
  | "INTERNAL_ERROR"
  /** The metafield definition was not found. */
  | "NOT_FOUND"
  /** The pinned limit has been reached for owner type. */
  | "PINNED_LIMIT_REACHED"
  /** The metafield definition does not support pinning. */
  | "UNSUPPORTED_PINNING"
  | "%future added value"

/** Possible metafield definition pinned statuses. */
export type ShopifyMetafieldDefinitionPinnedStatus =
  /** All metafield definitions. */
  | "ANY"
  /** Only metafield definitions that are pinned. */
  | "PINNED"
  /** Only metafield definitions that are not pinned. */
  | "UNPINNED"
  | "%future added value"

/** The set of valid sort keys for the MetafieldDefinition query. */
export type ShopifyMetafieldDefinitionSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `name` value. */
  | "NAME"
  /** Sort by the `pinned_position` value. */
  | "PINNED_POSITION"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  | "%future added value"

/**
 * The type and name for the optional validation configuration of a metafield.
 *
 * For example, a supported validation might consist of a `max` name and a `number_integer` type.
 * This validation can then be used to enforce a maximum character length for a `single_line_text_field` metafield.
 */
export interface ShopifyMetafieldDefinitionSupportedValidation {
  __typename?: "MetafieldDefinitionSupportedValidation"
  /** The name of the metafield definition validation. */
  name: Scalars["String"]["output"]
  /** The type of input for the validation. */
  type: Scalars["String"]["output"]
}

/** A metafield definition type provides basic foundation and validation for a metafield. */
export interface ShopifyMetafieldDefinitionType {
  __typename?: "MetafieldDefinitionType"
  /** The category associated with the metafield definition type. */
  category: Scalars["String"]["output"]
  /**
   * The name of the type for the metafield definition.
   * See the list of [supported types](https://shopify.dev/apps/metafields/types).
   */
  name: Scalars["String"]["output"]
  /** The supported validations for a metafield definition type. */
  supportedValidations: Array<ShopifyMetafieldDefinitionSupportedValidation>
  /** Whether metafields without a definition can be migrated to a definition of this type. */
  supportsDefinitionMigrations: Scalars["Boolean"]["output"]
  /**
   * The value type for a metafield created with this definition type.
   * @deprecated `valueType` is deprecated and `name` should be used for type information.
   */
  valueType: ShopifyMetafieldValueType
}

/** Return type for `metafieldDefinitionUnpin` mutation. */
export interface ShopifyMetafieldDefinitionUnpinPayload {
  __typename?: "MetafieldDefinitionUnpinPayload"
  /** The metafield definition that was unpinned. */
  unpinnedDefinition?: Maybe<ShopifyMetafieldDefinition>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMetafieldDefinitionUnpinUserError>
}

/** An error that occurs during the execution of `MetafieldDefinitionUnpin`. */
export interface ShopifyMetafieldDefinitionUnpinUserError
  extends ShopifyDisplayableError {
  __typename?: "MetafieldDefinitionUnpinUserError"
  /** The error code. */
  code?: Maybe<ShopifyMetafieldDefinitionUnpinUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `MetafieldDefinitionUnpinUserError`. */
export type ShopifyMetafieldDefinitionUnpinUserErrorCode =
  /** Definition is managed by app configuration and cannot be modified through the API. */
  | "APP_CONFIG_MANAGED"
  /** Owner type can't be used in this mutation. */
  | "DISALLOWED_OWNER_TYPE"
  /** An internal error occurred. */
  | "INTERNAL_ERROR"
  /** The metafield definition was not found. */
  | "NOT_FOUND"
  /** The metafield definition isn't pinned. */
  | "NOT_PINNED"
  | "%future added value"

/** The input fields required to update a metafield definition. */
export interface ShopifyMetafieldDefinitionUpdateInput {
  /** The access settings that apply to each of the metafields that belong to the metafield definition. */
  access?: InputMaybe<ShopifyMetafieldAccessUpdateInput>
  /** The capabilities of the metafield definition. */
  capabilities?: InputMaybe<ShopifyMetafieldCapabilityUpdateInput>
  /**
   * The [constraints](https://shopify.dev/apps/build/custom-data/metafields/conditional-metafield-definitions)
   * that determine what resources a metafield definition applies to.
   */
  constraintsUpdates?: InputMaybe<ShopifyMetafieldDefinitionConstraintsUpdatesInput>
  /** The description for the metafield definition. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The unique identifier for the metafield definition within its namespace. Used to help identify the metafield
   * definition, but can't be updated itself.
   */
  key: Scalars["String"]["input"]
  /** The human-readable name for the metafield definition. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The container for a group of metafields that the metafield definition is associated with. Used to help identify
   * the metafield definition, but cannot be updated itself. If omitted, the app-reserved namespace will be used.
   */
  namespace?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The resource type that the metafield definition is attached to. Used to help identify the metafield definition,
   * but can't be updated itself.
   */
  ownerType: ShopifyMetafieldOwnerType
  /** Whether to pin the metafield definition. */
  pin?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
   * the metafields that belong to the metafield definition. For example, for a metafield definition with the
   * type `date`, you can set a minimum date validation so that each of the metafields that belong to it can only
   * store dates after the specified minimum.
   */
  validations?: InputMaybe<Array<ShopifyMetafieldDefinitionValidationInput>>
}

/** Return type for `metafieldDefinitionUpdate` mutation. */
export interface ShopifyMetafieldDefinitionUpdatePayload {
  __typename?: "MetafieldDefinitionUpdatePayload"
  /** The metafield definition that was updated. */
  updatedDefinition?: Maybe<ShopifyMetafieldDefinition>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMetafieldDefinitionUpdateUserError>
  /** The asynchronous job updating the metafield definition's validation_status. */
  validationJob?: Maybe<ShopifyJob>
}

/** An error that occurs during the execution of `MetafieldDefinitionUpdate`. */
export interface ShopifyMetafieldDefinitionUpdateUserError
  extends ShopifyDisplayableError {
  __typename?: "MetafieldDefinitionUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyMetafieldDefinitionUpdateUserErrorCode>
  /** The index of the array element that's causing the error. */
  elementIndex?: Maybe<Scalars["Int"]["output"]>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `MetafieldDefinitionUpdateUserError`. */
export type ShopifyMetafieldDefinitionUpdateUserErrorCode =
  /** Admin access can only be specified for app-owned metafield definitions. */
  | "ADMIN_ACCESS_INPUT_NOT_ALLOWED"
  /** Definition is managed by app configuration and cannot be modified through the API. */
  | "APP_CONFIG_MANAGED"
  /** The input value is blank. */
  | "BLANK"
  /** The metafield definition capability cannot be disabled. */
  | "CAPABILITY_CANNOT_BE_DISABLED"
  /** A capability is required for the definition type but is disabled. */
  | "CAPABILITY_REQUIRED_BUT_DISABLED"
  /** Owner type can't be used in this mutation. */
  | "DISALLOWED_OWNER_TYPE"
  /** A duplicate option. */
  | "DUPLICATE_OPTION"
  /** An internal error occurred. */
  | "INTERNAL_ERROR"
  /** The metafield definition capability is invalid. */
  | "INVALID_CAPABILITY"
  /** The metafield definition constraints are invalid. */
  | "INVALID_CONSTRAINTS"
  /** An invalid input. */
  | "INVALID_INPUT"
  /** The input combination is invalid. */
  | "INVALID_INPUT_COMBINATION"
  /** An invalid option. */
  | "INVALID_OPTION"
  /** Action cannot proceed. Definition is currently in use. */
  | "METAFIELD_DEFINITION_IN_USE"
  /** You cannot change the metaobject definition pointed to by a metaobject reference metafield definition. */
  | "METAOBJECT_DEFINITION_CHANGED"
  /** The metafield definition wasn't found. */
  | "NOT_FOUND"
  /** You have reached the maximum allowed definitions for automated collections. */
  | "OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS"
  /** The pinned limit has been reached for the owner type. */
  | "PINNED_LIMIT_REACHED"
  /** The input value needs to be blank. */
  | "PRESENT"
  /** The input value is too long. */
  | "TOO_LONG"
  /** The definition type is not eligible to be used as collection condition. */
  | "TYPE_NOT_ALLOWED_FOR_CONDITIONS"
  /** The metafield definition does not support pinning. */
  | "UNSUPPORTED_PINNING"
  | "%future added value"

/**
 * A configured metafield definition validation.
 *
 * For example, for a metafield definition of `number_integer` type, you can set a validation with the name `max`
 * and a value of `15`. This validation will ensure that the value of the metafield is a number less than or equal to 15.
 *
 * Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
 */
export interface ShopifyMetafieldDefinitionValidation {
  __typename?: "MetafieldDefinitionValidation"
  /** The validation name. */
  name: Scalars["String"]["output"]
  /** The name for the metafield type of this validation. */
  type: Scalars["String"]["output"]
  /** The validation value. */
  value?: Maybe<Scalars["String"]["output"]>
}

/**
 * The name and value for a metafield definition validation.
 *
 * For example, for a metafield definition of `single_line_text_field` type, you can set a validation with the name `min` and a value of `10`.
 * This validation will ensure that the value of the metafield is at least 10 characters.
 *
 * Refer to the [list of supported validations](https://shopify.dev/apps/build/custom-data/metafields/list-of-validation-options).
 */
export interface ShopifyMetafieldDefinitionValidationInput {
  /** The name for the metafield definition validation. */
  name: Scalars["String"]["input"]
  /** The value for the metafield definition validation. */
  value: Scalars["String"]["input"]
}

/** Possible metafield definition validation statuses. */
export type ShopifyMetafieldDefinitionValidationStatus =
  /** All of this definition's metafields are valid. */
  | "ALL_VALID"
  /** Asynchronous validation of this definition's metafields is in progress. */
  | "IN_PROGRESS"
  /** Some of this definition's metafields are invalid. */
  | "SOME_INVALID"
  | "%future added value"

/** An auto-generated type which holds one Metafield and a cursor during pagination. */
export interface ShopifyMetafieldEdge {
  __typename?: "MetafieldEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MetafieldEdge. */
  node: ShopifyMetafield
}

/** Identifies a metafield by its owner resource, namespace, and key. */
export interface ShopifyMetafieldIdentifier {
  __typename?: "MetafieldIdentifier"
  /** The key of the metafield. */
  key: Scalars["String"]["output"]
  /** The namespace of the metafield. */
  namespace: Scalars["String"]["output"]
  /** GID of the owner resource that the metafield belongs to. */
  ownerId: Scalars["ID"]["output"]
}

/** The input fields that identify metafields. */
export interface ShopifyMetafieldIdentifierInput {
  /** The key of the metafield. */
  key: Scalars["String"]["input"]
  /** The namespace of the metafield. */
  namespace: Scalars["String"]["input"]
  /** The unique ID of the resource that the metafield is attached to. */
  ownerId: Scalars["ID"]["input"]
}

/**
 * The input fields to use to create or update a metafield through a mutation on the owning resource.
 * An alternative way to create or update a metafield is by using the
 * [metafieldsSet](https://shopify.dev/api/admin-graphql/latest/mutations/metafieldsSet) mutation.
 */
export interface ShopifyMetafieldInput {
  /** The unique ID of the metafield. Using `owner_id`, `namespace`, and `key` is preferred for creating and updating. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /**
   * The unique identifier for a metafield within its namespace.
   *
   * Required when creating a metafield, but optional when updating. Used to help identify the metafield when
   * updating, but can't be updated itself.
   *
   * Must be 2-64 characters long and can contain alphanumeric, hyphen, and underscore characters.
   */
  key?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The container for a group of metafields that the metafield is or will be associated with. Used in tandem with
   * `key` to lookup a metafield on a resource, preventing conflicts with other metafields with the same `key`.
   *
   * Required when creating a metafield, but optional when updating. Used to help identify the metafield when
   * updating, but can't be updated itself.
   *
   * Must be 3-255 characters long and can contain alphanumeric, hyphen, and underscore characters.
   */
  namespace?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The type of data that is stored in the metafield.
   * Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
   *
   * Required when creating or updating a metafield without a definition.
   */
  type?: InputMaybe<Scalars["String"]["input"]>
  /** The data stored in the metafield. Always stored as a string, regardless of the metafield's type. */
  value?: InputMaybe<Scalars["String"]["input"]>
}

/** Possible types of a metafield's owner resource. */
export type ShopifyMetafieldOwnerType =
  /** The Api Permission metafield owner type. */
  | "API_PERMISSION"
  /** The Article metafield owner type. */
  | "ARTICLE"
  /** The Blog metafield owner type. */
  | "BLOG"
  /** The Cart Transform metafield owner type. */
  | "CARTTRANSFORM"
  /** The Collection metafield owner type. */
  | "COLLECTION"
  /** The Company metafield owner type. */
  | "COMPANY"
  /** The Company Location metafield owner type. */
  | "COMPANY_LOCATION"
  /** The Customer metafield owner type. */
  | "CUSTOMER"
  /** The Delivery Customization metafield owner type. */
  | "DELIVERY_CUSTOMIZATION"
  /** The Discount metafield owner type. */
  | "DISCOUNT"
  /** The draft order metafield owner type. */
  | "DRAFTORDER"
  /** The Fulfillment Constraint Rule metafield owner type. */
  | "FULFILLMENT_CONSTRAINT_RULE"
  /** The GiftCardTransaction metafield owner type. */
  | "GIFT_CARD_TRANSACTION"
  /** The Location metafield owner type. */
  | "LOCATION"
  /** The Market metafield owner type. */
  | "MARKET"
  /** The Media Image metafield owner type. */
  | "MEDIA_IMAGE"
  /** The Order metafield owner type. */
  | "ORDER"
  /** The Order Routing Location Rule metafield owner type. */
  | "ORDER_ROUTING_LOCATION_RULE"
  /** The Page metafield owner type. */
  | "PAGE"
  /** The Payment Customization metafield owner type. */
  | "PAYMENT_CUSTOMIZATION"
  /** The Product metafield owner type. */
  | "PRODUCT"
  /** The Product Variant metafield owner type. */
  | "PRODUCTVARIANT"
  /** The Selling Plan metafield owner type. */
  | "SELLING_PLAN"
  /** The Shop metafield owner type. */
  | "SHOP"
  /** The Validation metafield owner type. */
  | "VALIDATION"
  | "%future added value"

/** The resource referenced by the metafield value. */
export type ShopifyMetafieldReference =
  | ShopifyCollection
  | ShopifyCompany
  | ShopifyCustomer
  | ShopifyGenericFile
  | ShopifyMediaImage
  | ShopifyMetaobject
  | ShopifyModel3d
  | ShopifyOrder
  | ShopifyPage
  | ShopifyProduct
  | ShopifyProductVariant
  | ShopifyTaxonomyValue
  | ShopifyVideo

/** An auto-generated type for paginating through multiple MetafieldReferences. */
export interface ShopifyMetafieldReferenceConnection {
  __typename?: "MetafieldReferenceConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMetafieldReferenceEdge>
  /** A list of nodes that are contained in MetafieldReferenceEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<Maybe<ShopifyMetafieldReference>>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one MetafieldReference and a cursor during pagination. */
export interface ShopifyMetafieldReferenceEdge {
  __typename?: "MetafieldReferenceEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MetafieldReferenceEdge. */
  node?: Maybe<ShopifyMetafieldReference>
}

/** Types of resources that may use metafields to reference other resources. */
export type ShopifyMetafieldReferencer =
  | ShopifyAppInstallation
  | ShopifyArticle
  | ShopifyBlog
  | ShopifyCollection
  | ShopifyCompany
  | ShopifyCompanyLocation
  | ShopifyCustomer
  | ShopifyDeliveryCustomization
  | ShopifyDiscountAutomaticNode
  | ShopifyDiscountCodeNode
  | ShopifyDiscountNode
  | ShopifyDraftOrder
  | ShopifyFulfillmentOrder
  | ShopifyLocation
  | ShopifyMarket
  | ShopifyMetaobject
  | ShopifyOrder
  | ShopifyPage
  | ShopifyPaymentCustomization
  | ShopifyProduct
  | ShopifyProductVariant
  | ShopifyShop

/**
 * Defines a relation between two resources via a reference metafield.
 * The referencer owns the joining field with a given namespace and key,
 * while the target is referenced by the field.
 */
export interface ShopifyMetafieldRelation {
  __typename?: "MetafieldRelation"
  /** The key of the field making the reference. */
  key: Scalars["String"]["output"]
  /** The name of the field making the reference. */
  name: Scalars["String"]["output"]
  /** The namespace of the metafield making the reference, or type of the metaobject. */
  namespace: Scalars["String"]["output"]
  /** The resource making the reference. */
  referencer: ShopifyMetafieldReferencer
  /**
   * The referenced resource.
   * @deprecated No longer supported. Access the object directly instead.
   */
  target: ShopifyMetafieldReference
}

/** An auto-generated type for paginating through multiple MetafieldRelations. */
export interface ShopifyMetafieldRelationConnection {
  __typename?: "MetafieldRelationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMetafieldRelationEdge>
  /** A list of nodes that are contained in MetafieldRelationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMetafieldRelation>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one MetafieldRelation and a cursor during pagination. */
export interface ShopifyMetafieldRelationEdge {
  __typename?: "MetafieldRelationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MetafieldRelationEdge. */
  node: ShopifyMetafieldRelation
}

/** Metafield access permissions for the Storefront API. */
export type ShopifyMetafieldStorefrontAccess =
  /** No access. */
  | "NONE"
  /** Read-only access. */
  | "PUBLIC_READ"
  | "%future added value"

/** Metafield access permissions for the Storefront API. */
export type ShopifyMetafieldStorefrontAccessInput =
  /** No access. */
  | "NONE"
  /** Read-only access. */
  | "PUBLIC_READ"
  | "%future added value"

/** Possible metafield validation statuses. */
export type ShopifyMetafieldValidationStatus =
  /** Any validation status (valid or invalid). */
  | "ANY"
  /** Invalid (according to definition). */
  | "INVALID"
  /** Valid (according to definition). */
  | "VALID"
  | "%future added value"

/**
 * Legacy type information for the stored value.
 * Replaced by `type`.
 */
export type ShopifyMetafieldValueType =
  /** A `true` or `false` value. */
  | "BOOLEAN"
  /** A whole number. */
  | "INTEGER"
  /** A JSON string. */
  | "JSON_STRING"
  /** A text field. */
  | "STRING"
  | "%future added value"

/** Return type for `metafieldsDelete` mutation. */
export interface ShopifyMetafieldsDeletePayload {
  __typename?: "MetafieldsDeletePayload"
  /** List of metafield identifiers that were deleted, null if the corresponding metafield isn't found. */
  deletedMetafields?: Maybe<Array<Maybe<ShopifyMetafieldIdentifier>>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields for a metafield value to set. */
export interface ShopifyMetafieldsSetInput {
  /** The `compareDigest` value obtained from a previous query. Provide this with updates to ensure the metafield is modified safely. */
  compareDigest?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The unique identifier for a metafield within its namespace.
   *
   * Must be 2-64 characters long and can contain alphanumeric, hyphen, and underscore characters.
   */
  key: Scalars["String"]["input"]
  /**
   * The container for a group of metafields that the metafield is or will be associated with. Used in tandem
   * with `key` to lookup a metafield on a resource, preventing conflicts with other metafields with the
   * same `key`. If omitted the app-reserved namespace will be used.
   *
   * Must be 3-255 characters long and can contain alphanumeric, hyphen, and underscore characters.
   */
  namespace?: InputMaybe<Scalars["String"]["input"]>
  /** The unique ID of the resource that the metafield is attached to. */
  ownerId: Scalars["ID"]["input"]
  /**
   * The type of data that is stored in the metafield.
   * The type must be one of the [supported types](https://shopify.dev/apps/metafields/types).
   *
   * Required when there is no corresponding definition for the given `namespace`, `key`, and
   * owner resource type (derived from `ownerId`).
   */
  type?: InputMaybe<Scalars["String"]["input"]>
  /** The data stored in the metafield. Always stored as a string, regardless of the metafield's type. */
  value: Scalars["String"]["input"]
}

/** Return type for `metafieldsSet` mutation. */
export interface ShopifyMetafieldsSetPayload {
  __typename?: "MetafieldsSetPayload"
  /** The list of metafields that were set. */
  metafields?: Maybe<Array<ShopifyMetafield>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMetafieldsSetUserError>
}

/** An error that occurs during the execution of `MetafieldsSet`. */
export interface ShopifyMetafieldsSetUserError extends ShopifyDisplayableError {
  __typename?: "MetafieldsSetUserError"
  /** The error code. */
  code?: Maybe<ShopifyMetafieldsSetUserErrorCode>
  /** The index of the array element that's causing the error. */
  elementIndex?: Maybe<Scalars["Int"]["output"]>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `MetafieldsSetUserError`. */
export type ShopifyMetafieldsSetUserErrorCode =
  /** ApiPermission metafields can only be created or updated by the app owner. */
  | "APP_NOT_AUTHORIZED"
  /** The input value is blank. */
  | "BLANK"
  /** The metafield violates a capability restriction. */
  | "CAPABILITY_VIOLATION"
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** An internal error occurred. */
  | "INTERNAL_ERROR"
  /** The input value is invalid. */
  | "INVALID"
  /** The compareDigest is invalid. */
  | "INVALID_COMPARE_DIGEST"
  /** The type is invalid. */
  | "INVALID_TYPE"
  /** The value is invalid for the metafield type or for the definition options. */
  | "INVALID_VALUE"
  /** The input value should be less than or equal to the maximum value allowed. */
  | "LESS_THAN_OR_EQUAL_TO"
  /** The input value needs to be blank. */
  | "PRESENT"
  /** The metafield has been modified since it was loaded. */
  | "STALE_OBJECT"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too long. */
  | "TOO_LONG"
  /** The input value is too short. */
  | "TOO_SHORT"
  | "%future added value"

/** Provides an object instance represented by a MetaobjectDefinition. */
export interface ShopifyMetaobject extends ShopifyNode {
  __typename?: "Metaobject"
  /** Metaobject capabilities for this Metaobject. */
  capabilities: ShopifyMetaobjectCapabilityData
  /** The app used to create the object. */
  createdBy: ShopifyApp
  /** The app used to create the object. */
  createdByApp: ShopifyApp
  /** The staff member who created the metaobject. */
  createdByStaff?: Maybe<ShopifyStaffMember>
  /** The MetaobjectDefinition that models this object type. */
  definition: ShopifyMetaobjectDefinition
  /** The preferred display name field value of the metaobject. */
  displayName: Scalars["String"]["output"]
  /** The field for an object key, or null if the key has no field definition. */
  field?: Maybe<ShopifyMetaobjectField>
  /** All ordered fields of the metaobject with their definitions and values. */
  fields: Array<ShopifyMetaobjectField>
  /** The unique handle of the object, useful as a custom ID. */
  handle: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** List of back references metafields that belong to the resource. */
  referencedBy: ShopifyMetafieldRelationConnection
  /**
   * The staff member who created the metaobject.
   * @deprecated Use `createdByStaff` instead.
   */
  staffMember?: Maybe<ShopifyStaffMember>
  /** The recommended field to visually represent this metaobject. May be a file reference or color         field. */
  thumbnailField?: Maybe<ShopifyMetaobjectField>
  /** The type of the metaobject. */
  type: Scalars["String"]["output"]
  /** When the object was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** Provides an object instance represented by a MetaobjectDefinition. */
export interface ShopifyMetaobjectFieldArgs {
  key: Scalars["String"]["input"]
}

/** Provides an object instance represented by a MetaobjectDefinition. */
export interface ShopifyMetaobjectReferencedByArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Access permissions for the definition's metaobjects. */
export interface ShopifyMetaobjectAccess {
  __typename?: "MetaobjectAccess"
  /** The access permitted on the Admin API. */
  admin: ShopifyMetaobjectAdminAccess
  /** The access permitted on the Storefront API. */
  storefront: ShopifyMetaobjectStorefrontAccess
}

/** The input fields that set access permissions for the definition's metaobjects. */
export interface ShopifyMetaobjectAccessInput {
  /** The access permitted on the Admin API. */
  admin?: InputMaybe<ShopifyMetaobjectAdminAccessInput>
  /** The access permitted on the Storefront API. */
  storefront?: InputMaybe<ShopifyMetaobjectStorefrontAccess>
}

/**
 * Metaobject access permissions for the Admin API. When the metaobject is app-owned, the owning app always has
 * full access.
 */
export type ShopifyMetaobjectAdminAccess =
  /** The merchant has read-only access. No other apps have access. */
  | "MERCHANT_READ"
  /** The merchant has read and write access. No other apps have access. */
  | "MERCHANT_READ_WRITE"
  /** The merchant and other apps have no access. */
  | "PRIVATE"
  /** The merchant and other apps have read-only access. */
  | "PUBLIC_READ"
  /** The merchant and other apps have read and write access. */
  | "PUBLIC_READ_WRITE"
  | "%future added value"

/**
 * Metaobject access permissions for the Admin API. When the metaobject is app-owned, the owning app always has
 * full access.
 */
export type ShopifyMetaobjectAdminAccessInput =
  /** The merchant has read-only access. No other apps have access. */
  | "MERCHANT_READ"
  /** The merchant has read and write access. No other apps have access. */
  | "MERCHANT_READ_WRITE"
  | "%future added value"

/** Return type for `metaobjectBulkDelete` mutation. */
export interface ShopifyMetaobjectBulkDeletePayload {
  __typename?: "MetaobjectBulkDeletePayload"
  /** The asynchronous job that deletes the metaobjects. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMetaobjectUserError>
}

/**
 * Specifies the condition by which metaobjects are deleted.
 * Exactly one field of input is required.
 */
export interface ShopifyMetaobjectBulkDeleteWhereCondition {
  /** A list of metaobjects IDs to delete. */
  ids?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** Deletes all metaobjects with the specified `type`. */
  type?: InputMaybe<Scalars["String"]["input"]>
}

/** Provides the capabilities of a metaobject definition. */
export interface ShopifyMetaobjectCapabilities {
  __typename?: "MetaobjectCapabilities"
  /** Indicates whether a metaobject definition can be displayed as a page on the Online Store. */
  onlineStore?: Maybe<ShopifyMetaobjectCapabilitiesOnlineStore>
  /** Indicate whether a metaobject definition is publishable. */
  publishable: ShopifyMetaobjectCapabilitiesPublishable
  /** Indicate whether a metaobject definition is renderable and exposes SEO data. */
  renderable?: Maybe<ShopifyMetaobjectCapabilitiesRenderable>
  /** Indicate whether a metaobject definition is translatable. */
  translatable: ShopifyMetaobjectCapabilitiesTranslatable
}

/** The Online Store capability of a metaobject definition. */
export interface ShopifyMetaobjectCapabilitiesOnlineStore {
  __typename?: "MetaobjectCapabilitiesOnlineStore"
  /** The data associated with the Online Store capability. */
  data?: Maybe<ShopifyMetaobjectCapabilityDefinitionDataOnlineStore>
  /** Indicates if the capability is enabled. */
  enabled: Scalars["Boolean"]["output"]
}

/** The publishable capability of a metaobject definition. */
export interface ShopifyMetaobjectCapabilitiesPublishable {
  __typename?: "MetaobjectCapabilitiesPublishable"
  /** Indicates if the capability is enabled. */
  enabled: Scalars["Boolean"]["output"]
}

/** The renderable capability of a metaobject definition. */
export interface ShopifyMetaobjectCapabilitiesRenderable {
  __typename?: "MetaobjectCapabilitiesRenderable"
  /** The data associated with the renderable capability. */
  data?: Maybe<ShopifyMetaobjectCapabilityDefinitionDataRenderable>
  /** Indicates if the capability is enabled. */
  enabled: Scalars["Boolean"]["output"]
}

/** The translatable capability of a metaobject definition. */
export interface ShopifyMetaobjectCapabilitiesTranslatable {
  __typename?: "MetaobjectCapabilitiesTranslatable"
  /** Indicates if the capability is enabled. */
  enabled: Scalars["Boolean"]["output"]
}

/** The input fields for creating a metaobject capability. */
export interface ShopifyMetaobjectCapabilityCreateInput {
  /** The input for enabling the Online Store capability. */
  onlineStore?: InputMaybe<ShopifyMetaobjectCapabilityOnlineStoreInput>
  /** The input for enabling the publishable capability. */
  publishable?: InputMaybe<ShopifyMetaobjectCapabilityPublishableInput>
  /** The input for enabling the renderable capability. */
  renderable?: InputMaybe<ShopifyMetaobjectCapabilityRenderableInput>
  /** The input for enabling the translatable capability. */
  translatable?: InputMaybe<ShopifyMetaobjectCapabilityTranslatableInput>
}

/** Provides the capabilities of a metaobject. */
export interface ShopifyMetaobjectCapabilityData {
  __typename?: "MetaobjectCapabilityData"
  /** The Online Store capability for this metaobject. */
  onlineStore?: Maybe<ShopifyMetaobjectCapabilityDataOnlineStore>
  /** The publishable capability for this metaobject. */
  publishable?: Maybe<ShopifyMetaobjectCapabilityDataPublishable>
}

/** The input fields for metaobject capabilities. */
export interface ShopifyMetaobjectCapabilityDataInput {
  /** Online Store capability input. */
  onlineStore?: InputMaybe<ShopifyMetaobjectCapabilityDataOnlineStoreInput>
  /** Publishable capability input. */
  publishable?: InputMaybe<ShopifyMetaobjectCapabilityDataPublishableInput>
}

/** The Online Store capability for the parent metaobject. */
export interface ShopifyMetaobjectCapabilityDataOnlineStore {
  __typename?: "MetaobjectCapabilityDataOnlineStore"
  /** The theme template used when viewing the metaobject in a store. */
  templateSuffix?: Maybe<Scalars["String"]["output"]>
}

/** The input fields for the Online Store capability to control renderability on the Online Store. */
export interface ShopifyMetaobjectCapabilityDataOnlineStoreInput {
  /** The theme template used when viewing the metaobject in a store. */
  templateSuffix?: InputMaybe<Scalars["String"]["input"]>
}

/** The publishable capability for the parent metaobject. */
export interface ShopifyMetaobjectCapabilityDataPublishable {
  __typename?: "MetaobjectCapabilityDataPublishable"
  /** The visibility status of this metaobject across all channels. */
  status: ShopifyMetaobjectStatus
}

/** The input fields for publishable capability to adjust visibility on channels. */
export interface ShopifyMetaobjectCapabilityDataPublishableInput {
  /** The visibility status of this metaobject across all channels. */
  status: ShopifyMetaobjectStatus
}

/** The Online Store capability data for the metaobject definition. */
export interface ShopifyMetaobjectCapabilityDefinitionDataOnlineStore {
  __typename?: "MetaobjectCapabilityDefinitionDataOnlineStore"
  /** Flag indicating if a sufficient number of redirects are available to redirect all published entries. */
  canCreateRedirects: Scalars["Boolean"]["output"]
  /** The URL handle for accessing pages of this metaobject type in the Online Store. */
  urlHandle: Scalars["String"]["output"]
}

/** The input fields of the Online Store capability. */
export interface ShopifyMetaobjectCapabilityDefinitionDataOnlineStoreInput {
  /** Whether to redirect published metaobjects automatically when the URL handle changes. */
  createRedirects?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The URL handle for accessing pages of this metaobject type in the Online Store. */
  urlHandle: Scalars["String"]["input"]
}

/** The renderable capability data for the metaobject definition. */
export interface ShopifyMetaobjectCapabilityDefinitionDataRenderable {
  __typename?: "MetaobjectCapabilityDefinitionDataRenderable"
  /** The metaobject field used as an alias for the SEO page description. */
  metaDescriptionKey?: Maybe<Scalars["String"]["output"]>
  /** The metaobject field used as an alias for the SEO page title. */
  metaTitleKey?: Maybe<Scalars["String"]["output"]>
}

/** The input fields of the renderable capability for SEO aliases. */
export interface ShopifyMetaobjectCapabilityDefinitionDataRenderableInput {
  /** The metaobject field used as an alias for the SEO page description. */
  metaDescriptionKey?: InputMaybe<Scalars["String"]["input"]>
  /** The metaobject field used as an alias for the SEO page title. */
  metaTitleKey?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields for enabling and disabling the Online Store capability. */
export interface ShopifyMetaobjectCapabilityOnlineStoreInput {
  /** The data associated with the Online Store capability. */
  data?: InputMaybe<ShopifyMetaobjectCapabilityDefinitionDataOnlineStoreInput>
  /** Indicates whether the capability should be enabled or disabled. */
  enabled: Scalars["Boolean"]["input"]
}

/** The input fields for enabling and disabling the publishable capability. */
export interface ShopifyMetaobjectCapabilityPublishableInput {
  /** Indicates whether the capability should be enabled or disabled. */
  enabled: Scalars["Boolean"]["input"]
}

/** The input fields for enabling and disabling the renderable capability. */
export interface ShopifyMetaobjectCapabilityRenderableInput {
  /** The data associated with the renderable capability. */
  data?: InputMaybe<ShopifyMetaobjectCapabilityDefinitionDataRenderableInput>
  /** Indicates whether the capability should be enabled or disabled. */
  enabled: Scalars["Boolean"]["input"]
}

/** The input fields for enabling and disabling the translatable capability. */
export interface ShopifyMetaobjectCapabilityTranslatableInput {
  /** Indicates whether the capability should be enabled or disabled. */
  enabled: Scalars["Boolean"]["input"]
}

/** Metaobject Capabilities types which can be enabled. */
export type ShopifyMetaobjectCapabilityType =
  /** Allows for a Metaobject to be rendered as an Online Store page. */
  | "ONLINE_STORE"
  /** Allows for a Metaobject to be conditionally publishable. */
  | "PUBLISHABLE"
  /** Allows for a Metaobject to have attributes of a renderable page such as SEO. */
  | "RENDERABLE"
  /** Allows for a Metaobject to be translated using the translation api. */
  | "TRANSLATABLE"
  | "%future added value"

/** The input fields for updating a metaobject capability. */
export interface ShopifyMetaobjectCapabilityUpdateInput {
  /** The input for enabling the Online Store capability. */
  onlineStore?: InputMaybe<ShopifyMetaobjectCapabilityOnlineStoreInput>
  /** The input for updating the publishable capability. */
  publishable?: InputMaybe<ShopifyMetaobjectCapabilityPublishableInput>
  /** The input for enabling the renderable capability. */
  renderable?: InputMaybe<ShopifyMetaobjectCapabilityRenderableInput>
  /** The input for updating the translatable capability. */
  translatable?: InputMaybe<ShopifyMetaobjectCapabilityTranslatableInput>
}

/** An auto-generated type for paginating through multiple Metaobjects. */
export interface ShopifyMetaobjectConnection {
  __typename?: "MetaobjectConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMetaobjectEdge>
  /** A list of nodes that are contained in MetaobjectEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMetaobject>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields for creating a metaobject. */
export interface ShopifyMetaobjectCreateInput {
  /** Capabilities for the metaobject. */
  capabilities?: InputMaybe<ShopifyMetaobjectCapabilityDataInput>
  /** Values for fields. These are mapped by key to fields of the metaobject definition. */
  fields?: InputMaybe<Array<ShopifyMetaobjectFieldInput>>
  /** A unique handle for the metaobject. This value is auto-generated when omitted. */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** The type of the metaobject. Must match an existing metaobject definition type. */
  type: Scalars["String"]["input"]
}

/** Return type for `metaobjectCreate` mutation. */
export interface ShopifyMetaobjectCreatePayload {
  __typename?: "MetaobjectCreatePayload"
  /** The created metaobject. */
  metaobject?: Maybe<ShopifyMetaobject>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMetaobjectUserError>
}

/** Provides the definition of a generic object structure composed of metafields. */
export interface ShopifyMetaobjectDefinition extends ShopifyNode {
  __typename?: "MetaobjectDefinition"
  /** Access configuration for the metaobject definition. */
  access: ShopifyMetaobjectAccess
  /** The capabilities of the metaobject definition. */
  capabilities: ShopifyMetaobjectCapabilities
  /** The app used to create the metaobject definition. */
  createdByApp: ShopifyApp
  /** The staff member who created the metaobject definition. */
  createdByStaff?: Maybe<ShopifyStaffMember>
  /** The administrative description. */
  description?: Maybe<Scalars["String"]["output"]>
  /** The key of a field to reference as the display name for each object. */
  displayNameKey?: Maybe<Scalars["String"]["output"]>
  /** The fields defined for this object type. */
  fieldDefinitions: Array<ShopifyMetaobjectFieldDefinition>
  /** Whether this metaobject definition has field whose type can visually represent a metaobject with        the `thumbnailField`. */
  hasThumbnailField: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** A paginated connection to the metaobjects associated with the definition. */
  metaobjects: ShopifyMetaobjectConnection
  /** The count of metaobjects created for the definition. */
  metaobjectsCount: Scalars["Int"]["output"]
  /** The human-readable name. */
  name: Scalars["String"]["output"]
  /** The standard metaobject template associated with the definition. */
  standardTemplate?: Maybe<ShopifyStandardMetaobjectDefinitionTemplate>
  /** The type of the object definition. Defines the namespace of associated metafields. */
  type: Scalars["String"]["output"]
}

/** Provides the definition of a generic object structure composed of metafields. */
export interface ShopifyMetaobjectDefinitionMetaobjectsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple MetaobjectDefinitions. */
export interface ShopifyMetaobjectDefinitionConnection {
  __typename?: "MetaobjectDefinitionConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMetaobjectDefinitionEdge>
  /** A list of nodes that are contained in MetaobjectDefinitionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMetaobjectDefinition>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields for creating a metaobject definition. */
export interface ShopifyMetaobjectDefinitionCreateInput {
  /** Access configuration for the metaobjects created with this definition. */
  access?: InputMaybe<ShopifyMetaobjectAccessInput>
  /** The capabilities of the metaobject definition. */
  capabilities?: InputMaybe<ShopifyMetaobjectCapabilityCreateInput>
  /** An administrative description of the definition. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /** The key of a field to reference as the display name for metaobjects of this type. */
  displayNameKey?: InputMaybe<Scalars["String"]["input"]>
  /** A set of field definitions to create on this metaobject definition. */
  fieldDefinitions: Array<ShopifyMetaobjectFieldDefinitionCreateInput>
  /** A human-readable name for the definition. This can be changed at any time. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The type of the metaobject definition. This can't be changed.
   *
   * Must be 3-255 characters long and only contain alphanumeric, hyphen, and underscore characters.
   */
  type: Scalars["String"]["input"]
}

/** Return type for `metaobjectDefinitionCreate` mutation. */
export interface ShopifyMetaobjectDefinitionCreatePayload {
  __typename?: "MetaobjectDefinitionCreatePayload"
  /** The created metaobject definition. */
  metaobjectDefinition?: Maybe<ShopifyMetaobjectDefinition>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMetaobjectUserError>
}

/** Return type for `metaobjectDefinitionDelete` mutation. */
export interface ShopifyMetaobjectDefinitionDeletePayload {
  __typename?: "MetaobjectDefinitionDeletePayload"
  /** The ID of the deleted metaobjects definition. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMetaobjectUserError>
}

/** An auto-generated type which holds one MetaobjectDefinition and a cursor during pagination. */
export interface ShopifyMetaobjectDefinitionEdge {
  __typename?: "MetaobjectDefinitionEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MetaobjectDefinitionEdge. */
  node: ShopifyMetaobjectDefinition
}

/** The input fields for updating a metaobject definition. */
export interface ShopifyMetaobjectDefinitionUpdateInput {
  /** Access configuration for the metaobjects created with this definition. */
  access?: InputMaybe<ShopifyMetaobjectAccessInput>
  /** The capabilities of the metaobject definition. */
  capabilities?: InputMaybe<ShopifyMetaobjectCapabilityUpdateInput>
  /** An administrative description of the definition. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /** The key of a metafield to reference as the display name for objects of this type. */
  displayNameKey?: InputMaybe<Scalars["String"]["input"]>
  /** A set of operations for modifying field definitions. */
  fieldDefinitions?: InputMaybe<
    Array<ShopifyMetaobjectFieldDefinitionOperationInput>
  >
  /** A human-readable name for the definition. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /**
   * Whether the field order should be reset while updating.
   * If `true`, then the order is assigned based on submitted fields followed by alphabetized field omissions.
   * If `false`, then no changes are made to the existing field order and new fields are appended at the end.
   */
  resetFieldOrder?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `metaobjectDefinitionUpdate` mutation. */
export interface ShopifyMetaobjectDefinitionUpdatePayload {
  __typename?: "MetaobjectDefinitionUpdatePayload"
  /** The updated metaobject definition. */
  metaobjectDefinition?: Maybe<ShopifyMetaobjectDefinition>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMetaobjectUserError>
}

/** Return type for `metaobjectDelete` mutation. */
export interface ShopifyMetaobjectDeletePayload {
  __typename?: "MetaobjectDeletePayload"
  /** The ID of the deleted metaobject. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMetaobjectUserError>
}

/** An auto-generated type which holds one Metaobject and a cursor during pagination. */
export interface ShopifyMetaobjectEdge {
  __typename?: "MetaobjectEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MetaobjectEdge. */
  node: ShopifyMetaobject
}

/** Provides a field definition and the data value assigned to it. */
export interface ShopifyMetaobjectField {
  __typename?: "MetaobjectField"
  /** The field definition for this object key. */
  definition: ShopifyMetaobjectFieldDefinition
  /** The assigned field value in JSON format. */
  jsonValue?: Maybe<Scalars["JSON"]["output"]>
  /** The object key of this field. */
  key: Scalars["String"]["output"]
  /** For resource reference fields, provides the referenced object. */
  reference?: Maybe<ShopifyMetafieldReference>
  /** For resource reference list fields, provides the list of referenced objects. */
  references?: Maybe<ShopifyMetafieldReferenceConnection>
  /** For file reference or color fields, provides visual attributes for this field. */
  thumbnail?: Maybe<ShopifyMetaobjectThumbnail>
  /** The type of the field. */
  type: Scalars["String"]["output"]
  /** The assigned field value, always stored as a string regardless of the field type. */
  value?: Maybe<Scalars["String"]["output"]>
}

/** Provides a field definition and the data value assigned to it. */
export interface ShopifyMetaobjectFieldReferencesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
}

/**
 * Defines a field for a MetaobjectDefinition with properties
 * such as the field's data type and validations.
 */
export interface ShopifyMetaobjectFieldDefinition {
  __typename?: "MetaobjectFieldDefinition"
  /** The administrative description. */
  description?: Maybe<Scalars["String"]["output"]>
  /** A key name used to identify the field within the metaobject composition. */
  key: Scalars["String"]["output"]
  /** The human-readable name. */
  name: Scalars["String"]["output"]
  /** Required status of the field within the metaobject composition. */
  required: Scalars["Boolean"]["output"]
  /** The type of data that the field stores. */
  type: ShopifyMetafieldDefinitionType
  /**
   * A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
   * the field. For example, a field with the type `date` can set a minimum date requirement.
   */
  validations: Array<ShopifyMetafieldDefinitionValidation>
}

/** The input fields for creating a metaobject field definition. */
export interface ShopifyMetaobjectFieldDefinitionCreateInput {
  /** An administrative description of the field. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The key of the new field definition. This can't be changed.
   *
   * Must be 2-64 characters long and only contain alphanumeric, hyphen, and underscore characters.
   */
  key: Scalars["String"]["input"]
  /** A human-readable name for the field. This can be changed at any time. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** Whether metaobjects require a saved value for the field. */
  required?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The metafield type applied to values of the field. */
  type: Scalars["String"]["input"]
  /** Custom validations that apply to values assigned to the field. */
  validations?: InputMaybe<Array<ShopifyMetafieldDefinitionValidationInput>>
}

/** The input fields for deleting a metaobject field definition. */
export interface ShopifyMetaobjectFieldDefinitionDeleteInput {
  /** The key of the field definition to delete. */
  key: Scalars["String"]["input"]
}

/** The input fields for possible operations for modifying field definitions. Exactly one option is required. */
export interface ShopifyMetaobjectFieldDefinitionOperationInput {
  /** The input fields for creating a metaobject field definition. */
  create?: InputMaybe<ShopifyMetaobjectFieldDefinitionCreateInput>
  /** The input fields for deleting a metaobject field definition. */
  delete?: InputMaybe<ShopifyMetaobjectFieldDefinitionDeleteInput>
  /** The input fields for updating a metaobject field definition. */
  update?: InputMaybe<ShopifyMetaobjectFieldDefinitionUpdateInput>
}

/** The input fields for updating a metaobject field definition. */
export interface ShopifyMetaobjectFieldDefinitionUpdateInput {
  /** An administrative description of the field. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /** The key of the field definition to update. */
  key: Scalars["String"]["input"]
  /** A human-readable name for the field. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** Whether metaobjects require a saved value for the field. */
  required?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Custom validations that apply to values assigned to the field. */
  validations?: InputMaybe<Array<ShopifyMetafieldDefinitionValidationInput>>
}

/** The input fields for a metaobject field value. */
export interface ShopifyMetaobjectFieldInput {
  /** The key of the field. */
  key: Scalars["String"]["input"]
  /** The value of the field. */
  value: Scalars["String"]["input"]
}

/** The input fields for retrieving a metaobject by handle. */
export interface ShopifyMetaobjectHandleInput {
  /** The handle of the metaobject to create or update. */
  handle: Scalars["String"]["input"]
  /** The type of the metaobject. Must match an existing metaobject definition type. */
  type: Scalars["String"]["input"]
}

/** Defines visibility status for metaobjects. */
export type ShopifyMetaobjectStatus =
  /** The metaobjects is active for public use. */
  | "ACTIVE"
  /** The metaobjects is an internal record. */
  | "DRAFT"
  | "%future added value"

/** Metaobject access permissions for the Storefront API. */
export type ShopifyMetaobjectStorefrontAccess =
  /** No access. */
  | "NONE"
  /** Read-only access. */
  | "PUBLIC_READ"
  | "%future added value"

/** Provides attributes for visual representation. */
export interface ShopifyMetaobjectThumbnail {
  __typename?: "MetaobjectThumbnail"
  /** The file to be used for visual representation of this metaobject. */
  file?: Maybe<ShopifyFile>
  /** The hexadecimal color code to be used for respresenting this metaobject. */
  hex?: Maybe<Scalars["String"]["output"]>
}

/** The input fields for updating a metaobject. */
export interface ShopifyMetaobjectUpdateInput {
  /** Capabilities for the metaobject. */
  capabilities?: InputMaybe<ShopifyMetaobjectCapabilityDataInput>
  /** Values for fields. These are mapped by key to fields of the metaobject definition. */
  fields?: InputMaybe<Array<ShopifyMetaobjectFieldInput>>
  /** A unique handle for the metaobject. */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** Whether to create a redirect for the metaobject. */
  redirectNewHandle?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `metaobjectUpdate` mutation. */
export interface ShopifyMetaobjectUpdatePayload {
  __typename?: "MetaobjectUpdatePayload"
  /** The updated metaobject. */
  metaobject?: Maybe<ShopifyMetaobject>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMetaobjectUserError>
}

/** The input fields for upserting a metaobject. */
export interface ShopifyMetaobjectUpsertInput {
  /** Capabilities for the metaobject. */
  capabilities?: InputMaybe<ShopifyMetaobjectCapabilityDataInput>
  /** Values for fields. These are mapped by key to fields of the metaobject definition. */
  fields?: InputMaybe<Array<ShopifyMetaobjectFieldInput>>
  /** The handle of the metaobject. */
  handle?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `metaobjectUpsert` mutation. */
export interface ShopifyMetaobjectUpsertPayload {
  __typename?: "MetaobjectUpsertPayload"
  /** The created or updated metaobject. */
  metaobject?: Maybe<ShopifyMetaobject>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMetaobjectUserError>
}

/** Defines errors encountered while managing metaobject resources. */
export interface ShopifyMetaobjectUserError extends ShopifyDisplayableError {
  __typename?: "MetaobjectUserError"
  /** The error code. */
  code?: Maybe<ShopifyMetaobjectUserErrorCode>
  /** The index of the failing list element in an array. */
  elementIndex?: Maybe<Scalars["Int"]["output"]>
  /** The key of the failing object element. */
  elementKey?: Maybe<Scalars["String"]["output"]>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `MetaobjectUserError`. */
export type ShopifyMetaobjectUserErrorCode =
  /** Admin access can only be specified on metaobject definitions that have an app-reserved type. */
  | "ADMIN_ACCESS_INPUT_NOT_ALLOWED"
  /** Definition is managed by app configuration and cannot be modified through the API. */
  | "APP_CONFIG_MANAGED"
  /** The input value is blank. */
  | "BLANK"
  /** The capability you are using is not enabled. */
  | "CAPABILITY_NOT_ENABLED"
  /** The display name cannot be the same when using the metaobject as a product option. */
  | "DISPLAY_NAME_CONFLICT"
  /** Duplicate inputs were provided for this field key. */
  | "DUPLICATE_FIELD_INPUT"
  /** Renderable data input is referencing an invalid field. */
  | "FIELD_TYPE_INVALID"
  /** The targeted object cannot be modified. */
  | "IMMUTABLE"
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** The maximum number of input metaobjects has been exceeded. */
  | "INPUT_LIMIT_EXCEEDED"
  /** An unexpected error occurred. */
  | "INTERNAL_ERROR"
  /** The input value is invalid. */
  | "INVALID"
  /** The value for the metafield definition option was invalid. */
  | "INVALID_OPTION"
  /** The metafield type is invalid. */
  | "INVALID_TYPE"
  /** The value is invalid for the metafield type or the definition options. */
  | "INVALID_VALUE"
  /** The maximum number of metaobjects definitions has been exceeded. */
  | "MAX_DEFINITIONS_EXCEEDED"
  /** The maximum number of metaobjects per shop has been exceeded. */
  | "MAX_OBJECTS_EXCEEDED"
  /** The input is missing required keys. */
  | "MISSING_REQUIRED_KEYS"
  /** Not authorized. */
  | "NOT_AUTHORIZED"
  /** Missing required fields were found for this object. */
  | "OBJECT_FIELD_REQUIRED"
  /** The specified field key is already in use. */
  | "OBJECT_FIELD_TAKEN"
  /** The input value needs to be blank. */
  | "PRESENT"
  /** The requested record couldn't be found. */
  | "RECORD_NOT_FOUND"
  /** The action cannot be completed because associated metaobjects are referenced by another resource. */
  | "REFERENCE_EXISTS_ERROR"
  /** The provided name is reserved for system use. */
  | "RESERVED_NAME"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too long. */
  | "TOO_LONG"
  /** The input value is too short. */
  | "TOO_SHORT"
  /** No field definition found for this key. */
  | "UNDEFINED_OBJECT_FIELD"
  /** No metaobject definition found for this type. */
  | "UNDEFINED_OBJECT_TYPE"
  /** The Online Store URL handle cannot be blank. */
  | "URL_HANDLE_BLANK"
  /** The Online Store URL handle is invalid. */
  | "URL_HANDLE_INVALID"
  /** The Online Store URL handle is already taken. */
  | "URL_HANDLE_TAKEN"
  | "%future added value"

/** The set of valid sort keys for the MethodDefinition query. */
export type ShopifyMethodDefinitionSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `rate_provider_type` value. */
  | "RATE_PROVIDER_TYPE"
  | "%future added value"

/**
 * You can use the `MobilePlatformApplication` resource to enable
 * [shared web credentials](https://developer.apple.com/documentation/security/shared_web_credentials) for Shopify iOS apps,
 * as well as to create [iOS universal link](https://developer.apple.com/ios/universal-links/)
 * or [Android app link](https://developer.android.com/training/app-links/) verification endpoints for merchant Shopify iOS or Android apps.
 * Shared web credentials let iOS users access a native app after logging into the respective website in Safari without re-entering
 * their username and password. If a user changes their credentials in the app, then those changes are reflected in Safari.
 * You must use a custom domain to integrate shared web credentials with Shopify. With each platform's link system,
 * users can tap a link to a shop's website and get seamlessly redirected to a merchant's installed app without going
 * through a browser or manually selecting an app.
 *
 * For full configuration instructions on iOS shared web credentials,
 * see the [associated domains setup](https://developer.apple.com/documentation/security/password_autofill/setting_up_an_app_s_associated_domains) technical documentation.
 *
 * For full configuration instructions on iOS universal links or Android App Links,
 * see the respective [iOS universal link](https://developer.apple.com/documentation/uikit/core_app/allowing_apps_and_websites_to_link_to_your_content)
 * or [Android app link](https://developer.android.com/training/app-links) technical documentation.
 */
export type ShopifyMobilePlatformApplication =
  | ShopifyAndroidApplication
  | ShopifyAppleApplication

/** An auto-generated type for paginating through multiple MobilePlatformApplications. */
export interface ShopifyMobilePlatformApplicationConnection {
  __typename?: "MobilePlatformApplicationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyMobilePlatformApplicationEdge>
  /** A list of nodes that are contained in MobilePlatformApplicationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyMobilePlatformApplication>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields for an Android based mobile platform application. */
export interface ShopifyMobilePlatformApplicationCreateAndroidInput {
  /** Whether Android App Links are supported by this app. */
  appLinksEnabled: Scalars["Boolean"]["input"]
  /** Android application ID. */
  applicationId?: InputMaybe<Scalars["String"]["input"]>
  /** The SHA256 fingerprints of the app’s signing certificate. */
  sha256CertFingerprints: Array<Scalars["String"]["input"]>
}

/** The input fields for an Apple based mobile platform application. */
export interface ShopifyMobilePlatformApplicationCreateAppleInput {
  /** The Apple app clip application ID. */
  appClipApplicationId?: InputMaybe<Scalars["String"]["input"]>
  /** Whether Apple app clips are enabled for this app. */
  appClipsEnabled?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Apple application ID. */
  appId?: InputMaybe<Scalars["String"]["input"]>
  /** Whether Apple shared web credentials are enabled for this app. */
  sharedWebCredentialsEnabled: Scalars["Boolean"]["input"]
  /** Whether Apple Universal Links are supported by this app. */
  universalLinksEnabled: Scalars["Boolean"]["input"]
}

/** The input fields for a mobile application platform type. */
export interface ShopifyMobilePlatformApplicationCreateInput {
  /** Android based mobile platform application. */
  android?: InputMaybe<ShopifyMobilePlatformApplicationCreateAndroidInput>
  /** Apple based mobile platform application. */
  apple?: InputMaybe<ShopifyMobilePlatformApplicationCreateAppleInput>
}

/** Return type for `mobilePlatformApplicationCreate` mutation. */
export interface ShopifyMobilePlatformApplicationCreatePayload {
  __typename?: "MobilePlatformApplicationCreatePayload"
  /** Created mobile platform application. */
  mobilePlatformApplication?: Maybe<ShopifyMobilePlatformApplication>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMobilePlatformApplicationUserError>
}

/** Return type for `mobilePlatformApplicationDelete` mutation. */
export interface ShopifyMobilePlatformApplicationDeletePayload {
  __typename?: "MobilePlatformApplicationDeletePayload"
  /** The ID of the mobile platform application that was just deleted. */
  deletedMobilePlatformApplicationId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMobilePlatformApplicationUserError>
}

/** An auto-generated type which holds one MobilePlatformApplication and a cursor during pagination. */
export interface ShopifyMobilePlatformApplicationEdge {
  __typename?: "MobilePlatformApplicationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of MobilePlatformApplicationEdge. */
  node: ShopifyMobilePlatformApplication
}

/** The input fields for an Android based mobile platform application. */
export interface ShopifyMobilePlatformApplicationUpdateAndroidInput {
  /** Whether Android App Links are supported by this app. */
  appLinksEnabled?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Android application ID. */
  applicationId?: InputMaybe<Scalars["String"]["input"]>
  /** The SHA256 fingerprints of the app’s signing certificate. */
  sha256CertFingerprints?: InputMaybe<Array<Scalars["String"]["input"]>>
}

/** The input fields for an Apple based mobile platform application. */
export interface ShopifyMobilePlatformApplicationUpdateAppleInput {
  /** The Apple App Clip application ID. */
  appClipApplicationId?: InputMaybe<Scalars["String"]["input"]>
  /** Whether Apple App Clips are enabled for this app. */
  appClipsEnabled?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Apple application ID. */
  appId?: InputMaybe<Scalars["String"]["input"]>
  /** Whether Apple shared web credentials are enabled for this app. */
  sharedWebCredentialsEnabled?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether Apple Universal Links are supported by this app. */
  universalLinksEnabled?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The input fields for the mobile platform application platform type. */
export interface ShopifyMobilePlatformApplicationUpdateInput {
  /** Android based Mobile Platform Application. */
  android?: InputMaybe<ShopifyMobilePlatformApplicationUpdateAndroidInput>
  /** Apple based Mobile Platform Application. */
  apple?: InputMaybe<ShopifyMobilePlatformApplicationUpdateAppleInput>
}

/** Return type for `mobilePlatformApplicationUpdate` mutation. */
export interface ShopifyMobilePlatformApplicationUpdatePayload {
  __typename?: "MobilePlatformApplicationUpdatePayload"
  /** Created mobile platform application. */
  mobilePlatformApplication?: Maybe<ShopifyMobilePlatformApplication>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMobilePlatformApplicationUserError>
}

/** Represents an error in the input of a mutation. */
export interface ShopifyMobilePlatformApplicationUserError
  extends ShopifyDisplayableError {
  __typename?: "MobilePlatformApplicationUserError"
  /** The error code. */
  code?: Maybe<ShopifyMobilePlatformApplicationUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `MobilePlatformApplicationUserError`. */
export type ShopifyMobilePlatformApplicationUserErrorCode =
  /** The input value is invalid. */
  | "INVALID"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** The input value is too long. */
  | "TOO_LONG"
  | "%future added value"

/** Represents a Shopify hosted 3D model. */
export interface ShopifyModel3d extends ShopifyFile, ShopifyMedia, ShopifyNode {
  __typename?: "Model3d"
  /** A word or phrase to describe the contents or the function of a file. */
  alt?: Maybe<Scalars["String"]["output"]>
  /** The 3d model's bounding box information. */
  boundingBox?: Maybe<ShopifyModel3dBoundingBox>
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** Any errors that have occurred on the file. */
  fileErrors: Array<ShopifyFileError>
  /** The status of the file. */
  fileStatus: ShopifyFileStatus
  /** The 3d model's filename. */
  filename: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The media content type. */
  mediaContentType: ShopifyMediaContentType
  /** Any errors which have occurred on the media. */
  mediaErrors: Array<ShopifyMediaError>
  /** The warnings attached to the media. */
  mediaWarnings: Array<ShopifyMediaWarning>
  /** The 3d model's original source. */
  originalSource?: Maybe<ShopifyModel3dSource>
  /** The preview image for the media. */
  preview?: Maybe<ShopifyMediaPreviewImage>
  /** The 3d model's sources. */
  sources: Array<ShopifyModel3dSource>
  /** Current status of the media. */
  status: ShopifyMediaStatus
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** Bounding box information of a 3d model. */
export interface ShopifyModel3dBoundingBox {
  __typename?: "Model3dBoundingBox"
  /** Size in meters of the smallest volume which contains the 3d model. */
  size: ShopifyVector3
}

/**
 * A source for a Shopify-hosted 3d model.
 *
 * Types of sources include GLB and USDZ formatted 3d models, where the former
 * is an original 3d model and the latter has been converted from the original.
 *
 * If the original source is in GLB format and over 15 MBs in size, then both the
 * original and the USDZ formatted source are optimized to reduce the file size.
 */
export interface ShopifyModel3dSource {
  __typename?: "Model3dSource"
  /** The 3d model source's filesize. */
  filesize: Scalars["Int"]["output"]
  /** The 3d model source's format. */
  format: Scalars["String"]["output"]
  /** The 3d model source's MIME type. */
  mimeType: Scalars["String"]["output"]
  /** The 3d model source's URL. */
  url: Scalars["String"]["output"]
}

/**
 * A collection of monetary values in their respective currencies. Typically used in the context of multi-currency pricing and transactions,
 * when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
 */
export interface ShopifyMoneyBag {
  __typename?: "MoneyBag"
  /** Amount in presentment currency. */
  presentmentMoney: ShopifyMoneyV2
  /** Amount in shop currency. */
  shopMoney: ShopifyMoneyV2
}

/**
 * An input collection of monetary values in their respective currencies.
 * Represents an amount in the shop's currency and the amount as converted to the customer's currency of choice (the presentment currency).
 */
export interface ShopifyMoneyBagInput {
  /** Amount in presentment currency. If this isn't given then we assume that the presentment currency is the same as the shop's currency. */
  presentmentMoney?: InputMaybe<ShopifyMoneyInput>
  /** Amount in shop currency. */
  shopMoney: ShopifyMoneyInput
}

/** The input fields for a monetary value with currency. */
export interface ShopifyMoneyInput {
  /** Decimal money amount. */
  amount: Scalars["Decimal"]["input"]
  /** Currency of the money. */
  currencyCode: ShopifyCurrencyCode
}

/** A precise monetary value and its associated currency. For example, 12.99 USD. */
export interface ShopifyMoneyV2 {
  __typename?: "MoneyV2"
  /**
   * A monetary value in decimal format, allowing for precise representation of cents or fractional
   * currency. For example, 12.99.
   */
  amount: Scalars["Decimal"]["output"]
  /**
   * The three-letter currency code that represents a world currency used in a store. Currency codes
   * include standard [standard ISO 4217 codes](https://en.wikipedia.org/wiki/ISO_4217), legacy codes,
   * and non-standard codes. For example, USD.
   */
  currencyCode: ShopifyCurrencyCode
}

/**
 * The input for moving a single object to a specific position in a set.
 *
 * Provide this input only for objects whose position actually changed; do not send inputs for the entire set.
 *
 * - id: The ID (GID) of the object to move.
 * - newPosition: The zero-based index of the object's position within the set at the time this move is applied.
 *
 * Moves are applied sequentially, so `newPosition` for each move is evaluated after all prior moves in the same list.
 * If `newPosition` is greater than or equal to the number of objects, the object is moved to the end of the set.
 * Values do not have to be unique. Objects not included in the move list keep their relative order, aside from any displacement caused by the moves.
 */
export interface ShopifyMoveInput {
  /** The ID of the object to be moved. */
  id: Scalars["ID"]["input"]
  /** Zero-based index of the object's position at the time this move is applied. If the value is >= the number of objects, the object is placed at the end. */
  newPosition: Scalars["UnsignedInt64"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutation {
  __typename?: "Mutation"
  /**
   * Updates the email state value for an abandonment.
   * @deprecated Use `abandonmentUpdateActivitiesDeliveryStatuses` instead.
   */
  abandonmentEmailStateUpdate?: Maybe<ShopifyAbandonmentEmailStateUpdatePayload>
  /** Updates the marketing activities delivery statuses for an abandonment. */
  abandonmentUpdateActivitiesDeliveryStatuses?: Maybe<ShopifyAbandonmentUpdateActivitiesDeliveryStatusesPayload>
  /**
   * Charges a shop for features or services one time.
   * This type of charge is recommended for apps that aren't billed on a recurring basis.
   * Test and demo shops aren't charged.
   */
  appPurchaseOneTimeCreate?: Maybe<ShopifyAppPurchaseOneTimeCreatePayload>
  /** Revokes access scopes previously granted for an app installation. */
  appRevokeAccessScopes?: Maybe<ShopifyAppRevokeAccessScopesPayload>
  /** Cancels an app subscription on a store. */
  appSubscriptionCancel?: Maybe<ShopifyAppSubscriptionCancelPayload>
  /** Allows an app to charge a store for features or services on a recurring basis. */
  appSubscriptionCreate?: Maybe<ShopifyAppSubscriptionCreatePayload>
  /** Updates the capped amount on the usage pricing plan of an app subscription line item. */
  appSubscriptionLineItemUpdate?: Maybe<ShopifyAppSubscriptionLineItemUpdatePayload>
  /** Extends the trial of an app subscription. */
  appSubscriptionTrialExtend?: Maybe<ShopifyAppSubscriptionTrialExtendPayload>
  /** Uninstalls an app. */
  appUninstall?: Maybe<ShopifyAppUninstallPayload>
  /**
   * Enables an app to charge a store for features or services on a per-use basis.
   * The usage charge value is counted towards the `cappedAmount` limit that was specified in the `appUsagePricingDetails` field when the app subscription was created.
   * If you create an app usage charge that causes the total usage charges in a billing interval to exceed the capped amount, then a `Total price exceeds balance remaining` error is returned.
   */
  appUsageRecordCreate?: Maybe<ShopifyAppUsageRecordCreatePayload>
  /** Creates an article. */
  articleCreate?: Maybe<ShopifyArticleCreatePayload>
  /** Deletes an article. */
  articleDelete?: Maybe<ShopifyArticleDeletePayload>
  /** Updates an article. */
  articleUpdate?: Maybe<ShopifyArticleUpdatePayload>
  /** Update the backup region that is used when we have no better signal of what region a buyer is in. */
  backupRegionUpdate?: Maybe<ShopifyBackupRegionUpdatePayload>
  /** Creates a blog. */
  blogCreate?: Maybe<ShopifyBlogCreatePayload>
  /** Deletes a blog. */
  blogDelete?: Maybe<ShopifyBlogDeletePayload>
  /** Updates a blog. */
  blogUpdate?: Maybe<ShopifyBlogUpdatePayload>
  /**
   * Starts the cancelation process of a running bulk operation.
   *
   * There may be a short delay from when a cancelation starts until the operation is actually canceled.
   */
  bulkOperationCancel?: Maybe<ShopifyBulkOperationCancelPayload>
  /**
   * Creates and runs a bulk operation mutation.
   *
   * To learn how to bulk import large volumes of data asynchronously, refer to the
   * [bulk import data guide](https://shopify.dev/api/usage/bulk-operations/imports).
   */
  bulkOperationRunMutation?: Maybe<ShopifyBulkOperationRunMutationPayload>
  /**
   * Creates and runs a bulk operation query.
   *
   * See the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/queries) for more details.
   */
  bulkOperationRunQuery?: Maybe<ShopifyBulkOperationRunQueryPayload>
  /** Creates product feedback for multiple products. */
  bulkProductResourceFeedbackCreate?: Maybe<ShopifyBulkProductResourceFeedbackCreatePayload>
  /** Creates a new carrier service. */
  carrierServiceCreate?: Maybe<ShopifyCarrierServiceCreatePayload>
  /** Removes an existing carrier service. */
  carrierServiceDelete?: Maybe<ShopifyCarrierServiceDeletePayload>
  /** Updates a carrier service. Only the app that creates a carrier service can update it. */
  carrierServiceUpdate?: Maybe<ShopifyCarrierServiceUpdatePayload>
  /** Create a CartTransform function to the Shop. */
  cartTransformCreate?: Maybe<ShopifyCartTransformCreatePayload>
  /** Destroy a cart transform function from the Shop. */
  cartTransformDelete?: Maybe<ShopifyCartTransformDeletePayload>
  /** Updates the context of a catalog. */
  catalogContextUpdate?: Maybe<ShopifyCatalogContextUpdatePayload>
  /** Creates a new catalog. */
  catalogCreate?: Maybe<ShopifyCatalogCreatePayload>
  /** Delete a catalog. */
  catalogDelete?: Maybe<ShopifyCatalogDeletePayload>
  /** Updates an existing catalog. */
  catalogUpdate?: Maybe<ShopifyCatalogUpdatePayload>
  /**
   * Updates the checkout branding settings for a
   * [checkout profile](https://shopify.dev/api/admin-graphql/unstable/queries/checkoutProfile).
   *
   * If the settings don't exist, then new settings are created. The checkout branding settings applied to a
   * published checkout profile will be immediately visible within the store's checkout. The checkout branding
   * settings applied to a draft checkout profile could be previewed within the admin checkout editor.
   *
   * To learn more about updating checkout branding settings, refer to the checkout branding
   * [tutorial](https://shopify.dev/docs/apps/checkout/styling).
   */
  checkoutBrandingUpsert?: Maybe<ShopifyCheckoutBrandingUpsertPayload>
  /**
   * Adds multiple products to an existing collection in a single operation. This mutation provides an efficient way to bulk-manage collection membership without individual product updates.
   *
   * For example, when merchants create seasonal collections, they can add dozens of related products at once rather than updating each product individually. A clothing store might add all winter jackets to a "Winter Collection" in one operation.
   *
   * Use `CollectionAddProducts` to:
   * - Bulk-add products to collections for efficient catalog management
   * - Implement collection building tools in admin interfaces
   * - Organize collection membership during bulk product operations
   * - Reduce API calls when managing large product sets
   *
   * The mutation processes multiple product additions and returns success status along with any errors encountered during the operation. Products are added to the collection while preserving existing collection settings.
   *
   * This operation only works with manual collections where merchants explicitly choose which products to include. It will return an error if used with smart collections that automatically include products based on conditions.
   *
   * Learn more about [collection management](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection).
   */
  collectionAddProducts?: Maybe<ShopifyCollectionAddProductsPayload>
  /** Asynchronously adds a set of products to a given collection. It can take a long time to run. Instead of returning a collection, it returns a job which should be polled. */
  collectionAddProductsV2?: Maybe<ShopifyCollectionAddProductsV2Payload>
  /**
   * Creates a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection)
   * to group [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) together
   * in the [online store](https://shopify.dev/docs/apps/build/online-store) and
   * other [sales channels](https://shopify.dev/docs/apps/build/sales-channels).
   * For example, an athletics store might create different collections for running attire, shoes, and accessories.
   *
   * There are two types of collections:
   *
   * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You specify the products to include in a collection.
   * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You define rules, and products matching those rules are automatically
   * included in the collection.
   *
   * Use the `collectionCreate` mutation when you need to:
   *
   * - Create a new collection for a product launch or campaign
   * - Organize products by category, season, or promotion
   * - Automate product grouping using rules (for example, by tag, type, or price)
   *
   * > Note:
   * > The created collection is unpublished by default. To make it available to customers,
   * use the [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish)
   * mutation after creation.
   *
   * Learn more about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
   */
  collectionCreate?: Maybe<ShopifyCollectionCreatePayload>
  /**
   * Deletes a collection and removes it permanently from the store. This operation cannot be undone and will remove the collection from all sales channels where it was published.
   *
   * For example, when merchants discontinue seasonal promotions or reorganize their catalog structure, they can delete outdated collections like "Back to School 2023" to keep their store organized.
   *
   * Use `CollectionDelete` to:
   * - Remove outdated or unused collections from stores
   * - Clean up collection structures during catalog reorganization
   * - Implement collection management tools with deletion capabilities
   *
   * Products within the deleted collection remain in the store but are no longer grouped under that collection.
   *
   * Learn more about [collection management](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection).
   */
  collectionDelete?: Maybe<ShopifyCollectionDeletePayload>
  /**
   * Publishes a collection to a channel.
   * @deprecated Use `publishablePublish` instead.
   */
  collectionPublish?: Maybe<ShopifyCollectionPublishPayload>
  /**
   * Removes multiple products from a collection in a single operation. This mutation can process large product sets (up to 250 products) and may take significant time to complete for collections with many products.
   *
   * For example, when ending a seasonal promotion, merchants can remove all sale items from a "Summer Clearance" collection at once rather than editing each product individually.
   *
   * Use `CollectionRemoveProducts` to:
   * - Bulk-remove products from collections efficiently
   * - Clean up collection membership during catalog updates
   * - Implement automated collection management workflows
   *
   * The operation processes asynchronously to avoid timeouts and performance issues, especially for large product sets.
   *
   * Learn more about [collection management](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection).
   */
  collectionRemoveProducts?: Maybe<ShopifyCollectionRemoveProductsPayload>
  /**
   * Asynchronously reorders products within a specified collection. Instead of returning an updated collection, this mutation returns a job, which should be [polled](https://shopify.dev/api/admin-graphql/latest/queries/job). The [`Collection.sortOrder`](https://shopify.dev/api/admin-graphql/latest/objects/Collection#field-collection-sortorder) must be `MANUAL`.
   *
   * How to use this mutation:
   * - Provide only the products that actually moved in the `moves` list; do not send the entire product list. For example: to move the product at index 1 to index N, send a single move for that product with `newPosition: N`.
   * - Each move is applied sequentially in the order provided.
   * - `newPosition` is a zero-based index within the collection at the moment the move is applied (after any prior moves in the list).
   * - Products not included in `moves` keep their relative order, aside from any displacement caused by the moves.
   * - If `newPosition` is greater than or equal to the number of products, the product is placed at the end.
   *
   * Example:
   * - Initial order: [A, B, C, D, E] (indices 0..4)
   * - Moves (applied in order):
   *   - E -> newPosition: 1
   *   - C -> newPosition: 4
   * - Result: [A, E, B, D, C]
   *
   * Displaced products will have their position altered in a consistent manner with no gaps.
   */
  collectionReorderProducts?: Maybe<ShopifyCollectionReorderProductsPayload>
  /**
   * Unpublishes a collection.
   * @deprecated Use `publishableUnpublish` instead.
   */
  collectionUnpublish?: Maybe<ShopifyCollectionUnpublishPayload>
  /**
   * Updates a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection),
   * modifying its properties, products, or publication settings. Collections help organize
   * [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) together
   * in the [online store](https://shopify.dev/docs/apps/build/online-store) and
   * other [sales channels](https://shopify.dev/docs/apps/build/sales-channels).
   *
   * Use the `collectionUpdate` mutation to programmatically modify collections in scenarios such as:
   *
   * - Updating collection details, like title, description, or image
   * - Modifying SEO metadata for better search visibility
   * - Changing which products are included (using rule updates for smart collections)
   * - Publishing or unpublishing collections across different sales channels
   * - Updating custom data using [metafields](https://shopify.dev/docs/apps/build/custom-data/metafields)
   *
   * There are two types of collections with different update capabilities:
   *
   * - **[Custom (manual) collections](https://help.shopify.com/manual/products/collections/manual-shopify-collection)**: You can update collection properties, but rule sets can't be modified since products are manually selected.
   * - **[Smart (automated) collections](https://help.shopify.com/manual/products/collections/automated-collections)**: You can update both collection properties and the rules that automatically determine which products are included.
   * When updating [rule sets](https://shopify.dev/docs/api/admin-graphql/latest/objects/CollectionRuleConditions) for smart collections, the operation might be processed asynchronously. In these cases, the mutation returns a [`job`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Job) object that you can use to track the progress of the update.
   *
   * To publish or unpublish collections to specific sales channels, use the dedicated
   * [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish) and
   * [`publishableUnpublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishableUnpublish) mutations.
   *
   * Learn more about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
   */
  collectionUpdate?: Maybe<ShopifyCollectionUpdatePayload>
  /**
   * Add, remove and update `CombinedListing`s of a given Product.
   *
   * `CombinedListing`s are comprised of multiple products to create a single listing. There are two kinds of products used in a `CombinedListing`:
   *
   * 1. Parent products
   * 2. Child products
   *
   * The parent product is created with a `productCreate` with a `CombinedListingRole` of `PARENT`. Once created, you can associate child products with the parent product using this mutation. Parent products represent the idea of a product (e.g. Shoe).
   *
   * Child products represent a particular option value (or combination of option values) of a parent product. For instance, with your Shoe parent product, you may have several child products representing specific colors of the shoe (e.g. Shoe - Blue). You could also have child products representing more than a single option (e.g. Shoe - Blue/Canvas, Shoe - Blue/Leather, etc...).
   *
   * The combined listing is the association of parent product to one or more child products.
   *
   * Learn more about [Combined Listings](https://shopify.dev/apps/selling-strategies/combined-listings).
   */
  combinedListingUpdate?: Maybe<ShopifyCombinedListingUpdatePayload>
  /** Approves a comment. */
  commentApprove?: Maybe<ShopifyCommentApprovePayload>
  /** Deletes a comment. */
  commentDelete?: Maybe<ShopifyCommentDeletePayload>
  /** Marks a comment as not spam. */
  commentNotSpam?: Maybe<ShopifyCommentNotSpamPayload>
  /** Marks a comment as spam. */
  commentSpam?: Maybe<ShopifyCommentSpamPayload>
  /** Deletes a list of companies. */
  companiesDelete?: Maybe<ShopifyCompaniesDeletePayload>
  /** Deletes a company address. */
  companyAddressDelete?: Maybe<ShopifyCompanyAddressDeletePayload>
  /** Assigns the customer as a company contact. */
  companyAssignCustomerAsContact?: Maybe<ShopifyCompanyAssignCustomerAsContactPayload>
  /** Assigns the main contact for the company. */
  companyAssignMainContact?: Maybe<ShopifyCompanyAssignMainContactPayload>
  /** Assigns a role to a contact for a location. */
  companyContactAssignRole?: Maybe<ShopifyCompanyContactAssignRolePayload>
  /** Assigns roles on a company contact. */
  companyContactAssignRoles?: Maybe<ShopifyCompanyContactAssignRolesPayload>
  /** Creates a company contact and the associated customer. */
  companyContactCreate?: Maybe<ShopifyCompanyContactCreatePayload>
  /** Deletes a company contact. */
  companyContactDelete?: Maybe<ShopifyCompanyContactDeletePayload>
  /** Removes a company contact from a Company. */
  companyContactRemoveFromCompany?: Maybe<ShopifyCompanyContactRemoveFromCompanyPayload>
  /** Revokes a role on a company contact. */
  companyContactRevokeRole?: Maybe<ShopifyCompanyContactRevokeRolePayload>
  /** Revokes roles on a company contact. */
  companyContactRevokeRoles?: Maybe<ShopifyCompanyContactRevokeRolesPayload>
  /** Sends the company contact a welcome email. */
  companyContactSendWelcomeEmail?: Maybe<ShopifyCompanyContactSendWelcomeEmailPayload>
  /** Updates a company contact. */
  companyContactUpdate?: Maybe<ShopifyCompanyContactUpdatePayload>
  /** Deletes one or more company contacts. */
  companyContactsDelete?: Maybe<ShopifyCompanyContactsDeletePayload>
  /** Creates a company. */
  companyCreate?: Maybe<ShopifyCompanyCreatePayload>
  /** Deletes a company. */
  companyDelete?: Maybe<ShopifyCompanyDeletePayload>
  /** Updates an address on a company location. */
  companyLocationAssignAddress?: Maybe<ShopifyCompanyLocationAssignAddressPayload>
  /** Assigns roles on a company location. */
  companyLocationAssignRoles?: Maybe<ShopifyCompanyLocationAssignRolesPayload>
  /** Creates one or more mappings between a staff member at a shop and a company location. */
  companyLocationAssignStaffMembers?: Maybe<ShopifyCompanyLocationAssignStaffMembersPayload>
  /**
   * Assigns tax exemptions to the company location.
   * @deprecated Use `companyLocationTaxSettingsUpdate` instead.
   */
  companyLocationAssignTaxExemptions?: Maybe<ShopifyCompanyLocationAssignTaxExemptionsPayload>
  /** Creates a company location. */
  companyLocationCreate?: Maybe<ShopifyCompanyLocationCreatePayload>
  /**
   * Creates a tax registration for a company location.
   * @deprecated Use `companyLocationTaxSettingsUpdate` instead.
   */
  companyLocationCreateTaxRegistration?: Maybe<ShopifyCompanyLocationCreateTaxRegistrationPayload>
  /** Deletes a company location. */
  companyLocationDelete?: Maybe<ShopifyCompanyLocationDeletePayload>
  /** Deletes one or more existing mappings between a staff member at a shop and a company location. */
  companyLocationRemoveStaffMembers?: Maybe<ShopifyCompanyLocationRemoveStaffMembersPayload>
  /** Revokes roles on a company location. */
  companyLocationRevokeRoles?: Maybe<ShopifyCompanyLocationRevokeRolesPayload>
  /**
   * Revokes tax exemptions from the company location.
   * @deprecated Use `companyLocationTaxSettingsUpdate` instead.
   */
  companyLocationRevokeTaxExemptions?: Maybe<ShopifyCompanyLocationRevokeTaxExemptionsPayload>
  /**
   * Revokes tax registration on a company location.
   * @deprecated Use `companyLocationTaxSettingsUpdate` instead.
   */
  companyLocationRevokeTaxRegistration?: Maybe<ShopifyCompanyLocationRevokeTaxRegistrationPayload>
  /** Sets the tax settings for a company location. */
  companyLocationTaxSettingsUpdate?: Maybe<ShopifyCompanyLocationTaxSettingsUpdatePayload>
  /** Updates a company location. */
  companyLocationUpdate?: Maybe<ShopifyCompanyLocationUpdatePayload>
  /** Deletes a list of company locations. */
  companyLocationsDelete?: Maybe<ShopifyCompanyLocationsDeletePayload>
  /** Revokes the main contact from the company. */
  companyRevokeMainContact?: Maybe<ShopifyCompanyRevokeMainContactPayload>
  /** Updates a company. */
  companyUpdate?: Maybe<ShopifyCompanyUpdatePayload>
  /** Update or create consent policies in bulk. */
  consentPolicyUpdate?: Maybe<ShopifyConsentPolicyUpdatePayload>
  /** Add tax exemptions for the customer. */
  customerAddTaxExemptions?: Maybe<ShopifyCustomerAddTaxExemptionsPayload>
  /** Create a new customer address. */
  customerAddressCreate?: Maybe<ShopifyCustomerAddressCreatePayload>
  /** Deletes a customer's address. */
  customerAddressDelete?: Maybe<ShopifyCustomerAddressDeletePayload>
  /** Update a customer's address information. */
  customerAddressUpdate?: Maybe<ShopifyCustomerAddressUpdatePayload>
  /**
   * Cancels a pending erasure of a customer's data. Read more [here](https://help.shopify.com/manual/privacy-and-security/privacy/processing-customer-data-requests#cancel-customer-data-erasure).
   *
   * To request an erasure of a customer's data use the [customerRequestDataErasure mutation](https://shopify.dev/api/admin-graphql/unstable/mutations/customerRequestDataErasure).
   */
  customerCancelDataErasure?: Maybe<ShopifyCustomerCancelDataErasurePayload>
  /** Create a new customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data). */
  customerCreate?: Maybe<ShopifyCustomerCreatePayload>
  /** Delete a customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data). */
  customerDelete?: Maybe<ShopifyCustomerDeletePayload>
  /** Update a customer's email marketing information information. */
  customerEmailMarketingConsentUpdate?: Maybe<ShopifyCustomerEmailMarketingConsentUpdatePayload>
  /** Generate an account activation URL for a customer. */
  customerGenerateAccountActivationUrl?: Maybe<ShopifyCustomerGenerateAccountActivationUrlPayload>
  /** Merges two customers. */
  customerMerge?: Maybe<ShopifyCustomerMergePayload>
  /**
   * Creates a vaulted payment method for a customer from duplication data.
   *
   * This data must be obtained from another shop within the same organization.
   *
   * Currently, this only supports Shop Pay payment methods. This is only available for selected partner apps.
   */
  customerPaymentMethodCreateFromDuplicationData?: Maybe<ShopifyCustomerPaymentMethodCreateFromDuplicationDataPayload>
  /**
   * Creates a credit card payment method for a customer using a session id.
   * These values are only obtained through card imports happening from a PCI compliant environment.
   * Please use customerPaymentMethodRemoteCreate if you are not managing credit cards directly.
   */
  customerPaymentMethodCreditCardCreate?: Maybe<ShopifyCustomerPaymentMethodCreditCardCreatePayload>
  /** Updates the credit card payment method for a customer. */
  customerPaymentMethodCreditCardUpdate?: Maybe<ShopifyCustomerPaymentMethodCreditCardUpdatePayload>
  /**
   * Returns encrypted data that can be used to duplicate the payment method in another shop within the same organization.
   *
   * Currently, this only supports Shop Pay payment methods. This is only available for selected partner apps.
   */
  customerPaymentMethodGetDuplicationData?: Maybe<ShopifyCustomerPaymentMethodGetDuplicationDataPayload>
  /**
   * Returns a URL that allows the customer to update a specific payment method.
   *
   * Currently, `customerPaymentMethodGetUpdateUrl` only supports Shop Pay.
   */
  customerPaymentMethodGetUpdateUrl?: Maybe<ShopifyCustomerPaymentMethodGetUpdateUrlPayload>
  /** Creates a PayPal billing agreement for a customer. */
  customerPaymentMethodPaypalBillingAgreementCreate?: Maybe<ShopifyCustomerPaymentMethodPaypalBillingAgreementCreatePayload>
  /** Updates a PayPal billing agreement for a customer. */
  customerPaymentMethodPaypalBillingAgreementUpdate?: Maybe<ShopifyCustomerPaymentMethodPaypalBillingAgreementUpdatePayload>
  /** Create a payment method from remote gateway identifiers. NOTE: This operation processes payment methods asynchronously. The returned payment method will initially have incomplete details. Developers must poll this payment method using customerPaymentMethod query until all payment method details are available, or the payment method is revoked (usually within seconds). */
  customerPaymentMethodRemoteCreate?: Maybe<ShopifyCustomerPaymentMethodRemoteCreatePayload>
  /** Revokes a customer's payment method. */
  customerPaymentMethodRevoke?: Maybe<ShopifyCustomerPaymentMethodRevokePayload>
  /** Sends a link to the customer so they can update a specific payment method. */
  customerPaymentMethodSendUpdateEmail?: Maybe<ShopifyCustomerPaymentMethodSendUpdateEmailPayload>
  /** Remove tax exemptions from a customer. */
  customerRemoveTaxExemptions?: Maybe<ShopifyCustomerRemoveTaxExemptionsPayload>
  /** Replace tax exemptions for a customer. */
  customerReplaceTaxExemptions?: Maybe<ShopifyCustomerReplaceTaxExemptionsPayload>
  /**
   * Enqueues a request to erase customer's data. Read more [here](https://help.shopify.com/manual/privacy-and-security/privacy/processing-customer-data-requests#erase-customer-personal-data).
   *
   * To cancel the data erasure request use the [customerCancelDataErasure mutation](https://shopify.dev/api/admin-graphql/unstable/mutations/customerCancelDataErasure).
   */
  customerRequestDataErasure?: Maybe<ShopifyCustomerRequestDataErasurePayload>
  /** Creates a customer segment members query. */
  customerSegmentMembersQueryCreate?: Maybe<ShopifyCustomerSegmentMembersQueryCreatePayload>
  /** Sends the customer an account invite email. */
  customerSendAccountInviteEmail?: Maybe<ShopifyCustomerSendAccountInviteEmailPayload>
  /**
   * Creates or updates a customer in a single mutation.
   *
   * Use this mutation when syncing information from an external data source into Shopify.
   *
   * This mutation can be used to create a new customer, update an existing customer by id, or
   * upsert a customer by a unique key (email or phone).
   *
   * To create a new customer omit the `identifier` argument.
   * To update an existing customer, include the `identifier` with the id of the customer to update.
   *
   * To perform an 'upsert' by unique key (email or phone)
   * use the `identifier` argument to upsert a customer by a unique key (email or phone). If a customer
   * with the specified unique key exists, it will be updated. If not, a new customer will be created with
   * that unique key.
   *
   * As of API version 2022-10, apps using protected customer data must meet the
   * protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data)
   *
   * Any list field (e.g.
   * [addresses](https://shopify.dev/api/admin-graphql/unstable/input-objects/MailingAddressInput),
   * will be updated so that all included entries are either created or updated, and all existing entries not
   * included will be deleted.
   *
   * All other fields will be updated to the value passed. Omitted fields will not be updated.
   */
  customerSet?: Maybe<ShopifyCustomerSetPayload>
  /** Update a customer's SMS marketing consent information. */
  customerSmsMarketingConsentUpdate?: Maybe<ShopifyCustomerSmsMarketingConsentUpdatePayload>
  /** Update a customer's attributes. As of API version 2022-10, apps using protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data). */
  customerUpdate?: Maybe<ShopifyCustomerUpdatePayload>
  /** Updates a customer's default address. */
  customerUpdateDefaultAddress?: Maybe<ShopifyCustomerUpdateDefaultAddressPayload>
  /** Opt out a customer from data sale. */
  dataSaleOptOut?: Maybe<ShopifyDataSaleOptOutPayload>
  /**
   * Creates a delegate access token.
   *
   * To learn more about creating delegate access tokens, refer to
   * [Delegate OAuth access tokens to subsystems](https://shopify.dev/docs/apps/build/authentication-authorization/access-tokens/use-delegate-tokens).
   */
  delegateAccessTokenCreate?: Maybe<ShopifyDelegateAccessTokenCreatePayload>
  /** Destroys a delegate access token. */
  delegateAccessTokenDestroy?: Maybe<ShopifyDelegateAccessTokenDestroyPayload>
  /** Activates and deactivates delivery customizations. */
  deliveryCustomizationActivation?: Maybe<ShopifyDeliveryCustomizationActivationPayload>
  /** Creates a delivery customization. */
  deliveryCustomizationCreate?: Maybe<ShopifyDeliveryCustomizationCreatePayload>
  /** Creates a delivery customization. */
  deliveryCustomizationDelete?: Maybe<ShopifyDeliveryCustomizationDeletePayload>
  /** Updates a delivery customization. */
  deliveryCustomizationUpdate?: Maybe<ShopifyDeliveryCustomizationUpdatePayload>
  /** Create a delivery profile. */
  deliveryProfileCreate?: Maybe<ShopifyDeliveryProfileCreatePayload>
  /** Enqueue the removal of a delivery profile. */
  deliveryProfileRemove?: Maybe<ShopifyDeliveryProfileRemovePayload>
  /** Update a delivery profile. */
  deliveryProfileUpdate?: Maybe<ShopifyDeliveryProfileUpdatePayload>
  /** Updates the delivery promise participants by adding or removing owners based on a branded promise handle. */
  deliveryPromiseParticipantsUpdate?: Maybe<ShopifyDeliveryPromiseParticipantsUpdatePayload>
  /** Creates or updates a delivery promise provider. Currently restricted to select approved delivery promise partners. */
  deliveryPromiseProviderUpsert?: Maybe<ShopifyDeliveryPromiseProviderUpsertPayload>
  /** Set the delivery settings for a shop. */
  deliverySettingUpdate?: Maybe<ShopifyDeliverySettingUpdatePayload>
  /** Assigns a location as the shipping origin while using legacy compatibility mode for multi-location delivery profiles. */
  deliveryShippingOriginAssign?: Maybe<ShopifyDeliveryShippingOriginAssignPayload>
  /** Activates an automatic discount. */
  discountAutomaticActivate?: Maybe<ShopifyDiscountAutomaticActivatePayload>
  /**
   * Creates an automatic discount that's managed by an app.
   * Use this mutation with [Shopify Functions](https://shopify.dev/docs/apps/build/functions)
   * when you need advanced, custom, or dynamic discount capabilities that aren't supported by
   * [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).
   *
   * For example, use this mutation to create an automatic discount using an app's
   * "Volume" discount type that applies a percentage
   * off when customers purchase more than the minimum quantity of a product. For an example implementation,
   * refer to [our tutorial](https://shopify.dev/docs/apps/build/discounts/build-discount-function).
   *
   * > Note:
   * > To create code discounts with custom logic, use the
   * [`discountCodeAppCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeAppCreate)
   * mutation.
   */
  discountAutomaticAppCreate?: Maybe<ShopifyDiscountAutomaticAppCreatePayload>
  /**
   * Updates an existing automatic discount that's managed by an app using
   * [Shopify Functions](https://shopify.dev/docs/apps/build/functions).
   * Use this mutation when you need advanced, custom, or
   * dynamic discount capabilities that aren't supported by
   * [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).
   *
   * For example, use this mutation to update a new "Volume" discount type that applies a percentage
   * off when customers purchase more than the minimum quantity of a product. For an example implementation,
   * refer to [our tutorial](https://shopify.dev/docs/apps/build/discounts/build-discount-function).
   *
   * > Note:
   * > To update code discounts with custom logic, use the
   * [`discountCodeAppUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeAppUpdate)
   * mutation instead.
   */
  discountAutomaticAppUpdate?: Maybe<ShopifyDiscountAutomaticAppUpdatePayload>
  /**
   * Creates an
   * [amount off discount](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount)
   * that's automatically applied on a cart and at checkout.
   *
   * > Note:
   * > To create code discounts, use the
   * [`discountCodeBasicCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeBasicCreate)
   * mutation.
   */
  discountAutomaticBasicCreate?: Maybe<ShopifyDiscountAutomaticBasicCreatePayload>
  /**
   * Updates an existing
   * [amount off discount](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount)
   * that's automatically applied on a cart and at checkout.
   *
   * > Note:
   * > To update code discounts, use the
   * [`discountCodeBasicUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeBasicUpdate)
   * mutation instead.
   */
  discountAutomaticBasicUpdate?: Maybe<ShopifyDiscountAutomaticBasicUpdatePayload>
  /**
   * Asynchronously delete automatic discounts in bulk if a `search` or `saved_search_id` argument is provided or if a
   * maximum discount threshold is reached (1,000). Otherwise, deletions will occur inline.
   * **Warning:** All automatic discounts will be deleted if a blank `search` argument is provided.
   */
  discountAutomaticBulkDelete?: Maybe<ShopifyDiscountAutomaticBulkDeletePayload>
  /**
   * Creates a
   * [buy X get Y discount (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
   * that's automatically applied on a cart and at checkout.
   *
   * > Note:
   * > To create code discounts, use the
   * [`discountCodeBxgyCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeBxgyCreate)
   * mutation.
   */
  discountAutomaticBxgyCreate?: Maybe<ShopifyDiscountAutomaticBxgyCreatePayload>
  /**
   * Updates an existing
   * [buy X get Y discount (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
   * that's automatically applied on a cart and at checkout.
   *
   * > Note:
   * > To update code discounts, use the
   * [`discountCodeBxgyUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeBxgyUpdate)
   * mutation instead.
   */
  discountAutomaticBxgyUpdate?: Maybe<ShopifyDiscountAutomaticBxgyUpdatePayload>
  /** Deactivates an automatic discount. */
  discountAutomaticDeactivate?: Maybe<ShopifyDiscountAutomaticDeactivatePayload>
  /**
   * Deletes an existing automatic discount from the store, permanently removing it from all future order calculations. This mutation provides a clean way to remove promotional campaigns that are no longer needed.
   *
   * For example, when a seasonal promotion ends or a flash sale concludes, merchants can use this mutation to ensure the discount no longer applies to new orders while preserving historical order data.
   *
   * Use `DiscountAutomaticDelete` to:
   * - Remove expired promotional campaigns
   * - Clean up test discounts during development
   * - Delete automatic discounts that conflict with new promotions
   * - Maintain a clean discount configuration
   *
   * The mutation returns the ID of the deleted discount for confirmation and any validation errors if the deletion cannot be completed. Once deleted, the automatic discount will no longer appear in discount lists or apply to new customer orders.
   */
  discountAutomaticDelete?: Maybe<ShopifyDiscountAutomaticDeletePayload>
  /**
   * Creates a
   * [free shipping discount](https://help.shopify.com/manual/discounts/discount-types/free-shipping)
   * that's automatically applied on a cart and at checkout.
   *
   * > Note:
   * > To create code discounts, use the
   * [`discountCodeFreeShippingCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeFreeShippingCreate)
   * mutation.
   */
  discountAutomaticFreeShippingCreate?: Maybe<ShopifyDiscountAutomaticFreeShippingCreatePayload>
  /**
   * Updates an existing
   * [free shipping discount](https://help.shopify.com/manual/discounts/discount-types/free-shipping)
   * that's automatically applied on a cart and at checkout.
   *
   * > Note:
   * > To update code discounts, use the
   * [`discountCodeFreeShippingUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountCodeFreeShippingUpdate)
   * mutation instead.
   */
  discountAutomaticFreeShippingUpdate?: Maybe<ShopifyDiscountAutomaticFreeShippingUpdatePayload>
  /**
   * Activates a previously created code discount, making it available for customers to use during checkout. This mutation transitions inactive discount codes into an active state where they can be applied to orders.
   *
   * For example, after creating a "SUMMER20" discount code but leaving it inactive during setup, merchants can activate it when ready to launch their summer promotion campaign.
   *
   * Use `DiscountCodeActivate` to:
   * - Launch scheduled promotional campaigns
   * - Reactivate previously paused discount codes
   * - Enable discount codes after configuration changes
   * - Control the timing of discount availability
   *
   * The mutation returns the updated discount code node with its new active status and handles any validation errors that might prevent activation, such as conflicting discount rules or invalid date ranges.
   */
  discountCodeActivate?: Maybe<ShopifyDiscountCodeActivatePayload>
  /**
   * Creates a code discount. The discount type must be provided by an app extension that uses [Shopify Functions](https://shopify.dev/docs/apps/build/functions). Functions can implement [order](https://shopify.dev/docs/api/functions/reference/order-discounts), [product](https://shopify.dev/docs/api/functions/reference/product-discounts), or [shipping](https://shopify.dev/docs/api/functions/reference/shipping-discounts) discount functions. Use this mutation with Shopify Functions when you need custom logic beyond [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).
   *
   * For example, use this mutation to create a code discount using an app's "Volume" discount type that applies a percentage off when customers purchase more than the minimum quantity
   * of a product. For an example implementation, refer to [our tutorial](https://shopify.dev/docs/apps/build/discounts/build-discount-function).
   *
   * > Note:
   * > To create automatic discounts with custom logic, use [`discountAutomaticAppCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticAppCreate).
   */
  discountCodeAppCreate?: Maybe<ShopifyDiscountCodeAppCreatePayload>
  /**
   * Updates a code discount, where the discount type is provided by an app extension that uses [Shopify Functions](https://shopify.dev/docs/apps/build/functions). Use this mutation when you need advanced, custom, or dynamic discount capabilities that aren't supported by [Shopify's native discount types](https://help.shopify.com/manual/discounts/discount-types).
   *
   * > Note:
   * > To update automatic discounts, use [`discountAutomaticAppUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticAppUpdate).
   */
  discountCodeAppUpdate?: Maybe<ShopifyDiscountCodeAppUpdatePayload>
  /**
   * Creates an [amount off discount](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount) that's applied on a cart and at checkout when a customer enters a code. Amount off discounts can be a percentage off or a fixed amount off.
   *
   * > Note:
   * > To create discounts that are automatically applied on a cart and at checkout, use the [`discountAutomaticBasicCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticBasicCreate) mutation.
   */
  discountCodeBasicCreate?: Maybe<ShopifyDiscountCodeBasicCreatePayload>
  /**
   * Updates an [amount off discount](https://help.shopify.com/manual/discounts/discount-types/percentage-fixed-amount) that's applied on a cart and at checkout when a customer enters a code. Amount off discounts can be a percentage off or a fixed amount off.
   *
   * > Note:
   * > To update discounts that are automatically applied on a cart and at checkout, use the [`discountAutomaticBasicUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticBasicUpdate) mutation.
   */
  discountCodeBasicUpdate?: Maybe<ShopifyDiscountCodeBasicUpdatePayload>
  /**
   * Activates multiple [code discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes) asynchronously using one of the following:
   * - A search query
   * - A saved search ID
   * - A list of discount code IDs
   *
   * For example, you can activate discounts for all codes that match a search criteria, or activate a predefined set of discount codes.
   */
  discountCodeBulkActivate?: Maybe<ShopifyDiscountCodeBulkActivatePayload>
  /**
   * Deactivates multiple [code-based discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes) asynchronously using one of the following:
   * - A search query
   * - A saved search ID
   * - A list of discount code IDs
   *
   * For example, you can deactivate discounts for all codes that match a search criteria, or deactivate a predefined set of discount codes.
   */
  discountCodeBulkDeactivate?: Maybe<ShopifyDiscountCodeBulkDeactivatePayload>
  /**
   * Deletes multiple [code-based discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes) asynchronously using one of the following:
   * - A search query
   * - A saved search ID
   * - A list of discount code IDs
   *
   * For example, you can delete discounts for all codes that match a search criteria, or delete a predefined set of discount codes.
   */
  discountCodeBulkDelete?: Maybe<ShopifyDiscountCodeBulkDeletePayload>
  /**
   * Creates a
   * [buy X get Y discount (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
   * that's applied on a cart and at checkout when a customer enters a code.
   *
   * > Note:
   * > To create discounts that are automatically applied on a cart and at checkout, use the
   * [`discountAutomaticBxgyCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticBxgyCreate)
   * mutation.
   */
  discountCodeBxgyCreate?: Maybe<ShopifyDiscountCodeBxgyCreatePayload>
  /**
   * Updates a
   * [buy X get Y discount (BXGY)](https://help.shopify.com/manual/discounts/discount-types/buy-x-get-y)
   * that's applied on a cart and at checkout when a customer enters a code.
   *
   * > Note:
   * > To update discounts that are automatically applied on a cart and at checkout, use the
   * [`discountAutomaticBxgyUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticBxgyUpdate)
   * mutation.
   */
  discountCodeBxgyUpdate?: Maybe<ShopifyDiscountCodeBxgyUpdatePayload>
  /**
   * Temporarily suspends a code discount without permanently removing it from the store. Deactivation allows merchants to pause promotional campaigns while preserving the discount configuration for potential future use.
   *
   * For example, when a flash sale needs to end immediately or a discount code requires temporary suspension due to inventory issues, merchants can deactivate it to stop new redemptions while keeping the discount structure intact.
   *
   * Use `DiscountCodeDeactivate` to:
   * - Pause active promotional campaigns timely
   * - Temporarily suspend problematic discount codes
   * - Control discount availability during inventory shortages
   * - Maintain discount history while stopping usage
   *
   * Deactivated discounts remain in the system and can be reactivated later, unlike deletion which persistently removes the code. Customers attempting to use deactivated codes will receive appropriate error messages.
   */
  discountCodeDeactivate?: Maybe<ShopifyDiscountCodeDeactivatePayload>
  /**
   * Removes a code discount from the store, making it permanently unavailable for customer use. This mutation provides a clean way to eliminate discount codes that are no longer needed or have been replaced.
   *
   * For example, when a seasonal promotion ends or a discount code has been compromised, merchants can delete it entirely rather than just deactivating it, ensuring customers cannot attempt to use expired promotional codes.
   *
   * Use `DiscountCodeDelete` to:
   * - persistently remove outdated promotional codes
   * - Clean up discount code lists after campaigns end
   * - Eliminate compromised or leaked discount codes
   * - Maintain organized discount management
   *
   * Once deleted, the discount code cannot be recovered and any customer attempts to use it will fail. This differs from deactivation, which preserves the code for potential future reactivation.
   */
  discountCodeDelete?: Maybe<ShopifyDiscountCodeDeletePayload>
  /**
   * Creates an [free shipping discount](https://help.shopify.com/manual/discounts/discount-types/free-shipping) that's applied on a cart and at checkout when a customer enters a code.
   *
   * > Note:
   * > To create discounts that are automatically applied on a cart and at checkout, use the [`discountAutomaticFreeShippingCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticFreeShippingCreate) mutation.
   */
  discountCodeFreeShippingCreate?: Maybe<ShopifyDiscountCodeFreeShippingCreatePayload>
  /**
   * Updates a [free shipping discount](https://help.shopify.com/manual/discounts/discount-types/free-shipping) that's applied on a cart and at checkout when a customer enters a code.
   *
   * > Note:
   * > To update a free shipping discount that's automatically applied on a cart and at checkout, use the [`discountAutomaticFreeShippingUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/discountAutomaticFreeShippingUpdate) mutation.
   */
  discountCodeFreeShippingUpdate?: Maybe<ShopifyDiscountCodeFreeShippingUpdatePayload>
  /**
   * Asynchronously delete
   * [discount codes](https://help.shopify.com/manual/discounts/discount-types#discount-codes)
   * in bulk that customers can use to redeem a discount.
   */
  discountCodeRedeemCodeBulkDelete?: Maybe<ShopifyDiscountCodeRedeemCodeBulkDeletePayload>
  /**
   * Asynchronously add
   * [discount codes](https://help.shopify.com/manual/discounts/discount-types#discount-codes)
   * in bulk that customers can use to redeem a discount. You can use the `discountRedeemCodeBulkAdd` mutation
   * to automate the distribution of discount codes through emails or other
   * marketing channels.
   */
  discountRedeemCodeBulkAdd?: Maybe<ShopifyDiscountRedeemCodeBulkAddPayload>
  /** Updates a dispute evidence. */
  disputeEvidenceUpdate?: Maybe<ShopifyDisputeEvidenceUpdatePayload>
  /** Adds tags to multiple draft orders. */
  draftOrderBulkAddTags?: Maybe<ShopifyDraftOrderBulkAddTagsPayload>
  /** Deletes multiple draft orders. */
  draftOrderBulkDelete?: Maybe<ShopifyDraftOrderBulkDeletePayload>
  /** Removes tags from multiple draft orders. */
  draftOrderBulkRemoveTags?: Maybe<ShopifyDraftOrderBulkRemoveTagsPayload>
  /**
   * Calculates the properties of a draft order. Useful for determining information
   * such as total taxes or price without actually creating a draft order.
   */
  draftOrderCalculate?: Maybe<ShopifyDraftOrderCalculatePayload>
  /**
   * Completes a [draft order](https://shopify.dev/docs/api/admin-graphql/latest/objects/DraftOrder) and
   * converts it into a [regular order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order).
   * The order appears in the merchant's orders list, and the customer can be notified about their order.
   *
   * Use the `draftOrderComplete` mutation when a merchant is ready to finalize a draft order and create a real
   * order in their store. The `draftOrderComplete` mutation also supports sales channel attribution for tracking
   * order sources using the [`sourceName`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderComplete#arguments-sourceName)
   * argument, [cart validation](https://shopify.dev/docs/apps/build/checkout/cart-checkout-validation)
   * controls for app integrations, and detailed error reporting for failed completions.
   *
   * You can complete a draft order with different [payment scenarios](https://help.shopify.com/manual/fulfillment/managing-orders/payments):
   *
   * - Mark the order as paid immediately.
   * - Set the order as payment pending using [payment terms](https://shopify.dev/docs/api/admin-graphql/latest/objects/PaymentTerms).
   * - Specify a custom payment amount.
   * - Select a specific payment gateway.
   *
   * > Note:
   * > When completing a draft order, inventory is [reserved](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps#inventory-states)
   * for the items in the order. This means the items will no longer be available for other customers to purchase.
   * Make sure to verify inventory availability before completing the draft order.
   */
  draftOrderComplete?: Maybe<ShopifyDraftOrderCompletePayload>
  /**
   * Creates a [draft order](https://shopify.dev/docs/api/admin-graphql/latest/objects/DraftOrder)
   * with attributes such as customer information, line items, shipping and billing addresses, and payment terms.
   * Draft orders are useful for merchants that need to:
   *
   * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
   * - Send invoices to customers with a secure checkout link.
   * - Use custom items to represent additional costs or products not in inventory.
   * - Re-create orders manually from active sales channels.
   * - Sell products at discount or wholesale rates.
   * - Take pre-orders.
   *
   * After creating a draft order, you can:
   * - Send an invoice to the customer using the [`draftOrderInvoiceSend`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderInvoiceSend) mutation.
   * - Complete the draft order using the [`draftOrderComplete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderComplete) mutation.
   * - Update the draft order using the [`draftOrderUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderUpdate) mutation.
   * - Duplicate a draft order using the [`draftOrderDuplicate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderDuplicate) mutation.
   * - Delete the draft order using the [`draftOrderDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderDelete) mutation.
   *
   * > Note:
   * > When you create a draft order, you can't [reserve or hold inventory](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps#inventory-states) for the items in the order by default.
   * > However, you can reserve inventory using the [`reserveInventoryUntil`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderCreate#arguments-input.fields.reserveInventoryUntil) input.
   */
  draftOrderCreate?: Maybe<ShopifyDraftOrderCreatePayload>
  /** Creates a draft order from order. */
  draftOrderCreateFromOrder?: Maybe<ShopifyDraftOrderCreateFromOrderPayload>
  /** Deletes a draft order. */
  draftOrderDelete?: Maybe<ShopifyDraftOrderDeletePayload>
  /** Duplicates a draft order. */
  draftOrderDuplicate?: Maybe<ShopifyDraftOrderDuplicatePayload>
  /** Previews a draft order invoice email. */
  draftOrderInvoicePreview?: Maybe<ShopifyDraftOrderInvoicePreviewPayload>
  /** Sends an email invoice for a draft order. */
  draftOrderInvoiceSend?: Maybe<ShopifyDraftOrderInvoiceSendPayload>
  /**
   * Updates a draft order.
   *
   * If a checkout has been started for a draft order, any update to the draft will unlink the checkout. Checkouts
   * are created but not immediately completed when opening the merchant credit card modal in the admin, and when a
   * buyer opens the invoice URL. This is usually fine, but there is an edge case where a checkout is in progress
   * and the draft is updated before the checkout completes. This will not interfere with the checkout and order
   * creation, but if the link from draft to checkout is broken the draft will remain open even after the order is
   * created.
   */
  draftOrderUpdate?: Maybe<ShopifyDraftOrderUpdatePayload>
  /**
   * Updates the server pixel to connect to an EventBridge endpoint.
   * Running this mutation deletes any previous subscriptions for the server pixel.
   */
  eventBridgeServerPixelUpdate?: Maybe<ShopifyEventBridgeServerPixelUpdatePayload>
  /**
   * Creates a new Amazon EventBridge webhook subscription.
   *
   * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
   * @deprecated Use `webhookSubscriptionCreate` instead.
   */
  eventBridgeWebhookSubscriptionCreate?: Maybe<ShopifyEventBridgeWebhookSubscriptionCreatePayload>
  /**
   * Updates an Amazon EventBridge webhook subscription.
   *
   * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
   * @deprecated Use `webhookSubscriptionUpdate` instead.
   */
  eventBridgeWebhookSubscriptionUpdate?: Maybe<ShopifyEventBridgeWebhookSubscriptionUpdatePayload>
  /** Acknowledges file update failure by resetting FAILED status to READY and clearing any media errors. */
  fileAcknowledgeUpdateFailed?: Maybe<ShopifyFileAcknowledgeUpdateFailedPayload>
  /**
   * Creates file assets for a store from external URLs or files that were previously uploaded using the
   * [`stagedUploadsCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/stageduploadscreate)
   * mutation.
   *
   * Use the `fileCreate` mutation to add various types of media and documents to your store. These files are added to the
   * [**Files** page](https://shopify.com/admin/settings/files) in the Shopify admin and can be referenced by other
   * resources in your store.
   *
   * The `fileCreate` mutation supports multiple file types:
   *
   * - **Images**: Product photos, variant images, and general store imagery
   * - **Videos**: Shopify-hosted videos for product demonstrations and marketing
   * - **External videos**: YouTube and Vimeo videos for enhanced product experiences
   * - **3D models**: Interactive 3D representations of products
   * - **Generic files**: PDFs, documents, and other file types for store resources
   *
   * The mutation handles duplicate filenames using configurable resolution modes that automatically append UUIDs,
   * replace existing files, or raise errors when conflicts occur.
   *
   * > Note:
   * > Files are processed asynchronously. Check the
   * > [`fileStatus`](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/File#fields-fileStatus)
   * > field to monitor processing completion. The maximum number of files that can be created in a single batch is 250.
   *
   * After creating files, you can make subsequent updates using the following mutations:
   *
   * - [`fileUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fileUpdate):
   * Update file properties such as alt text or replace file contents while preserving the same URL.
   * - [`fileDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fileDelete):
   * Remove files from your store when they are no longer needed.
   *
   * To list all files in your store, use the
   * [`files`](https://shopify.dev/docs/api/admin-graphql/latest/queries/files) query.
   *
   * Learn how to manage
   * [product media and file assets](https://shopify.dev/docs/apps/build/online-store/product-media)
   * in your app.
   */
  fileCreate?: Maybe<ShopifyFileCreatePayload>
  /**
   * Deletes file assets that were previously uploaded to your store.
   *
   * Use the `fileDelete` mutation to permanently remove media and file assets from your store when they are no longer needed.
   * This mutation handles the complete removal of files from both your store's file library and any associated references
   * to products or other resources.
   *
   * The `fileDelete` mutation supports removal of multiple file types:
   *
   * - **Images**: Product photos, variant images, and general store imagery
   * - **Videos**: Shopify-hosted videos for product demonstrations and marketing content
   * - **External Videos**: YouTube and Vimeo videos linked to your products
   * - **3D models**: Interactive 3D representations of products
   * - **Generic files**: PDFs, documents, and other file types stored in your
   * [**Files** page](https://shopify.com/admin/settings/files)
   *
   * When you delete files that are referenced by products, the mutation automatically removes those references and
   * reorders any remaining media to maintain proper positioning. Product file references are database relationships
   * managed through a media reference system, not just links in product descriptions. The Shopify admin provides a UI
   * to manage these relationships, and when files are deleted, the system automatically cleans up all references.
   * Files that are currently being processed by other operations are rejected to prevent conflicts.
   *
   * > Caution:
   * > File deletion is permanent and can't be undone. When you delete a file that's being used in your store,
   * > it will immediately stop appearing wherever it was displayed. For example, if you delete a product image,
   * > that product will show a broken image or placeholder on your storefront and in the admin. The same applies
   * > to any other files linked from themes, blog posts, or pages. Before deleting files, you can use the
   * > [`files` query](https://shopify.dev/api/admin-graphql/latest/queries/files) to list and review
   * > your store's file assets.
   *
   * Learn how to manage
   * [product media and file assets](https://shopify.dev/docs/apps/build/online-store/product-media)
   * in your app.
   */
  fileDelete?: Maybe<ShopifyFileDeletePayload>
  /**
   * Updates properties, content, and metadata associated with an existing file asset that has already been uploaded to Shopify.
   *
   * Use the `fileUpdate` mutation to modify various aspects of files already stored in your store.
   * Files can be updated individually or in batches.
   *
   * The `fileUpdate` mutation supports updating multiple file properties:
   *
   * - **Alt text**: Update accessibility descriptions for images and other media.
   * - **File content**: Replace image or generic file content while maintaining the same URL.
   * - **Filename**: Modify file names (extension must match the original).
   * - **Product references**: Add or remove associations between files and products. Removing file-product associations
   * deletes the file from the product's media gallery and clears the image from any product variants that were using it.
   *
   * The mutation handles different file types with specific capabilities:
   *
   * - **Images**: Update preview images, original source, filename, and alt text.
   * - **Generic files**: Update original source, filename, and alt text.
   * - **Videos and 3D models**: Update alt text and product references.
   *
   * > Note:
   * > Files must be in `ready` state before they can be updated. The mutation includes file locking to prevent
   * > conflicts during updates. You can't simultaneously update both `originalSource` and `previewImageSource`.
   *
   * After updating files, you can use related mutations for additional file management:
   *
   * - [`fileCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fileCreate):
   * Create new file assets from external URLs or staged uploads.
   * - [`fileDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fileDelete):
   * Remove files from your store when they are no longer needed.
   *
   * Learn how to manage
   * [product media and file assets](https://shopify.dev/docs/apps/build/online-store/product-media)
   * in your app.
   */
  fileUpdate?: Maybe<ShopifyFileUpdatePayload>
  /** Generates a signature for a Flow action payload. */
  flowGenerateSignature?: Maybe<ShopifyFlowGenerateSignaturePayload>
  /** Triggers any workflows that begin with the trigger specified in the request body. To learn more, refer to [_Create Shopify Flow triggers_](https://shopify.dev/apps/flow/triggers). */
  flowTriggerReceive?: Maybe<ShopifyFlowTriggerReceivePayload>
  /** Cancels a fulfillment. */
  fulfillmentCancel?: Maybe<ShopifyFulfillmentCancelPayload>
  /** Creates a fulfillment constraint rule and its metafield. */
  fulfillmentConstraintRuleCreate?: Maybe<ShopifyFulfillmentConstraintRuleCreatePayload>
  /** Deletes a fulfillment constraint rule and its metafields. */
  fulfillmentConstraintRuleDelete?: Maybe<ShopifyFulfillmentConstraintRuleDeletePayload>
  /** Update a fulfillment constraint rule. */
  fulfillmentConstraintRuleUpdate?: Maybe<ShopifyFulfillmentConstraintRuleUpdatePayload>
  /**
   * Creates a fulfillment for one or many fulfillment orders.
   * The fulfillment orders are associated with the same order and are assigned to the same location.
   */
  fulfillmentCreate?: Maybe<ShopifyFulfillmentCreatePayload>
  /**
   * Creates a fulfillment for one or many fulfillment orders.
   * The fulfillment orders are associated with the same order and are assigned to the same location.
   * @deprecated Use `fulfillmentCreate` instead.
   */
  fulfillmentCreateV2?: Maybe<ShopifyFulfillmentCreateV2Payload>
  /** Creates a fulfillment event for a specified fulfillment. */
  fulfillmentEventCreate?: Maybe<ShopifyFulfillmentEventCreatePayload>
  /** Accept a cancellation request sent to a fulfillment service for a fulfillment order. */
  fulfillmentOrderAcceptCancellationRequest?: Maybe<ShopifyFulfillmentOrderAcceptCancellationRequestPayload>
  /** Accepts a fulfillment request sent to a fulfillment service for a fulfillment order. */
  fulfillmentOrderAcceptFulfillmentRequest?: Maybe<ShopifyFulfillmentOrderAcceptFulfillmentRequestPayload>
  /** Marks a fulfillment order as canceled. */
  fulfillmentOrderCancel?: Maybe<ShopifyFulfillmentOrderCancelPayload>
  /**
   * Marks an in-progress fulfillment order as incomplete,
   * indicating the fulfillment service is unable to ship any remaining items,
   * and closes the fulfillment request.
   *
   * This mutation can only be called for fulfillment orders that meet the following criteria:
   *   - Assigned to a fulfillment service location,
   *   - The fulfillment request has been accepted,
   *   - The fulfillment order status is `IN_PROGRESS`.
   *
   * This mutation can only be called by the fulfillment service app that accepted the fulfillment request.
   * Calling this mutation returns the control of the fulfillment order to the merchant, allowing them to
   * move the fulfillment order line items to another location and fulfill from there,
   * remove and refund the line items, or to request fulfillment from the same fulfillment service again.
   *
   * Closing a fulfillment order is explained in
   * [the fulfillment service guide](https://shopify.dev/apps/build/orders-fulfillment/fulfillment-service-apps/build-for-fulfillment-services#step-7-optional-close-a-fulfillment-order).
   */
  fulfillmentOrderClose?: Maybe<ShopifyFulfillmentOrderClosePayload>
  /**
   * Applies a fulfillment hold on a fulfillment order.
   *
   * As of the
   * [2025-01 API version](https://shopify.dev/changelog/apply-multiple-holds-to-a-single-fulfillment-order),
   * the mutation can be successfully executed on fulfillment orders that are already on hold.
   * To place multiple holds on a fulfillment order, apps need to supply the
   * [handle](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentHold#field-handle)
   * field. Each app can place up to
   * 10 active holds
   * per fulfillment order. If an app attempts to place more than this, the mutation will return
   * [a user error indicating that the limit has been reached](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderHoldUserErrorCode#value-fulfillmentorderholdlimitreached).
   * The app would need to release one of its existing holds before being able to apply a new one.
   */
  fulfillmentOrderHold?: Maybe<ShopifyFulfillmentOrderHoldPayload>
  /**
   * Mark line items associated with a fulfillment order as being ready for pickup by a customer.
   *
   * Sends a Ready For Pickup notification to the customer to let them know that their order is ready
   * to be picked up.
   */
  fulfillmentOrderLineItemsPreparedForPickup?: Maybe<ShopifyFulfillmentOrderLineItemsPreparedForPickupPayload>
  /**
   * Merges a set or multiple sets of fulfillment orders together into one based on
   * line item inputs and quantities.
   */
  fulfillmentOrderMerge?: Maybe<ShopifyFulfillmentOrderMergePayload>
  /**
   * Changes the location which is assigned to fulfill a number of unfulfilled fulfillment order line items.
   *
   * Moving a fulfillment order will fail in the following circumstances:
   *
   * * The fulfillment order is closed.
   * * The destination location doesn't stock the requested inventory item.
   * * The API client doesn't have the correct permissions.
   *
   * Line items which have already been fulfilled can't be re-assigned
   * and will always remain assigned to the original location.
   *
   * You can't change the assigned location while a fulfillment order has a
   * [request status](https://shopify.dev/docs/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus)
   * of `SUBMITTED`, `ACCEPTED`, `CANCELLATION_REQUESTED`, or `CANCELLATION_REJECTED`.
   * These request statuses mean that a fulfillment order is awaiting action by a fulfillment service
   * and can't be re-assigned without first having the fulfillment service accept a cancellation request.
   * This behavior is intended to prevent items from being fulfilled by multiple locations or fulfillment services.
   *
   * ### How re-assigning line items affects fulfillment orders
   *
   * **First scenario:** Re-assign all line items belonging to a fulfillment order to a new location.
   *
   * In this case, the
   * [assignedLocation](https://shopify.dev/docs/api/admin-graphql/latest/objects/fulfillmentorder#field-fulfillmentorder-assignedlocation)
   * of the original fulfillment order will be updated to the new location.
   *
   * **Second scenario:** Re-assign a subset of the line items belonging to a fulfillment order to a new location.
   * You can specify a subset of line items using the `fulfillmentOrderLineItems` parameter
   * (available as of the `2023-04` API version),
   * or specify that the original fulfillment order contains line items which have already been fulfilled.
   *
   * If the new location is already assigned to another active fulfillment order, on the same order, then
   * a new fulfillment order is created. The existing fulfillment order is closed and line items are recreated
   * in a new fulfillment order.
   */
  fulfillmentOrderMove?: Maybe<ShopifyFulfillmentOrderMovePayload>
  /** Marks a scheduled fulfillment order as open. */
  fulfillmentOrderOpen?: Maybe<ShopifyFulfillmentOrderOpenPayload>
  /** Rejects a cancellation request sent to a fulfillment service for a fulfillment order. */
  fulfillmentOrderRejectCancellationRequest?: Maybe<ShopifyFulfillmentOrderRejectCancellationRequestPayload>
  /** Rejects a fulfillment request sent to a fulfillment service for a fulfillment order. */
  fulfillmentOrderRejectFulfillmentRequest?: Maybe<ShopifyFulfillmentOrderRejectFulfillmentRequestPayload>
  /** Releases the fulfillment hold on a fulfillment order. */
  fulfillmentOrderReleaseHold?: Maybe<ShopifyFulfillmentOrderReleaseHoldPayload>
  /**
   * Reschedules a scheduled fulfillment order.
   *
   * Updates the value of the `fulfillAt` field on a scheduled fulfillment order.
   *
   * The fulfillment order will be marked as ready for fulfillment at this date and time.
   */
  fulfillmentOrderReschedule?: Maybe<ShopifyFulfillmentOrderReschedulePayload>
  /** Splits a fulfillment order or orders based on line item inputs and quantities. */
  fulfillmentOrderSplit?: Maybe<ShopifyFulfillmentOrderSplitPayload>
  /** Sends a cancellation request to the fulfillment service of a fulfillment order. */
  fulfillmentOrderSubmitCancellationRequest?: Maybe<ShopifyFulfillmentOrderSubmitCancellationRequestPayload>
  /** Sends a fulfillment request to the fulfillment service of a fulfillment order. */
  fulfillmentOrderSubmitFulfillmentRequest?: Maybe<ShopifyFulfillmentOrderSubmitFulfillmentRequestPayload>
  /** Sets the latest date and time by which the fulfillment orders need to be fulfilled. */
  fulfillmentOrdersSetFulfillmentDeadline?: Maybe<ShopifyFulfillmentOrdersSetFulfillmentDeadlinePayload>
  /**
   * Creates a fulfillment service.
   *
   * ## Fulfillment service location
   *
   * When creating a fulfillment service, a new location will be automatically created on the shop
   * and will be associated with this fulfillment service.
   * This location will be named after the fulfillment service and inherit the shop's address.
   *
   * If you are using API version `2023-10` or later, and you need to specify custom attributes for the fulfillment service location
   * (for example, to change its address to a country different from the shop's country),
   * use the
   * [LocationEdit](https://shopify.dev/api/admin-graphql/latest/mutations/locationEdit)
   * mutation after creating the fulfillment service.
   */
  fulfillmentServiceCreate?: Maybe<ShopifyFulfillmentServiceCreatePayload>
  /** Deletes a fulfillment service. */
  fulfillmentServiceDelete?: Maybe<ShopifyFulfillmentServiceDeletePayload>
  /**
   * Updates a fulfillment service.
   *
   * If you are using API version `2023-10` or later,
   * and you need to update the location managed by the fulfillment service
   * (for example, to change the address of a fulfillment service),
   * use the
   * [LocationEdit](https://shopify.dev/api/admin-graphql/latest/mutations/locationEdit)
   * mutation.
   */
  fulfillmentServiceUpdate?: Maybe<ShopifyFulfillmentServiceUpdatePayload>
  /** Updates tracking information for a fulfillment. */
  fulfillmentTrackingInfoUpdate?: Maybe<ShopifyFulfillmentTrackingInfoUpdatePayload>
  /**
   * Updates tracking information for a fulfillment.
   * @deprecated Use `fulfillmentTrackingInfoUpdate` instead.
   */
  fulfillmentTrackingInfoUpdateV2?: Maybe<ShopifyFulfillmentTrackingInfoUpdateV2Payload>
  /** Create a gift card. */
  giftCardCreate?: Maybe<ShopifyGiftCardCreatePayload>
  /** Credit a gift card. */
  giftCardCredit?: Maybe<ShopifyGiftCardCreditPayload>
  /**
   * Deactivate a gift card. A deactivated gift card cannot be used by a customer.
   * A deactivated gift card cannot be re-enabled.
   */
  giftCardDeactivate?: Maybe<ShopifyGiftCardDeactivatePayload>
  /** Debit a gift card. */
  giftCardDebit?: Maybe<ShopifyGiftCardDebitPayload>
  /** Send notification to the customer of a gift card. */
  giftCardSendNotificationToCustomer?: Maybe<ShopifyGiftCardSendNotificationToCustomerPayload>
  /** Send notification to the recipient of a gift card. */
  giftCardSendNotificationToRecipient?: Maybe<ShopifyGiftCardSendNotificationToRecipientPayload>
  /** Update a gift card. */
  giftCardUpdate?: Maybe<ShopifyGiftCardUpdatePayload>
  /** Activate an inventory item at a location. */
  inventoryActivate?: Maybe<ShopifyInventoryActivatePayload>
  /** Apply changes to inventory quantities. */
  inventoryAdjustQuantities?: Maybe<ShopifyInventoryAdjustQuantitiesPayload>
  /** Modify the activation status of an inventory item at locations. Activating an inventory item at a particular location allows that location to stock that inventory item. Deactivating an inventory item at a location removes the inventory item's quantities and turns off the inventory item from that location. */
  inventoryBulkToggleActivation?: Maybe<ShopifyInventoryBulkToggleActivationPayload>
  /** Removes an inventory item's quantities from a location, and turns off inventory at the location. */
  inventoryDeactivate?: Maybe<ShopifyInventoryDeactivatePayload>
  /** Updates an inventory item. */
  inventoryItemUpdate?: Maybe<ShopifyInventoryItemUpdatePayload>
  /** Moves inventory between inventory quantity names at a single location. */
  inventoryMoveQuantities?: Maybe<ShopifyInventoryMoveQuantitiesPayload>
  /**
   * Set inventory on-hand quantities using absolute values.
   * @deprecated Use `inventorySetQuantities` to set on_hand or available quantites instead.
   */
  inventorySetOnHandQuantities?: Maybe<ShopifyInventorySetOnHandQuantitiesPayload>
  /**
   * Set quantities of specified name using absolute values. This mutation supports compare-and-set functionality to handle
   * concurrent requests properly. If `ignoreCompareQuantity` is not set to true,
   * the mutation will only update the quantity if the persisted quantity matches the `compareQuantity` value.
   * If the `compareQuantity` value does not match the persisted value, the mutation will return an error. In order to opt out
   * of the `compareQuantity` check, the `ignoreCompareQuantity` argument can be set to true.
   *
   * > Note:
   * > Only use this mutation if calling on behalf of a system that acts as the source of truth for inventory quantities,
   * > otherwise please consider using the [inventoryAdjustQuantities](https://shopify.dev/api/admin-graphql/latest/mutations/inventoryAdjustQuantities) mutation.
   * >
   * >
   * > Opting out of the `compareQuantity` check can lead to inaccurate inventory quantities if multiple requests are made concurrently.
   * > It is recommended to always include the `compareQuantity` value to ensure the accuracy of the inventory quantities and to opt out
   * > of the check using `ignoreCompareQuantity` only when necessary.
   */
  inventorySetQuantities?: Maybe<ShopifyInventorySetQuantitiesPayload>
  /** Set up scheduled changes of inventory items. */
  inventorySetScheduledChanges?: Maybe<ShopifyInventorySetScheduledChangesPayload>
  /** Adds items to an inventory shipment. */
  inventoryShipmentAddItems?: Maybe<ShopifyInventoryShipmentAddItemsPayload>
  /** Adds a draft shipment to an inventory transfer. */
  inventoryShipmentCreate?: Maybe<ShopifyInventoryShipmentCreatePayload>
  /** Adds an in-transit shipment to an inventory transfer. */
  inventoryShipmentCreateInTransit?: Maybe<ShopifyInventoryShipmentCreateInTransitPayload>
  /** Deletes an inventory shipment. Only draft shipments can be deleted. */
  inventoryShipmentDelete?: Maybe<ShopifyInventoryShipmentDeletePayload>
  /** Marks a draft inventory shipment as in transit. */
  inventoryShipmentMarkInTransit?: Maybe<ShopifyInventoryShipmentMarkInTransitPayload>
  /** Receive an inventory shipment. */
  inventoryShipmentReceive?: Maybe<ShopifyInventoryShipmentReceivePayload>
  /** Remove items from an inventory shipment. */
  inventoryShipmentRemoveItems?: Maybe<ShopifyInventoryShipmentRemoveItemsPayload>
  /** Edits the tracking info on an inventory shipment. */
  inventoryShipmentSetTracking?: Maybe<ShopifyInventoryShipmentSetTrackingPayload>
  /** Updates items on an inventory shipment. */
  inventoryShipmentUpdateItemQuantities?: Maybe<ShopifyInventoryShipmentUpdateItemQuantitiesPayload>
  /** Cancels an inventory transfer. */
  inventoryTransferCancel?: Maybe<ShopifyInventoryTransferCancelPayload>
  /** Creates an inventory transfer. */
  inventoryTransferCreate?: Maybe<ShopifyInventoryTransferCreatePayload>
  /** Creates an inventory transfer in ready to ship. */
  inventoryTransferCreateAsReadyToShip?: Maybe<ShopifyInventoryTransferCreateAsReadyToShipPayload>
  /** Deletes an inventory transfer. */
  inventoryTransferDelete?: Maybe<ShopifyInventoryTransferDeletePayload>
  /**
   * This mutation allows duplicating an existing inventory transfer. The duplicated transfer will have the same
   * line items and quantities as the original transfer, but will be in a draft state with no shipments.
   */
  inventoryTransferDuplicate?: Maybe<ShopifyInventoryTransferDuplicatePayload>
  /** Edits an inventory transfer. */
  inventoryTransferEdit?: Maybe<ShopifyInventoryTransferEditPayload>
  /** Sets an inventory transfer to ready to ship. */
  inventoryTransferMarkAsReadyToShip?: Maybe<ShopifyInventoryTransferMarkAsReadyToShipPayload>
  /**
   * This mutation allows removing the shippable quantities of line items on a Transfer.
   * It removes all quantities of the item from the transfer that are not associated with shipments.
   */
  inventoryTransferRemoveItems?: Maybe<ShopifyInventoryTransferRemoveItemsPayload>
  /** This mutation allows for the setting of line items on a Transfer. Will replace the items already set, if any. */
  inventoryTransferSetItems?: Maybe<ShopifyInventoryTransferSetItemsPayload>
  /**
   * Activates a location so that you can stock inventory at the location. Refer to the
   * [`isActive`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Location#field-isactive) and
   * [`activatable`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Location#field-activatable)
   * fields on the `Location` object.
   */
  locationActivate?: Maybe<ShopifyLocationActivatePayload>
  /** Adds a new location. */
  locationAdd?: Maybe<ShopifyLocationAddPayload>
  /** Deactivates a location and moves inventory, pending orders, and moving transfers to a destination location. */
  locationDeactivate?: Maybe<ShopifyLocationDeactivatePayload>
  /** Deletes a location. */
  locationDelete?: Maybe<ShopifyLocationDeletePayload>
  /**
   * Edits an existing location.
   *
   * [As of the 2023-10 API version](https://shopify.dev/changelog/apps-can-now-change-the-name-and-address-of-their-fulfillment-service-locations), apps can change the name and address of their fulfillment service locations.
   */
  locationEdit?: Maybe<ShopifyLocationEditPayload>
  /** Disables local pickup for a location. */
  locationLocalPickupDisable?: Maybe<ShopifyLocationLocalPickupDisablePayload>
  /** Enables local pickup for a location. */
  locationLocalPickupEnable?: Maybe<ShopifyLocationLocalPickupEnablePayload>
  /** Creates a new market. */
  marketCreate?: Maybe<ShopifyMarketCreatePayload>
  /**
   * Updates currency settings of a market.
   * @deprecated This will be removed in a future version. Use `marketCreate` and `marketUpdate` for creating and updating
   * market currency settings, respectively.
   *
   */
  marketCurrencySettingsUpdate?: Maybe<ShopifyMarketCurrencySettingsUpdatePayload>
  /** Deletes a market definition. */
  marketDelete?: Maybe<ShopifyMarketDeletePayload>
  /** Creates or updates market localizations. */
  marketLocalizationsRegister?: Maybe<ShopifyMarketLocalizationsRegisterPayload>
  /** Deletes market localizations. */
  marketLocalizationsRemove?: Maybe<ShopifyMarketLocalizationsRemovePayload>
  /**
   * Deletes a market region.
   * @deprecated Use `marketUpdate` instead.
   */
  marketRegionDelete?: Maybe<ShopifyMarketRegionDeletePayload>
  /**
   * Creates regions that belong to an existing market.
   * @deprecated This mutation is deprecated and will be removed in the future. Use `marketCreate` or `marketUpdate` instead.
   */
  marketRegionsCreate?: Maybe<ShopifyMarketRegionsCreatePayload>
  /**
   * Deletes a list of market regions.
   * @deprecated Use `marketUpdate` instead.
   */
  marketRegionsDelete?: Maybe<ShopifyMarketRegionsDeletePayload>
  /** Updates the properties of a market. */
  marketUpdate?: Maybe<ShopifyMarketUpdatePayload>
  /**
   * Creates a web presence for a market.
   * @deprecated Use `webPresenceCreate` instead.
   */
  marketWebPresenceCreate?: Maybe<ShopifyMarketWebPresenceCreatePayload>
  /**
   * Deletes a market web presence.
   * @deprecated Use `webPresenceDelete` instead.
   */
  marketWebPresenceDelete?: Maybe<ShopifyMarketWebPresenceDeletePayload>
  /**
   * Updates a market web presence.
   * @deprecated Use `webPresenceUpdate` instead.
   */
  marketWebPresenceUpdate?: Maybe<ShopifyMarketWebPresenceUpdatePayload>
  /** Deletes all external marketing activities. Deletion is performed by a background job, as it may take a bit of time to complete if a large number of activities are to be deleted. Attempting to create or modify external activities before the job has completed will result in the create/update/upsert mutation returning an error. */
  marketingActivitiesDeleteAllExternal?: Maybe<ShopifyMarketingActivitiesDeleteAllExternalPayload>
  /** Create new marketing activity. Marketing activity app extensions are deprecated and will be removed in the near future. */
  marketingActivityCreate?: Maybe<ShopifyMarketingActivityCreatePayload>
  /** Creates a new external marketing activity. */
  marketingActivityCreateExternal?: Maybe<ShopifyMarketingActivityCreateExternalPayload>
  /** Deletes an external marketing activity. */
  marketingActivityDeleteExternal?: Maybe<ShopifyMarketingActivityDeleteExternalPayload>
  /** Updates a marketing activity with the latest information. Marketing activity app extensions are deprecated and will be removed in the near future. */
  marketingActivityUpdate?: Maybe<ShopifyMarketingActivityUpdatePayload>
  /** Update an external marketing activity. */
  marketingActivityUpdateExternal?: Maybe<ShopifyMarketingActivityUpdateExternalPayload>
  /** Creates a new external marketing activity or updates an existing one. When optional fields are absent or null, associated information will be removed from an existing marketing activity. */
  marketingActivityUpsertExternal?: Maybe<ShopifyMarketingActivityUpsertExternalPayload>
  /** Creates a new marketing engagement for a marketing activity or a marketing channel. */
  marketingEngagementCreate?: Maybe<ShopifyMarketingEngagementCreatePayload>
  /**
   * Marks channel-level engagement data such that it no longer appears in reports.
   *           Activity-level data cannot be deleted directly, instead the MarketingActivity itself should be deleted to
   *           hide it from reports.
   */
  marketingEngagementsDelete?: Maybe<ShopifyMarketingEngagementsDeletePayload>
  /** Creates a menu. */
  menuCreate?: Maybe<ShopifyMenuCreatePayload>
  /** Deletes a menu. */
  menuDelete?: Maybe<ShopifyMenuDeletePayload>
  /** Updates a menu. */
  menuUpdate?: Maybe<ShopifyMenuUpdatePayload>
  /**
   * Creates a metafield definition. Any metafields existing under the same owner type, namespace, and key will be
   * checked against this definition and will have their type updated accordingly. For metafields that are not
   * valid, they will remain unchanged but any attempts to update them must align with this definition.
   */
  metafieldDefinitionCreate?: Maybe<ShopifyMetafieldDefinitionCreatePayload>
  /**
   * Delete a metafield definition.
   * Optionally deletes all associated metafields asynchronously when specified.
   */
  metafieldDefinitionDelete?: Maybe<ShopifyMetafieldDefinitionDeletePayload>
  /**
   * You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.
   * The order of your pinned metafield definitions determines the order in which your metafields are displayed
   * on the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.
   */
  metafieldDefinitionPin?: Maybe<ShopifyMetafieldDefinitionPinPayload>
  /**
   * You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.
   * The order of your pinned metafield definitions determines the order in which your metafields are displayed
   * on the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.
   */
  metafieldDefinitionUnpin?: Maybe<ShopifyMetafieldDefinitionUnpinPayload>
  /** Updates a metafield definition. */
  metafieldDefinitionUpdate?: Maybe<ShopifyMetafieldDefinitionUpdatePayload>
  /** Deletes multiple metafields in bulk. */
  metafieldsDelete?: Maybe<ShopifyMetafieldsDeletePayload>
  /**
   * Sets metafield values. Metafield values will be set regardless if they were previously created or not.
   *
   * Allows a maximum of 25 metafields to be set at a time.
   *
   * This operation is atomic, meaning no changes are persisted if an error is encountered.
   *
   * As of `2024-07`, this operation supports compare-and-set functionality to better handle concurrent requests.
   * If `compareDigest` is set for any metafield, the mutation will only set that metafield if the persisted metafield value matches the digest used on `compareDigest`.
   * If the metafield doesn't exist yet, but you want to guarantee that the operation will run in a safe manner, set `compareDigest` to `null`.
   * The `compareDigest` value can be acquired by querying the metafield object and selecting `compareDigest` as a field.
   * If the `compareDigest` value does not match the digest for the persisted value, the mutation will return an error.
   * You can opt out of write guarantees by not sending `compareDigest` in the request.
   */
  metafieldsSet?: Maybe<ShopifyMetafieldsSetPayload>
  /** Asynchronously delete metaobjects and their associated metafields in bulk. */
  metaobjectBulkDelete?: Maybe<ShopifyMetaobjectBulkDeletePayload>
  /** Creates a new metaobject. */
  metaobjectCreate?: Maybe<ShopifyMetaobjectCreatePayload>
  /** Creates a new metaobject definition. */
  metaobjectDefinitionCreate?: Maybe<ShopifyMetaobjectDefinitionCreatePayload>
  /**
   * Deletes the specified metaobject definition.
   * Also deletes all related metafield definitions, metaobjects, and metafields asynchronously.
   */
  metaobjectDefinitionDelete?: Maybe<ShopifyMetaobjectDefinitionDeletePayload>
  /** Updates a metaobject definition with new settings and metafield definitions. */
  metaobjectDefinitionUpdate?: Maybe<ShopifyMetaobjectDefinitionUpdatePayload>
  /** Deletes the specified metaobject and its associated metafields. */
  metaobjectDelete?: Maybe<ShopifyMetaobjectDeletePayload>
  /** Updates an existing metaobject. */
  metaobjectUpdate?: Maybe<ShopifyMetaobjectUpdatePayload>
  /**
   * Retrieves a metaobject by handle, then updates it with the provided input values.
   * If no matching metaobject is found, a new metaobject is created with the provided input values.
   */
  metaobjectUpsert?: Maybe<ShopifyMetaobjectUpsertPayload>
  /** Create a mobile platform application. */
  mobilePlatformApplicationCreate?: Maybe<ShopifyMobilePlatformApplicationCreatePayload>
  /** Delete a mobile platform application. */
  mobilePlatformApplicationDelete?: Maybe<ShopifyMobilePlatformApplicationDeletePayload>
  /** Update a mobile platform application. */
  mobilePlatformApplicationUpdate?: Maybe<ShopifyMobilePlatformApplicationUpdatePayload>
  /**
   * Cancels an order, with options for refunding, restocking inventory, and customer notification.
   *
   * > Caution:
   * > Order cancellation is irreversible. An order that has been cancelled can't be restored to its original state.
   *
   * Use the `orderCancel` mutation to programmatically cancel orders in scenarios such as:
   *
   * - Customer-requested cancellations due to size, color, or other preference changes
   * - Payment processing failures or declined transactions
   * - Fraud detection and prevention
   * - Insufficient inventory availability
   * - Staff errors in order processing
   * - Wholesale or B2B order management workflows
   *
   * The `orderCancel` mutation provides flexible refund options including refunding to original payment methods
   * or issuing store credit. If a payment was only authorized (temporarily held) but not yet charged,
   * that hold will be automatically released when the order is cancelled, even if you choose not to refund other payments.
   *
   * The mutation supports different cancellation reasons: customer requests, payment declines, fraud,
   * inventory issues, staff errors, or other unspecified reasons. Each cancellation can include optional
   * staff notes for internal documentation (notes aren't visible to customers).
   *
   * An order can only be cancelled if it meets the following criteria:
   *
   * - The order hasn't already been cancelled.
   * - The order has no pending payment authorizations.
   * - The order has no active returns in progress.
   * - The order has no outstanding fulfillments that can't be cancelled.
   *
   * Orders might be assigned to locations that become
   * [deactivated](https://help.shopify.com/manual/fulfillment/setup/locations-management#deactivate-and-reactivate-locations)
   * after the order was created. When cancelling such orders, inventory behavior depends on payment status:
   *
   * - **Paid orders**: Cancellation will fail with an error if restocking is enabled, since inventory
   * can't be returned to deactivated locations.
   * - **Unpaid orders**: Cancellation succeeds but inventory is not restocked anywhere, even when the
   * restock option is enabled. The committed inventory effectively becomes unavailable rather than being
   * returned to stock at the deactivated location.
   *
   * After you cancel an order, you can still make limited updates to certain fields (like
   * notes and tags) using the
   * [`orderUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/orderUpdate).
   *
   * For partial refunds or more complex refund scenarios on active orders,
   * such as refunding only specific line items while keeping the rest of the order fulfilled,
   * consider using the [`refundCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/refundCreate)
   * mutation instead of full order cancellation.
   *
   * Learn how to build apps that integrate with
   * [order management and fulfillment processes](https://shopify.dev/docs/apps/build/orders-fulfillment).
   */
  orderCancel?: Maybe<ShopifyOrderCancelPayload>
  /**
   * Captures payment for an authorized transaction on an order. Use this mutation to claim the money that was previously
   * reserved by an authorization transaction.
   *
   * The `orderCapture` mutation can be used in the following scenarios:
   *
   * - To capture the full amount of an authorized transaction
   * - To capture a partial payment by specifying an amount less than the total order amount
   * - To perform multiple captures on the same order, as long as the order transaction is
   * [multi-capturable](https://shopify.dev/docs/api/admin-graphql/latest/objects/ordertransaction#field-OrderTransaction.fields.multiCapturable)
   *
   * > Note:
   * > Multi-capture functionality is only available to stores on a
   * [Shopify Plus plan](https://help.shopify.com/manual/intro-to-shopify/pricing-plans/plans-features/shopify-plus-plan).
   * For multi-currency orders, the [`currency`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/orderCapture#arguments-input.fields.currency)
   * field is required and should match the presentment currency from the order.
   *
   * After capturing a payment, you can:
   *
   * - View the transaction details including status, amount, and processing information.
   * - Track the captured amount in both shop and presentment currencies.
   * - Monitor the transaction's settlement status.
   *
   * Learn more about [order transactions](https://shopify.dev/docs/api/admin-graphql/latest/objects/OrderTransaction).
   */
  orderCapture?: Maybe<ShopifyOrderCapturePayload>
  /** Closes an open order. */
  orderClose?: Maybe<ShopifyOrderClosePayload>
  /**
   * Creates an order with attributes such as customer information, line items, and shipping and billing addresses.
   *
   * Use the `orderCreate` mutation to programmatically generate orders in scenarios where
   * orders aren't created through the standard checkout process, such as when importing orders from an external
   * system or creating orders for wholesale customers.
   *
   * The `orderCreate` mutation doesn't support applying multiple discounts, such as discounts on line items.
   * Automatic discounts won't be applied unless you replicate the logic of those discounts in your custom
   * implementation. You can [apply a discount code](https://shopify.dev/docs/api/admin-graphql/latest/input-objects/OrderCreateDiscountCodeInput),
   * but only one discount code can be set for each order.
   *
   * > Note:
   * > If you're using the `orderCreate` mutation with a
   * > [trial](https://help.shopify.com/manual/intro-to-shopify/pricing-plans/free-trial) or
   * > [development store](https://shopify.dev/docs/api/development-stores), then you can create a
   * > maximum of five new orders per minute.
   *
   * After you create an order, you can make subsequent edits to the order using one of the following mutations:
   * * [`orderUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/orderUpdate):
   * Used for simple updates to an order, such as changing the order's note, tags, or customer information.
   * * [`orderEditBegin`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/orderEditBegin):
   * Used when you need to make significant updates to an order, such as adding or removing line items, changing
   * quantities, or modifying discounts. The `orderEditBegin` mutation initiates an order editing session,
   * allowing you to make multiple changes before finalizing them. Learn more about using the `orderEditBegin`
   * mutation to [edit existing orders](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps/edit-orders).
   *
   * Learn how to build apps that integrate with
   * [order management and fulfillment processes](https://shopify.dev/docs/apps/build/orders-fulfillment).
   */
  orderCreate?: Maybe<ShopifyOrderCreatePayload>
  /** Creates a payment for an order by mandate. */
  orderCreateMandatePayment?: Maybe<ShopifyOrderCreateMandatePaymentPayload>
  /**
   * Create a manual payment for an order. You can only create a manual payment for an order if it isn't already
   * fully paid.
   */
  orderCreateManualPayment?: Maybe<ShopifyOrderCreateManualPaymentPayload>
  /** Removes customer from an order. */
  orderCustomerRemove?: Maybe<ShopifyOrderCustomerRemovePayload>
  /** Sets a customer on an order. */
  orderCustomerSet?: Maybe<ShopifyOrderCustomerSetPayload>
  /** Deletes an order. For more information on which orders can be deleted, refer to [Delete an order](https://help.shopify.com/manual/orders/cancel-delete-order#delete-an-order). */
  orderDelete?: Maybe<ShopifyOrderDeletePayload>
  /** Adds a custom line item to an existing order. For example, you could add a gift wrapping service as a [custom line item](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing#add-a-custom-line-item). To learn how to edit existing orders, refer to [Edit an existing order with Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing). */
  orderEditAddCustomItem?: Maybe<ShopifyOrderEditAddCustomItemPayload>
  /** Adds a discount to a line item on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing). */
  orderEditAddLineItemDiscount?: Maybe<ShopifyOrderEditAddLineItemDiscountPayload>
  /** Adds a shipping line to an existing order. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing). */
  orderEditAddShippingLine?: Maybe<ShopifyOrderEditAddShippingLinePayload>
  /** Adds a line item from an existing product variant. As of API version 2025-04, the [orderEditAddVariant](https://shopify.dev/api/admin-graphql/latest/mutations/ordereditaddvariant) API will respect the contextual pricing of the variant. */
  orderEditAddVariant?: Maybe<ShopifyOrderEditAddVariantPayload>
  /**
   * Starts editing an order. Mutations are operating on `OrderEdit`.
   * All order edits start with `orderEditBegin`, have any number of `orderEdit`* mutations made, and end with `orderEditCommit`.
   */
  orderEditBegin?: Maybe<ShopifyOrderEditBeginPayload>
  /**
   * Applies and saves staged changes to an order. Mutations are operating on `OrderEdit`.
   * All order edits start with `orderEditBegin`, have any number of `orderEdit`* mutations made, and end with `orderEditCommit`.
   */
  orderEditCommit?: Maybe<ShopifyOrderEditCommitPayload>
  /** Removes a discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing). */
  orderEditRemoveDiscount?: Maybe<ShopifyOrderEditRemoveDiscountPayload>
  /**
   * Removes a line item discount that was applied as part of an order edit.
   * @deprecated Use `orderEditRemoveDiscount` instead.
   */
  orderEditRemoveLineItemDiscount?: Maybe<ShopifyOrderEditRemoveLineItemDiscountPayload>
  /** Removes a shipping line from an existing order. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing). */
  orderEditRemoveShippingLine?: Maybe<ShopifyOrderEditRemoveShippingLinePayload>
  /** Sets the quantity of a line item on an order that is being edited. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing). */
  orderEditSetQuantity?: Maybe<ShopifyOrderEditSetQuantityPayload>
  /** Updates a manual line level discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing). */
  orderEditUpdateDiscount?: Maybe<ShopifyOrderEditUpdateDiscountPayload>
  /** Updates a shipping line on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing). */
  orderEditUpdateShippingLine?: Maybe<ShopifyOrderEditUpdateShippingLinePayload>
  /** Sends an email invoice for an order. */
  orderInvoiceSend?: Maybe<ShopifyOrderInvoiceSendPayload>
  /**
   * Marks an order as paid by recording a payment transaction for the outstanding amount.
   *
   * Use the `orderMarkAsPaid` mutation to record payments received outside the standard checkout
   * process. The `orderMarkAsPaid` mutation is particularly useful in scenarios where:
   *
   * - Orders were created with manual payment methods (cash on delivery, bank deposit, money order)
   * - Payments were received offline and need to be recorded in the system
   * - Previously authorized payments need to be captured manually
   * - Orders require manual payment reconciliation due to external payment processing
   *
   * The mutation validates that the order can be marked as paid before processing.
   * An order can be marked as paid only if it has a positive outstanding balance and its
   * [financial status](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order#field-Order.fields.displayFinancialStatus)
   * isn't already `PAID`. The mutation will either create a new sale transaction for the full
   * outstanding amount or capture an existing authorized transaction, depending on the order's current payment state.
   *
   * After successfully marking an order as paid, the order's financial status is updated to
   * reflect the payment, and payment events are logged for tracking and analytics
   * purposes.
   *
   * Learn more about [managing orders](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps)
   * in apps.
   */
  orderMarkAsPaid?: Maybe<ShopifyOrderMarkAsPaidPayload>
  /** Opens a closed order. */
  orderOpen?: Maybe<ShopifyOrderOpenPayload>
  /** Create a risk assessment for an order. */
  orderRiskAssessmentCreate?: Maybe<ShopifyOrderRiskAssessmentCreatePayload>
  /**
   * Updates the attributes of an order, such as the customer's email, the shipping address for the order,
   * tags, and [metafields](https://shopify.dev/docs/apps/build/custom-data) associated with the order.
   *
   * If you need to make significant updates to an order, such as adding or removing line items, changing
   * quantities, or modifying discounts, then use
   * the [`orderEditBegin`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/orderEditBegin)
   * mutation instead. The `orderEditBegin` mutation initiates an order editing session,
   * allowing you to make multiple changes before finalizing them. Learn more about using the `orderEditBegin`
   * mutation to [edit existing orders](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps/edit-orders).
   *
   * If you need to remove a customer from an order, then use the [`orderCustomerRemove`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/orderCustomerRemove)
   * mutation instead.
   *
   * Learn how to build apps that integrate with
   * [order management and fulfillment processes](https://shopify.dev/docs/apps/build/orders-fulfillment).
   */
  orderUpdate?: Maybe<ShopifyOrderUpdatePayload>
  /** Creates a page. */
  pageCreate?: Maybe<ShopifyPageCreatePayload>
  /** Deletes a page. */
  pageDelete?: Maybe<ShopifyPageDeletePayload>
  /** Updates a page. */
  pageUpdate?: Maybe<ShopifyPageUpdatePayload>
  /** Activates and deactivates payment customizations. */
  paymentCustomizationActivation?: Maybe<ShopifyPaymentCustomizationActivationPayload>
  /** Creates a payment customization. */
  paymentCustomizationCreate?: Maybe<ShopifyPaymentCustomizationCreatePayload>
  /** Deletes a payment customization. */
  paymentCustomizationDelete?: Maybe<ShopifyPaymentCustomizationDeletePayload>
  /** Updates a payment customization. */
  paymentCustomizationUpdate?: Maybe<ShopifyPaymentCustomizationUpdatePayload>
  /** Sends an email payment reminder for a payment schedule. */
  paymentReminderSend?: Maybe<ShopifyPaymentReminderSendPayload>
  /** Create payment terms on an order. To create payment terms on a draft order, use a draft order mutation and include the request with the `DraftOrderInput`. */
  paymentTermsCreate?: Maybe<ShopifyPaymentTermsCreatePayload>
  /** Delete payment terms for an order. To delete payment terms on a draft order, use a draft order mutation and include the request with the `DraftOrderInput`. */
  paymentTermsDelete?: Maybe<ShopifyPaymentTermsDeletePayload>
  /** Update payment terms on an order. To update payment terms on a draft order, use a draft order mutation and include the request with the `DraftOrderInput`. */
  paymentTermsUpdate?: Maybe<ShopifyPaymentTermsUpdatePayload>
  /** Creates a price list. You can use the `priceListCreate` mutation to create a new price list and associate it with a catalog. This enables you to sell your products with contextual pricing. */
  priceListCreate?: Maybe<ShopifyPriceListCreatePayload>
  /** Deletes a price list. For example, you can delete a price list so that it no longer applies for products in the associated market. */
  priceListDelete?: Maybe<ShopifyPriceListDeletePayload>
  /** Creates or updates fixed prices on a price list. You can use the `priceListFixedPricesAdd` mutation to set a fixed price for specific product variants. This lets you change product variant pricing on a per country basis. Any existing fixed price list prices for these variants will be overwritten. */
  priceListFixedPricesAdd?: Maybe<ShopifyPriceListFixedPricesAddPayload>
  /** Updates the fixed prices for all variants for a product on a price list. You can use the `priceListFixedPricesByProductUpdate` mutation to set or remove a fixed price for all variants of a product associated with the price list. */
  priceListFixedPricesByProductUpdate?: Maybe<ShopifyPriceListFixedPricesByProductUpdatePayload>
  /** Deletes specific fixed prices from a price list using a product variant ID. You can use the `priceListFixedPricesDelete` mutation to delete a set of fixed prices from a price list. After deleting the set of fixed prices from the price list, the price of each product variant reverts to the original price that was determined by the price list adjustment. */
  priceListFixedPricesDelete?: Maybe<ShopifyPriceListFixedPricesDeletePayload>
  /** Updates fixed prices on a price list. You can use the `priceListFixedPricesUpdate` mutation to set a fixed price for specific product variants or to delete prices for variants associated with the price list. */
  priceListFixedPricesUpdate?: Maybe<ShopifyPriceListFixedPricesUpdatePayload>
  /**
   * Updates a price list.
   * If you modify the currency, then any fixed prices set on the price list will be deleted.
   */
  priceListUpdate?: Maybe<ShopifyPriceListUpdatePayload>
  /** Disable a shop's privacy features. */
  privacyFeaturesDisable?: Maybe<ShopifyPrivacyFeaturesDisablePayload>
  /** Creates a new componentized product. */
  productBundleCreate?: Maybe<ShopifyProductBundleCreatePayload>
  /** Updates a componentized product. */
  productBundleUpdate?: Maybe<ShopifyProductBundleUpdatePayload>
  /**
   * Changes the status of a product. This allows you to set the availability of the product across all channels.
   * @deprecated Use `productUpdate` instead.
   */
  productChangeStatus?: Maybe<ShopifyProductChangeStatusPayload>
  /**
   * Creates a [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
   * with attributes such as title, description, vendor, and media.
   *
   * The `productCreate` mutation helps you create many products at once, avoiding the tedious or time-consuming
   * process of adding them one by one in the Shopify admin. Common examples include creating products for a
   * new collection, launching a new product line, or adding seasonal products.
   *
   * You can define product
   * [options](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption) and
   * [values](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOptionValue),
   * allowing you to create products with different variations like sizes or colors. You can also associate media
   * files to your products, including images and videos.
   *
   * The `productCreate` mutation only supports creating a product with its initial
   * [product variant](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant).
   * To create multiple product variants for a single product and manage prices, use the
   * [`productVariantsBulkCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkCreate)
   * mutation.
   *
   * > Note:
   * > The `productCreate` mutation has a [throttle](https://shopify.dev/docs/api/usage/rate-limits#resource-based-rate-limits)
   * > that takes effect when a store has 50,000 product variants. After this threshold is reached, no more than
   * > 1,000 new product variants can be created per day.
   *
   * After you create a product, you can make subsequent edits to the product using one of the following mutations:
   *
   * - [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish):
   * Used to publish the product and make it available to customers. The `productCreate` mutation creates products
   * in an unpublished state by default, so you must perform a separate operation to publish the product.
   * - [`productUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productUpdate):
   * Used to update a single product, such as changing the product's title, description, vendor, or associated media.
   * - [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet):
   * Used to perform multiple operations on products, such as creating or modifying product options and variants.
   *
   * Learn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)
   * and [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data).
   */
  productCreate?: Maybe<ShopifyProductCreatePayload>
  /**
   * Creates media for a product.
   * @deprecated Use `productUpdate` or `productSet` instead.
   */
  productCreateMedia?: Maybe<ShopifyProductCreateMediaPayload>
  /**
   * Permanently deletes a product and all its associated data, including variants, media, publications, and inventory items.
   *
   * Use the `productDelete` mutation to programmatically remove products from your store when they need to be
   * permanently deleted from your catalog, such as when removing discontinued items, cleaning up test data, or
   * synchronizing with external inventory management systems.
   *
   * The `productDelete` mutation removes the product from all associated collections,
   * and removes all associated data for the product, including:
   *
   * - All product variants and their inventory items
   * - Product media (images, videos) that are not referenced by other products
   * - [Product options](https://shopify.dev/api/admin-graphql/latest/objects/ProductOption) and [option values](https://shopify.dev/api/admin-graphql/latest/objects/ProductOptionValue)
   * - Product publications across all sales channels
   * - Product tags and metadata associations
   *
   * The `productDelete` mutation also has the following effects on existing orders and transactions:
   *
   * - **Draft orders**: Existing draft orders that reference this product will retain the product information as stored data, but the product reference will be removed. Draft orders can still be completed with the stored product details.
   * - **Completed orders and refunds**: Previously completed orders that included this product aren't affected. The product information in completed orders is preserved for record-keeping, and existing refunds for this product remain valid and processable.
   *
   * > Caution:
   * > Product deletion is irreversible. After a product is deleted, it can't be recovered. Consider archiving
   * > or unpublishing products instead if you might need to restore them later.
   *
   * If you need to delete a large product, such as one that has many
   * [variants](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant)
   * that are active at several
   * [locations](https://shopify.dev/api/admin-graphql/latest/objects/Location),
   * you might encounter timeout errors. To avoid these timeout errors, you can set the
   * [`synchronous`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productDelete#arguments-synchronous)
   * parameter to `false` to run the deletion asynchronously, which returns a
   * [`ProductDeleteOperation`](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductDeleteOperation)
   * that you can monitor for completion status.
   *
   * If you need more granular control over product cleanup, consider using these alternative mutations:
   *
   * - [`productUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productUpdate):
   * Update the product status to archived or unpublished instead of deleting.
   * - [`productVariantsBulkDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkDelete):
   * Delete specific variants while keeping the product.
   * - [`productOptionsDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsDelete):
   * Delete the choices available for a product, such as size, color, or material.
   *
   * Learn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model).
   */
  productDelete?: Maybe<ShopifyProductDeletePayload>
  /**
   * Deletes media for a product.
   * @deprecated Use `fileUpdate` instead.
   */
  productDeleteMedia?: Maybe<ShopifyProductDeleteMediaPayload>
  /**
   * Duplicates a product.
   *
   * If you need to duplicate a large product, such as one that has many
   * [variants](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput)
   * that are active at several
   * [locations](https://shopify.dev/api/admin-graphql/latest/input-objects/InventoryLevelInput),
   * you might encounter timeout errors.
   *
   * To avoid these timeout errors, you can instead duplicate the product asynchronously.
   *
   * In API version 2024-10 and higher, include `synchronous: false` argument in this mutation to perform the duplication asynchronously.
   *
   * In API version 2024-07 and lower, use the asynchronous [`ProductDuplicateAsyncV2`](https://shopify.dev/api/admin-graphql/2024-07/mutations/productDuplicateAsyncV2).
   *
   * Metafield values are not duplicated if the unique values capability is enabled.
   */
  productDuplicate?: Maybe<ShopifyProductDuplicatePayload>
  /** Creates a product feed for a specific publication. */
  productFeedCreate?: Maybe<ShopifyProductFeedCreatePayload>
  /** Deletes a product feed for a specific publication. */
  productFeedDelete?: Maybe<ShopifyProductFeedDeletePayload>
  /** Runs the full product sync for a given shop. */
  productFullSync?: Maybe<ShopifyProductFullSyncPayload>
  /** Adds multiple selling plan groups to a product. */
  productJoinSellingPlanGroups?: Maybe<ShopifyProductJoinSellingPlanGroupsPayload>
  /** Removes multiple groups from a product. */
  productLeaveSellingPlanGroups?: Maybe<ShopifyProductLeaveSellingPlanGroupsPayload>
  /**
   * Updates an [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption)
   * on a [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product),
   * such as size, color, or material. Each option includes a name, position, and a list of values. The combination
   * of a product option and value creates a [product variant](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant).
   *
   * Use the `productOptionUpdate` mutation for the following use cases:
   *
   * - **Update product choices**: Modify an existing option, like "Size" (Small, Medium, Large) or
   * "Color" (Red, Blue, Green), so customers can select their preferred variant.
   * - **Enable personalization features**: Update an option (for example, "Engraving text") to let customers customize their purchase.
   * - **Offer seasonal or limited edition products**: Update a value
   * (for example, "Holiday red") on an existing option to support limited-time or seasonal variants.
   * - **Integrate with apps that manage product configuration**: Allow third-party apps to update options, like
   * "Bundle size", when customers select or customize
   * [product bundles](https://shopify.dev/docs/apps/build/product-merchandising/bundles).
   * - **Link options to metafields**: Associate a product option with a custom
   * [metafield](https://shopify.dev/docs/apps/build/custom-data), like "Fabric code", for
   * richer integrations with other systems or apps.
   *
   * > Note:
   * > The `productOptionUpdate` mutation enforces strict data integrity for product options and variants.
   * All option positions must be sequential, and every option should be used by at least one variant.
   *
   * After you update a product option, you can further manage a product's configuration using related mutations:
   *
   * - [`productOptionsCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsCreate)
   * - [`productOptionsDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsDelete)
   * - [`productOptionsReorder`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsReorder)
   * - [`productVariantsBulkCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkCreate)
   * - [`productVariantsBulkUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkUpdate)
   * - [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet)
   *
   * Learn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)
   * and [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data).
   */
  productOptionUpdate?: Maybe<ShopifyProductOptionUpdatePayload>
  /**
   * Creates one or more [options](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption)
   * on a [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product),
   * such as size, color, or material. Each option includes a name, position, and a list of values. The combination
   * of a product option and value creates a [product variant](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant).
   *
   * Use the `productOptionsCreate` mutation for the following use cases:
   *
   * - **Add product choices**: Add a new option, like "Size" (Small, Medium, Large) or
   * "Color" (Red, Blue, Green), to an existing product so customers can select their preferred variant.
   * - **Enable personalization features**: Add options such as "Engraving text" to let customers customize their purchase.
   * - **Offer seasonal or limited edition products**: Add a new value
   * (for example, "Holiday red") to an existing option to support limited-time or seasonal variants.
   * - **Integrate with apps that manage product configuration**: Allow third-party apps to add options, like
   * "Bundle size", when customers select or customize
   * [product bundles](https://shopify.dev/docs/apps/build/product-merchandising/bundles).
   * - **Link options to metafields**: Associate a product option with a custom
   * [metafield](https://shopify.dev/docs/apps/build/custom-data), like "Fabric code", for
   * richer integrations with other systems or apps.
   *
   * > Note:
   * > The `productOptionsCreate` mutation enforces strict data integrity for product options and variants.
   * All option positions must be sequential, and every option should be used by at least one variant.
   * If you use the [`CREATE` variant strategy](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsCreate#arguments-variantStrategy.enums.CREATE), consider the maximum allowed number of variants for each product
   * (100 by default, and 2,048 if you've
   * [enabled the **Extended Variants** developer preview](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/migrate-and-test#create-a-development-store-that-allows-2-048-variants-per-product)).
   *
   * After you create product options, you can further manage a product's configuration using related mutations:
   *
   * - [`productOptionUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionUpdate)
   * - [`productOptionsReorder`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsReorder)
   * - [`productOptionsDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsDelete)
   * - [`productVariantsBulkCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkCreate)
   * - [`productVariantsBulkUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkUpdate)
   * - [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet)
   *
   * Learn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)
   * and [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data).
   */
  productOptionsCreate?: Maybe<ShopifyProductOptionsCreatePayload>
  /**
   * Deletes one or more [options](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption)
   * from a [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product). Product options
   * define the choices available for a product, such as size, color, or material.
   *
   * > Caution:
   * > Removing an option can affect a product's
   * > [variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant) and their
   * > configuration. Deleting an option might also delete associated option values and, depending on the chosen
   * > [strategy](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productoptionsdelete#arguments-strategy),
   * > might affect variants.
   *
   * Use the `productOptionsDelete` mutation for the following use cases:
   *
   * - **Simplify product configuration**: Remove obsolete or unnecessary options
   * (for example, discontinue "Material" if all variants are now the same material).
   * - **Clean up after seasonal or limited-time offerings**: Delete options that are no longer
   * relevant (for example, "Holiday edition").
   * - **Automate catalog management**: Enable apps or integrations to programmatically remove options as product
   * data changes.
   *
   * > Note:
   * > The `productOptionsDelete` mutation enforces strict data integrity for product options and variants.
   * > All option positions must remain sequential, and every remaining option must be used by at least one variant.
   *
   * After you delete a product option, you can further manage a product's configuration using related mutations:
   *
   * - [`productOptionsCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsCreate)
   * - [`productOptionUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionUpdate)
   * - [`productOptionsReorder`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsReorder)
   * - [`productVariantsBulkCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkCreate)
   * - [`productVariantsBulkUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkUpdate)
   * - [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet)
   *
   * Learn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)
   * and [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data).
   */
  productOptionsDelete?: Maybe<ShopifyProductOptionsDeletePayload>
  /**
   * Reorders the [options](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption) and
   * [option values](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOptionValue) on a
   * [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product),
   * updating the order in which [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)
   * are presented to customers.
   *
   * The `productOptionsReorder` mutation accepts a list of product options, each identified by `id` or `name`, and an
   * optional list of values (also by `id` or `name`) specifying the new order. The order of options in the
   * mutation's input determines their new positions (for example, the first option becomes `option1`).
   * The order of values within each option determines their new positions. The mutation recalculates the order of
   * variants based on the new option and value order.
   *
   * Suppose a product has the following variants:
   *
   * 1. `"Red / Small"`
   * 2. `"Green / Medium"`
   * 3. `"Blue / Small"`
   *
   * You reorder options and values:
   *
   * ```
   * options: [
   *   { name: "Size", values: [{ name: "Small" }, { name: "Medium" }] },
   *   { name: "Color", values: [{ name: "Green" }, { name: "Red" }, { name: "Blue" }] }
   * ]
   * ```
   *
   * The resulting variant order will be:
   *
   * 1. `"Small / Green"`
   * 2. `"Small / Red"`
   * 3. `"Small / Blue"`
   * 4. `"Medium / Green"`
   *
   * Use the `productOptionsReorder` mutation for the following use cases:
   *
   * - **Change the order of product options**: For example, display "Color" before "Size" in a store.
   * - **Reorder option values within an option**: For example, show "Red" before "Blue" in a color picker.
   * - **Control the order of product variants**: The order of options and their values determines the sequence in which variants are listed and selected.
   * - **Highlight best-selling options**: Present the most popular or relevant options and values first.
   * - **Promote merchandising strategies**: Highlight seasonal colors, limited editions, or featured sizes.
   *
   * > Note:
   * > The `productOptionsReorder` mutation enforces strict data integrity for product options and variants.
   * > All option positions must be sequential, and every option should be used by at least one variant.
   *
   * After you reorder product options, you can further manage a product's configuration using related mutations:
   *
   * - [`productOptionsCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsCreate)
   * - [`productOptionsDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsDelete)
   * - [`productVariantsBulkCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkCreate)
   * - [`productVariantsBulkUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkUpdate)
   * - [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet)
   *
   * Learn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)
   * and [managing product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data).
   */
  productOptionsReorder?: Maybe<ShopifyProductOptionsReorderPayload>
  /**
   * Publishes a product. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can only be published on online stores.
   * @deprecated Use `publishablePublish` instead.
   */
  productPublish?: Maybe<ShopifyProductPublishPayload>
  /**
   * Asynchronously reorders the media attached to a product, changing the sequence in which images, videos, and other media appear in product displays. This affects how media is presented across all sales channels.
   *
   * For example, merchants can move their best product photo to the first position or reorder images to tell a better product story, with changes appearing in storefronts once processing completes.
   *
   * Use `ProductReorderMedia` to:
   * - Optimize media presentation order for better customer experience
   * - Implement drag-and-drop media management interfaces
   * - Automate media sequencing based on performance or quality metrics
   *
   * The operation processes asynchronously to handle products with large media collections without blocking other operations.
   *
   * Learn more about [product media](https://shopify.dev/docs/api/admin-graphql/latest/objects/Media).
   */
  productReorderMedia?: Maybe<ShopifyProductReorderMediaPayload>
  /**
   * Performs multiple operations to create or update products in a single request.
   *
   * Use the `productSet` mutation to sync information from an external data source into Shopify, manage large
   * product catalogs, and perform batch updates. The mutation is helpful for bulk product management, including price
   * adjustments, inventory updates, and product lifecycle management.
   *
   * The behavior of `productSet` depends on the type of field it's modifying:
   *
   * - **For list fields**: Creates new entries, updates existing entries, and deletes existing entries
   * that aren't included in the mutation's input. Common examples of list fields include
   * [`collections`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet#arguments-input.fields.collections),
   * [`metafields`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet#arguments-input.fields.metafields),
   * and [`variants`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet#arguments-input.fields.variants).
   *
   * - **For all other field types**: Updates only the included fields. Any omitted fields will remain unchanged.
   *
   * > Note:
   * > By default, stores have a limit of 100 product variants for each product. You can create a development store and
   * > [enable the **Extended Variants** developer preview](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/migrate-and-test#create-a-development-store-that-allows-2-048-variants-per-product)
   * > to create or update a maximum of 2,048 product variants in a single operation.
   *
   * You can run `productSet` in one of the following modes:
   *
   * - **Synchronously**: Returns the updated product in the response.
   * - **Asynchronously**: Returns a [`ProductSetOperation`](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductSetOperation) object.
   * Use the [`productOperation`](https://shopify.dev/api/admin-graphql/latest/queries/productOperation) query to check the status of the operation and
   * retrieve details of the updated product and its product variants.
   *
   * If you need to only manage product variants, then use one of the following mutations:
   *
   * - [`productVariantsBulkCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkCreate)
   * - [`productVariantsBulkUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkUpdate)
   * - [`productVariantsBulkDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkDelete)
   *
   * If you need to only manage product options, then use one of the following mutations:
   *
   * - [`productOptionsCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsCreate)
   * - [`productOptionUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionUpdate)
   * - [`productOptionsReorder`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsReorder)
   * - [`productOptionsDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsDelete)
   *
   * Learn more about [syncing product data from an external source](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/sync-data).
   */
  productSet?: Maybe<ShopifyProductSetPayload>
  /**
   * Unpublishes a product.
   * @deprecated Use `publishableUnpublish` instead.
   */
  productUnpublish?: Maybe<ShopifyProductUnpublishPayload>
  /**
   * Updates a [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
   * with attributes such as title, description, vendor, and media.
   *
   * The `productUpdate` mutation helps you modify many products at once, avoiding the tedious or time-consuming
   * process of updating them one by one in the Shopify admin. Common examples including updating
   * product details like status or tags.
   *
   * The `productUpdate` mutation doesn't support updating
   * [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant).
   * To update multiple product variants for a single product and manage prices, use the
   * [`productVariantsBulkUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkUpdate)
   * mutation.
   *
   * > Note:
   * > The `productUpdate` mutation has a [throttle](https://shopify.dev/docs/api/usage/rate-limits#resource-based-rate-limits)
   * > that takes effect when a store has 50,000 product variants. After this threshold is reached, no more than
   * > 1,000 new product variants can be updated per day.
   *
   * After updating a product, you can make additional changes using one of the following mutations:
   *
   * - [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet):
   * Used to perform multiple operations on products, such as creating or modifying product options and variants.
   * - [`publishablePublish`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/publishablePublish):
   * Used to publish the product and make it available to customers, if the product is currently unpublished.
   *
   * Learn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)
   * and [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data).
   */
  productUpdate?: Maybe<ShopifyProductUpdatePayload>
  /**
   * Updates media for a product.
   * @deprecated Use `fileUpdate` instead.
   */
  productUpdateMedia?: Maybe<ShopifyProductUpdateMediaPayload>
  /**
   * Appends existing media from a product to specific variants of that product, creating associations between media files and particular product options. This allows different variants to showcase relevant images or videos.
   *
   * For example, a t-shirt product might have color variants where each color variant displays only the images showing that specific color, helping customers see exactly what they're purchasing.
   *
   * Use `ProductVariantAppendMedia` to:
   * - Associate specific images with product variants for accurate display
   * - Build variant-specific media management in product interfaces
   * - Implement automated media assignment based on variant attributes
   *
   * The operation links existing product media to variants without duplicating files, maintaining efficient media storage while enabling variant-specific displays.
   *
   * Learn more about [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant).
   */
  productVariantAppendMedia?: Maybe<ShopifyProductVariantAppendMediaPayload>
  /** Detaches media from product variants. */
  productVariantDetachMedia?: Maybe<ShopifyProductVariantDetachMediaPayload>
  /** Adds multiple selling plan groups to a product variant. */
  productVariantJoinSellingPlanGroups?: Maybe<ShopifyProductVariantJoinSellingPlanGroupsPayload>
  /** Remove multiple groups from a product variant. */
  productVariantLeaveSellingPlanGroups?: Maybe<ShopifyProductVariantLeaveSellingPlanGroupsPayload>
  /** Creates new bundles, updates existing bundles, and removes bundle components for one or multiple bundles. */
  productVariantRelationshipBulkUpdate?: Maybe<ShopifyProductVariantRelationshipBulkUpdatePayload>
  /**
   * Creates multiple [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)
   * for a single [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) in one operation.
   * You can run this mutation directly or as part of a [bulk operation](https://shopify.dev/docs/api/usage/bulk-operations/imports)
   * for large-scale catalog updates.
   *
   * Use the `productVariantsBulkCreate` mutation to efficiently add new product variants—such as different sizes,
   * colors, or materials—to an existing product. The mutation is helpful if you need to add product variants in bulk,
   * such as importing from an external system.
   *
   * The mutation supports:
   *
   * - Creating variants with custom options and values
   * - Associating media (for example, images, videos, and 3D models) with the product or its variants
   * - Handling complex product configurations
   *
   * > Note:
   * > By default, stores have a limit of 100 product variants for each product. You can create a development store and
   * > [enable the **Extended Variants** developer preview](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/migrate-and-test#create-a-development-store-that-allows-2-048-variants-per-product)
   * > to create a maximum of 2,048 product variants in a single operation.
   *
   * After creating variants, you can make additional changes using one of the following mutations:
   *
   * - [`productVariantsBulkUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productVariantsBulkUpdate):
   * Updates multiple product variants for a single product in one operation.
   * - [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet):
   * Used to perform multiple operations on products, such as creating or modifying product options and variants.
   *
   * You can also specifically manage product options through related mutations:
   *
   * - [`productOptionsCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsCreate)
   * - [`productOptionUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionUpdate)
   * - [`productOptionsReorder`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsReorder)
   * - [`productOptionsDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsDelete)
   *
   * Learn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)
   * and [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data).
   */
  productVariantsBulkCreate?: Maybe<ShopifyProductVariantsBulkCreatePayload>
  /** Deletes multiple variants in a single product. This mutation can be called directly or via the bulkOperation. */
  productVariantsBulkDelete?: Maybe<ShopifyProductVariantsBulkDeletePayload>
  /** Reorders multiple variants in a single product. This mutation can be called directly or via the bulkOperation. */
  productVariantsBulkReorder?: Maybe<ShopifyProductVariantsBulkReorderPayload>
  /**
   * Updates multiple [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)
   * for a single [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) in one operation.
   * You can run this mutation directly or as part of a [bulk operation](https://shopify.dev/docs/api/usage/bulk-operations/imports)
   * for large-scale catalog updates.
   *
   * Use the `productVariantsBulkUpdate` mutation to efficiently modify product variants—such as different sizes,
   * colors, or materials—associated with an existing product. The mutation is helpful if you need to update a
   * product's variants in bulk, such as importing from an external system.
   *
   * The mutation supports:
   *
   * - Updating variants with custom options and values
   * - Associating media (for example, images, videos, and 3D models) with the product or its variants
   * - Handling complex product configurations
   *
   * > Note:
   * > By default, stores have a limit of 100 product variants for each product. You can create a development store and
   * > [enable the **Extended Variants** developer preview](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/migrate-and-test#create-a-development-store-that-allows-2-048-variants-per-product)
   * > to update a maximum of 2,048 product variants in a single operation.
   *
   * After creating variants, you can make additional changes using the
   * [`productSet`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productSet) mutation,
   * which is used to perform multiple operations on products, such as creating or modifying product options and variants.
   *
   * You can also specifically manage product options through related mutations:
   *
   * - [`productOptionsCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsCreate)
   * - [`productOptionUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionUpdate)
   * - [`productOptionsReorder`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsReorder)
   * - [`productOptionsDelete`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productOptionsDelete)
   *
   * Learn more about the [product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model)
   * and [adding product data](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/add-data).
   */
  productVariantsBulkUpdate?: Maybe<ShopifyProductVariantsBulkUpdatePayload>
  /**
   * Updates the server pixel to connect to a Google PubSub endpoint.
   * Running this mutation deletes any previous subscriptions for the server pixel.
   */
  pubSubServerPixelUpdate?: Maybe<ShopifyPubSubServerPixelUpdatePayload>
  /**
   * Creates a new Google Cloud Pub/Sub webhook subscription.
   *
   * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
   * @deprecated Use `webhookSubscriptionCreate` instead.
   */
  pubSubWebhookSubscriptionCreate?: Maybe<ShopifyPubSubWebhookSubscriptionCreatePayload>
  /**
   * Updates a Google Cloud Pub/Sub webhook subscription.
   *
   * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
   * @deprecated Use `webhookSubscriptionUpdate` instead.
   */
  pubSubWebhookSubscriptionUpdate?: Maybe<ShopifyPubSubWebhookSubscriptionUpdatePayload>
  /** Creates a publication. */
  publicationCreate?: Maybe<ShopifyPublicationCreatePayload>
  /** Deletes a publication. */
  publicationDelete?: Maybe<ShopifyPublicationDeletePayload>
  /** Updates a publication. */
  publicationUpdate?: Maybe<ShopifyPublicationUpdatePayload>
  /** Publishes a resource to a channel. If the resource is a product, then it's visible in the channel only if the product status is `active`. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can be published only on online stores. */
  publishablePublish?: Maybe<ShopifyPublishablePublishPayload>
  /** Publishes a resource to current channel. If the resource is a product, then it's visible in the channel only if the product status is `active`. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can be published only on online stores. */
  publishablePublishToCurrentChannel?: Maybe<ShopifyPublishablePublishToCurrentChannelPayload>
  /** Unpublishes a resource from a channel. If the resource is a product, then it's visible in the channel only if the product status is `active`. */
  publishableUnpublish?: Maybe<ShopifyPublishableUnpublishPayload>
  /** Unpublishes a resource from the current channel. If the resource is a product, then it's visible in the channel only if the product status is `active`. */
  publishableUnpublishToCurrentChannel?: Maybe<ShopifyPublishableUnpublishToCurrentChannelPayload>
  /** Updates quantity pricing on a price list. You can use the `quantityPricingByVariantUpdate` mutation to set fixed prices, quantity rules, and quantity price breaks. This mutation does not allow partial successes. If any of the requested resources fail to update, none of the requested resources will be updated. Delete operations are executed before create operations. */
  quantityPricingByVariantUpdate?: Maybe<ShopifyQuantityPricingByVariantUpdatePayload>
  /**
   * Creates or updates existing quantity rules on a price list.
   * You can use the `quantityRulesAdd` mutation to set order level minimums, maximumums and increments for specific product variants.
   */
  quantityRulesAdd?: Maybe<ShopifyQuantityRulesAddPayload>
  /**
   * Deletes specific quantity rules from a price list using a product variant ID.
   * You can use the `quantityRulesDelete` mutation to delete a set of quantity rules from a price list.
   */
  quantityRulesDelete?: Maybe<ShopifyQuantityRulesDeletePayload>
  /**
   * Creates a refund for an order, allowing you to process returns and issue payments back to customers.
   *
   * Use the `refundCreate` mutation to programmatically process refunds in scenarios where you need to
   * return money to customers, such as when handling returns, processing chargebacks, or correcting
   * order errors.
   *
   * The `refundCreate` mutation supports various refund scenarios:
   *
   * - Refunding line items with optional restocking
   * - Refunding shipping costs
   * - Refunding duties and import taxes
   * - Refunding additional fees
   * - Processing refunds through different payment methods
   * - Issuing store credit refunds (when enabled)
   *
   * You can create both full and partial refunds, and optionally allow over-refunding in specific
   * cases.
   *
   * After creating a refund, you can track its status and details through the order's
   * [`refunds`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order#field-Order.fields.refunds)
   * field. The refund is associated with the order and can be used for reporting and reconciliation purposes.
   *
   * Learn more about
   * [managing returns](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management)
   * and [refunding duties](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/view-and-refund-duties).
   *
   * > Note:
   * > The refunding behavior of the `refundCreate` mutation is similar to the
   * [`refundReturn`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/returnRefund)
   * mutation. The key difference is that the `refundCreate` mutation lets you to specify restocking behavior
   * for line items, whereas the `returnRefund` mutation focuses solely on handling the financial refund without
   * any restocking input.
   */
  refundCreate?: Maybe<ShopifyRefundCreatePayload>
  /** Removes return and/or exchange lines from a return. */
  removeFromReturn?: Maybe<ShopifyRemoveFromReturnPayload>
  /**
   * Approves a customer's return request.
   * If this mutation is successful, then the `Return.status` field of the
   * approved return is set to `OPEN`.
   */
  returnApproveRequest?: Maybe<ShopifyReturnApproveRequestPayload>
  /**
   * Cancels a return and restores the items back to being fulfilled.
   * Canceling a return is only available before any work has been done
   * on the return (such as an inspection or refund).
   */
  returnCancel?: Maybe<ShopifyReturnCancelPayload>
  /**
   * Indicates a return is complete, either when a refund has been made and items restocked,
   * or simply when it has been marked as returned in the system.
   */
  returnClose?: Maybe<ShopifyReturnClosePayload>
  /**
   * Creates a return from an existing order that has at least one fulfilled
   * [line item](https://shopify.dev/docs/api/admin-graphql/latest/objects/LineItem)
   * that hasn't yet been refunded. If you create a return on an archived order, then the order is automatically
   * unarchived.
   *
   * Use the `returnCreate` mutation when your workflow involves
   * [approving](https://shopify.dev/docs/api/admin-graphql/latest/mutations/returnApproveRequest) or
   * [declining](https://shopify.dev/docs/api/admin-graphql/latest/mutations/returnDeclineRequest) requested returns
   * outside of the Shopify platform.
   *
   * The `returnCreate` mutation performs the following actions:
   *
   * - Creates a return in the `OPEN` state, and assumes that the return request from the customer has already been
   * approved
   * - Creates a [reverse fulfillment order](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-fulfillment-orders),
   * and enables you to create a [reverse delivery](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-deliveries)
   * for the reverse fulfillment order
   * - Creates a sales agreement with a `RETURN` reason, which links to all sales created for the return or exchange
   * - Generates sales records that reverse the sales records for the items being returned
   * - Generates sales records for any exchange line items
   *
   * After you've created a return, use the
   * [`return`](https://shopify.dev/docs/api/admin-graphql/latest/queries/return) query to retrieve the
   * return by its ID. Learn more about providing a
   * [return management workflow](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management)
   * for merchants.
   */
  returnCreate?: Maybe<ShopifyReturnCreatePayload>
  /**
   * Declines a return on an order.
   * When a return is declined, each `ReturnLineItem.fulfillmentLineItem` can be associated to a new return.
   * Use the `ReturnCreate` or `ReturnRequest` mutation to initiate a new return.
   */
  returnDeclineRequest?: Maybe<ShopifyReturnDeclineRequestPayload>
  /**
   * Removes return lines from a return.
   * @deprecated Use `removeFromReturn` instead.
   */
  returnLineItemRemoveFromReturn?: Maybe<ShopifyReturnLineItemRemoveFromReturnPayload>
  /** Process a return. */
  returnProcess?: Maybe<ShopifyReturnProcessPayload>
  /**
   * Refunds a return when its status is `OPEN` or `CLOSED` and associates it with the related return request.
   * @deprecated Use `returnProcess` instead.
   */
  returnRefund?: Maybe<ShopifyReturnRefundPayload>
  /** Reopens a closed return. */
  returnReopen?: Maybe<ShopifyReturnReopenPayload>
  /**
   * A customer's return request that hasn't been approved or declined.
   * This mutation sets the value of the `Return.status` field to `REQUESTED`.
   * To create a return that has the `Return.status` field set to `OPEN`, use the `returnCreate` mutation.
   */
  returnRequest?: Maybe<ShopifyReturnRequestPayload>
  /** Creates a new reverse delivery with associated external shipping information. */
  reverseDeliveryCreateWithShipping?: Maybe<ShopifyReverseDeliveryCreateWithShippingPayload>
  /** Updates a reverse delivery with associated external shipping information. */
  reverseDeliveryShippingUpdate?: Maybe<ShopifyReverseDeliveryShippingUpdatePayload>
  /** Disposes reverse fulfillment order line items. */
  reverseFulfillmentOrderDispose?: Maybe<ShopifyReverseFulfillmentOrderDisposePayload>
  /** Creates a saved search. */
  savedSearchCreate?: Maybe<ShopifySavedSearchCreatePayload>
  /** Delete a saved search. */
  savedSearchDelete?: Maybe<ShopifySavedSearchDeletePayload>
  /** Updates a saved search. */
  savedSearchUpdate?: Maybe<ShopifySavedSearchUpdatePayload>
  /**
   * <div class="note"><h4>Theme app extensions</h4>
   *   <p>If your app integrates with a Shopify theme and you plan to submit it to the Shopify App Store, you must use theme app extensions instead of Script tags. Script tags can only be used with vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
   *
   * <div class="note"><h4>Script tag deprecation</h4>
   *   <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
   *
   *
   * Creates a new script tag.
   */
  scriptTagCreate?: Maybe<ShopifyScriptTagCreatePayload>
  /**
   * <div class="note"><h4>Theme app extensions</h4>
   *   <p>If your app integrates with a Shopify theme and you plan to submit it to the Shopify App Store, you must use theme app extensions instead of Script tags. Script tags can only be used with vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
   *
   * <div class="note"><h4>Script tag deprecation</h4>
   *   <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
   *
   *
   * Deletes a script tag.
   */
  scriptTagDelete?: Maybe<ShopifyScriptTagDeletePayload>
  /**
   * <div class="note"><h4>Theme app extensions</h4>
   *   <p>If your app integrates with a Shopify theme and you plan to submit it to the Shopify App Store, you must use theme app extensions instead of Script tags. Script tags can only be used with vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
   *
   * <div class="note"><h4>Script tag deprecation</h4>
   *   <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
   *
   *
   * Updates a script tag.
   */
  scriptTagUpdate?: Maybe<ShopifyScriptTagUpdatePayload>
  /** Creates a segment. */
  segmentCreate?: Maybe<ShopifySegmentCreatePayload>
  /** Deletes a segment. */
  segmentDelete?: Maybe<ShopifySegmentDeletePayload>
  /** Updates a segment. */
  segmentUpdate?: Maybe<ShopifySegmentUpdatePayload>
  /** Adds multiple product variants to a selling plan group. */
  sellingPlanGroupAddProductVariants?: Maybe<ShopifySellingPlanGroupAddProductVariantsPayload>
  /** Adds multiple products to a selling plan group. */
  sellingPlanGroupAddProducts?: Maybe<ShopifySellingPlanGroupAddProductsPayload>
  /** Creates a Selling Plan Group. */
  sellingPlanGroupCreate?: Maybe<ShopifySellingPlanGroupCreatePayload>
  /** Delete a Selling Plan Group. This does not affect subscription contracts. */
  sellingPlanGroupDelete?: Maybe<ShopifySellingPlanGroupDeletePayload>
  /** Removes multiple product variants from a selling plan group. */
  sellingPlanGroupRemoveProductVariants?: Maybe<ShopifySellingPlanGroupRemoveProductVariantsPayload>
  /** Removes multiple products from a selling plan group. */
  sellingPlanGroupRemoveProducts?: Maybe<ShopifySellingPlanGroupRemoveProductsPayload>
  /** Update a Selling Plan Group. */
  sellingPlanGroupUpdate?: Maybe<ShopifySellingPlanGroupUpdatePayload>
  /** Creates a new unconfigured server pixel. A single server pixel can exist for an app and shop combination. If you call this mutation when a server pixel already exists, then an error will return. */
  serverPixelCreate?: Maybe<ShopifyServerPixelCreatePayload>
  /** Deletes the Server Pixel associated with the current app & shop. */
  serverPixelDelete?: Maybe<ShopifyServerPixelDeletePayload>
  /** Deletes a shipping package. */
  shippingPackageDelete?: Maybe<ShopifyShippingPackageDeletePayload>
  /**
   * Set a shipping package as the default.
   * The default shipping package is the one used to calculate shipping costs on checkout.
   */
  shippingPackageMakeDefault?: Maybe<ShopifyShippingPackageMakeDefaultPayload>
  /** Updates a shipping package. */
  shippingPackageUpdate?: Maybe<ShopifyShippingPackageUpdatePayload>
  /** Deletes a locale for a shop. This also deletes all translations of this locale. */
  shopLocaleDisable?: Maybe<ShopifyShopLocaleDisablePayload>
  /** Adds a locale for a shop. The newly added locale is in the unpublished state. */
  shopLocaleEnable?: Maybe<ShopifyShopLocaleEnablePayload>
  /** Updates a locale for a shop. */
  shopLocaleUpdate?: Maybe<ShopifyShopLocaleUpdatePayload>
  /** Updates a shop policy. */
  shopPolicyUpdate?: Maybe<ShopifyShopPolicyUpdatePayload>
  /**
   * The `ResourceFeedback` object lets your app report the status of shops and their resources. For example, if
   * your app is a marketplace channel, then you can use resource feedback to alert merchants that they need to connect their marketplace account by signing in.
   *
   * Resource feedback notifications are displayed to the merchant on the home screen of their Shopify admin, and in the product details view for any products that are published to your app.
   *
   * This resource should be used only in cases where you're describing steps that a merchant is required to complete. If your app offers optional or promotional set-up steps, or if it makes recommendations, then don't use resource feedback to let merchants know about them.
   *
   * ## Sending feedback on a shop
   *
   * You can send resource feedback on a shop to let the merchant know what steps they need to take to make sure that your app is set up correctly. Feedback can have one of two states: `requires_action` or `success`. You need to send a `requires_action` feedback request for each step that the merchant is required to complete.
   *
   * If there are multiple set-up steps that require merchant action, then send feedback with a state of `requires_action` as merchants complete prior steps. And to remove the feedback message from the Shopify admin, send a `success` feedback request.
   *
   * #### Important
   * Sending feedback replaces previously sent feedback for the shop. Send a new `shopResourceFeedbackCreate` mutation to push the latest state of a shop or its resources to Shopify.
   */
  shopResourceFeedbackCreate?: Maybe<ShopifyShopResourceFeedbackCreatePayload>
  /** Creates an alternate currency payout for a Shopify Payments account. */
  shopifyPaymentsPayoutAlternateCurrencyCreate?: Maybe<ShopifyShopifyPaymentsPayoutAlternateCurrencyCreatePayload>
  /**
   * Generates the URL and signed paramaters needed to upload an asset to Shopify.
   * @deprecated Use `stagedUploadsCreate` instead.
   */
  stagedUploadTargetGenerate?: Maybe<ShopifyStagedUploadTargetGeneratePayload>
  /**
   * Uploads multiple images.
   * @deprecated Use `stagedUploadsCreate` instead.
   */
  stagedUploadTargetsGenerate?: Maybe<ShopifyStagedUploadTargetsGeneratePayload>
  /**
   * Creates staged upload targets for file uploads such as images, videos, and 3D models.
   *
   * Use the `stagedUploadsCreate` mutation instead of direct file creation mutations when:
   *
   * - **Uploading large files**: Files over a few MB benefit from staged uploads for better reliability
   * - **Uploading media files**: Videos, 3D models, and high-resolution images
   * - **Bulk importing**: CSV files, product catalogs, or other bulk data
   * - **Using external file sources**: When files are stored remotely and need to be transferred to Shopify
   *
   * The `stagedUploadsCreate` mutation is the first step in Shopify's secure two-step upload process:
   *
   * **Step 1: Create staged upload targets** (this mutation)
   * - Generate secure, temporary upload URLs for your files.
   * - Receive authentication parameters for the upload.
   *
   * **Step 2: Upload files and create assets**
   * - Upload your files directly to the provided URLs using the authentication parameters.
   * - Use the returned `resourceUrl` as the `originalSource` in subsequent mutations like `fileCreate`.
   *
   * This approach provides better performance for large files, handles network interruptions gracefully,
   * and ensures secure file transfers to Shopify's storage infrastructure.
   *
   * > Note:
   * > File size is required when uploading
   * > [`VIDEO`](https://shopify.dev/docs/api/admin-graphql/latest/enums/StagedUploadTargetGenerateUploadResource#enums-VIDEO) or
   * > [`MODEL_3D`](https://shopify.dev/docs/api/admin-graphql/latest/enums/StagedUploadTargetGenerateUploadResource#enums-MODEL_3D)
   * > resources.
   *
   * After creating staged upload targets, complete the process by:
   *
   * 1. **Uploading files**: Send your files to the returned [`url`](https://shopify.dev/docs/api/admin-graphql/latest/objects/StagedMediaUploadTarget#field-StagedMediaUploadTarget.fields.url) using the provided
   * [`parameters`](https://shopify.dev/docs/api/admin-graphql/latest/objects/StagedMediaUploadTarget#field-StagedMediaUploadTarget.fields.parameters)
   * for authentication
   * 2. **Creating file assets**: Use the [`resourceUrl`](https://shopify.dev/docs/api/admin-graphql/latest/objects/StagedMediaUploadTarget#field-StagedMediaUploadTarget.fields.resourceUrl)
   * as the `originalSource` in mutations such as:
   *    - [`fileCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fileCreate):
   *      Creates file assets from staged uploads
   *    - [`productUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productUpdate):
   *      Updates products with new media from staged uploads
   *
   * Learn more about [uploading media to Shopify](https://shopify.dev/apps/online-store/media/products).
   */
  stagedUploadsCreate?: Maybe<ShopifyStagedUploadsCreatePayload>
  /**
   * Activates the specified standard metafield definition from its template.
   *
   * Refer to the [list of standard metafield definition templates](https://shopify.dev/apps/metafields/definitions/standard-definitions).
   */
  standardMetafieldDefinitionEnable?: Maybe<ShopifyStandardMetafieldDefinitionEnablePayload>
  /** Enables the specified standard metaobject definition from its template. */
  standardMetaobjectDefinitionEnable?: Maybe<ShopifyStandardMetaobjectDefinitionEnablePayload>
  /**
   * Creates a credit transaction that increases the store credit account balance by the given amount.
   * This operation will create an account if one does not already exist.
   * A store credit account owner can hold multiple accounts each with a different currency.
   * Use the most appropriate currency for the given store credit account owner.
   */
  storeCreditAccountCredit?: Maybe<ShopifyStoreCreditAccountCreditPayload>
  /** Creates a debit transaction that decreases the store credit account balance by the given amount. */
  storeCreditAccountDebit?: Maybe<ShopifyStoreCreditAccountDebitPayload>
  /**
   * Creates a storefront access token for use with the [Storefront API](https://shopify.dev/docs/api/storefront).
   *
   * An app can have a maximum of 100 active storefront access tokens for each shop.
   *
   * [Get started with the Storefront API](https://shopify.dev/docs/storefronts/headless/building-with-the-storefront-api/getting-started).
   */
  storefrontAccessTokenCreate?: Maybe<ShopifyStorefrontAccessTokenCreatePayload>
  /** Deletes a storefront access token. */
  storefrontAccessTokenDelete?: Maybe<ShopifyStorefrontAccessTokenDeletePayload>
  /** Creates a new subscription billing attempt. For more information, refer to [Create a subscription contract](https://shopify.dev/docs/apps/selling-strategies/subscriptions/contracts/create#step-4-create-a-billing-attempt). */
  subscriptionBillingAttemptCreate?: Maybe<ShopifySubscriptionBillingAttemptCreatePayload>
  /** Asynchronously queries and charges all subscription billing cycles whose [billingAttemptExpectedDate](https://shopify.dev/api/admin-graphql/latest/objects/SubscriptionBillingCycle#field-billingattemptexpecteddate) values fall within a specified date range and meet additional filtering criteria. The results of this action can be retrieved using the [subscriptionBillingCycleBulkResults](https://shopify.dev/api/admin-graphql/latest/queries/subscriptionBillingCycleBulkResults) query. */
  subscriptionBillingCycleBulkCharge?: Maybe<ShopifySubscriptionBillingCycleBulkChargePayload>
  /** Asynchronously queries all subscription billing cycles whose [billingAttemptExpectedDate](https://shopify.dev/api/admin-graphql/latest/objects/SubscriptionBillingCycle#field-billingattemptexpecteddate) values fall within a specified date range and meet additional filtering criteria. The results of this action can be retrieved using the [subscriptionBillingCycleBulkResults](https://shopify.dev/api/admin-graphql/latest/queries/subscriptionBillingCycleBulkResults) query. */
  subscriptionBillingCycleBulkSearch?: Maybe<ShopifySubscriptionBillingCycleBulkSearchPayload>
  /** Creates a new subscription billing attempt for a specified billing cycle. This is the alternative mutation for [subscriptionBillingAttemptCreate](https://shopify.dev/docs/api/admin-graphql/latest/mutations/subscriptionBillingAttemptCreate). For more information, refer to [Create a subscription contract](https://shopify.dev/docs/apps/selling-strategies/subscriptions/contracts/create#step-4-create-a-billing-attempt). */
  subscriptionBillingCycleCharge?: Maybe<ShopifySubscriptionBillingCycleChargePayload>
  /** Commits the updates of a Subscription Billing Cycle Contract draft. */
  subscriptionBillingCycleContractDraftCommit?: Maybe<ShopifySubscriptionBillingCycleContractDraftCommitPayload>
  /** Concatenates a contract to a Subscription Draft. */
  subscriptionBillingCycleContractDraftConcatenate?: Maybe<ShopifySubscriptionBillingCycleContractDraftConcatenatePayload>
  /** Edit the contents of a subscription contract for the specified billing cycle. */
  subscriptionBillingCycleContractEdit?: Maybe<ShopifySubscriptionBillingCycleContractEditPayload>
  /** Delete the schedule and contract edits of the selected subscription billing cycle. */
  subscriptionBillingCycleEditDelete?: Maybe<ShopifySubscriptionBillingCycleEditDeletePayload>
  /** Delete the current and future schedule and contract edits of a list of subscription billing cycles. */
  subscriptionBillingCycleEditsDelete?: Maybe<ShopifySubscriptionBillingCycleEditsDeletePayload>
  /** Modify the schedule of a specific billing cycle. */
  subscriptionBillingCycleScheduleEdit?: Maybe<ShopifySubscriptionBillingCycleScheduleEditPayload>
  /** Skips a Subscription Billing Cycle. */
  subscriptionBillingCycleSkip?: Maybe<ShopifySubscriptionBillingCycleSkipPayload>
  /** Unskips a Subscription Billing Cycle. */
  subscriptionBillingCycleUnskip?: Maybe<ShopifySubscriptionBillingCycleUnskipPayload>
  /** Activates a Subscription Contract. Contract status must be either active, paused, or failed. */
  subscriptionContractActivate?: Maybe<ShopifySubscriptionContractActivatePayload>
  /** Creates a Subscription Contract. */
  subscriptionContractAtomicCreate?: Maybe<ShopifySubscriptionContractAtomicCreatePayload>
  /** Cancels a Subscription Contract. */
  subscriptionContractCancel?: Maybe<ShopifySubscriptionContractCancelPayload>
  /**
   * Creates a Subscription Contract Draft.
   * You can submit all the desired information for the draft using [Subscription Draft Input object](https://shopify.dev/docs/api/admin-graphql/latest/input-objects/SubscriptionDraftInput).
   * You can also update the draft using the [Subscription Contract Update](https://shopify.dev/docs/api/admin-graphql/latest/mutations/subscriptionContractUpdate) mutation.
   * The draft is not saved until you call the [Subscription Draft Commit](https://shopify.dev/docs/api/admin-graphql/latest/mutations/subscriptionDraftCommit) mutation.
   */
  subscriptionContractCreate?: Maybe<ShopifySubscriptionContractCreatePayload>
  /** Expires a Subscription Contract. */
  subscriptionContractExpire?: Maybe<ShopifySubscriptionContractExpirePayload>
  /** Fails a Subscription Contract. */
  subscriptionContractFail?: Maybe<ShopifySubscriptionContractFailPayload>
  /** Pauses a Subscription Contract. */
  subscriptionContractPause?: Maybe<ShopifySubscriptionContractPausePayload>
  /** Allows for the easy change of a Product in a Contract or a Product price change. */
  subscriptionContractProductChange?: Maybe<ShopifySubscriptionContractProductChangePayload>
  /**
   * Sets the next billing date of a Subscription Contract. This field is managed by the apps.
   *         Alternatively you can utilize our
   *         [Billing Cycles APIs](https://shopify.dev/docs/apps/selling-strategies/subscriptions/billing-cycles),
   *         which provide auto-computed billing dates and additional functionalities.
   */
  subscriptionContractSetNextBillingDate?: Maybe<ShopifySubscriptionContractSetNextBillingDatePayload>
  /** The subscriptionContractUpdate mutation allows you to create a draft of an existing subscription contract. This [draft](https://shopify.dev/api/admin-graphql/latest/objects/SubscriptionDraft) can be reviewed and modified as needed. Once the draft is committed with [subscriptionDraftCommit](https://shopify.dev/api/admin-graphql/latest/mutations/subscriptionDraftCommit), the changes are applied to the original subscription contract. */
  subscriptionContractUpdate?: Maybe<ShopifySubscriptionContractUpdatePayload>
  /** Commits the updates of a Subscription Contract draft. */
  subscriptionDraftCommit?: Maybe<ShopifySubscriptionDraftCommitPayload>
  /** Adds a subscription discount to a subscription draft. */
  subscriptionDraftDiscountAdd?: Maybe<ShopifySubscriptionDraftDiscountAddPayload>
  /** Applies a code discount on the subscription draft. */
  subscriptionDraftDiscountCodeApply?: Maybe<ShopifySubscriptionDraftDiscountCodeApplyPayload>
  /** Removes a subscription discount from a subscription draft. */
  subscriptionDraftDiscountRemove?: Maybe<ShopifySubscriptionDraftDiscountRemovePayload>
  /** Updates a subscription discount on a subscription draft. */
  subscriptionDraftDiscountUpdate?: Maybe<ShopifySubscriptionDraftDiscountUpdatePayload>
  /** Adds a subscription free shipping discount to a subscription draft. */
  subscriptionDraftFreeShippingDiscountAdd?: Maybe<ShopifySubscriptionDraftFreeShippingDiscountAddPayload>
  /** Updates a subscription free shipping discount on a subscription draft. */
  subscriptionDraftFreeShippingDiscountUpdate?: Maybe<ShopifySubscriptionDraftFreeShippingDiscountUpdatePayload>
  /** Adds a subscription line to a subscription draft. */
  subscriptionDraftLineAdd?: Maybe<ShopifySubscriptionDraftLineAddPayload>
  /** Removes a subscription line from a subscription draft. */
  subscriptionDraftLineRemove?: Maybe<ShopifySubscriptionDraftLineRemovePayload>
  /** Updates a subscription line on a subscription draft. */
  subscriptionDraftLineUpdate?: Maybe<ShopifySubscriptionDraftLineUpdatePayload>
  /** Updates a Subscription Draft. */
  subscriptionDraftUpdate?: Maybe<ShopifySubscriptionDraftUpdatePayload>
  /** Add tags to an order, a draft order, a customer, a product, or an online store article. */
  tagsAdd?: Maybe<ShopifyTagsAddPayload>
  /** Remove tags from an order, a draft order, a customer, a product, or an online store article. */
  tagsRemove?: Maybe<ShopifyTagsRemovePayload>
  /** Allows tax app configurations for tax partners. */
  taxAppConfigure?: Maybe<ShopifyTaxAppConfigurePayload>
  /**
   * Creates a theme using an external URL or for files that were previously uploaded using the
   * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
   * These themes are added to the [Themes page](https://admin.shopify.com/themes) in Shopify admin.
   */
  themeCreate?: Maybe<ShopifyThemeCreatePayload>
  /** Deletes a theme. */
  themeDelete?: Maybe<ShopifyThemeDeletePayload>
  /** Copy theme files. Copying to existing theme files will overwrite them. */
  themeFilesCopy?: Maybe<ShopifyThemeFilesCopyPayload>
  /** Deletes a theme's files. */
  themeFilesDelete?: Maybe<ShopifyThemeFilesDeletePayload>
  /** Create or update theme files. */
  themeFilesUpsert?: Maybe<ShopifyThemeFilesUpsertPayload>
  /** Publishes a theme. */
  themePublish?: Maybe<ShopifyThemePublishPayload>
  /** Updates a theme. */
  themeUpdate?: Maybe<ShopifyThemeUpdatePayload>
  /** Trigger the voiding of an uncaptured authorization transaction. */
  transactionVoid?: Maybe<ShopifyTransactionVoidPayload>
  /** Creates or updates translations. */
  translationsRegister?: Maybe<ShopifyTranslationsRegisterPayload>
  /** Deletes translations. */
  translationsRemove?: Maybe<ShopifyTranslationsRemovePayload>
  /** Asynchronously delete [URL redirects](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) in bulk. */
  urlRedirectBulkDeleteAll?: Maybe<ShopifyUrlRedirectBulkDeleteAllPayload>
  /**
   * Asynchronously delete [URLRedirect](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect)
   * objects in bulk by IDs.
   * Learn more about [URLRedirect](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect)
   * objects.
   */
  urlRedirectBulkDeleteByIds?: Maybe<ShopifyUrlRedirectBulkDeleteByIdsPayload>
  /** Asynchronously delete redirects in bulk. */
  urlRedirectBulkDeleteBySavedSearch?: Maybe<ShopifyUrlRedirectBulkDeleteBySavedSearchPayload>
  /** Asynchronously delete redirects in bulk. */
  urlRedirectBulkDeleteBySearch?: Maybe<ShopifyUrlRedirectBulkDeleteBySearchPayload>
  /** Creates a [`UrlRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object. */
  urlRedirectCreate?: Maybe<ShopifyUrlRedirectCreatePayload>
  /** Deletes a [`UrlRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object. */
  urlRedirectDelete?: Maybe<ShopifyUrlRedirectDeletePayload>
  /**
   * Creates a [`UrlRedirectImport`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirectImport) object.
   *
   * After creating the `UrlRedirectImport` object, the `UrlRedirectImport` request can be performed using the [`urlRedirectImportSubmit`](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportSubmit) mutation.
   */
  urlRedirectImportCreate?: Maybe<ShopifyUrlRedirectImportCreatePayload>
  /**
   * Submits a `UrlRedirectImport` request to be processed.
   *
   * The `UrlRedirectImport` request is first created with the [`urlRedirectImportCreate`](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportCreate) mutation.
   */
  urlRedirectImportSubmit?: Maybe<ShopifyUrlRedirectImportSubmitPayload>
  /** Updates a URL redirect. */
  urlRedirectUpdate?: Maybe<ShopifyUrlRedirectUpdatePayload>
  /** Creates a validation. */
  validationCreate?: Maybe<ShopifyValidationCreatePayload>
  /** Deletes a validation. */
  validationDelete?: Maybe<ShopifyValidationDeletePayload>
  /** Update a validation. */
  validationUpdate?: Maybe<ShopifyValidationUpdatePayload>
  /**
   * Activate a [web pixel extension](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels)
   * by creating a web pixel record on the store where you installed your app.
   *
   * When you run the `webPixelCreate` mutation, Shopify validates it
   * against the settings definition in `shopify.extension.toml`. If the `settings` input field doesn't match
   * the schema that you defined, then the mutation fails. Learn how to
   * define [web pixel settings](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels#step-2-define-your-web-pixel-settings).
   */
  webPixelCreate?: Maybe<ShopifyWebPixelCreatePayload>
  /** Deletes the web pixel shop settings. */
  webPixelDelete?: Maybe<ShopifyWebPixelDeletePayload>
  /**
   * Activate a [web pixel extension](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels)
   * by updating a web pixel record on the store where you installed your app.
   *
   * When you run the `webPixelUpdate` mutation, Shopify validates it
   * against the settings definition in `shopify.extension.toml`. If the `settings` input field doesn't match
   * the schema that you defined, then the mutation fails. Learn how to
   * define [web pixel settings](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels#step-2-define-your-web-pixel-settings).
   */
  webPixelUpdate?: Maybe<ShopifyWebPixelUpdatePayload>
  /** Creates a web presence. */
  webPresenceCreate?: Maybe<ShopifyWebPresenceCreatePayload>
  /** Deletes a web presence. */
  webPresenceDelete?: Maybe<ShopifyWebPresenceDeletePayload>
  /** Updates a web presence. */
  webPresenceUpdate?: Maybe<ShopifyWebPresenceUpdatePayload>
  /**
   * Creates a new webhook subscription.
   *
   * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
   */
  webhookSubscriptionCreate?: Maybe<ShopifyWebhookSubscriptionCreatePayload>
  /**
   * Deletes a webhook subscription.
   *
   * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
   */
  webhookSubscriptionDelete?: Maybe<ShopifyWebhookSubscriptionDeletePayload>
  /**
   * Updates a webhook subscription.
   *
   * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
   */
  webhookSubscriptionUpdate?: Maybe<ShopifyWebhookSubscriptionUpdatePayload>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationAbandonmentEmailStateUpdateArgs {
  emailSentAt?: InputMaybe<Scalars["DateTime"]["input"]>
  emailState: ShopifyAbandonmentEmailState
  emailStateChangeReason?: InputMaybe<Scalars["String"]["input"]>
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationAbandonmentUpdateActivitiesDeliveryStatusesArgs {
  abandonmentId: Scalars["ID"]["input"]
  deliveredAt?: InputMaybe<Scalars["DateTime"]["input"]>
  deliveryStatus: ShopifyAbandonmentDeliveryState
  deliveryStatusChangeReason?: InputMaybe<Scalars["String"]["input"]>
  marketingActivityId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationAppPurchaseOneTimeCreateArgs {
  name: Scalars["String"]["input"]
  price: ShopifyMoneyInput
  returnUrl: Scalars["URL"]["input"]
  test?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationAppRevokeAccessScopesArgs {
  scopes: Array<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationAppSubscriptionCancelArgs {
  id: Scalars["ID"]["input"]
  prorate?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationAppSubscriptionCreateArgs {
  lineItems: Array<ShopifyAppSubscriptionLineItemInput>
  name: Scalars["String"]["input"]
  replacementBehavior?: InputMaybe<ShopifyAppSubscriptionReplacementBehavior>
  returnUrl: Scalars["URL"]["input"]
  test?: InputMaybe<Scalars["Boolean"]["input"]>
  trialDays?: InputMaybe<Scalars["Int"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationAppSubscriptionLineItemUpdateArgs {
  cappedAmount: ShopifyMoneyInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationAppSubscriptionTrialExtendArgs {
  days: Scalars["Int"]["input"]
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationAppUsageRecordCreateArgs {
  description: Scalars["String"]["input"]
  idempotencyKey?: InputMaybe<Scalars["String"]["input"]>
  price: ShopifyMoneyInput
  subscriptionLineItemId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationArticleCreateArgs {
  article: ShopifyArticleCreateInput
  blog?: InputMaybe<ShopifyArticleBlogInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationArticleDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationArticleUpdateArgs {
  article: ShopifyArticleUpdateInput
  blog?: InputMaybe<ShopifyArticleBlogInput>
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationBackupRegionUpdateArgs {
  region?: InputMaybe<ShopifyBackupRegionUpdateInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationBlogCreateArgs {
  blog: ShopifyBlogCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationBlogDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationBlogUpdateArgs {
  blog: ShopifyBlogUpdateInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationBulkOperationCancelArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationBulkOperationRunMutationArgs {
  clientIdentifier?: InputMaybe<Scalars["String"]["input"]>
  groupObjects?: Scalars["Boolean"]["input"]
  mutation: Scalars["String"]["input"]
  stagedUploadPath: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationBulkOperationRunQueryArgs {
  groupObjects?: Scalars["Boolean"]["input"]
  query: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationBulkProductResourceFeedbackCreateArgs {
  feedbackInput: Array<ShopifyProductResourceFeedbackInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCarrierServiceCreateArgs {
  input: ShopifyDeliveryCarrierServiceCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCarrierServiceDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCarrierServiceUpdateArgs {
  input: ShopifyDeliveryCarrierServiceUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCartTransformCreateArgs {
  blockOnFailure?: InputMaybe<Scalars["Boolean"]["input"]>
  functionId: Scalars["String"]["input"]
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCartTransformDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCatalogContextUpdateArgs {
  catalogId: Scalars["ID"]["input"]
  contextsToAdd?: InputMaybe<ShopifyCatalogContextInput>
  contextsToRemove?: InputMaybe<ShopifyCatalogContextInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCatalogCreateArgs {
  input: ShopifyCatalogCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCatalogDeleteArgs {
  deleteDependentResources?: InputMaybe<Scalars["Boolean"]["input"]>
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCatalogUpdateArgs {
  id: Scalars["ID"]["input"]
  input: ShopifyCatalogUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCheckoutBrandingUpsertArgs {
  checkoutBrandingInput?: InputMaybe<ShopifyCheckoutBrandingInput>
  checkoutProfileId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCollectionAddProductsArgs {
  id: Scalars["ID"]["input"]
  productIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCollectionAddProductsV2Args {
  id: Scalars["ID"]["input"]
  productIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCollectionCreateArgs {
  input: ShopifyCollectionInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCollectionDeleteArgs {
  input: ShopifyCollectionDeleteInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCollectionPublishArgs {
  input: ShopifyCollectionPublishInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCollectionRemoveProductsArgs {
  id: Scalars["ID"]["input"]
  productIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCollectionReorderProductsArgs {
  id: Scalars["ID"]["input"]
  moves: Array<ShopifyMoveInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCollectionUnpublishArgs {
  input: ShopifyCollectionUnpublishInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCollectionUpdateArgs {
  input: ShopifyCollectionInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCombinedListingUpdateArgs {
  optionsAndValues?: InputMaybe<Array<ShopifyOptionAndValueInput>>
  parentProductId: Scalars["ID"]["input"]
  productsAdded?: InputMaybe<Array<ShopifyChildProductRelationInput>>
  productsEdited?: InputMaybe<Array<ShopifyChildProductRelationInput>>
  productsRemovedIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCommentApproveArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCommentDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCommentNotSpamArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCommentSpamArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompaniesDeleteArgs {
  companyIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyAddressDeleteArgs {
  addressId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyAssignCustomerAsContactArgs {
  companyId: Scalars["ID"]["input"]
  customerId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyAssignMainContactArgs {
  companyContactId: Scalars["ID"]["input"]
  companyId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyContactAssignRoleArgs {
  companyContactId: Scalars["ID"]["input"]
  companyContactRoleId: Scalars["ID"]["input"]
  companyLocationId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyContactAssignRolesArgs {
  companyContactId: Scalars["ID"]["input"]
  rolesToAssign: Array<ShopifyCompanyContactRoleAssign>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyContactCreateArgs {
  companyId: Scalars["ID"]["input"]
  input: ShopifyCompanyContactInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyContactDeleteArgs {
  companyContactId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyContactRemoveFromCompanyArgs {
  companyContactId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyContactRevokeRoleArgs {
  companyContactId: Scalars["ID"]["input"]
  companyContactRoleAssignmentId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyContactRevokeRolesArgs {
  companyContactId: Scalars["ID"]["input"]
  revokeAll?: InputMaybe<Scalars["Boolean"]["input"]>
  roleAssignmentIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyContactSendWelcomeEmailArgs {
  companyContactId: Scalars["ID"]["input"]
  email?: InputMaybe<ShopifyEmailInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyContactUpdateArgs {
  companyContactId: Scalars["ID"]["input"]
  input: ShopifyCompanyContactInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyContactsDeleteArgs {
  companyContactIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyCreateArgs {
  input: ShopifyCompanyCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyLocationAssignAddressArgs {
  address: ShopifyCompanyAddressInput
  addressTypes: Array<ShopifyCompanyAddressType>
  locationId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyLocationAssignRolesArgs {
  companyLocationId: Scalars["ID"]["input"]
  rolesToAssign: Array<ShopifyCompanyLocationRoleAssign>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyLocationAssignStaffMembersArgs {
  companyLocationId: Scalars["ID"]["input"]
  staffMemberIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyLocationAssignTaxExemptionsArgs {
  companyLocationId: Scalars["ID"]["input"]
  taxExemptions: Array<ShopifyTaxExemption>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyLocationCreateArgs {
  companyId: Scalars["ID"]["input"]
  input: ShopifyCompanyLocationInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyLocationCreateTaxRegistrationArgs {
  locationId: Scalars["ID"]["input"]
  taxId: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyLocationDeleteArgs {
  companyLocationId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyLocationRemoveStaffMembersArgs {
  companyLocationStaffMemberAssignmentIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyLocationRevokeRolesArgs {
  companyLocationId: Scalars["ID"]["input"]
  rolesToRevoke: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyLocationRevokeTaxExemptionsArgs {
  companyLocationId: Scalars["ID"]["input"]
  taxExemptions: Array<ShopifyTaxExemption>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyLocationRevokeTaxRegistrationArgs {
  companyLocationId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyLocationTaxSettingsUpdateArgs {
  companyLocationId: Scalars["ID"]["input"]
  exemptionsToAssign?: InputMaybe<Array<ShopifyTaxExemption>>
  exemptionsToRemove?: InputMaybe<Array<ShopifyTaxExemption>>
  taxExempt?: InputMaybe<Scalars["Boolean"]["input"]>
  taxRegistrationId?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyLocationUpdateArgs {
  companyLocationId: Scalars["ID"]["input"]
  input: ShopifyCompanyLocationUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyLocationsDeleteArgs {
  companyLocationIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyRevokeMainContactArgs {
  companyId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCompanyUpdateArgs {
  companyId: Scalars["ID"]["input"]
  input: ShopifyCompanyInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationConsentPolicyUpdateArgs {
  consentPolicies: Array<ShopifyConsentPolicyInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerAddTaxExemptionsArgs {
  customerId: Scalars["ID"]["input"]
  taxExemptions: Array<ShopifyTaxExemption>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerAddressCreateArgs {
  address: ShopifyMailingAddressInput
  customerId: Scalars["ID"]["input"]
  setAsDefault?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerAddressDeleteArgs {
  addressId: Scalars["ID"]["input"]
  customerId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerAddressUpdateArgs {
  address: ShopifyMailingAddressInput
  addressId: Scalars["ID"]["input"]
  customerId: Scalars["ID"]["input"]
  setAsDefault?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerCancelDataErasureArgs {
  customerId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerCreateArgs {
  input: ShopifyCustomerInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerDeleteArgs {
  input: ShopifyCustomerDeleteInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerEmailMarketingConsentUpdateArgs {
  input: ShopifyCustomerEmailMarketingConsentUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerGenerateAccountActivationUrlArgs {
  customerId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerMergeArgs {
  customerOneId: Scalars["ID"]["input"]
  customerTwoId: Scalars["ID"]["input"]
  overrideFields?: InputMaybe<ShopifyCustomerMergeOverrideFields>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerPaymentMethodCreateFromDuplicationDataArgs {
  billingAddress: ShopifyMailingAddressInput
  customerId: Scalars["ID"]["input"]
  encryptedDuplicationData: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerPaymentMethodCreditCardCreateArgs {
  billingAddress: ShopifyMailingAddressInput
  customerId: Scalars["ID"]["input"]
  sessionId: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerPaymentMethodCreditCardUpdateArgs {
  billingAddress: ShopifyMailingAddressInput
  id: Scalars["ID"]["input"]
  sessionId: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerPaymentMethodGetDuplicationDataArgs {
  customerPaymentMethodId: Scalars["ID"]["input"]
  targetCustomerId: Scalars["ID"]["input"]
  targetShopId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerPaymentMethodGetUpdateUrlArgs {
  customerPaymentMethodId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerPaymentMethodPaypalBillingAgreementCreateArgs {
  billingAddress?: InputMaybe<ShopifyMailingAddressInput>
  billingAgreementId: Scalars["String"]["input"]
  customerId: Scalars["ID"]["input"]
  inactive?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerPaymentMethodPaypalBillingAgreementUpdateArgs {
  billingAddress: ShopifyMailingAddressInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerPaymentMethodRemoteCreateArgs {
  customerId: Scalars["ID"]["input"]
  remoteReference: ShopifyCustomerPaymentMethodRemoteInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerPaymentMethodRevokeArgs {
  customerPaymentMethodId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerPaymentMethodSendUpdateEmailArgs {
  customerPaymentMethodId: Scalars["ID"]["input"]
  email?: InputMaybe<ShopifyEmailInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerRemoveTaxExemptionsArgs {
  customerId: Scalars["ID"]["input"]
  taxExemptions: Array<ShopifyTaxExemption>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerReplaceTaxExemptionsArgs {
  customerId: Scalars["ID"]["input"]
  taxExemptions: Array<ShopifyTaxExemption>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerRequestDataErasureArgs {
  customerId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerSegmentMembersQueryCreateArgs {
  input: ShopifyCustomerSegmentMembersQueryInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerSendAccountInviteEmailArgs {
  customerId: Scalars["ID"]["input"]
  email?: InputMaybe<ShopifyEmailInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerSetArgs {
  identifier?: InputMaybe<ShopifyCustomerSetIdentifiers>
  input: ShopifyCustomerSetInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerSmsMarketingConsentUpdateArgs {
  input: ShopifyCustomerSmsMarketingConsentUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerUpdateArgs {
  input: ShopifyCustomerInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationCustomerUpdateDefaultAddressArgs {
  addressId: Scalars["ID"]["input"]
  customerId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDataSaleOptOutArgs {
  email: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDelegateAccessTokenCreateArgs {
  input: ShopifyDelegateAccessTokenInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDelegateAccessTokenDestroyArgs {
  accessToken: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDeliveryCustomizationActivationArgs {
  enabled: Scalars["Boolean"]["input"]
  ids: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDeliveryCustomizationCreateArgs {
  deliveryCustomization: ShopifyDeliveryCustomizationInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDeliveryCustomizationDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDeliveryCustomizationUpdateArgs {
  deliveryCustomization: ShopifyDeliveryCustomizationInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDeliveryProfileCreateArgs {
  profile: ShopifyDeliveryProfileInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDeliveryProfileRemoveArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDeliveryProfileUpdateArgs {
  id: Scalars["ID"]["input"]
  leaveLegacyModeProfiles?: InputMaybe<Scalars["Boolean"]["input"]>
  profile: ShopifyDeliveryProfileInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDeliveryPromiseParticipantsUpdateArgs {
  brandedPromiseHandle: Scalars["String"]["input"]
  ownersToAdd?: InputMaybe<Array<Scalars["ID"]["input"]>>
  ownersToRemove?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDeliveryPromiseProviderUpsertArgs {
  active?: InputMaybe<Scalars["Boolean"]["input"]>
  fulfillmentDelay?: InputMaybe<Scalars["Int"]["input"]>
  locationId: Scalars["ID"]["input"]
  timeZone?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDeliverySettingUpdateArgs {
  setting: ShopifyDeliverySettingInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDeliveryShippingOriginAssignArgs {
  locationId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountAutomaticActivateArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountAutomaticAppCreateArgs {
  automaticAppDiscount: ShopifyDiscountAutomaticAppInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountAutomaticAppUpdateArgs {
  automaticAppDiscount: ShopifyDiscountAutomaticAppInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountAutomaticBasicCreateArgs {
  automaticBasicDiscount: ShopifyDiscountAutomaticBasicInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountAutomaticBasicUpdateArgs {
  automaticBasicDiscount: ShopifyDiscountAutomaticBasicInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountAutomaticBulkDeleteArgs {
  ids?: InputMaybe<Array<Scalars["ID"]["input"]>>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  search?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountAutomaticBxgyCreateArgs {
  automaticBxgyDiscount: ShopifyDiscountAutomaticBxgyInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountAutomaticBxgyUpdateArgs {
  automaticBxgyDiscount: ShopifyDiscountAutomaticBxgyInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountAutomaticDeactivateArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountAutomaticDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountAutomaticFreeShippingCreateArgs {
  freeShippingAutomaticDiscount: ShopifyDiscountAutomaticFreeShippingInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountAutomaticFreeShippingUpdateArgs {
  freeShippingAutomaticDiscount: ShopifyDiscountAutomaticFreeShippingInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountCodeActivateArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountCodeAppCreateArgs {
  codeAppDiscount: ShopifyDiscountCodeAppInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountCodeAppUpdateArgs {
  codeAppDiscount: ShopifyDiscountCodeAppInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountCodeBasicCreateArgs {
  basicCodeDiscount: ShopifyDiscountCodeBasicInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountCodeBasicUpdateArgs {
  basicCodeDiscount: ShopifyDiscountCodeBasicInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountCodeBulkActivateArgs {
  ids?: InputMaybe<Array<Scalars["ID"]["input"]>>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  search?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountCodeBulkDeactivateArgs {
  ids?: InputMaybe<Array<Scalars["ID"]["input"]>>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  search?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountCodeBulkDeleteArgs {
  ids?: InputMaybe<Array<Scalars["ID"]["input"]>>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  search?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountCodeBxgyCreateArgs {
  bxgyCodeDiscount: ShopifyDiscountCodeBxgyInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountCodeBxgyUpdateArgs {
  bxgyCodeDiscount: ShopifyDiscountCodeBxgyInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountCodeDeactivateArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountCodeDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountCodeFreeShippingCreateArgs {
  freeShippingCodeDiscount: ShopifyDiscountCodeFreeShippingInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountCodeFreeShippingUpdateArgs {
  freeShippingCodeDiscount: ShopifyDiscountCodeFreeShippingInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountCodeRedeemCodeBulkDeleteArgs {
  discountId: Scalars["ID"]["input"]
  ids?: InputMaybe<Array<Scalars["ID"]["input"]>>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  search?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDiscountRedeemCodeBulkAddArgs {
  codes: Array<ShopifyDiscountRedeemCodeInput>
  discountId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDisputeEvidenceUpdateArgs {
  id: Scalars["ID"]["input"]
  input: ShopifyShopifyPaymentsDisputeEvidenceUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDraftOrderBulkAddTagsArgs {
  ids?: InputMaybe<Array<Scalars["ID"]["input"]>>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  search?: InputMaybe<Scalars["String"]["input"]>
  tags: Array<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDraftOrderBulkDeleteArgs {
  ids?: InputMaybe<Array<Scalars["ID"]["input"]>>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  search?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDraftOrderBulkRemoveTagsArgs {
  ids?: InputMaybe<Array<Scalars["ID"]["input"]>>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  search?: InputMaybe<Scalars["String"]["input"]>
  tags: Array<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDraftOrderCalculateArgs {
  input: ShopifyDraftOrderInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDraftOrderCompleteArgs {
  id: Scalars["ID"]["input"]
  paymentGatewayId?: InputMaybe<Scalars["ID"]["input"]>
  sourceName?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDraftOrderCreateArgs {
  input: ShopifyDraftOrderInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDraftOrderCreateFromOrderArgs {
  orderId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDraftOrderDeleteArgs {
  input: ShopifyDraftOrderDeleteInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDraftOrderDuplicateArgs {
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDraftOrderInvoicePreviewArgs {
  email?: InputMaybe<ShopifyEmailInput>
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDraftOrderInvoiceSendArgs {
  email?: InputMaybe<ShopifyEmailInput>
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationDraftOrderUpdateArgs {
  id: Scalars["ID"]["input"]
  input: ShopifyDraftOrderInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationEventBridgeServerPixelUpdateArgs {
  arn: Scalars["ARN"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationEventBridgeWebhookSubscriptionCreateArgs {
  topic: ShopifyWebhookSubscriptionTopic
  webhookSubscription: ShopifyEventBridgeWebhookSubscriptionInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationEventBridgeWebhookSubscriptionUpdateArgs {
  id: Scalars["ID"]["input"]
  webhookSubscription: ShopifyEventBridgeWebhookSubscriptionInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFileAcknowledgeUpdateFailedArgs {
  fileIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFileCreateArgs {
  files: Array<ShopifyFileCreateInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFileDeleteArgs {
  fileIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFileUpdateArgs {
  files: Array<ShopifyFileUpdateInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFlowGenerateSignatureArgs {
  id: Scalars["ID"]["input"]
  payload: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFlowTriggerReceiveArgs {
  handle?: InputMaybe<Scalars["String"]["input"]>
  payload?: InputMaybe<Scalars["JSON"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentCancelArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentConstraintRuleCreateArgs {
  deliveryMethodTypes: Array<ShopifyDeliveryMethodType>
  functionId: Scalars["String"]["input"]
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentConstraintRuleDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentConstraintRuleUpdateArgs {
  deliveryMethodTypes: Array<ShopifyDeliveryMethodType>
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentCreateArgs {
  fulfillment: ShopifyFulfillmentInput
  message?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentCreateV2Args {
  fulfillment: ShopifyFulfillmentV2Input
  message?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentEventCreateArgs {
  fulfillmentEvent: ShopifyFulfillmentEventInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderAcceptCancellationRequestArgs {
  id: Scalars["ID"]["input"]
  message?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderAcceptFulfillmentRequestArgs {
  estimatedShippedAt?: InputMaybe<Scalars["DateTime"]["input"]>
  id: Scalars["ID"]["input"]
  message?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderCancelArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderCloseArgs {
  id: Scalars["ID"]["input"]
  message?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderHoldArgs {
  fulfillmentHold: ShopifyFulfillmentOrderHoldInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderLineItemsPreparedForPickupArgs {
  input: ShopifyFulfillmentOrderLineItemsPreparedForPickupInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderMergeArgs {
  fulfillmentOrderMergeInputs: Array<ShopifyFulfillmentOrderMergeInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderMoveArgs {
  fulfillmentOrderLineItems?: InputMaybe<
    Array<ShopifyFulfillmentOrderLineItemInput>
  >
  id: Scalars["ID"]["input"]
  newLocationId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderOpenArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderRejectCancellationRequestArgs {
  id: Scalars["ID"]["input"]
  message?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderRejectFulfillmentRequestArgs {
  id: Scalars["ID"]["input"]
  lineItems?: InputMaybe<Array<ShopifyIncomingRequestLineItemInput>>
  message?: InputMaybe<Scalars["String"]["input"]>
  reason?: InputMaybe<ShopifyFulfillmentOrderRejectionReason>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderReleaseHoldArgs {
  externalId?: InputMaybe<Scalars["String"]["input"]>
  holdIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderRescheduleArgs {
  fulfillAt: Scalars["DateTime"]["input"]
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderSplitArgs {
  fulfillmentOrderSplits: Array<ShopifyFulfillmentOrderSplitInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderSubmitCancellationRequestArgs {
  id: Scalars["ID"]["input"]
  message?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrderSubmitFulfillmentRequestArgs {
  fulfillmentOrderLineItems?: InputMaybe<
    Array<ShopifyFulfillmentOrderLineItemInput>
  >
  id: Scalars["ID"]["input"]
  message?: InputMaybe<Scalars["String"]["input"]>
  notifyCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentOrdersSetFulfillmentDeadlineArgs {
  fulfillmentDeadline: Scalars["DateTime"]["input"]
  fulfillmentOrderIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentServiceCreateArgs {
  callbackUrl: Scalars["URL"]["input"]
  inventoryManagement?: InputMaybe<Scalars["Boolean"]["input"]>
  name: Scalars["String"]["input"]
  requiresShippingMethod?: InputMaybe<Scalars["Boolean"]["input"]>
  trackingSupport?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentServiceDeleteArgs {
  destinationLocationId?: InputMaybe<Scalars["ID"]["input"]>
  id: Scalars["ID"]["input"]
  inventoryAction?: InputMaybe<ShopifyFulfillmentServiceDeleteInventoryAction>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentServiceUpdateArgs {
  callbackUrl?: InputMaybe<Scalars["URL"]["input"]>
  id: Scalars["ID"]["input"]
  inventoryManagement?: InputMaybe<Scalars["Boolean"]["input"]>
  name?: InputMaybe<Scalars["String"]["input"]>
  requiresShippingMethod?: InputMaybe<Scalars["Boolean"]["input"]>
  trackingSupport?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentTrackingInfoUpdateArgs {
  fulfillmentId: Scalars["ID"]["input"]
  notifyCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
  trackingInfoInput: ShopifyFulfillmentTrackingInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationFulfillmentTrackingInfoUpdateV2Args {
  fulfillmentId: Scalars["ID"]["input"]
  notifyCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
  trackingInfoInput: ShopifyFulfillmentTrackingInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationGiftCardCreateArgs {
  input: ShopifyGiftCardCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationGiftCardCreditArgs {
  creditInput: ShopifyGiftCardCreditInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationGiftCardDeactivateArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationGiftCardDebitArgs {
  debitInput: ShopifyGiftCardDebitInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationGiftCardSendNotificationToCustomerArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationGiftCardSendNotificationToRecipientArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationGiftCardUpdateArgs {
  id: Scalars["ID"]["input"]
  input: ShopifyGiftCardUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryActivateArgs {
  available?: InputMaybe<Scalars["Int"]["input"]>
  inventoryItemId: Scalars["ID"]["input"]
  locationId: Scalars["ID"]["input"]
  onHand?: InputMaybe<Scalars["Int"]["input"]>
  stockAtLegacyLocation?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryAdjustQuantitiesArgs {
  input: ShopifyInventoryAdjustQuantitiesInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryBulkToggleActivationArgs {
  inventoryItemId: Scalars["ID"]["input"]
  inventoryItemUpdates: Array<ShopifyInventoryBulkToggleActivationInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryDeactivateArgs {
  inventoryLevelId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryItemUpdateArgs {
  id: Scalars["ID"]["input"]
  input: ShopifyInventoryItemInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryMoveQuantitiesArgs {
  input: ShopifyInventoryMoveQuantitiesInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventorySetOnHandQuantitiesArgs {
  input: ShopifyInventorySetOnHandQuantitiesInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventorySetQuantitiesArgs {
  input: ShopifyInventorySetQuantitiesInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventorySetScheduledChangesArgs {
  input: ShopifyInventorySetScheduledChangesInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryShipmentAddItemsArgs {
  id: Scalars["ID"]["input"]
  lineItems: Array<ShopifyInventoryShipmentLineItemInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryShipmentCreateArgs {
  input: ShopifyInventoryShipmentCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryShipmentCreateInTransitArgs {
  input: ShopifyInventoryShipmentCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryShipmentDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryShipmentMarkInTransitArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryShipmentReceiveArgs {
  bulkReceiveAction?: InputMaybe<ShopifyInventoryShipmentReceiveLineItemReason>
  id: Scalars["ID"]["input"]
  lineItems?: InputMaybe<Array<ShopifyInventoryShipmentReceiveItemInput>>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryShipmentRemoveItemsArgs {
  id: Scalars["ID"]["input"]
  lineItems: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryShipmentSetTrackingArgs {
  id: Scalars["ID"]["input"]
  tracking: ShopifyInventoryShipmentTrackingInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryShipmentUpdateItemQuantitiesArgs {
  id: Scalars["ID"]["input"]
  items?: InputMaybe<Array<ShopifyInventoryShipmentUpdateItemQuantitiesInput>>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryTransferCancelArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryTransferCreateArgs {
  input: ShopifyInventoryTransferCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryTransferCreateAsReadyToShipArgs {
  input: ShopifyInventoryTransferCreateAsReadyToShipInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryTransferDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryTransferDuplicateArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryTransferEditArgs {
  id: Scalars["ID"]["input"]
  input: ShopifyInventoryTransferEditInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryTransferMarkAsReadyToShipArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryTransferRemoveItemsArgs {
  input: ShopifyInventoryTransferRemoveItemsInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationInventoryTransferSetItemsArgs {
  input: ShopifyInventoryTransferSetItemsInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationLocationActivateArgs {
  locationId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationLocationAddArgs {
  input: ShopifyLocationAddInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationLocationDeactivateArgs {
  destinationLocationId?: InputMaybe<Scalars["ID"]["input"]>
  locationId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationLocationDeleteArgs {
  locationId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationLocationEditArgs {
  id: Scalars["ID"]["input"]
  input: ShopifyLocationEditInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationLocationLocalPickupDisableArgs {
  locationId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationLocationLocalPickupEnableArgs {
  localPickupSettings: ShopifyDeliveryLocationLocalPickupEnableInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketCreateArgs {
  input: ShopifyMarketCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketCurrencySettingsUpdateArgs {
  input: ShopifyMarketCurrencySettingsUpdateInput
  marketId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketLocalizationsRegisterArgs {
  marketLocalizations: Array<ShopifyMarketLocalizationRegisterInput>
  resourceId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketLocalizationsRemoveArgs {
  marketIds: Array<Scalars["ID"]["input"]>
  marketLocalizationKeys: Array<Scalars["String"]["input"]>
  resourceId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketRegionDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketRegionsCreateArgs {
  marketId: Scalars["ID"]["input"]
  regions: Array<ShopifyMarketRegionCreateInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketRegionsDeleteArgs {
  ids: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketUpdateArgs {
  id: Scalars["ID"]["input"]
  input: ShopifyMarketUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketWebPresenceCreateArgs {
  marketId: Scalars["ID"]["input"]
  webPresence: ShopifyMarketWebPresenceCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketWebPresenceDeleteArgs {
  webPresenceId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketWebPresenceUpdateArgs {
  webPresence: ShopifyMarketWebPresenceUpdateInput
  webPresenceId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketingActivityCreateArgs {
  input: ShopifyMarketingActivityCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketingActivityCreateExternalArgs {
  input: ShopifyMarketingActivityCreateExternalInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketingActivityDeleteExternalArgs {
  marketingActivityId?: InputMaybe<Scalars["ID"]["input"]>
  remoteId?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketingActivityUpdateArgs {
  input: ShopifyMarketingActivityUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketingActivityUpdateExternalArgs {
  input: ShopifyMarketingActivityUpdateExternalInput
  marketingActivityId?: InputMaybe<Scalars["ID"]["input"]>
  remoteId?: InputMaybe<Scalars["String"]["input"]>
  utm?: InputMaybe<ShopifyUtmInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketingActivityUpsertExternalArgs {
  input: ShopifyMarketingActivityUpsertExternalInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketingEngagementCreateArgs {
  channelHandle?: InputMaybe<Scalars["String"]["input"]>
  marketingActivityId?: InputMaybe<Scalars["ID"]["input"]>
  marketingEngagement: ShopifyMarketingEngagementInput
  remoteId?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMarketingEngagementsDeleteArgs {
  channelHandle?: InputMaybe<Scalars["String"]["input"]>
  deleteEngagementsForAllChannels?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMenuCreateArgs {
  handle: Scalars["String"]["input"]
  items: Array<ShopifyMenuItemCreateInput>
  title: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMenuDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMenuUpdateArgs {
  handle?: InputMaybe<Scalars["String"]["input"]>
  id: Scalars["ID"]["input"]
  items: Array<ShopifyMenuItemUpdateInput>
  title: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMetafieldDefinitionCreateArgs {
  definition: ShopifyMetafieldDefinitionInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMetafieldDefinitionDeleteArgs {
  deleteAllAssociatedMetafields?: InputMaybe<Scalars["Boolean"]["input"]>
  id?: InputMaybe<Scalars["ID"]["input"]>
  identifier?: InputMaybe<ShopifyMetafieldDefinitionIdentifierInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMetafieldDefinitionPinArgs {
  definitionId?: InputMaybe<Scalars["ID"]["input"]>
  identifier?: InputMaybe<ShopifyMetafieldDefinitionIdentifierInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMetafieldDefinitionUnpinArgs {
  definitionId?: InputMaybe<Scalars["ID"]["input"]>
  identifier?: InputMaybe<ShopifyMetafieldDefinitionIdentifierInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMetafieldDefinitionUpdateArgs {
  definition: ShopifyMetafieldDefinitionUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMetafieldsDeleteArgs {
  metafields: Array<ShopifyMetafieldIdentifierInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMetafieldsSetArgs {
  metafields: Array<ShopifyMetafieldsSetInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMetaobjectBulkDeleteArgs {
  where: ShopifyMetaobjectBulkDeleteWhereCondition
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMetaobjectCreateArgs {
  metaobject: ShopifyMetaobjectCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMetaobjectDefinitionCreateArgs {
  definition: ShopifyMetaobjectDefinitionCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMetaobjectDefinitionDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMetaobjectDefinitionUpdateArgs {
  definition: ShopifyMetaobjectDefinitionUpdateInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMetaobjectDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMetaobjectUpdateArgs {
  id: Scalars["ID"]["input"]
  metaobject: ShopifyMetaobjectUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMetaobjectUpsertArgs {
  handle: ShopifyMetaobjectHandleInput
  metaobject: ShopifyMetaobjectUpsertInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMobilePlatformApplicationCreateArgs {
  input: ShopifyMobilePlatformApplicationCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMobilePlatformApplicationDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationMobilePlatformApplicationUpdateArgs {
  id: Scalars["ID"]["input"]
  input: ShopifyMobilePlatformApplicationUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderCancelArgs {
  notifyCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
  orderId: Scalars["ID"]["input"]
  reason: ShopifyOrderCancelReason
  refundMethod?: InputMaybe<ShopifyOrderCancelRefundMethodInput>
  restock: Scalars["Boolean"]["input"]
  staffNote?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderCaptureArgs {
  input: ShopifyOrderCaptureInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderCloseArgs {
  input: ShopifyOrderCloseInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderCreateArgs {
  options?: InputMaybe<ShopifyOrderCreateOptionsInput>
  order: ShopifyOrderCreateOrderInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderCreateMandatePaymentArgs {
  amount?: InputMaybe<ShopifyMoneyInput>
  autoCapture?: InputMaybe<Scalars["Boolean"]["input"]>
  id: Scalars["ID"]["input"]
  idempotencyKey: Scalars["String"]["input"]
  mandateId: Scalars["ID"]["input"]
  paymentScheduleId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderCreateManualPaymentArgs {
  amount?: InputMaybe<ShopifyMoneyInput>
  id: Scalars["ID"]["input"]
  paymentMethodName?: InputMaybe<Scalars["String"]["input"]>
  processedAt?: InputMaybe<Scalars["DateTime"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderCustomerRemoveArgs {
  orderId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderCustomerSetArgs {
  customerId: Scalars["ID"]["input"]
  orderId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderDeleteArgs {
  orderId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderEditAddCustomItemArgs {
  id: Scalars["ID"]["input"]
  locationId?: InputMaybe<Scalars["ID"]["input"]>
  price: ShopifyMoneyInput
  quantity: Scalars["Int"]["input"]
  requiresShipping?: InputMaybe<Scalars["Boolean"]["input"]>
  taxable?: InputMaybe<Scalars["Boolean"]["input"]>
  title: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderEditAddLineItemDiscountArgs {
  discount: ShopifyOrderEditAppliedDiscountInput
  id: Scalars["ID"]["input"]
  lineItemId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderEditAddShippingLineArgs {
  id: Scalars["ID"]["input"]
  shippingLine: ShopifyOrderEditAddShippingLineInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderEditAddVariantArgs {
  allowDuplicates?: InputMaybe<Scalars["Boolean"]["input"]>
  id: Scalars["ID"]["input"]
  locationId?: InputMaybe<Scalars["ID"]["input"]>
  quantity: Scalars["Int"]["input"]
  variantId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderEditBeginArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderEditCommitArgs {
  id: Scalars["ID"]["input"]
  notifyCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
  staffNote?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderEditRemoveDiscountArgs {
  discountApplicationId: Scalars["ID"]["input"]
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderEditRemoveLineItemDiscountArgs {
  discountApplicationId: Scalars["ID"]["input"]
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderEditRemoveShippingLineArgs {
  id: Scalars["ID"]["input"]
  shippingLineId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderEditSetQuantityArgs {
  id: Scalars["ID"]["input"]
  lineItemId: Scalars["ID"]["input"]
  quantity: Scalars["Int"]["input"]
  restock?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderEditUpdateDiscountArgs {
  discount: ShopifyOrderEditAppliedDiscountInput
  discountApplicationId: Scalars["ID"]["input"]
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderEditUpdateShippingLineArgs {
  id: Scalars["ID"]["input"]
  shippingLine: ShopifyOrderEditUpdateShippingLineInput
  shippingLineId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderInvoiceSendArgs {
  email?: InputMaybe<ShopifyEmailInput>
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderMarkAsPaidArgs {
  input: ShopifyOrderMarkAsPaidInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderOpenArgs {
  input: ShopifyOrderOpenInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderRiskAssessmentCreateArgs {
  orderRiskAssessmentInput: ShopifyOrderRiskAssessmentCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationOrderUpdateArgs {
  input: ShopifyOrderInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPageCreateArgs {
  page: ShopifyPageCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPageDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPageUpdateArgs {
  id: Scalars["ID"]["input"]
  page: ShopifyPageUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPaymentCustomizationActivationArgs {
  enabled: Scalars["Boolean"]["input"]
  ids: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPaymentCustomizationCreateArgs {
  paymentCustomization: ShopifyPaymentCustomizationInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPaymentCustomizationDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPaymentCustomizationUpdateArgs {
  id: Scalars["ID"]["input"]
  paymentCustomization: ShopifyPaymentCustomizationInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPaymentReminderSendArgs {
  paymentScheduleId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPaymentTermsCreateArgs {
  paymentTermsAttributes: ShopifyPaymentTermsCreateInput
  referenceId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPaymentTermsDeleteArgs {
  input: ShopifyPaymentTermsDeleteInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPaymentTermsUpdateArgs {
  input: ShopifyPaymentTermsUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPriceListCreateArgs {
  input: ShopifyPriceListCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPriceListDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPriceListFixedPricesAddArgs {
  priceListId: Scalars["ID"]["input"]
  prices: Array<ShopifyPriceListPriceInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPriceListFixedPricesByProductUpdateArgs {
  priceListId: Scalars["ID"]["input"]
  pricesToAdd?: InputMaybe<Array<ShopifyPriceListProductPriceInput>>
  pricesToDeleteByProductIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPriceListFixedPricesDeleteArgs {
  priceListId: Scalars["ID"]["input"]
  variantIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPriceListFixedPricesUpdateArgs {
  priceListId: Scalars["ID"]["input"]
  pricesToAdd: Array<ShopifyPriceListPriceInput>
  variantIdsToDelete: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPriceListUpdateArgs {
  id: Scalars["ID"]["input"]
  input: ShopifyPriceListUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPrivacyFeaturesDisableArgs {
  featuresToDisable: Array<ShopifyPrivacyFeaturesEnum>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductBundleCreateArgs {
  input: ShopifyProductBundleCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductBundleUpdateArgs {
  input: ShopifyProductBundleUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductChangeStatusArgs {
  productId: Scalars["ID"]["input"]
  status: ShopifyProductStatus
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductCreateArgs {
  media?: InputMaybe<Array<ShopifyCreateMediaInput>>
  product?: InputMaybe<ShopifyProductCreateInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductCreateMediaArgs {
  media: Array<ShopifyCreateMediaInput>
  productId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductDeleteArgs {
  input: ShopifyProductDeleteInput
  synchronous?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductDeleteMediaArgs {
  mediaIds: Array<Scalars["ID"]["input"]>
  productId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductDuplicateArgs {
  includeImages?: InputMaybe<Scalars["Boolean"]["input"]>
  includeTranslations?: InputMaybe<Scalars["Boolean"]["input"]>
  newStatus?: InputMaybe<ShopifyProductStatus>
  newTitle: Scalars["String"]["input"]
  productId: Scalars["ID"]["input"]
  synchronous?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductFeedCreateArgs {
  input?: InputMaybe<ShopifyProductFeedInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductFeedDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductFullSyncArgs {
  beforeUpdatedAt?: InputMaybe<Scalars["DateTime"]["input"]>
  id: Scalars["ID"]["input"]
  updatedAtSince?: InputMaybe<Scalars["DateTime"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductJoinSellingPlanGroupsArgs {
  id: Scalars["ID"]["input"]
  sellingPlanGroupIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductLeaveSellingPlanGroupsArgs {
  id: Scalars["ID"]["input"]
  sellingPlanGroupIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductOptionUpdateArgs {
  option: ShopifyOptionUpdateInput
  optionValuesToAdd?: InputMaybe<Array<ShopifyOptionValueCreateInput>>
  optionValuesToDelete?: InputMaybe<Array<Scalars["ID"]["input"]>>
  optionValuesToUpdate?: InputMaybe<Array<ShopifyOptionValueUpdateInput>>
  productId: Scalars["ID"]["input"]
  variantStrategy?: InputMaybe<ShopifyProductOptionUpdateVariantStrategy>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductOptionsCreateArgs {
  options: Array<ShopifyOptionCreateInput>
  productId: Scalars["ID"]["input"]
  variantStrategy?: InputMaybe<ShopifyProductOptionCreateVariantStrategy>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductOptionsDeleteArgs {
  options: Array<Scalars["ID"]["input"]>
  productId: Scalars["ID"]["input"]
  strategy?: InputMaybe<ShopifyProductOptionDeleteStrategy>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductOptionsReorderArgs {
  options: Array<ShopifyOptionReorderInput>
  productId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductPublishArgs {
  input: ShopifyProductPublishInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductReorderMediaArgs {
  id: Scalars["ID"]["input"]
  moves: Array<ShopifyMoveInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductSetArgs {
  identifier?: InputMaybe<ShopifyProductSetIdentifiers>
  input: ShopifyProductSetInput
  synchronous?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductUnpublishArgs {
  input: ShopifyProductUnpublishInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductUpdateArgs {
  media?: InputMaybe<Array<ShopifyCreateMediaInput>>
  product?: InputMaybe<ShopifyProductUpdateInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductUpdateMediaArgs {
  media: Array<ShopifyUpdateMediaInput>
  productId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductVariantAppendMediaArgs {
  productId: Scalars["ID"]["input"]
  variantMedia: Array<ShopifyProductVariantAppendMediaInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductVariantDetachMediaArgs {
  productId: Scalars["ID"]["input"]
  variantMedia: Array<ShopifyProductVariantDetachMediaInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductVariantJoinSellingPlanGroupsArgs {
  id: Scalars["ID"]["input"]
  sellingPlanGroupIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductVariantLeaveSellingPlanGroupsArgs {
  id: Scalars["ID"]["input"]
  sellingPlanGroupIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductVariantRelationshipBulkUpdateArgs {
  input: Array<ShopifyProductVariantRelationshipUpdateInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductVariantsBulkCreateArgs {
  media?: InputMaybe<Array<ShopifyCreateMediaInput>>
  productId: Scalars["ID"]["input"]
  strategy?: InputMaybe<ShopifyProductVariantsBulkCreateStrategy>
  variants: Array<ShopifyProductVariantsBulkInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductVariantsBulkDeleteArgs {
  productId: Scalars["ID"]["input"]
  variantsIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductVariantsBulkReorderArgs {
  positions: Array<ShopifyProductVariantPositionInput>
  productId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationProductVariantsBulkUpdateArgs {
  allowPartialUpdates?: InputMaybe<Scalars["Boolean"]["input"]>
  media?: InputMaybe<Array<ShopifyCreateMediaInput>>
  productId: Scalars["ID"]["input"]
  variants: Array<ShopifyProductVariantsBulkInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPubSubServerPixelUpdateArgs {
  pubSubProject: Scalars["String"]["input"]
  pubSubTopic: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPubSubWebhookSubscriptionCreateArgs {
  topic: ShopifyWebhookSubscriptionTopic
  webhookSubscription: ShopifyPubSubWebhookSubscriptionInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPubSubWebhookSubscriptionUpdateArgs {
  id: Scalars["ID"]["input"]
  webhookSubscription: ShopifyPubSubWebhookSubscriptionInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPublicationCreateArgs {
  input: ShopifyPublicationCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPublicationDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPublicationUpdateArgs {
  id: Scalars["ID"]["input"]
  input: ShopifyPublicationUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPublishablePublishArgs {
  id: Scalars["ID"]["input"]
  input: Array<ShopifyPublicationInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPublishablePublishToCurrentChannelArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPublishableUnpublishArgs {
  id: Scalars["ID"]["input"]
  input: Array<ShopifyPublicationInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationPublishableUnpublishToCurrentChannelArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationQuantityPricingByVariantUpdateArgs {
  input: ShopifyQuantityPricingByVariantUpdateInput
  priceListId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationQuantityRulesAddArgs {
  priceListId: Scalars["ID"]["input"]
  quantityRules: Array<ShopifyQuantityRuleInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationQuantityRulesDeleteArgs {
  priceListId: Scalars["ID"]["input"]
  variantIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationRefundCreateArgs {
  input: ShopifyRefundInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationRemoveFromReturnArgs {
  exchangeLineItems?: InputMaybe<
    Array<ShopifyExchangeLineItemRemoveFromReturnInput>
  >
  returnId: Scalars["ID"]["input"]
  returnLineItems?: InputMaybe<
    Array<ShopifyReturnLineItemRemoveFromReturnInput>
  >
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationReturnApproveRequestArgs {
  input: ShopifyReturnApproveRequestInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationReturnCancelArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationReturnCloseArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationReturnCreateArgs {
  returnInput: ShopifyReturnInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationReturnDeclineRequestArgs {
  input: ShopifyReturnDeclineRequestInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationReturnLineItemRemoveFromReturnArgs {
  returnId: Scalars["ID"]["input"]
  returnLineItems: Array<ShopifyReturnLineItemRemoveFromReturnInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationReturnProcessArgs {
  input: ShopifyReturnProcessInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationReturnRefundArgs {
  returnRefundInput: ShopifyReturnRefundInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationReturnReopenArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationReturnRequestArgs {
  input: ShopifyReturnRequestInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationReverseDeliveryCreateWithShippingArgs {
  labelInput?: InputMaybe<ShopifyReverseDeliveryLabelInput>
  notifyCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
  reverseDeliveryLineItems: Array<ShopifyReverseDeliveryLineItemInput>
  reverseFulfillmentOrderId: Scalars["ID"]["input"]
  trackingInput?: InputMaybe<ShopifyReverseDeliveryTrackingInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationReverseDeliveryShippingUpdateArgs {
  labelInput?: InputMaybe<ShopifyReverseDeliveryLabelInput>
  notifyCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
  reverseDeliveryId: Scalars["ID"]["input"]
  trackingInput?: InputMaybe<ShopifyReverseDeliveryTrackingInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationReverseFulfillmentOrderDisposeArgs {
  dispositionInputs: Array<ShopifyReverseFulfillmentOrderDisposeInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSavedSearchCreateArgs {
  input: ShopifySavedSearchCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSavedSearchDeleteArgs {
  input: ShopifySavedSearchDeleteInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSavedSearchUpdateArgs {
  input: ShopifySavedSearchUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationScriptTagCreateArgs {
  input: ShopifyScriptTagInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationScriptTagDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationScriptTagUpdateArgs {
  id: Scalars["ID"]["input"]
  input: ShopifyScriptTagInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSegmentCreateArgs {
  name: Scalars["String"]["input"]
  query: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSegmentDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSegmentUpdateArgs {
  id: Scalars["ID"]["input"]
  name?: InputMaybe<Scalars["String"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSellingPlanGroupAddProductVariantsArgs {
  id: Scalars["ID"]["input"]
  productVariantIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSellingPlanGroupAddProductsArgs {
  id: Scalars["ID"]["input"]
  productIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSellingPlanGroupCreateArgs {
  input: ShopifySellingPlanGroupInput
  resources?: InputMaybe<ShopifySellingPlanGroupResourceInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSellingPlanGroupDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSellingPlanGroupRemoveProductVariantsArgs {
  id: Scalars["ID"]["input"]
  productVariantIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSellingPlanGroupRemoveProductsArgs {
  id: Scalars["ID"]["input"]
  productIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSellingPlanGroupUpdateArgs {
  id: Scalars["ID"]["input"]
  input: ShopifySellingPlanGroupInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationShippingPackageDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationShippingPackageMakeDefaultArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationShippingPackageUpdateArgs {
  id: Scalars["ID"]["input"]
  shippingPackage: ShopifyCustomShippingPackageInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationShopLocaleDisableArgs {
  locale: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationShopLocaleEnableArgs {
  locale: Scalars["String"]["input"]
  marketWebPresenceIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationShopLocaleUpdateArgs {
  locale: Scalars["String"]["input"]
  shopLocale: ShopifyShopLocaleInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationShopPolicyUpdateArgs {
  shopPolicy: ShopifyShopPolicyInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationShopResourceFeedbackCreateArgs {
  input: ShopifyResourceFeedbackCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationShopifyPaymentsPayoutAlternateCurrencyCreateArgs {
  accountId?: InputMaybe<Scalars["ID"]["input"]>
  currency: ShopifyCurrencyCode
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationStagedUploadTargetGenerateArgs {
  input: ShopifyStagedUploadTargetGenerateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationStagedUploadTargetsGenerateArgs {
  input: Array<ShopifyStageImageInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationStagedUploadsCreateArgs {
  input: Array<ShopifyStagedUploadInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationStandardMetafieldDefinitionEnableArgs {
  access?: InputMaybe<ShopifyStandardMetafieldDefinitionAccessInput>
  capabilities?: InputMaybe<ShopifyMetafieldCapabilityCreateInput>
  id?: InputMaybe<Scalars["ID"]["input"]>
  key?: InputMaybe<Scalars["String"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  ownerType: ShopifyMetafieldOwnerType
  pin?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationStandardMetaobjectDefinitionEnableArgs {
  type: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationStoreCreditAccountCreditArgs {
  creditInput: ShopifyStoreCreditAccountCreditInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationStoreCreditAccountDebitArgs {
  debitInput: ShopifyStoreCreditAccountDebitInput
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationStorefrontAccessTokenCreateArgs {
  input: ShopifyStorefrontAccessTokenInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationStorefrontAccessTokenDeleteArgs {
  input: ShopifyStorefrontAccessTokenDeleteInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionBillingAttemptCreateArgs {
  subscriptionBillingAttemptInput: ShopifySubscriptionBillingAttemptInput
  subscriptionContractId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionBillingCycleBulkChargeArgs {
  billingAttemptExpectedDateRange: ShopifySubscriptionBillingCyclesDateRangeSelector
  filters?: InputMaybe<ShopifySubscriptionBillingCycleBulkFilters>
  inventoryPolicy?: InputMaybe<ShopifySubscriptionBillingAttemptInventoryPolicy>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionBillingCycleBulkSearchArgs {
  billingAttemptExpectedDateRange: ShopifySubscriptionBillingCyclesDateRangeSelector
  filters?: InputMaybe<ShopifySubscriptionBillingCycleBulkFilters>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionBillingCycleChargeArgs {
  billingCycleSelector: ShopifySubscriptionBillingCycleSelector
  inventoryPolicy?: InputMaybe<ShopifySubscriptionBillingAttemptInventoryPolicy>
  subscriptionContractId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionBillingCycleContractDraftCommitArgs {
  draftId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionBillingCycleContractDraftConcatenateArgs {
  concatenatedBillingCycleContracts: Array<ShopifySubscriptionBillingCycleInput>
  draftId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionBillingCycleContractEditArgs {
  billingCycleInput: ShopifySubscriptionBillingCycleInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionBillingCycleEditDeleteArgs {
  billingCycleInput: ShopifySubscriptionBillingCycleInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionBillingCycleEditsDeleteArgs {
  contractId: Scalars["ID"]["input"]
  targetSelection: ShopifySubscriptionBillingCyclesTargetSelection
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionBillingCycleScheduleEditArgs {
  billingCycleInput: ShopifySubscriptionBillingCycleInput
  input: ShopifySubscriptionBillingCycleScheduleEditInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionBillingCycleSkipArgs {
  billingCycleInput: ShopifySubscriptionBillingCycleInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionBillingCycleUnskipArgs {
  billingCycleInput: ShopifySubscriptionBillingCycleInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionContractActivateArgs {
  subscriptionContractId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionContractAtomicCreateArgs {
  input: ShopifySubscriptionContractAtomicCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionContractCancelArgs {
  subscriptionContractId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionContractCreateArgs {
  input: ShopifySubscriptionContractCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionContractExpireArgs {
  subscriptionContractId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionContractFailArgs {
  subscriptionContractId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionContractPauseArgs {
  subscriptionContractId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionContractProductChangeArgs {
  input: ShopifySubscriptionContractProductChangeInput
  lineId: Scalars["ID"]["input"]
  subscriptionContractId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionContractSetNextBillingDateArgs {
  contractId: Scalars["ID"]["input"]
  date: Scalars["DateTime"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionContractUpdateArgs {
  contractId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionDraftCommitArgs {
  draftId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionDraftDiscountAddArgs {
  draftId: Scalars["ID"]["input"]
  input: ShopifySubscriptionManualDiscountInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionDraftDiscountCodeApplyArgs {
  draftId: Scalars["ID"]["input"]
  redeemCode: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionDraftDiscountRemoveArgs {
  discountId: Scalars["ID"]["input"]
  draftId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionDraftDiscountUpdateArgs {
  discountId: Scalars["ID"]["input"]
  draftId: Scalars["ID"]["input"]
  input: ShopifySubscriptionManualDiscountInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionDraftFreeShippingDiscountAddArgs {
  draftId: Scalars["ID"]["input"]
  input: ShopifySubscriptionFreeShippingDiscountInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionDraftFreeShippingDiscountUpdateArgs {
  discountId: Scalars["ID"]["input"]
  draftId: Scalars["ID"]["input"]
  input: ShopifySubscriptionFreeShippingDiscountInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionDraftLineAddArgs {
  draftId: Scalars["ID"]["input"]
  input: ShopifySubscriptionLineInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionDraftLineRemoveArgs {
  draftId: Scalars["ID"]["input"]
  lineId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionDraftLineUpdateArgs {
  draftId: Scalars["ID"]["input"]
  input: ShopifySubscriptionLineUpdateInput
  lineId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationSubscriptionDraftUpdateArgs {
  draftId: Scalars["ID"]["input"]
  input: ShopifySubscriptionDraftInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationTagsAddArgs {
  id: Scalars["ID"]["input"]
  tags: Array<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationTagsRemoveArgs {
  id: Scalars["ID"]["input"]
  tags: Array<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationTaxAppConfigureArgs {
  ready: Scalars["Boolean"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationThemeCreateArgs {
  name?: InputMaybe<Scalars["String"]["input"]>
  role?: InputMaybe<ShopifyThemeRole>
  source: Scalars["URL"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationThemeDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationThemeFilesCopyArgs {
  files: Array<ShopifyThemeFilesCopyFileInput>
  themeId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationThemeFilesDeleteArgs {
  files: Array<Scalars["String"]["input"]>
  themeId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationThemeFilesUpsertArgs {
  files: Array<ShopifyOnlineStoreThemeFilesUpsertFileInput>
  themeId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationThemePublishArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationThemeUpdateArgs {
  id: Scalars["ID"]["input"]
  input: ShopifyOnlineStoreThemeInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationTransactionVoidArgs {
  parentTransactionId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationTranslationsRegisterArgs {
  resourceId: Scalars["ID"]["input"]
  translations: Array<ShopifyTranslationInput>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationTranslationsRemoveArgs {
  locales: Array<Scalars["String"]["input"]>
  marketIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
  resourceId: Scalars["ID"]["input"]
  translationKeys: Array<Scalars["String"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationUrlRedirectBulkDeleteByIdsArgs {
  ids: Array<Scalars["ID"]["input"]>
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationUrlRedirectBulkDeleteBySavedSearchArgs {
  savedSearchId: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationUrlRedirectBulkDeleteBySearchArgs {
  search: Scalars["String"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationUrlRedirectCreateArgs {
  urlRedirect: ShopifyUrlRedirectInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationUrlRedirectDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationUrlRedirectImportCreateArgs {
  url: Scalars["URL"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationUrlRedirectImportSubmitArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationUrlRedirectUpdateArgs {
  id: Scalars["ID"]["input"]
  urlRedirect: ShopifyUrlRedirectInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationValidationCreateArgs {
  validation: ShopifyValidationCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationValidationDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationValidationUpdateArgs {
  id: Scalars["ID"]["input"]
  validation: ShopifyValidationUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationWebPixelCreateArgs {
  webPixel: ShopifyWebPixelInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationWebPixelDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationWebPixelUpdateArgs {
  id: Scalars["ID"]["input"]
  webPixel: ShopifyWebPixelInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationWebPresenceCreateArgs {
  input: ShopifyWebPresenceCreateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationWebPresenceDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationWebPresenceUpdateArgs {
  id: Scalars["ID"]["input"]
  input: ShopifyWebPresenceUpdateInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationWebhookSubscriptionCreateArgs {
  topic: ShopifyWebhookSubscriptionTopic
  webhookSubscription: ShopifyWebhookSubscriptionInput
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationWebhookSubscriptionDeleteArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry point for all mutation operations. */
export interface ShopifyMutationWebhookSubscriptionUpdateArgs {
  id: Scalars["ID"]["input"]
  webhookSubscription: ShopifyWebhookSubscriptionInput
}

/**
 * A signed upload parameter for uploading an asset to Shopify.
 *
 * Deprecated in favor of
 * [StagedUploadParameter](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadParameter),
 * which is used in
 * [StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget)
 * and returned by the
 * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
 */
export interface ShopifyMutationsStagedUploadTargetGenerateUploadParameter {
  __typename?: "MutationsStagedUploadTargetGenerateUploadParameter"
  /** The upload parameter name. */
  name: Scalars["String"]["output"]
  /** The upload parameter value. */
  value: Scalars["String"]["output"]
}

/**
 * A default cursor that you can use in queries to paginate your results. Each edge in a connection can
 * return a cursor, which is a reference to the edge's position in the connection. You can use an edge's cursor as
 * the starting point to retrieve the nodes before or after it in a connection.
 *
 * To learn more about using cursor-based pagination, refer to
 * [Paginating results with GraphQL](https://shopify.dev/api/usage/pagination-graphql).
 */
export interface ShopifyNavigable {
  /** A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars["String"]["output"]
}

/** A navigation item, holding basic link attributes. */
export interface ShopifyNavigationItem {
  __typename?: "NavigationItem"
  /** The unique identifier of the navigation item. */
  id: Scalars["String"]["output"]
  /** The name of the navigation item. */
  title: Scalars["String"]["output"]
  /** The URL of the page that the navigation item links to. */
  url: Scalars["URL"]["output"]
}

/**
 * An object with an ID field to support global identification, in accordance with the
 * [Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
 * This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
 * and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
 */
export interface ShopifyNode {
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
}

/** The valid values for the notification usage, specifying the intended notification environment usage for certain operations. */
export type ShopifyNotificationUsage =
  /** The notification environment is sms. */
  | "SMS"
  /** The notification environment is web. */
  | "WEB"
  | "%future added value"

/** The input fields for dimensions of an object. */
export interface ShopifyObjectDimensionsInput {
  /** The height in `unit`s. */
  height: Scalars["Float"]["input"]
  /** The length in `unit`s. */
  length: Scalars["Float"]["input"]
  /** Unit of measurement for `length`, `width`, and `height`. */
  unit: ShopifyLengthUnit
  /** The width in `unit`s. */
  width: Scalars["Float"]["input"]
}

/** The shop's online store channel. */
export interface ShopifyOnlineStore {
  __typename?: "OnlineStore"
  /** Storefront password information. */
  passwordProtection: ShopifyOnlineStorePasswordProtection
}

/** Storefront password information. */
export interface ShopifyOnlineStorePasswordProtection {
  __typename?: "OnlineStorePasswordProtection"
  /** Whether the storefront password is enabled. */
  enabled: Scalars["Boolean"]["output"]
}

/** Online Store preview URL of the object. */
export interface ShopifyOnlineStorePreviewable {
  /** The [preview URL](https://help.shopify.com/manual/online-store/setting-up#preview-your-store) for the online store. */
  onlineStorePreviewUrl?: Maybe<Scalars["URL"]["output"]>
}

/** A theme for display on the storefront. */
export interface ShopifyOnlineStoreTheme
  extends ShopifyHasPublishedTranslations,
    ShopifyNode {
  __typename?: "OnlineStoreTheme"
  /** The date and time when the theme was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The files in the theme. */
  files?: Maybe<ShopifyOnlineStoreThemeFileConnection>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The name of the theme, set by the merchant. */
  name: Scalars["String"]["output"]
  /** The prefix of the theme. */
  prefix: Scalars["String"]["output"]
  /** Whether the theme is processing. */
  processing: Scalars["Boolean"]["output"]
  /** Whether the theme processing failed. */
  processingFailed: Scalars["Boolean"]["output"]
  /** The role of the theme. */
  role: ShopifyThemeRole
  /** The theme store ID. */
  themeStoreId?: Maybe<Scalars["Int"]["output"]>
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
  /** The date and time when the theme was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** A theme for display on the storefront. */
export interface ShopifyOnlineStoreThemeFilesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  filenames?: InputMaybe<Array<Scalars["String"]["input"]>>
  first?: InputMaybe<Scalars["Int"]["input"]>
}

/** A theme for display on the storefront. */
export interface ShopifyOnlineStoreThemeTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/** An auto-generated type for paginating through multiple OnlineStoreThemes. */
export interface ShopifyOnlineStoreThemeConnection {
  __typename?: "OnlineStoreThemeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyOnlineStoreThemeEdge>
  /** A list of nodes that are contained in OnlineStoreThemeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyOnlineStoreTheme>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one OnlineStoreTheme and a cursor during pagination. */
export interface ShopifyOnlineStoreThemeEdge {
  __typename?: "OnlineStoreThemeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of OnlineStoreThemeEdge. */
  node: ShopifyOnlineStoreTheme
}

/** Represents a theme file. */
export interface ShopifyOnlineStoreThemeFile {
  __typename?: "OnlineStoreThemeFile"
  /** The body of the theme file. */
  body: ShopifyOnlineStoreThemeFileBody
  /** The md5 digest of the theme file for data integrity. */
  checksumMd5?: Maybe<Scalars["String"]["output"]>
  /** The content type of the theme file. */
  contentType: Scalars["String"]["output"]
  /** The date and time when the theme file was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The unique identifier of the theme file. */
  filename: Scalars["String"]["output"]
  /** The size of the theme file in bytes. */
  size: Scalars["UnsignedInt64"]["output"]
  /** The date and time when the theme file was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** Represents the body of a theme file. */
export type ShopifyOnlineStoreThemeFileBody =
  | ShopifyOnlineStoreThemeFileBodyBase64
  | ShopifyOnlineStoreThemeFileBodyText
  | ShopifyOnlineStoreThemeFileBodyUrl

/** Represents the base64 encoded body of a theme file. */
export interface ShopifyOnlineStoreThemeFileBodyBase64 {
  __typename?: "OnlineStoreThemeFileBodyBase64"
  /** The body of the theme file, base64 encoded. */
  contentBase64: Scalars["String"]["output"]
}

/** The input fields for the theme file body. */
export interface ShopifyOnlineStoreThemeFileBodyInput {
  /** The input type of the theme file body. */
  type: ShopifyOnlineStoreThemeFileBodyInputType
  /** The body of the theme file. */
  value: Scalars["String"]["input"]
}

/** The input type for a theme file body. */
export type ShopifyOnlineStoreThemeFileBodyInputType =
  /** The base64 encoded body of a theme file. */
  | "BASE64"
  /** The text body of the theme file. */
  | "TEXT"
  /** The url of the body of a theme file. */
  | "URL"
  | "%future added value"

/** Represents the body of a theme file. */
export interface ShopifyOnlineStoreThemeFileBodyText {
  __typename?: "OnlineStoreThemeFileBodyText"
  /** The body of the theme file. */
  content: Scalars["String"]["output"]
}

/** Represents the url of the body of a theme file. */
export interface ShopifyOnlineStoreThemeFileBodyUrl {
  __typename?: "OnlineStoreThemeFileBodyUrl"
  /** The short lived url for the body of the theme file. */
  url: Scalars["URL"]["output"]
}

/** An auto-generated type for paginating through multiple OnlineStoreThemeFiles. */
export interface ShopifyOnlineStoreThemeFileConnection {
  __typename?: "OnlineStoreThemeFileConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyOnlineStoreThemeFileEdge>
  /** A list of nodes that are contained in OnlineStoreThemeFileEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyOnlineStoreThemeFile>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
  /** List of errors that occurred during the request. */
  userErrors: Array<ShopifyOnlineStoreThemeFileReadResult>
}

/** An auto-generated type which holds one OnlineStoreThemeFile and a cursor during pagination. */
export interface ShopifyOnlineStoreThemeFileEdge {
  __typename?: "OnlineStoreThemeFileEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of OnlineStoreThemeFileEdge. */
  node: ShopifyOnlineStoreThemeFile
}

/** Represents the result of a copy, delete, or write operation performed on a theme file. */
export interface ShopifyOnlineStoreThemeFileOperationResult {
  __typename?: "OnlineStoreThemeFileOperationResult"
  /** The md5 digest of the theme file for data integrity. */
  checksumMd5?: Maybe<Scalars["String"]["output"]>
  /** The date and time when the theme file was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** Unique identifier of the theme file. */
  filename: Scalars["String"]["output"]
  /** The size of the theme file in bytes. */
  size: Scalars["UnsignedInt64"]["output"]
  /** The date and time when the theme file was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** Represents the result of a read operation performed on a theme asset. */
export interface ShopifyOnlineStoreThemeFileReadResult {
  __typename?: "OnlineStoreThemeFileReadResult"
  /** Type that indicates the result of the operation. */
  code: ShopifyOnlineStoreThemeFileResultType
  /** Unique identifier associated with the operation and the theme file. */
  filename: Scalars["String"]["output"]
}

/** Type of a theme file operation result. */
export type ShopifyOnlineStoreThemeFileResultType =
  /** Operation was malformed or invalid. */
  | "BAD_REQUEST"
  /** Operation faced a conflict with the current state of the file. */
  | "CONFLICT"
  /** Operation encountered an error. */
  | "ERROR"
  /** Operation file could not be found. */
  | "NOT_FOUND"
  /** Operation was successful. */
  | "SUCCESS"
  /** Operation timed out. */
  | "TIMEOUT"
  /** Operation could not be processed due to issues with input data. */
  | "UNPROCESSABLE_ENTITY"
  | "%future added value"

/** The input fields for the file to create or update. */
export interface ShopifyOnlineStoreThemeFilesUpsertFileInput {
  /** The body of the theme file. */
  body: ShopifyOnlineStoreThemeFileBodyInput
  /** The filename of the theme file. */
  filename: Scalars["String"]["input"]
}

/** User errors for theme file operations. */
export interface ShopifyOnlineStoreThemeFilesUserErrors
  extends ShopifyDisplayableError {
  __typename?: "OnlineStoreThemeFilesUserErrors"
  /** The error code. */
  code?: Maybe<ShopifyOnlineStoreThemeFilesUserErrorsCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The filename of the theme file. */
  filename?: Maybe<Scalars["String"]["output"]>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `OnlineStoreThemeFilesUserErrors`. */
export type ShopifyOnlineStoreThemeFilesUserErrorsCode =
  /** Access denied. */
  | "ACCESS_DENIED"
  /** There are files with the same filename. */
  | "DUPLICATE_FILE_INPUT"
  /** Error. */
  | "ERROR"
  /** The file is invalid. */
  | "FILE_VALIDATION_ERROR"
  /** The input value should be less than or equal to the maximum value allowed. */
  | "LESS_THAN_OR_EQUAL_TO"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** There are theme files with conflicts. */
  | "THEME_FILES_CONFLICT"
  /** This action is not available on your current plan. Please upgrade to access theme editing features. */
  | "THEME_LIMITED_PLAN"
  /** Too many updates in a short period. Please try again later. */
  | "THROTTLED"
  | "%future added value"

/** The input fields for Theme attributes to update. */
export interface ShopifyOnlineStoreThemeInput {
  /** The new name of the theme. */
  name?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields for the options and values of the combined listing. */
export interface ShopifyOptionAndValueInput {
  /** The linked metafield for the product's option. */
  linkedMetafield?: InputMaybe<ShopifyLinkedMetafieldInput>
  /** The name of the Product's Option. */
  name: Scalars["String"]["input"]
  /** The ID of the option to update. If not present, the option will be created. */
  optionId?: InputMaybe<Scalars["ID"]["input"]>
  /** The ordered values of the Product's Option. */
  values: Array<Scalars["String"]["input"]>
}

/** The input fields for creating a product option. */
export interface ShopifyOptionCreateInput {
  /** Specifies the metafield the option is linked to. */
  linkedMetafield?: InputMaybe<ShopifyLinkedMetafieldCreateInput>
  /** Name of the option. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** Position of the option. */
  position?: InputMaybe<Scalars["Int"]["input"]>
  /** Values associated with the option. */
  values?: InputMaybe<Array<ShopifyOptionValueCreateInput>>
}

/** The input fields for reordering a product option and/or its values. */
export interface ShopifyOptionReorderInput {
  /** Specifies the product option to reorder by ID. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** Specifies the product option to reorder by name. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** Values associated with the option. */
  values?: InputMaybe<Array<ShopifyOptionValueReorderInput>>
}

/** The input fields for creating or updating a product option. */
export interface ShopifyOptionSetInput {
  /** Specifies the product option to update. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** Specifies the metafield the option is linked to. */
  linkedMetafield?: InputMaybe<ShopifyLinkedMetafieldCreateInput>
  /** Name of the option. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** Position of the option. */
  position?: InputMaybe<Scalars["Int"]["input"]>
  /** Value associated with an option. */
  values?: InputMaybe<Array<ShopifyOptionValueSetInput>>
}

/** The input fields for updating a product option. */
export interface ShopifyOptionUpdateInput {
  /** Specifies the product option to update. */
  id: Scalars["ID"]["input"]
  /** Specifies the metafield the option is linked to. */
  linkedMetafield?: InputMaybe<ShopifyLinkedMetafieldUpdateInput>
  /** Name of the option. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** Position of the option. */
  position?: InputMaybe<Scalars["Int"]["input"]>
}

/** The input fields required to create a product option value. */
export interface ShopifyOptionValueCreateInput {
  /** Metafield value associated with an option. */
  linkedMetafieldValue?: InputMaybe<Scalars["String"]["input"]>
  /** Value associated with an option. */
  name?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields for reordering a product option value. */
export interface ShopifyOptionValueReorderInput {
  /** Specifies the product option value by ID. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** Specifies the product option value by name. */
  name?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields for creating or updating a product option value. */
export interface ShopifyOptionValueSetInput {
  /** Specifies the product option value. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** Value associated with an option. */
  name?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields for updating a product option value. */
export interface ShopifyOptionValueUpdateInput {
  /** Specifies the product option value. */
  id: Scalars["ID"]["input"]
  /** Metafield value associated with an option. */
  linkedMetafieldValue?: InputMaybe<Scalars["String"]["input"]>
  /** Value associated with an option. */
  name?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrder
  extends ShopifyCommentEventSubject,
    ShopifyHasEvents,
    ShopifyHasLocalizationExtensions,
    ShopifyHasLocalizedFields,
    ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyLegacyInteroperability,
    ShopifyNode {
  __typename?: "Order"
  /** A list of additional fees applied to an order, such as duties, import fees, or [tax lines](https://shopify.dev/docs/api/admin-graphql/latest/objects/order#field-Order.fields.additionalFees.taxLines). */
  additionalFees: Array<ShopifyAdditionalFee>
  /** A list of sales agreements associated with the order, such as contracts defining payment terms, or delivery schedules between merchants and customers. */
  agreements: ShopifySalesAgreementConnection
  /** A list of messages that appear on the **Orders** page in the Shopify admin. These alerts provide merchants with important information about an order's status or required actions. */
  alerts: Array<ShopifyResourceAlert>
  /**
   * The application that created the order. For example, "Online Store", "Point of Sale", or a custom app name.
   * Use this to identify the order source for attribution and fulfillment workflows.
   * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
   */
  app?: Maybe<ShopifyOrderApp>
  /**
   * The billing address associated with the payment method selected by the customer for an order.
   * Returns `null` if no billing address was provided during checkout.
   */
  billingAddress?: Maybe<ShopifyMailingAddress>
  /** Whether the billing address matches the [shipping address](https://shopify.dev/docs/api/admin-graphql/latest/objects/order#field-Order.fields.shippingAddress). Returns `true` if both addresses are the same, and `false` if they're different or if an address is missing. */
  billingAddressMatchesShippingAddress: Scalars["Boolean"]["output"]
  /** Whether an order can be manually marked as paid. Returns `false` if the order is already paid, is canceled, has pending [Shopify Payments](https://help.shopify.com/en/manual/payments/shopify-payments/payouts) transactions, or has a negative payment amount. */
  canMarkAsPaid: Scalars["Boolean"]["output"]
  /**
   * Whether order notifications can be sent to the customer.
   * Returns `true` if the customer has a valid [email address](https://shopify.dev/docs/api/admin-graphql/latest/objects/order#field-Order.fields.email).
   */
  canNotifyCustomer: Scalars["Boolean"]["output"]
  /** The reason provided for an order cancellation. For example, a merchant might cancel an order if there's insufficient inventory. Returns `null` if the order hasn't been canceled. */
  cancelReason?: Maybe<ShopifyOrderCancelReason>
  /** Details of an order's cancellation, if it has been canceled. This includes the reason, date, and any [staff notes](https://shopify.dev/api/admin-graphql/latest/objects/OrderCancellation#field-OrderCancellation.fields.staffNote). */
  cancellation?: Maybe<ShopifyOrderCancellation>
  /**
   * The date and time in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) when an order was canceled.
   * Returns `null` if the order hasn't been canceled.
   */
  cancelledAt?: Maybe<Scalars["DateTime"]["output"]>
  /**
   * Whether an authorized payment for an order can be captured.
   * Returns `true` if an authorized payment exists that hasn't been fully captured yet. Learn more about [capturing payments](https://help.shopify.com/en/manual/fulfillment/managing-orders/payments/capturing-payments).
   */
  capturable: Scalars["Boolean"]["output"]
  /**
   * The total discount amount that applies to the entire order in shop currency, before returns, refunds, order edits, and cancellations.
   * @deprecated Use `cartDiscountAmountSet` instead.
   */
  cartDiscountAmount?: Maybe<Scalars["Money"]["output"]>
  /** The total discount amount applied at the time the order was created, displayed in both shop and presentment currencies, before returns, refunds, order edits, and cancellations. This field only includes discounts applied to the entire order. */
  cartDiscountAmountSet?: Maybe<ShopifyMoneyBag>
  /**
   * The sales channel from which an order originated, such as the [Online Store](https://shopify.dev/docs/apps/build/app-surfaces#online-store) or [Shopify POS](https://shopify.dev/docs/apps/build/app-surfaces#point-of-sale).
   * @deprecated Use `publication` instead.
   */
  channel?: Maybe<ShopifyChannel>
  /**
   * Details about the sales channel that created the order, such as the [channel app type](https://shopify.dev/docs/api/admin-graphql/latest/objects/channel#field-Channel.fields.channelType)
   * and [channel name](https://shopify.dev/docs/api/admin-graphql/latest/objects/ChannelDefinition#field-ChannelDefinition.fields.channelName), which helps to track order sources.
   */
  channelInformation?: Maybe<ShopifyChannelInformation>
  /** The IP address of the customer who placed the order. Useful for fraud detection and geographic analysis. */
  clientIp?: Maybe<Scalars["String"]["output"]>
  /** Whether an order is closed. An order is considered closed if all its line items have been fulfilled or canceled, and all financial transactions are complete. */
  closed: Scalars["Boolean"]["output"]
  /** The date and time [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) when an order was closed. Shopify automatically records this timestamp when all items have been fulfilled or canceled, and all financial transactions are complete. Returns `null` if the order isn't closed. */
  closedAt?: Maybe<Scalars["DateTime"]["output"]>
  /**
   * A customer-facing order identifier, often shown instead of the sequential order name.
   * It uses a random alphanumeric format (for example, `XPAV284CT`) and isn't guaranteed to be unique across orders.
   */
  confirmationNumber?: Maybe<Scalars["String"]["output"]>
  /**
   * Whether inventory has been reserved for an order. Returns `true` if inventory quantities for an order's [line items](https://shopify.dev/docs/api/admin-graphql/latest/objects/LineItem) have been reserved.
   * Learn more about [managing inventory quantities and states](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps/manage-quantities-states).
   */
  confirmed: Scalars["Boolean"]["output"]
  /** The date and time in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) when an order was created. This timestamp is set when the customer completes checkout and remains unchanged throughout an order's lifecycle. */
  createdAt: Scalars["DateTime"]["output"]
  /** The shop currency when the order was placed. For example, "USD" or "CAD". */
  currencyCode: ShopifyCurrencyCode
  /** The current total of all discounts applied to the entire order, after returns, refunds, order edits, and cancellations. This includes discount codes, automatic discounts, and other promotions that affect the whole order rather than individual line items. To get the original discount amount at the time of order creation, use the [`cartDiscountAmountSet`](https://shopify.dev/docs/api/admin-graphql/latest/objects/order#field-Order.fields.cartDiscountAmountSet) field. */
  currentCartDiscountAmountSet: ShopifyMoneyBag
  /**
   * The current shipping price after applying refunds and discounts.
   * If the parent `order.taxesIncluded` field is true, then this price includes taxes. Otherwise, this field is the pre-tax price.
   */
  currentShippingPriceSet: ShopifyMoneyBag
  /** The current sum of the quantities for all line items that contribute to the order's subtotal price, after returns, refunds, order edits, and cancellations. */
  currentSubtotalLineItemsQuantity: Scalars["Int"]["output"]
  /**
   * The total price of the order, after returns and refunds, in shop and presentment currencies.
   * This includes taxes and discounts.
   */
  currentSubtotalPriceSet: ShopifyMoneyBag
  /**
   * A list of all tax lines applied to line items on the order, after returns.
   * Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
   */
  currentTaxLines: Array<ShopifyTaxLine>
  /** The current total of all additional fees for an order, after any returns or modifications. Modifications include returns, refunds, order edits, and cancellations. Additional fees can include charges such as duties, import fees, and special handling. */
  currentTotalAdditionalFeesSet?: Maybe<ShopifyMoneyBag>
  /**
   * The total amount discounted on the order after returns and refunds, in shop and presentment currencies.
   * This includes both order and line level discounts.
   */
  currentTotalDiscountsSet: ShopifyMoneyBag
  /** The current total duties amount for an order, after any returns or modifications. Modifications include returns, refunds, order edits, and cancellations. */
  currentTotalDutiesSet?: Maybe<ShopifyMoneyBag>
  /**
   * The total price of the order, after returns, in shop and presentment currencies.
   * This includes taxes and discounts.
   */
  currentTotalPriceSet: ShopifyMoneyBag
  /** The sum of the prices of all tax lines applied to line items on the order, after returns and refunds, in shop and presentment currencies. */
  currentTotalTaxSet: ShopifyMoneyBag
  /** The total weight of the order after returns and refunds, in grams. */
  currentTotalWeight: Scalars["UnsignedInt64"]["output"]
  /** A list of additional information that has been attached to the order. For example, gift message, delivery instructions, or internal notes. */
  customAttributes: Array<ShopifyAttribute>
  /**
   * The customer who placed an order. Returns `null` if an order was created through a checkout without customer authentication, such as a guest checkout.
   * Learn more about [customer accounts](https://help.shopify.com/manual/customers/customer-accounts).
   */
  customer?: Maybe<ShopifyCustomer>
  /**
   * Whether the customer agreed to receive marketing emails at the time of purchase.
   * Use this to ensure compliance with marketing consent laws and to segment customers for email campaigns.
   * Learn more about [building customer segments](https://shopify.dev/docs/apps/build/marketing-analytics/customer-segments).
   */
  customerAcceptsMarketing: Scalars["Boolean"]["output"]
  /**
   * The customer's visits and interactions with the online store before placing the order.
   * @deprecated Use `customerJourneySummary` instead.
   */
  customerJourney?: Maybe<ShopifyCustomerJourney>
  /**
   * The customer's visits and interactions with the online store before placing the order.
   * Use this to understand customer behavior, attribution sources, and marketing effectiveness to optimize your sales funnel.
   */
  customerJourneySummary?: Maybe<ShopifyCustomerJourneySummary>
  /**
   * The customer's language and region preference at the time of purchase. For example, "en" for English, "fr-CA" for French (Canada), or "es-MX" for Spanish (Mexico).
   * Use this to provide localized customer service and targeted marketing in the customer's preferred language.
   */
  customerLocale?: Maybe<Scalars["String"]["output"]>
  /**
   * A list of discounts that are applied to the order, excluding order edits and refunds.
   * Includes discount codes, automatic discounts, and other promotions that reduce the order total.
   */
  discountApplications: ShopifyDiscountApplicationConnection
  /** The discount code used for an order. Returns `null` if no discount code was applied. */
  discountCode?: Maybe<Scalars["String"]["output"]>
  /** The discount codes used for the order. Multiple codes can be applied to a single order. */
  discountCodes: Array<Scalars["String"]["output"]>
  /**
   * The primary address of the customer, prioritizing shipping address over billing address when both are available.
   * Returns `null` if neither shipping address nor billing address was provided.
   */
  displayAddress?: Maybe<ShopifyMailingAddress>
  /** An order's financial status for display in the Shopify admin. */
  displayFinancialStatus?: Maybe<ShopifyOrderDisplayFinancialStatus>
  /**
   * The order's fulfillment status that displays in the Shopify admin to merchants. For example, an order might be unfulfilled or scheduled.
   * For detailed processing, use the [`FulfillmentOrder`](https://shopify.dev/docs/api/admin-graphql/latest/objects/FulfillmentOrder) object.
   */
  displayFulfillmentStatus: ShopifyOrderDisplayFulfillmentStatus
  /**
   * A list of payment disputes associated with the order, such as chargebacks or payment inquiries.
   * Disputes occur when customers challenge transactions with their bank or payment provider.
   */
  disputes: Array<ShopifyOrderDisputeSummary>
  /**
   * Whether duties are included in the subtotal price of the order.
   * Duties are import taxes charged by customs authorities when goods cross international borders.
   */
  dutiesIncluded: Scalars["Boolean"]["output"]
  /** Whether the order has had any edits applied. For example, adding or removing line items, updating quantities, or changing prices. */
  edited: Scalars["Boolean"]["output"]
  /**
   * The email address associated with the customer for this order.
   * Used for sending order confirmations, shipping notifications, and other order-related communications.
   * Returns `null` if no email address was provided during checkout.
   */
  email?: Maybe<Scalars["String"]["output"]>
  /**
   * Whether taxes on the order are estimated.
   * This field returns `false` when taxes on the order are finalized and aren't subject to any changes.
   */
  estimatedTaxes: Scalars["Boolean"]["output"]
  /** A list of events associated with the order. Events track significant changes and activities related to the order, such as creation, payment, fulfillment, and cancellation. */
  events: ShopifyEventConnection
  /**
   * A list of ExchangeV2s for the order.
   * @deprecated Use `returns` instead.
   */
  exchangeV2s: ShopifyExchangeV2Connection
  /**
   * Whether there are line items that can be fulfilled.
   * This field returns `false` when the order has no fulfillable line items.
   * For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
   */
  fulfillable: Scalars["Boolean"]["output"]
  /**
   * A list of [fulfillment orders](https://shopify.dev/docs/api/admin-graphql/latest/objects/FulfillmentOrder) for an order.
   * Each fulfillment order groups [line items](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order#field-Order.fields.lineItems) that are fulfilled together,
   * allowing an order to be processed in parts if needed.
   */
  fulfillmentOrders: ShopifyFulfillmentOrderConnection
  /** A list of shipments for the order. Fulfillments represent the physical shipment of products to customers. */
  fulfillments: Array<ShopifyFulfillment>
  /** The total number of fulfillments for the order, including canceled ones. */
  fulfillmentsCount?: Maybe<ShopifyCount>
  /** Whether the order has been paid in full. This field returns `true` when the total amount received equals or exceeds the order total. */
  fullyPaid: Scalars["Boolean"]["output"]
  /** Whether the merchant has added a timeline comment to the order. */
  hasTimelineComment: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * The URL of the first page of the online store that the customer visited before they submitted the order.
   * @deprecated Use `customerJourneySummary.lastVisit.landingPageHtml` instead
   */
  landingPageDisplayText?: Maybe<Scalars["String"]["output"]>
  /**
   * The first page of the online store that the customer visited before they submitted the order.
   * @deprecated Use `customerJourneySummary.lastVisit.landingPage` instead
   */
  landingPageUrl?: Maybe<Scalars["URL"]["output"]>
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** A list of the order's line items. Line items represent the individual products and quantities that make up the order. */
  lineItems: ShopifyLineItemConnection
  /**
   * List of localization extensions for the resource.
   * @deprecated This connection will be removed in a future version. Use `localizedFields` instead.
   */
  localizationExtensions: ShopifyLocalizationExtensionConnection
  /** List of localized fields for the resource. */
  localizedFields: ShopifyLocalizedFieldConnection
  /**
   * The legal business structure that the merchant operates under for this order, such as an LLC, corporation, or partnership.
   * Used for tax reporting, legal compliance, and determining which business entity is responsible for the order.
   */
  merchantBusinessEntity: ShopifyBusinessEntity
  /** Whether the order can be edited by the merchant. Returns `false` for orders that can't be modified, such as canceled orders or orders with specific payment statuses. */
  merchantEditable: Scalars["Boolean"]["output"]
  /** A list of reasons why the order can't be edited. For example, canceled orders can't be edited. */
  merchantEditableErrors: Array<Scalars["String"]["output"]>
  /** The application acting as the Merchant of Record for the order. The Merchant of Record is responsible for tax collection and remittance. */
  merchantOfRecordApp?: Maybe<ShopifyOrderApp>
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /**
   * The unique identifier for the order that appears on the order page in the Shopify admin and the **Order status** page.
   * For example, "#1001", "EN1001", or "1001-A".
   * This value isn't unique across multiple stores. Use this field to identify orders in the Shopify admin and for order tracking.
   */
  name: Scalars["String"]["output"]
  /**
   * The net payment for the order, based on the total amount received minus the total amount refunded, in shop currency.
   * @deprecated Use `netPaymentSet` instead.
   */
  netPayment: Scalars["Money"]["output"]
  /** The net payment for the order, based on the total amount received minus the total amount refunded, in shop and presentment currencies. */
  netPaymentSet: ShopifyMoneyBag
  /**
   * A list of line items that can't be fulfilled.
   * For example, tips and fully refunded line items can't be fulfilled.
   * For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
   */
  nonFulfillableLineItems: ShopifyLineItemConnection
  /**
   * The note associated with the order.
   * Contains additional information or instructions added by merchants or customers during the order process.
   * Commonly used for special delivery instructions, gift messages, or internal processing notes.
   */
  note?: Maybe<Scalars["String"]["output"]>
  /** The order number used to generate the name using the store's configured order number prefix/suffix. This number isn't guaranteed to follow a consecutive integer sequence (e.g. 1, 2, 3..), nor is it guaranteed to be unique across multiple stores, or even for a single store. */
  number: Scalars["Int"]["output"]
  /**
   * The total amount of all additional fees, such as import fees or taxes, that were applied when an order was created.
   * Returns `null` if additional fees aren't applicable.
   */
  originalTotalAdditionalFeesSet?: Maybe<ShopifyMoneyBag>
  /** The total amount of duties calculated when an order was created, before any modifications. Modifications include returns, refunds, order edits, and cancellations. Use [`currentTotalDutiesSet`](https://shopify.dev/docs/api/admin-graphql/latest/objects/order#field-Order.fields.currentTotalDutiesSet) to retrieve the current duties amount after adjustments. */
  originalTotalDutiesSet?: Maybe<ShopifyMoneyBag>
  /**
   * The total price of the order at the time of order creation, in shop and presentment currencies.
   * Use this to compare the original order value against the current total after edits, returns, or refunds.
   */
  originalTotalPriceSet: ShopifyMoneyBag
  /**
   * The payment collection details for the order, including payment status, outstanding amounts, and collection information.
   * Use this to understand when and how payments should be collected, especially for orders with deferred or installment payment terms.
   */
  paymentCollectionDetails: ShopifyOrderPaymentCollectionDetails
  /**
   * A list of the names of all payment gateways used for the order.
   * For example, "Shopify Payments" and "Cash on Delivery (COD)".
   */
  paymentGatewayNames: Array<Scalars["String"]["output"]>
  /** The payment terms associated with the order, such as net payment due dates or early payment discounts. Payment terms define when and how an order should be paid. Returns `null` if no specific payment terms were set for the order. */
  paymentTerms?: Maybe<ShopifyPaymentTerms>
  /**
   * The phone number associated with the customer for this order.
   * Useful for contacting customers about shipping updates, delivery notifications, or order issues.
   * Returns `null` if no phone number was provided during checkout.
   */
  phone?: Maybe<Scalars["String"]["output"]>
  /**
   * The fulfillment location that was assigned when the order was created.
   * Orders can have multiple fulfillment orders. These fulfillment orders can each be assigned to a different location which is responsible for fulfilling a subset of the items in an order. The `Order.physicalLocation` field will only point to one of these locations.
   * Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder)
   * object for up to date fulfillment location information.
   * @deprecated Use `fulfillmentOrders` to get the fulfillment location for the order
   */
  physicalLocation?: Maybe<ShopifyLocation>
  /**
   * The purchase order (PO) number that's associated with an order.
   * This is typically provided by business customers who require a PO number for their procurement.
   */
  poNumber?: Maybe<Scalars["String"]["output"]>
  /**
   * The currency used by the customer when placing the order. For example, "USD", "EUR", or "CAD".
   * This may differ from the shop's base currency when serving international customers or using multi-currency pricing.
   */
  presentmentCurrencyCode: ShopifyCurrencyCode
  /**
   * The date and time in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) when the order was processed.
   * This date and time might not match the date and time when the order was created.
   */
  processedAt: Scalars["DateTime"]["output"]
  /** The sales channel that the order was created from, such as the [Online Store](https://shopify.dev/docs/apps/build/app-surfaces#online-store) or [Shopify POS](https://shopify.dev/docs/apps/build/app-surfaces#point-of-sale). */
  publication?: Maybe<ShopifyPublication>
  /**
   * The business entity that placed the order, including company details and purchasing relationships.
   * Used for B2B transactions to track which company or organization is responsible for the purchase and payment terms.
   */
  purchasingEntity?: Maybe<ShopifyPurchasingEntity>
  /**
   * The marketing referral code from the link that the customer clicked to visit the store.
   * Supports the following URL attributes: "ref", "source", or "r".
   * For example, if the URL is `{shop}.myshopify.com/products/slide?ref=j2tj1tn2`, then this value is `j2tj1tn2`.
   * @deprecated Use `customerJourneySummary.lastVisit.referralCode` instead
   */
  referralCode?: Maybe<Scalars["String"]["output"]>
  /**
   * A web domain or short description of the source that sent the customer to your online store. For example, "shopify.com" or "email".
   * @deprecated Use `customerJourneySummary.lastVisit.referralInfoHtml` instead
   */
  referrerDisplayText?: Maybe<Scalars["String"]["output"]>
  /**
   * The URL of the webpage where the customer clicked a link that sent them to your online store.
   * @deprecated Use `customerJourneySummary.lastVisit.referrerUrl` instead
   */
  referrerUrl?: Maybe<Scalars["URL"]["output"]>
  /**
   * The difference between the suggested and actual refund amount of all refunds that have been applied to the order.
   * A positive value indicates a difference in the merchant's favor, and a negative value indicates a difference in the customer's favor.
   */
  refundDiscrepancySet: ShopifyMoneyBag
  /**
   * Whether the order can be refunded based on its payment transactions.
   * Returns `false` for orders with no eligible payment transactions, such as fully refunded orders or orders with non-refundable payment methods.
   */
  refundable: Scalars["Boolean"]["output"]
  /**
   * A list of refunds that have been applied to the order.
   * Refunds represent money returned to customers for returned items, cancellations, or adjustments.
   */
  refunds: Array<ShopifyRefund>
  /** The URL of the source that the order originated from, if found in the domain registry. Returns `null` if the source URL isn't in the domain registry. */
  registeredSourceUrl?: Maybe<Scalars["URL"]["output"]>
  /**
   * Whether the order requires physical shipping to the customer.
   * Returns `false` for digital-only orders (such as gift cards or downloadable products) and `true` for orders with physical products that need delivery.
   * Use this to determine shipping workflows and logistics requirements.
   */
  requiresShipping: Scalars["Boolean"]["output"]
  /**
   * Whether any line items on the order can be restocked into inventory.
   * Returns `false` for digital products, custom items, or items that can't be resold.
   */
  restockable: Scalars["Boolean"]["output"]
  /** The physical location where a retail order is created or completed, except for draft POS orders completed using the "mark as paid" flow in the Shopify admin, which return `null`. Transactions associated with the order might have been processed at a different location. */
  retailLocation?: Maybe<ShopifyLocation>
  /**
   * The order's aggregated return status for display purposes.
   * Indicates the overall state of returns for the order, helping merchants track and manage the return process.
   */
  returnStatus: ShopifyOrderReturnStatus
  /**
   * The returns associated with the order.
   * Contains information about items that customers have requested to return, including return reasons, status, and refund details.
   * Use this to track and manage the return process for order items.
   */
  returns: ShopifyReturnConnection
  /**
   * The risk assessment summary for the order.
   * Provides fraud analysis and risk scoring to help you identify potentially fraudulent orders.
   * Use this to make informed decisions about order fulfillment and payment processing.
   */
  risk: ShopifyOrderRiskSummary
  /**
   * The fraud risk level of the order.
   * @deprecated This field is deprecated in favor of OrderRiskAssessment.riskLevel which allows for more granular risk levels, including PENDING and NONE.
   */
  riskLevel: ShopifyOrderRiskLevel
  /**
   * A list of risks associated with the order.
   * @deprecated This field is deprecated in favor of OrderRiskAssessment, which provides enhanced capabilities such as distinguishing risks from their provider.
   */
  risks: Array<ShopifyOrderRisk>
  /**
   * The shipping address where the order will be delivered.
   * Contains the customer's delivery location for fulfillment and shipping label generation.
   * Returns `null` for digital orders or orders that don't require shipping.
   */
  shippingAddress?: Maybe<ShopifyMailingAddress>
  /**
   * A summary of all shipping costs on the order.
   * Aggregates shipping charges, discounts, and taxes to provide a single view of delivery costs.
   */
  shippingLine?: Maybe<ShopifyShippingLine>
  /**
   * The shipping methods applied to the order.
   * Each shipping line represents a shipping option chosen during checkout, including the carrier, service level, and cost.
   * Use this to understand shipping charges and delivery options for the order.
   */
  shippingLines: ShopifyShippingLineConnection
  /**
   * The Shopify Protect details for the order, including fraud protection status and coverage information.
   * Shopify Protect helps protect eligible orders against fraudulent chargebacks.
   * Returns `null` if Shopify Protect is disabled for the shop or the order isn't eligible for protection.
   * Learn more about [Shopify Protect](https://www.shopify.com/protect).
   */
  shopifyProtect?: Maybe<ShopifyShopifyProtectOrderSummary>
  /**
   * A unique POS or third party order identifier.
   * For example, "1234-12-1000" or "111-98567-54". The [`receiptNumber`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order#field-receiptNumber) field is derived from this value for POS orders.
   */
  sourceIdentifier?: Maybe<Scalars["String"]["output"]>
  /** The name of the source associated with the order, such as "web", "mobile_app", or "pos". Use this field to identify the platform where the order was placed. */
  sourceName?: Maybe<Scalars["String"]["output"]>
  /**
   * The staff member who created or is responsible for the order.
   * Useful for tracking which team member handled phone orders, manual orders, or order modifications.
   * Returns `null` for orders created directly by customers through the online store.
   */
  staffMember?: Maybe<ShopifyStaffMember>
  /**
   * The URL where customers can check their order's current status, including tracking information and delivery updates.
   * Provides order tracking links in emails, apps, or customer communications.
   */
  statusPageUrl: Scalars["URL"]["output"]
  /**
   * The sum of quantities for all line items that contribute to the order's subtotal price.
   * This excludes quantities for items like tips, shipping costs, or gift cards that don't affect the subtotal.
   * Use this to quickly understand the total item count for pricing calculations.
   */
  subtotalLineItemsQuantity: Scalars["Int"]["output"]
  /**
   * The sum of the prices for all line items after discounts and before returns, in shop currency.
   * If `taxesIncluded` is `true`, then the subtotal also includes tax.
   * @deprecated Use `subtotalPriceSet` instead.
   */
  subtotalPrice?: Maybe<Scalars["Money"]["output"]>
  /**
   * The sum of the prices for all line items after discounts and before returns, in shop and presentment currencies.
   * If `taxesIncluded` is `true`, then the subtotal also includes tax.
   */
  subtotalPriceSet?: Maybe<ShopifyMoneyBag>
  /**
   * A calculated refund suggestion for the order based on specified line items, shipping, and duties.
   * Use this to preview refund amounts, taxes, and processing fees before creating an actual refund.
   */
  suggestedRefund?: Maybe<ShopifySuggestedRefund>
  /**
   * A comma separated list of tags associated with the order. Updating `tags` overwrites
   * any existing tags that were previously added to the order. To add new tags without overwriting
   * existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   */
  tags: Array<Scalars["String"]["output"]>
  /**
   * Whether taxes are exempt on the order.
   * Returns `true` for orders where the customer or business has a valid tax exemption, such as non-profit organizations or tax-free purchases.
   * Use this to understand if tax calculations were skipped during checkout.
   */
  taxExempt: Scalars["Boolean"]["output"]
  /**
   * A list of all tax lines applied to line items on the order, before returns.
   * Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
   */
  taxLines: Array<ShopifyTaxLine>
  /**
   * Whether taxes are included in the subtotal price of the order.
   * When `true`, the subtotal and line item prices include tax amounts. When `false`, taxes are calculated and displayed separately.
   */
  taxesIncluded: Scalars["Boolean"]["output"]
  /**
   * Whether the order is a test.
   * Test orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.
   * A test order can't be converted into a real order and vice versa.
   */
  test: Scalars["Boolean"]["output"]
  /**
   * The authorized amount that's uncaptured or undercaptured, in shop currency.
   * This amount isn't adjusted for returns.
   * @deprecated Use `totalCapturableSet` instead.
   */
  totalCapturable: Scalars["Money"]["output"]
  /**
   * The authorized amount that's uncaptured or undercaptured, in shop and presentment currencies.
   * This amount isn't adjusted for returns.
   */
  totalCapturableSet: ShopifyMoneyBag
  /** The total rounding adjustment applied to payments or refunds for an order involving cash payments. Applies to some countries where cash transactions are rounded to the nearest currency denomination. */
  totalCashRoundingAdjustment: ShopifyCashRoundingAdjustment
  /**
   * The total amount discounted on the order before returns, in shop currency.
   * This includes both order and line level discounts.
   * @deprecated Use `totalDiscountsSet` instead.
   */
  totalDiscounts?: Maybe<Scalars["Money"]["output"]>
  /**
   * The total amount discounted on the order before returns, in shop and presentment currencies.
   * This includes both order and line level discounts.
   */
  totalDiscountsSet?: Maybe<ShopifyMoneyBag>
  /**
   * The total amount not yet transacted for the order, in shop and presentment currencies.
   * A positive value indicates a difference in the merchant's favor (payment from customer to merchant) and a negative value indicates a difference in the customer's favor (refund from merchant to customer).
   */
  totalOutstandingSet: ShopifyMoneyBag
  /**
   * The total price of the order, before returns, in shop currency.
   * This includes taxes and discounts.
   * @deprecated Use `totalPriceSet` instead.
   */
  totalPrice: Scalars["Money"]["output"]
  /**
   * The total price of the order, before returns, in shop and presentment currencies.
   * This includes taxes and discounts.
   */
  totalPriceSet: ShopifyMoneyBag
  /**
   * The total amount received from the customer before returns, in shop currency.
   * @deprecated Use `totalReceivedSet` instead.
   */
  totalReceived: Scalars["Money"]["output"]
  /** The total amount received from the customer before returns, in shop and presentment currencies. */
  totalReceivedSet: ShopifyMoneyBag
  /**
   * The total amount that was refunded, in shop currency.
   * @deprecated Use `totalRefundedSet` instead.
   */
  totalRefunded: Scalars["Money"]["output"]
  /** The total amount that was refunded, in shop and presentment currencies. */
  totalRefundedSet: ShopifyMoneyBag
  /** The total amount of shipping that was refunded, in shop and presentment currencies. */
  totalRefundedShippingSet: ShopifyMoneyBag
  /**
   * The total shipping amount before discounts and returns, in shop currency.
   * @deprecated Use `totalShippingPriceSet` instead.
   */
  totalShippingPrice: Scalars["Money"]["output"]
  /** The total shipping costs returned to the customer, in shop and presentment currencies. This includes fees and any related discounts that were refunded. */
  totalShippingPriceSet: ShopifyMoneyBag
  /**
   * The total tax amount before returns, in shop currency.
   * @deprecated Use `totalTaxSet` instead.
   */
  totalTax?: Maybe<Scalars["Money"]["output"]>
  /** The total tax amount before returns, in shop and presentment currencies. */
  totalTaxSet?: Maybe<ShopifyMoneyBag>
  /**
   * The sum of all tip amounts for the order, in shop currency.
   * @deprecated Use `totalTipReceivedSet` instead.
   */
  totalTipReceived: ShopifyMoneyV2
  /** The sum of all tip amounts for the order, in shop and presentment currencies. */
  totalTipReceivedSet: ShopifyMoneyBag
  /** The total weight of the order before returns, in grams. */
  totalWeight?: Maybe<Scalars["UnsignedInt64"]["output"]>
  /** A list of transactions associated with the order. */
  transactions: Array<ShopifyOrderTransaction>
  /** The number of transactions associated with the order. */
  transactionsCount?: Maybe<ShopifyCount>
  /** Whether no payments have been made for the order. */
  unpaid: Scalars["Boolean"]["output"]
  /** The date and time in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) when the order was last modified. */
  updatedAt: Scalars["DateTime"]["output"]
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderAgreementsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderDiscountApplicationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderExchangeV2sArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderFulfillmentOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  displayable?: InputMaybe<Scalars["Boolean"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderFulfillmentsArgs {
  first?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderLocalizationExtensionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  countryCodes?: InputMaybe<Array<ShopifyCountryCode>>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  purposes?: InputMaybe<Array<ShopifyLocalizationExtensionPurpose>>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderLocalizedFieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  countryCodes?: InputMaybe<Array<ShopifyCountryCode>>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  purposes?: InputMaybe<Array<ShopifyLocalizedFieldPurpose>>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderNonFulfillableLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderRefundsArgs {
  first?: InputMaybe<Scalars["Int"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderReturnsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderRisksArgs {
  first?: InputMaybe<Scalars["Int"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderShippingLinesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  includeRemovals?: InputMaybe<Scalars["Boolean"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderStatusPageUrlArgs {
  audience?: InputMaybe<ShopifyAudience>
  notificationUsage?: InputMaybe<ShopifyNotificationUsage>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderSuggestedRefundArgs {
  refundDuties?: InputMaybe<Array<ShopifyRefundDutyInput>>
  refundLineItems?: InputMaybe<Array<ShopifyRefundLineItemInput>>
  refundMethodAllocation?: InputMaybe<ShopifyRefundMethodAllocation>
  refundShipping?: InputMaybe<Scalars["Boolean"]["input"]>
  shippingAmount?: InputMaybe<Scalars["Money"]["input"]>
  suggestFullRefund?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Order` object represents a customer's request to purchase one or more products from a store. Use the `Order` object to handle the complete purchase lifecycle from checkout to fulfillment.
 *
 * Use the `Order` object when you need to:
 *
 * - Display order details on customer account pages or admin dashboards.
 * - Create orders for phone sales, wholesale customers, or subscription services.
 * - Update order information like shipping addresses, notes, or fulfillment status.
 * - Process returns, exchanges, and partial refunds.
 * - Generate invoices, receipts, and shipping labels.
 *
 * The `Order` object serves as the central hub connecting customer information, product details, payment processing, and fulfillment data within the GraphQL Admin API schema.
 *
 * > Note:
 * > Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older records,
 * > then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions). If your app is granted
 * > access, then you can add the `read_all_orders`, `read_orders`, and `write_orders` scopes.
 *
 * > Caution:
 * > Only use orders data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/docs/api/usage/access-scopes#requesting-specific-permissions) for apps that don't have a legitimate use for the associated data.
 *
 * Learn more about [building apps for orders and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment).
 */
export interface ShopifyOrderTransactionsArgs {
  capturable?: InputMaybe<Scalars["Boolean"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  manuallyResolvable?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The possible order action types for a
 * [sales agreement](https://shopify.dev/api/admin-graphql/latest/interfaces/salesagreement).
 */
export type ShopifyOrderActionType =
  /** An order with a purchase or charge. */
  | "ORDER"
  /** An edit to the order. */
  | "ORDER_EDIT"
  /** A refund on the order. */
  | "REFUND"
  /** A return on the order. */
  | "RETURN"
  /** An unknown agreement action. Represents new actions that may be added in future versions. */
  | "UNKNOWN"
  | "%future added value"

/** An order adjustment accounts for the difference between a calculated and actual refund amount. */
export interface ShopifyOrderAdjustment extends ShopifyNode {
  __typename?: "OrderAdjustment"
  /** The amount of the order adjustment in shop and presentment currencies. */
  amountSet: ShopifyMoneyBag
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** An optional reason that explains a discrepancy between calculated and actual refund amounts. */
  reason?: Maybe<ShopifyOrderAdjustmentDiscrepancyReason>
  /** The tax amount of the order adjustment in shop and presentment currencies. */
  taxAmountSet: ShopifyMoneyBag
}

/** An auto-generated type for paginating through multiple OrderAdjustments. */
export interface ShopifyOrderAdjustmentConnection {
  __typename?: "OrderAdjustmentConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyOrderAdjustmentEdge>
  /** A list of nodes that are contained in OrderAdjustmentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyOrderAdjustment>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Discrepancy reasons for order adjustments. */
export type ShopifyOrderAdjustmentDiscrepancyReason =
  /** The discrepancy reason is customer. */
  | "CUSTOMER"
  /** The discrepancy reason is damage. */
  | "DAMAGE"
  /** The discrepancy reason is balance adjustment. */
  | "FULL_RETURN_BALANCING_ADJUSTMENT"
  /** The discrepancy reason is pending refund. */
  | "PENDING_REFUND_DISCREPANCY"
  /** The discrepancy reason is not one of the predefined reasons. */
  | "REFUND_DISCREPANCY"
  /** The discrepancy reason is restocking. */
  | "RESTOCK"
  | "%future added value"

/** An auto-generated type which holds one OrderAdjustment and a cursor during pagination. */
export interface ShopifyOrderAdjustmentEdge {
  __typename?: "OrderAdjustmentEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of OrderAdjustmentEdge. */
  node: ShopifyOrderAdjustment
}

/** Discrepancy reasons for order adjustments. */
export type ShopifyOrderAdjustmentInputDiscrepancyReason =
  /** The discrepancy reason is customer. */
  | "CUSTOMER"
  /** The discrepancy reason is damage. */
  | "DAMAGE"
  /** The discrepancy reason is not one of the predefined reasons. */
  | "OTHER"
  /** The discrepancy reason is restocking. */
  | "RESTOCK"
  | "%future added value"

/** An agreement associated with an order placement. */
export interface ShopifyOrderAgreement extends ShopifySalesAgreement {
  __typename?: "OrderAgreement"
  /** The application that created the agreement. */
  app?: Maybe<ShopifyApp>
  /** The date and time at which the agreement occured. */
  happenedAt: Scalars["DateTime"]["output"]
  /** The unique ID for the agreement. */
  id: Scalars["ID"]["output"]
  /** The order associated with the agreement. */
  order: ShopifyOrder
  /** The reason the agremeent was created. */
  reason: ShopifyOrderActionType
  /** The sales associated with the agreement. */
  sales: ShopifySaleConnection
  /** The staff member associated with the agreement. */
  user?: Maybe<ShopifyStaffMember>
}

/** An agreement associated with an order placement. */
export interface ShopifyOrderAgreementSalesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The [application](https://shopify.dev/apps) that created the order. */
export interface ShopifyOrderApp {
  __typename?: "OrderApp"
  /** The application icon. */
  icon: ShopifyImage
  /** The application ID. */
  id: Scalars["ID"]["output"]
  /** The name of the application. */
  name: Scalars["String"]["output"]
}

/** Return type for `orderCancel` mutation. */
export interface ShopifyOrderCancelPayload {
  __typename?: "OrderCancelPayload"
  /** The job that asynchronously cancels the order. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  orderCancelUserErrors: Array<ShopifyOrderCancelUserError>
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `orderCancelUserErrors` instead.
   */
  userErrors: Array<ShopifyUserError>
}

/** Represents the reason for the order's cancellation. */
export type ShopifyOrderCancelReason =
  /** The customer wanted to cancel the order. */
  | "CUSTOMER"
  /** Payment was declined. */
  | "DECLINED"
  /** The order was fraudulent. */
  | "FRAUD"
  /** There was insufficient inventory. */
  | "INVENTORY"
  /** The order was canceled for an unlisted reason. */
  | "OTHER"
  /** Staff made an error. */
  | "STAFF"
  | "%future added value"

/** The input fields used to specify the refund method for an order cancellation. */
export interface ShopifyOrderCancelRefundMethodInput {
  /** Whether to refund to the original payment method. */
  originalPaymentMethodsRefund?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether to refund to store credit. */
  storeCreditRefund?: InputMaybe<ShopifyOrderCancelStoreCreditRefundInput>
}

/** The input fields used to refund to store credit. */
export interface ShopifyOrderCancelStoreCreditRefundInput {
  /** The expiration date of the store credit. */
  expiresAt?: InputMaybe<Scalars["DateTime"]["input"]>
}

/** Errors related to order cancellation. */
export interface ShopifyOrderCancelUserError extends ShopifyDisplayableError {
  __typename?: "OrderCancelUserError"
  /** The error code. */
  code?: Maybe<ShopifyOrderCancelUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `OrderCancelUserError`. */
export type ShopifyOrderCancelUserErrorCode =
  /** Unexpected internal error happened. */
  | "INTERNAL_ERROR"
  /** The input value is invalid. */
  | "INVALID"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** An order refund was requested but the user does not have the refund_orders permission. */
  | "NO_REFUND_PERMISSION"
  /** An order refund was requested but the user does not have the refund_to_store_credit permission. */
  | "NO_REFUND_TO_STORE_CREDIT_PERMISSION"
  /** A store credit order refund was requested but the order is a B2B order. */
  | "STORE_CREDIT_REFUND_B2B_NOT_SUPPORTED"
  /** A store credit order refund was requested but the expiration date is in the past. */
  | "STORE_CREDIT_REFUND_EXPIRATION_IN_PAST"
  /** A store credit order refund was requested but the order has no customer. */
  | "STORE_CREDIT_REFUND_MISSING_CUSTOMER"
  | "%future added value"

/** Details about the order cancellation. */
export interface ShopifyOrderCancellation {
  __typename?: "OrderCancellation"
  /** Staff provided note for the order cancellation. */
  staffNote?: Maybe<Scalars["String"]["output"]>
}

/** The input fields for the authorized transaction to capture and the total amount to capture from it. */
export interface ShopifyOrderCaptureInput {
  /** The amount to capture. The capture amount can't be greater than the amount of the authorized transaction. */
  amount: Scalars["Money"]["input"]
  /** The currency (in ISO format) that's used to capture the order. This must be the presentment currency (the currency used by the customer) and is a required field for orders where the currency and presentment currency differ. */
  currency?: InputMaybe<ShopifyCurrencyCode>
  /**
   * Indicates whether this is to be the final capture for the order transaction. Only applies to
   * Shopify Payments authorizations which are multi-capturable. If true, any uncaptured amount from the
   * authorization will be voided after the capture is completed. If false, the authorization will remain open
   * for future captures.
   *
   * For multi-capturable authorizations, this defaults to false if not provided. This field has no effect on
   * authorizations which aren't multi-capturable (can only be captured once), or on other types of
   * transactions.
   */
  finalCapture?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The ID of the order to capture. */
  id: Scalars["ID"]["input"]
  /** The ID of the authorized transaction to capture. */
  parentTransactionId: Scalars["ID"]["input"]
}

/** Return type for `orderCapture` mutation. */
export interface ShopifyOrderCapturePayload {
  __typename?: "OrderCapturePayload"
  /** The created capture transaction. */
  transaction?: Maybe<ShopifyOrderTransaction>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields for specifying an open order to close. */
export interface ShopifyOrderCloseInput {
  /** The ID of the order to close. */
  id: Scalars["ID"]["input"]
}

/** Return type for `orderClose` mutation. */
export interface ShopifyOrderClosePayload {
  __typename?: "OrderClosePayload"
  /** The closed order. */
  order?: Maybe<ShopifyOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type for paginating through multiple Orders. */
export interface ShopifyOrderConnection {
  __typename?: "OrderConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyOrderEdge>
  /** A list of nodes that are contained in OrderEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyOrder>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields for identifying an existing customer to associate with the order. */
export interface ShopifyOrderCreateAssociateCustomerAttributesInput {
  /**
   * The email of the customer to associate to the order.
   *
   *               > Note:
   *               > If both this email input field and the email on `OrderCreateOrderInput` are provided, this field will
   *               > take precedence.
   */
  email?: InputMaybe<Scalars["String"]["input"]>
  /** The customer to associate to the order. */
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** The input fields for a note attribute for an order. */
export interface ShopifyOrderCreateCustomAttributeInput {
  /** The key or name of the custom attribute. */
  key: Scalars["String"]["input"]
  /** The value of the custom attribute. */
  value: Scalars["String"]["input"]
}

/** The input fields for creating a customer's mailing address. */
export interface ShopifyOrderCreateCustomerAddressInput {
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: InputMaybe<Scalars["String"]["input"]>
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the city, district, village, or town. */
  city?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the customer's company or organization. */
  company?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the country. */
  country?: InputMaybe<Scalars["String"]["input"]>
  /** The first name of the customer. */
  firstName?: InputMaybe<Scalars["String"]["input"]>
  /** The last name of the customer. */
  lastName?: InputMaybe<Scalars["String"]["input"]>
  /** A unique phone number for the customer. Formatted using E.164 standard. For example, _+16135551111_. */
  phone?: InputMaybe<Scalars["String"]["input"]>
  /** The region of the address, such as the province, state, or district. */
  province?: InputMaybe<Scalars["String"]["input"]>
  /** The zip or postal code of the address. */
  zip?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields for a customer to associate with an order. Allows creation of a new customer or specifying an existing one. */
export interface ShopifyOrderCreateCustomerInput {
  /** An existing customer to associate with the order, specified by ID. */
  toAssociate?: InputMaybe<ShopifyOrderCreateAssociateCustomerAttributesInput>
  /** A new customer to create or update and associate with the order. */
  toUpsert?: InputMaybe<ShopifyOrderCreateUpsertCustomerAttributesInput>
}

/** The input fields for a discount code to apply to an order. Only one type of discount can be applied to an order. */
export interface ShopifyOrderCreateDiscountCodeInput {
  /** A free shipping discount code applied to the shipping on an order. */
  freeShippingDiscountCode?: InputMaybe<ShopifyOrderCreateFreeShippingDiscountCodeAttributesInput>
  /** A fixed amount discount code applied to the line items on the order. */
  itemFixedDiscountCode?: InputMaybe<ShopifyOrderCreateFixedDiscountCodeAttributesInput>
  /** A percentage discount code applied to the line items on the order. */
  itemPercentageDiscountCode?: InputMaybe<ShopifyOrderCreatePercentageDiscountCodeAttributesInput>
}

/** The status of payments associated with the order. Can only be set when the order is created. */
export type ShopifyOrderCreateFinancialStatus =
  /** The payments have been authorized. */
  | "AUTHORIZED"
  /** The payments have been expired. */
  | "EXPIRED"
  /** The payments have been paid. */
  | "PAID"
  /** The order has been partially paid. */
  | "PARTIALLY_PAID"
  /** The payments have been partially refunded. */
  | "PARTIALLY_REFUNDED"
  /** The payments are pending. Payment might fail in this state. Check again to confirm whether the payments have been paid successfully. */
  | "PENDING"
  /** The payments have been refunded. */
  | "REFUNDED"
  /** The payments have been voided. */
  | "VOIDED"
  | "%future added value"

/** The input fields for a fixed amount discount code to apply to an order. */
export interface ShopifyOrderCreateFixedDiscountCodeAttributesInput {
  /** The amount that's deducted from the order total. When you create an order, this value is the monetary amount to deduct. */
  amountSet?: InputMaybe<ShopifyMoneyBagInput>
  /** The discount code that was entered at checkout. */
  code: Scalars["String"]["input"]
}

/** The input fields for a free shipping discount code to apply to an order. */
export interface ShopifyOrderCreateFreeShippingDiscountCodeAttributesInput {
  /** The discount code that was entered at checkout. */
  code: Scalars["String"]["input"]
}

/** The input fields for a fulfillment to create for an order. */
export interface ShopifyOrderCreateFulfillmentInput {
  /** The ID of the location to fulfill the order from. */
  locationId: Scalars["ID"]["input"]
  /** Whether the customer should be notified of changes with the fulfillment. */
  notifyCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The address at which the fulfillment occurred. */
  originAddress?: InputMaybe<ShopifyFulfillmentOriginAddressInput>
  /** The status of the shipment. */
  shipmentStatus?: InputMaybe<ShopifyFulfillmentEventStatus>
  /**
   * The name of the tracking company.
   *
   * If you specify a tracking company name from
   * [the list](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies),
   * Shopify will automatically build tracking URLs for all provided tracking numbers,
   * which will make the tracking numbers clickable in the interface.
   * The same tracking company will be applied to all tracking numbers specified.
   *
   * Additionally, for the tracking companies listed on the
   * [Shipping Carriers help page](https://help.shopify.com/manual/shipping/understanding-shipping/shipping-carriers#integrated-shipping-carriers)
   * Shopify will automatically update the fulfillment's `shipment_status` field during the fulfillment process.
   *
   * > Note:
   * > Send the tracking company name exactly as written in
   * > [the list](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
   * > (capitalization matters).
   */
  trackingCompany?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The tracking number of the fulfillment.
   *
   * The tracking number will be clickable in the interface if one of the following applies
   * (the highest in the list has the highest priority):
   *
   * * [Shopify-known tracking company name](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
   *   specified in the `company` field.
   *   Shopify will build the tracking URL automatically based on the tracking number specified.
   * * The tracking number has a Shopify-known format.
   *   Shopify will guess the tracking provider and build the tracking url based on the tracking number format.
   *   Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
   *   This can result in an invalid tracking URL.
   */
  trackingNumber?: InputMaybe<Scalars["String"]["input"]>
}

/** The order's status in terms of fulfilled line items. */
export type ShopifyOrderCreateFulfillmentStatus =
  /** Every line item in the order has been fulfilled. */
  | "FULFILLED"
  /** At least one line item in the order has been fulfilled. */
  | "PARTIAL"
  /** Every line item in the order has been restocked and the order canceled. */
  | "RESTOCKED"
  | "%future added value"

/** The types of behavior to use when updating inventory. */
export type ShopifyOrderCreateInputsInventoryBehavior =
  /** Do not claim inventory. */
  | "BYPASS"
  /** Ignore the product's inventory policy and claim inventory. */
  | "DECREMENT_IGNORING_POLICY"
  /** Follow the product's inventory policy and claim inventory, if possible. */
  | "DECREMENT_OBEYING_POLICY"
  | "%future added value"

/** The input fields for a line item to create for an order. */
export interface ShopifyOrderCreateLineItemInput {
  /**
   * The handle of a fulfillment service that stocks the product variant belonging to a line item.
   *
   *               This is a third-party fulfillment service in the following scenarios:
   *
   *               **Scenario 1**
   *               - The product variant is stocked by a single fulfillment service.
   *               - The [FulfillmentService](/api/admin-graphql/latest/objects/FulfillmentService) is a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
   *
   *               **Scenario 2**
   *               - Multiple fulfillment services stock the product variant.
   *               - The last time that the line item was unfulfilled, it was awaiting fulfillment by a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
   *
   *               If none of the above conditions are met, then the fulfillment service has the `manual` handle.
   */
  fulfillmentService?: InputMaybe<Scalars["String"]["input"]>
  /** Whether the item is a gift card. If true, then the item is not taxed or considered for shipping charges. */
  giftCard?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The price of the item before discounts have been applied in the shop currency. */
  priceSet?: InputMaybe<ShopifyMoneyBagInput>
  /** The ID of the product that the line item belongs to. Can be `null` if the original product associated with the order is deleted at a later date. */
  productId?: InputMaybe<Scalars["ID"]["input"]>
  /** An array of custom information for the item that has been added to the cart. Often used to provide product customization options. */
  properties?: InputMaybe<Array<ShopifyOrderCreateLineItemPropertyInput>>
  /** The number of items that were purchased. */
  quantity: Scalars["Int"]["input"]
  /** Whether the item requires shipping. */
  requiresShipping?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The item's SKU (stock keeping unit). */
  sku?: InputMaybe<Scalars["String"]["input"]>
  /** A list of tax line objects, each of which details a tax applied to the item. */
  taxLines?: InputMaybe<Array<ShopifyOrderCreateTaxLineInput>>
  /** Whether the item was taxable. */
  taxable?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The title of the product. */
  title?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of the product variant. If both `productId` and `variantId` are provided, then the product ID that corresponds to the `variantId` is used. */
  variantId?: InputMaybe<Scalars["ID"]["input"]>
  /** The title of the product variant. */
  variantTitle?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the item's supplier. */
  vendor?: InputMaybe<Scalars["String"]["input"]>
  /** The weight of the line item. This will take precedence over the weight of the product variant, if one was specified. */
  weight?: InputMaybe<ShopifyWeightInput>
}

/** The input fields for a line item property for an order. */
export interface ShopifyOrderCreateLineItemPropertyInput {
  /** The name of the line item property. */
  name: Scalars["String"]["input"]
  /** The value of the line item property. */
  value: Scalars["String"]["input"]
}

/** Return type for `orderCreateMandatePayment` mutation. */
export interface ShopifyOrderCreateMandatePaymentPayload {
  __typename?: "OrderCreateMandatePaymentPayload"
  /** The async job used for charging the payment. */
  job?: Maybe<ShopifyJob>
  /** The Unique ID for the created payment. */
  paymentReferenceId?: Maybe<Scalars["String"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOrderCreateMandatePaymentUserError>
}

/** An error that occurs during the execution of `OrderCreateMandatePayment`. */
export interface ShopifyOrderCreateMandatePaymentUserError
  extends ShopifyDisplayableError {
  __typename?: "OrderCreateMandatePaymentUserError"
  /** The error code. */
  code?: Maybe<ShopifyOrderCreateMandatePaymentUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `OrderCreateMandatePaymentUserError`. */
export type ShopifyOrderCreateMandatePaymentUserErrorCode =
  /** Errors for mandate payment on order. */
  "ORDER_MANDATE_PAYMENT_ERROR_CODE" | "%future added value"

/** An error that occurs during the execution of a order create manual payment mutation. */
export interface ShopifyOrderCreateManualPaymentOrderCreateManualPaymentError
  extends ShopifyDisplayableError {
  __typename?: "OrderCreateManualPaymentOrderCreateManualPaymentError"
  /** The error code. */
  code?: Maybe<ShopifyOrderCreateManualPaymentOrderCreateManualPaymentErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `OrderCreateManualPaymentOrderCreateManualPaymentError`. */
export type ShopifyOrderCreateManualPaymentOrderCreateManualPaymentErrorCode =
  /** Amount exceeds the remaining balance. */
  | "AMOUNT_EXCEEDS_BALANCE"
  /** Amount must be positive. */
  | "AMOUNT_NOT_POSITIVE"
  /** Payment gateway is not found. */
  | "GATEWAY_NOT_FOUND"
  /** Order is temporarily unavailable. */
  | "ORDER_IS_TEMPORARILY_UNAVAILABLE"
  /** Order is not found. */
  | "ORDER_NOT_FOUND"
  /** Indicates that the processedAt field is invalid, such as when it references a future date. */
  | "PROCESSED_AT_INVALID"
  | "%future added value"

/** Return type for `orderCreateManualPayment` mutation. */
export interface ShopifyOrderCreateManualPaymentPayload {
  __typename?: "OrderCreateManualPaymentPayload"
  /** The order recorded a manual payment. */
  order?: Maybe<ShopifyOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOrderCreateManualPaymentOrderCreateManualPaymentError>
}

/**
 * The input fields that define the strategies for updating inventory and
 * whether to send shipping and order confirmations to customers.
 */
export interface ShopifyOrderCreateOptionsInput {
  /**
   * The strategy for handling updates to inventory: not claiming inventory, ignoring inventory policies,
   * or following policies when claiming inventory.
   */
  inventoryBehaviour?: InputMaybe<ShopifyOrderCreateInputsInventoryBehavior>
  /** Whether to send a shipping confirmation to the customer. */
  sendFulfillmentReceipt?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether to send an order confirmation to the customer. */
  sendReceipt?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The input fields for creating an order. */
export interface ShopifyOrderCreateOrderInput {
  /**
   * The mailing address associated with the payment method. This address is an optional field that won't be
   *                available on orders that don't require a payment method.
   *
   *               > Note:
   *               > If a customer is provided, this field or `shipping_address` (which has precedence) will be set as the
   *               > customer's default address. Additionally, if the provided customer is new or hasn't created an order yet
   *               > then their name will be set to the first/last name from this address (if provided).
   */
  billingAddress?: InputMaybe<ShopifyMailingAddressInput>
  /** Whether the customer consented to receive email updates from the shop. */
  buyerAcceptsMarketing?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when the order was closed. Returns null if the order isn't closed. */
  closedAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The ID of the purchasing company's location for the order. */
  companyLocationId?: InputMaybe<Scalars["ID"]["input"]>
  /** The shop-facing currency for the order. If not specified, then the shop's default currency is used. */
  currency?: InputMaybe<ShopifyCurrencyCode>
  /** A list of extra information that's added to the order. Appears in the **Additional details** section of an order details page. */
  customAttributes?: InputMaybe<Array<ShopifyOrderCreateCustomAttributeInput>>
  /** The customer to associate to the order. */
  customer?: InputMaybe<ShopifyOrderCreateCustomerInput>
  /** A discount code applied to the order. */
  discountCode?: InputMaybe<ShopifyOrderCreateDiscountCodeInput>
  /**
   * A new customer email address for the order.
   *
   *               > Note:
   *               > If a customer is provided, and no email is provided, the customer's email will be set to this field.
   */
  email?: InputMaybe<Scalars["String"]["input"]>
  /** The financial status of the order. If not specified, then this will be derived through the given transactions. Note that it's possible to specify a status that doesn't match the given transactions and it will persist, but if an operation later occurs on the order, the status may then be recalculated to match the current state of transactions. */
  financialStatus?: InputMaybe<ShopifyOrderCreateFinancialStatus>
  /** The fulfillment to create for the order. This will apply to all line items. */
  fulfillment?: InputMaybe<ShopifyOrderCreateFulfillmentInput>
  /** The fulfillment status of the order. Will default to `unfulfilled` if not included. */
  fulfillmentStatus?: InputMaybe<ShopifyOrderCreateFulfillmentStatus>
  /** The line items to create for the order. */
  lineItems?: InputMaybe<Array<ShopifyOrderCreateLineItemInput>>
  /** A list of metafields to add to the order. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The order name, generated by combining the `order_number` property with the order prefix and suffix that are set in the merchant's [general settings](https://www.shopify.com/admin/settings/general). This is different from the `id` property, which is the ID of the order used by the API. This field can also be set by the API to be any string value. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** The new contents for the note associated with the order. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** A new customer phone number for the order. */
  phone?: InputMaybe<Scalars["String"]["input"]>
  /** The purchase order number associated to this order. */
  poNumber?: InputMaybe<Scalars["String"]["input"]>
  /** The presentment currency that was used to display prices to the customer. This must be specified if any presentment currencies are used in the order. */
  presentmentCurrency?: InputMaybe<ShopifyCurrencyCode>
  /** The date and time ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format) when an order was processed. This value is the date that appears on your orders and that's used in the analytic reports. If you're importing orders from an app or another platform, then you can set processed_at to a date and time in the past to match when the original order was created. */
  processedAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The website where the customer clicked a link to the shop. */
  referringSite?: InputMaybe<Scalars["URL"]["input"]>
  /**
   * The mailing address to where the order will be shipped.
   *
   *               > Note:
   *               > If a customer is provided, this field (which has precedence) or `billing_address` will be set as the
   *               > customer's default address. Additionally, if the provided customer doesn't have a first or last name
   *               > then it will be set to the first/last name from this address (if provided).
   */
  shippingAddress?: InputMaybe<ShopifyMailingAddressInput>
  /** An array of objects, each of which details a shipping method used. */
  shippingLines?: InputMaybe<Array<ShopifyOrderCreateShippingLineInput>>
  /** The ID of the order placed on the originating platform. This value doesn't correspond to the Shopify ID that's generated from a completed draft. */
  sourceIdentifier?: InputMaybe<Scalars["String"]["input"]>
  /** The source of the checkout. To use this field for sales attribution, you must register the channels that your app is managing. You can register the channels that your app is managing by completing [this Google Form](https://docs.google.com/forms/d/e/1FAIpQLScmVTZRQNjOJ7RD738mL1lGeFjqKVe_FM2tO9xsm21QEo5Ozg/viewform?usp=sf_link). After you've submited your request, you need to wait for your request to be processed by Shopify. You can find a list of your channels in the Partner Dashboard, in your app's Marketplace extension. You can specify a handle as the source_name value in your request. */
  sourceName?: InputMaybe<Scalars["String"]["input"]>
  /** A valid URL to the original order on the originating surface. This URL is displayed to merchants on the Order Details page. If the URL is invalid, then it won't be displayed. */
  sourceUrl?: InputMaybe<Scalars["URL"]["input"]>
  /** A comma separated list of tags that have been added to the draft order. */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** An array of tax line objects, each of which details a tax applicable to the order. When creating an order through the API, tax lines can be specified on the order or the line items but not both. Tax lines specified on the order are split across the _taxable_ line items in the created order. */
  taxLines?: InputMaybe<Array<ShopifyOrderCreateTaxLineInput>>
  /** Whether taxes are included in the order subtotal. */
  taxesIncluded?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether this is a test order. */
  test?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The payment transactions to create for the order. */
  transactions?: InputMaybe<Array<ShopifyOrderCreateOrderTransactionInput>>
  /** The ID of the user logged into Shopify POS who processed the order, if applicable. */
  userId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The input fields for a transaction to create for an order. */
export interface ShopifyOrderCreateOrderTransactionInput {
  /** The amount of the transaction. */
  amountSet: ShopifyMoneyBagInput
  /** The authorization code associated with the transaction. */
  authorizationCode?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of the device used to process the transaction. */
  deviceId?: InputMaybe<Scalars["ID"]["input"]>
  /** The name of the gateway the transaction was issued through. */
  gateway?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of the gift card used for this transaction. */
  giftCardId?: InputMaybe<Scalars["ID"]["input"]>
  /** The kind of transaction. */
  kind?: InputMaybe<ShopifyOrderTransactionKind>
  /** The ID of the location where the transaction was processed. */
  locationId?: InputMaybe<Scalars["ID"]["input"]>
  /** The date and time when the transaction was processed. */
  processedAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /**
   * The transaction receipt that the payment gateway attaches to the transaction.
   * The value of this field depends on which payment gateway processed the transaction.
   */
  receiptJson?: InputMaybe<Scalars["JSON"]["input"]>
  /** The status of the transaction. */
  status?: InputMaybe<ShopifyOrderTransactionStatus>
  /** Whether the transaction is a test transaction. */
  test?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The ID of the user who processed the transaction. */
  userId?: InputMaybe<Scalars["ID"]["input"]>
}

/** Return type for `orderCreate` mutation. */
export interface ShopifyOrderCreatePayload {
  __typename?: "OrderCreatePayload"
  /** The order that was created. */
  order?: Maybe<ShopifyOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOrderCreateUserError>
}

/** The input fields for a percentage discount code to apply to an order. */
export interface ShopifyOrderCreatePercentageDiscountCodeAttributesInput {
  /** The discount code that was entered at checkout. */
  code: Scalars["String"]["input"]
  /** The amount that's deducted from the order total. When you create an order, this value is the percentage to deduct. */
  percentage?: InputMaybe<Scalars["Float"]["input"]>
}

/** The input fields for a shipping line to create for an order. */
export interface ShopifyOrderCreateShippingLineInput {
  /** A reference to the shipping method. */
  code?: InputMaybe<Scalars["String"]["input"]>
  /** The price of this shipping method in the shop currency. Can't be negative. */
  priceSet: ShopifyMoneyBagInput
  /** The source of the shipping method. */
  source?: InputMaybe<Scalars["String"]["input"]>
  /** A list of tax line objects, each of which details a tax applicable to this shipping line. */
  taxLines?: InputMaybe<Array<ShopifyOrderCreateTaxLineInput>>
  /** The title of the shipping method. */
  title: Scalars["String"]["input"]
}

/** The input fields for a tax line to create for an order. */
export interface ShopifyOrderCreateTaxLineInput {
  /** Whether the channel that submitted the tax line is liable for remitting. A value of `null` indicates unknown liability for the tax line. */
  channelLiable?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The amount of tax to be charged on the item. */
  priceSet?: InputMaybe<ShopifyMoneyBagInput>
  /** The proportion of the item price that the tax represents as a decimal. */
  rate: Scalars["Decimal"]["input"]
  /** The name of the tax line to create. */
  title: Scalars["String"]["input"]
}

/** The input fields for creating a new customer object or identifying an existing customer to update & associate with the order. */
export interface ShopifyOrderCreateUpsertCustomerAttributesInput {
  /** A list of addresses to associate with the customer. */
  addresses?: InputMaybe<Array<ShopifyOrderCreateCustomerAddressInput>>
  /**
   * The email address to update the customer with. If no `id` is provided, this is used to uniquely identify
   *                  the customer.
   *
   *                 > Note:
   *                 > If both this email input field and the email on `OrderCreateOrderInput` are provided, this field will
   *                 > take precedence.
   */
  email?: InputMaybe<Scalars["String"]["input"]>
  /** The first name of the customer. */
  firstName?: InputMaybe<Scalars["String"]["input"]>
  /** The id of the customer to associate to the order. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** The last name of the customer. */
  lastName?: InputMaybe<Scalars["String"]["input"]>
  /** A unique identifier for the customer that's used with [Multipass login](https://shopify.dev/api/multipass). */
  multipassIdentifier?: InputMaybe<Scalars["String"]["input"]>
  /** A note about the customer. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The unique phone number ([E.164 format](https://en.wikipedia.org/wiki/E.164)) for this customer.
   *                  Attempting to assign the same phone number to multiple customers returns an error. The property can be
   *                  set using different formats, but each format must represent a number that can be dialed from anywhere
   *                  in the world. The following formats are all valid:
   *                   - 6135551212
   *                   - +16135551212
   *                   - (613)555-1212
   *                   - +1 613-555-1212
   */
  phone?: InputMaybe<Scalars["String"]["input"]>
  /** Tags that the shop owner has attached to the customer. A customer can have up to 250 tags. Each tag can have up to 255 characters. */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** Whether the customer is exempt from paying taxes on their order. If `true`, then taxes won't be applied to an order at checkout. If `false`, then taxes will be applied at checkout. */
  taxExempt?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An error that occurs during the execution of `OrderCreate`. */
export interface ShopifyOrderCreateUserError extends ShopifyDisplayableError {
  __typename?: "OrderCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyOrderCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `OrderCreateUserError`. */
export type ShopifyOrderCreateUserErrorCode =
  /** Indicates that the line item fulfillment service handle is invalid. */
  | "FULFILLMENT_SERVICE_INVALID"
  /** The input value is invalid. */
  | "INVALID"
  /** Indicates that the inventory claim failed during order creation. */
  | "INVENTORY_CLAIM_FAILED"
  /** Indicates that the processed_at field is invalid, such as when it references a future date. */
  | "PROCESSED_AT_INVALID"
  /** Indicates that both customer_id and customer were provided - only one is permitted. */
  | "REDUNDANT_CUSTOMER_FIELDS"
  /** Indicates that the shop is dormant and cannot create orders. */
  | "SHOP_DORMANT"
  /** Indicates that the tax line rate is missing - only enforced for LineItem or ShippingLine-level tax lines. */
  | "TAX_LINE_RATE_MISSING"
  | "%future added value"

/** Return type for `orderCustomerRemove` mutation. */
export interface ShopifyOrderCustomerRemovePayload {
  __typename?: "OrderCustomerRemovePayload"
  /** The order that had its customer removed. */
  order?: Maybe<ShopifyOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOrderCustomerRemoveUserError>
}

/** Errors related to order customer removal. */
export interface ShopifyOrderCustomerRemoveUserError
  extends ShopifyDisplayableError {
  __typename?: "OrderCustomerRemoveUserError"
  /** The error code. */
  code?: Maybe<ShopifyOrderCustomerRemoveUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `OrderCustomerRemoveUserError`. */
export type ShopifyOrderCustomerRemoveUserErrorCode =
  /** The input value is invalid. */
  | "INVALID"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** An error ocurred while saving the order. */
  | "NOT_SAVED"
  | "%future added value"

/** Return type for `orderCustomerSet` mutation. */
export interface ShopifyOrderCustomerSetPayload {
  __typename?: "OrderCustomerSetPayload"
  /** The order that had a customer set. */
  order?: Maybe<ShopifyOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOrderCustomerSetUserError>
}

/** Errors related to order customer set. */
export interface ShopifyOrderCustomerSetUserError
  extends ShopifyDisplayableError {
  __typename?: "OrderCustomerSetUserError"
  /** The error code. */
  code?: Maybe<ShopifyOrderCustomerSetUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `OrderCustomerSetUserError`. */
export type ShopifyOrderCustomerSetUserErrorCode =
  /** The input value is invalid. */
  | "INVALID"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** The customer does not have the permissions to place this order. */
  | "NOT_PERMITTED"
  /** An error ocurred while saving the order. */
  | "NOT_SAVED"
  | "%future added value"

/** Return type for `orderDelete` mutation. */
export interface ShopifyOrderDeletePayload {
  __typename?: "OrderDeletePayload"
  /** Deleted order ID. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOrderDeleteUserError>
}

/** Errors related to deleting an order. */
export interface ShopifyOrderDeleteUserError extends ShopifyDisplayableError {
  __typename?: "OrderDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyOrderDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `OrderDeleteUserError`. */
export type ShopifyOrderDeleteUserErrorCode =
  /** The input value is invalid. */
  | "INVALID"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  | "%future added value"

/** Represents the order's current financial status. */
export type ShopifyOrderDisplayFinancialStatus =
  /** Displayed as **Authorized**. The payment provider has validated the customer's payment information. This status appears only for manual payment capture and indicates payments should be captured before the authorization period expires. */
  | "AUTHORIZED"
  /** Displayed as **Expired**. Payment wasn't captured before the payment provider's deadline on an authorized order. Some payment providers use this status to indicate failed payment processing. */
  | "EXPIRED"
  /** Displayed as **Paid**. Payment was automatically or manually captured, or the order was marked as paid. */
  | "PAID"
  /** Displayed as **Partially paid**. A payment was manually captured for the order with an amount less than the full order value. */
  | "PARTIALLY_PAID"
  /** Displayed as **Partially refunded**. The amount refunded to a customer is less than the full amount paid for an order. */
  | "PARTIALLY_REFUNDED"
  /** Displayed as **Pending**. Orders have this status when the payment provider needs time to complete the payment, or when manual payment methods are being used. */
  | "PENDING"
  /** Displayed as **Refunded**. The full amount paid for an order was refunded to the customer. */
  | "REFUNDED"
  /**
   * Displayed as **Voided**. An unpaid (payment authorized but not captured) order was manually
   *          canceled.
   */
  | "VOIDED"
  | "%future added value"

/** Represents the order's aggregated fulfillment status for display purposes. */
export type ShopifyOrderDisplayFulfillmentStatus =
  /** Displayed as **Fulfilled**. All the items in the order have been fulfilled. */
  | "FULFILLED"
  /** Displayed as **In progress**. All of the items in the order have had a request for fulfillment sent to the fulfillment service or all of the items have been marked as in progress. */
  | "IN_PROGRESS"
  /** Displayed as **On hold**. All of the unfulfilled items in this order are on hold. */
  | "ON_HOLD"
  /** Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED" status. */
  | "OPEN"
  /** Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled. */
  | "PARTIALLY_FULFILLED"
  /** Displayed as **Pending fulfillment**. A request for fulfillment of some items awaits a response from the fulfillment service. Replaced by the "IN_PROGRESS" status. */
  | "PENDING_FULFILLMENT"
  /** Displayed as **Request declined**. Some of the items in the order have been rejected for fulfillment by the fulfillment service. */
  | "REQUEST_DECLINED"
  /** Displayed as **Restocked**. All the items in the order have been restocked. Replaced by the "UNFULFILLED" status. */
  | "RESTOCKED"
  /** Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time. */
  | "SCHEDULED"
  /** Displayed as **Unfulfilled**. None of the items in the order have been fulfilled. */
  | "UNFULFILLED"
  | "%future added value"

/** A summary of the important details for a dispute on an order. */
export interface ShopifyOrderDisputeSummary extends ShopifyNode {
  __typename?: "OrderDisputeSummary"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The type that the dispute was initiated as. */
  initiatedAs: ShopifyDisputeType
  /** The current status of the dispute. */
  status: ShopifyDisputeStatus
}

/** An auto-generated type which holds one Order and a cursor during pagination. */
export interface ShopifyOrderEdge {
  __typename?: "OrderEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of OrderEdge. */
  node: ShopifyOrder
}

/** Return type for `orderEditAddCustomItem` mutation. */
export interface ShopifyOrderEditAddCustomItemPayload {
  __typename?: "OrderEditAddCustomItemPayload"
  /** The custom line item that will be added to the order based on the current edits. */
  calculatedLineItem?: Maybe<ShopifyCalculatedLineItem>
  /** An order with the edits applied but not saved. */
  calculatedOrder?: Maybe<ShopifyCalculatedOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `orderEditAddLineItemDiscount` mutation. */
export interface ShopifyOrderEditAddLineItemDiscountPayload {
  __typename?: "OrderEditAddLineItemDiscountPayload"
  /** The discount applied to a line item during this order edit. */
  addedDiscountStagedChange?: Maybe<ShopifyOrderStagedChangeAddLineItemDiscount>
  /** The line item with the edits applied but not saved. */
  calculatedLineItem?: Maybe<ShopifyCalculatedLineItem>
  /** An order with the edits applied but not saved. */
  calculatedOrder?: Maybe<ShopifyCalculatedOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields used to add a shipping line. */
export interface ShopifyOrderEditAddShippingLineInput {
  /** The price of the shipping line. */
  price: ShopifyMoneyInput
  /** The title of the shipping line. */
  title: Scalars["String"]["input"]
}

/** Return type for `orderEditAddShippingLine` mutation. */
export interface ShopifyOrderEditAddShippingLinePayload {
  __typename?: "OrderEditAddShippingLinePayload"
  /**
   * The [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)
   * with the edits applied but not saved.
   */
  calculatedOrder?: Maybe<ShopifyCalculatedOrder>
  /**
   * The [calculated shipping line](https://shopify.dev/api/admin-graphql/latest/objects/calculatedshippingline)
   * that's added during this order edit.
   */
  calculatedShippingLine?: Maybe<ShopifyCalculatedShippingLine>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOrderEditAddShippingLineUserError>
}

/** An error that occurs during the execution of `OrderEditAddShippingLine`. */
export interface ShopifyOrderEditAddShippingLineUserError
  extends ShopifyDisplayableError {
  __typename?: "OrderEditAddShippingLineUserError"
  /** The error code. */
  code?: Maybe<ShopifyOrderEditAddShippingLineUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `OrderEditAddShippingLineUserError`. */
export type ShopifyOrderEditAddShippingLineUserErrorCode =
  /** The input value is invalid. */
  "INVALID" | "%future added value"

/** Return type for `orderEditAddVariant` mutation. */
export interface ShopifyOrderEditAddVariantPayload {
  __typename?: "OrderEditAddVariantPayload"
  /**
   * The [calculated line item](https://shopify.dev/api/admin-graphql/latest/objects/calculatedlineitem)
   * that's added during this order edit.
   */
  calculatedLineItem?: Maybe<ShopifyCalculatedLineItem>
  /**
   * The [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)
   * with the edits applied but not saved.
   */
  calculatedOrder?: Maybe<ShopifyCalculatedOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An agreement associated with an edit to the order. */
export interface ShopifyOrderEditAgreement extends ShopifySalesAgreement {
  __typename?: "OrderEditAgreement"
  /** The application that created the agreement. */
  app?: Maybe<ShopifyApp>
  /** The date and time at which the agreement occured. */
  happenedAt: Scalars["DateTime"]["output"]
  /** The unique ID for the agreement. */
  id: Scalars["ID"]["output"]
  /** The reason the agremeent was created. */
  reason: ShopifyOrderActionType
  /** The sales associated with the agreement. */
  sales: ShopifySaleConnection
  /** The staff member associated with the agreement. */
  user?: Maybe<ShopifyStaffMember>
}

/** An agreement associated with an edit to the order. */
export interface ShopifyOrderEditAgreementSalesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The input fields used to add a discount during an order edit. */
export interface ShopifyOrderEditAppliedDiscountInput {
  /** The description of the discount. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /** The value of the discount as a fixed amount. */
  fixedValue?: InputMaybe<ShopifyMoneyInput>
  /** The value of the discount as a percentage. */
  percentValue?: InputMaybe<Scalars["Float"]["input"]>
}

/** Return type for `orderEditBegin` mutation. */
export interface ShopifyOrderEditBeginPayload {
  __typename?: "OrderEditBeginPayload"
  /** The order that will be edited. */
  calculatedOrder?: Maybe<ShopifyCalculatedOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `orderEditCommit` mutation. */
export interface ShopifyOrderEditCommitPayload {
  __typename?: "OrderEditCommitPayload"
  /** The order with changes applied. */
  order?: Maybe<ShopifyOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `orderEditRemoveDiscount` mutation. */
export interface ShopifyOrderEditRemoveDiscountPayload {
  __typename?: "OrderEditRemoveDiscountPayload"
  /** An order with the edits applied but not saved. */
  calculatedOrder?: Maybe<ShopifyCalculatedOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOrderEditRemoveDiscountUserError>
}

/** An error that occurs during the execution of `OrderEditRemoveDiscount`. */
export interface ShopifyOrderEditRemoveDiscountUserError
  extends ShopifyDisplayableError {
  __typename?: "OrderEditRemoveDiscountUserError"
  /** The error code. */
  code?: Maybe<ShopifyOrderEditRemoveDiscountUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `OrderEditRemoveDiscountUserError`. */
export type ShopifyOrderEditRemoveDiscountUserErrorCode =
  /** The input value is invalid. */
  "INVALID" | "%future added value"

/** Return type for `orderEditRemoveLineItemDiscount` mutation. */
export interface ShopifyOrderEditRemoveLineItemDiscountPayload {
  __typename?: "OrderEditRemoveLineItemDiscountPayload"
  /** The calculated line item after removal of the discount. */
  calculatedLineItem?: Maybe<ShopifyCalculatedLineItem>
  /** An order with the edits applied but not saved. */
  calculatedOrder?: Maybe<ShopifyCalculatedOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `orderEditRemoveShippingLine` mutation. */
export interface ShopifyOrderEditRemoveShippingLinePayload {
  __typename?: "OrderEditRemoveShippingLinePayload"
  /**
   * The [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)
   * with the edits applied but not saved.
   */
  calculatedOrder?: Maybe<ShopifyCalculatedOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOrderEditRemoveShippingLineUserError>
}

/** An error that occurs during the execution of `OrderEditRemoveShippingLine`. */
export interface ShopifyOrderEditRemoveShippingLineUserError
  extends ShopifyDisplayableError {
  __typename?: "OrderEditRemoveShippingLineUserError"
  /** The error code. */
  code?: Maybe<ShopifyOrderEditRemoveShippingLineUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `OrderEditRemoveShippingLineUserError`. */
export type ShopifyOrderEditRemoveShippingLineUserErrorCode =
  /** The input value is invalid. */
  "INVALID" | "%future added value"

/** Return type for `orderEditSetQuantity` mutation. */
export interface ShopifyOrderEditSetQuantityPayload {
  __typename?: "OrderEditSetQuantityPayload"
  /** The calculated line item with the edits applied but not saved. */
  calculatedLineItem?: Maybe<ShopifyCalculatedLineItem>
  /** The calculated order with the edits applied but not saved. */
  calculatedOrder?: Maybe<ShopifyCalculatedOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `orderEditUpdateDiscount` mutation. */
export interface ShopifyOrderEditUpdateDiscountPayload {
  __typename?: "OrderEditUpdateDiscountPayload"
  /** An order with the edits applied but not saved. */
  calculatedOrder?: Maybe<ShopifyCalculatedOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOrderEditUpdateDiscountUserError>
}

/** An error that occurs during the execution of `OrderEditUpdateDiscount`. */
export interface ShopifyOrderEditUpdateDiscountUserError
  extends ShopifyDisplayableError {
  __typename?: "OrderEditUpdateDiscountUserError"
  /** The error code. */
  code?: Maybe<ShopifyOrderEditUpdateDiscountUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `OrderEditUpdateDiscountUserError`. */
export type ShopifyOrderEditUpdateDiscountUserErrorCode =
  /** The input value is invalid. */
  "INVALID" | "%future added value"

/** The input fields used to update a shipping line. */
export interface ShopifyOrderEditUpdateShippingLineInput {
  /** The price of the shipping line. */
  price?: InputMaybe<ShopifyMoneyInput>
  /** The title of the shipping line. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `orderEditUpdateShippingLine` mutation. */
export interface ShopifyOrderEditUpdateShippingLinePayload {
  __typename?: "OrderEditUpdateShippingLinePayload"
  /** An order with the edits applied but not saved. */
  calculatedOrder?: Maybe<ShopifyCalculatedOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOrderEditUpdateShippingLineUserError>
}

/** An error that occurs during the execution of `OrderEditUpdateShippingLine`. */
export interface ShopifyOrderEditUpdateShippingLineUserError
  extends ShopifyDisplayableError {
  __typename?: "OrderEditUpdateShippingLineUserError"
  /** The error code. */
  code?: Maybe<ShopifyOrderEditUpdateShippingLineUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `OrderEditUpdateShippingLineUserError`. */
export type ShopifyOrderEditUpdateShippingLineUserErrorCode =
  /** The input value is invalid. */
  "INVALID" | "%future added value"

/** The input fields for identifying a order. */
export interface ShopifyOrderIdentifierInput {
  /** The [custom ID](https://shopify.dev/docs/apps/build/custom-data/metafields/working-with-custom-ids) of the order. */
  customId?: InputMaybe<ShopifyUniqueMetafieldValueInput>
  /** The ID of the order. */
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** The input fields for specifying the information to be updated on an order when using the orderUpdate mutation. */
export interface ShopifyOrderInput {
  /** A new list of custom attributes for the order. Overwrites the existing custom attributes. */
  customAttributes?: InputMaybe<Array<ShopifyAttributeInput>>
  /** A new customer email address for the order. Overwrites the existing email address. */
  email?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of the order to update. */
  id: Scalars["ID"]["input"]
  /** A list of new [localized fields](https://shopify.dev/api/admin-graphql/latest/objects/localizedfield) to add to the existing list of localized fields for the order. */
  localizedFields?: InputMaybe<Array<ShopifyLocalizedFieldInput>>
  /** A list of new metafields to add to the existing metafields for the order. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The new contents for the note associated with the order. Overwrites the existing note. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** The new purchase order number for the order. */
  poNumber?: InputMaybe<Scalars["String"]["input"]>
  /** The new shipping address for the order. Overwrites the existing shipping address. */
  shippingAddress?: InputMaybe<ShopifyMailingAddressInput>
  /** A new list of tags for the order. Overwrites the existing tags. */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
}

/** Return type for `orderInvoiceSend` mutation. */
export interface ShopifyOrderInvoiceSendPayload {
  __typename?: "OrderInvoiceSendPayload"
  /** The order associated with the invoice email. */
  order?: Maybe<ShopifyOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOrderInvoiceSendUserError>
}

/** An error that occurs during the execution of `OrderInvoiceSend`. */
export interface ShopifyOrderInvoiceSendUserError
  extends ShopifyDisplayableError {
  __typename?: "OrderInvoiceSendUserError"
  /** The error code. */
  code?: Maybe<ShopifyOrderInvoiceSendUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `OrderInvoiceSendUserError`. */
export type ShopifyOrderInvoiceSendUserErrorCode =
  /** An error occurred while sending the invoice. */
  "ORDER_INVOICE_SEND_UNSUCCESSFUL" | "%future added value"

/** The input fields for specifying the order to mark as paid. */
export interface ShopifyOrderMarkAsPaidInput {
  /** The ID of the order to mark as paid. */
  id: Scalars["ID"]["input"]
}

/** Return type for `orderMarkAsPaid` mutation. */
export interface ShopifyOrderMarkAsPaidPayload {
  __typename?: "OrderMarkAsPaidPayload"
  /** The order marked as paid. */
  order?: Maybe<ShopifyOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields for specifying a closed order to open. */
export interface ShopifyOrderOpenInput {
  /** The ID of the order to open. */
  id: Scalars["ID"]["input"]
}

/** Return type for `orderOpen` mutation. */
export interface ShopifyOrderOpenPayload {
  __typename?: "OrderOpenPayload"
  /** The opened order. */
  order?: Maybe<ShopifyOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The payment collection details for an order that requires additional payment following an edit to the order. */
export interface ShopifyOrderPaymentCollectionDetails {
  __typename?: "OrderPaymentCollectionDetails"
  /** The URL to use for collecting an additional payment on the order. */
  additionalPaymentCollectionUrl?: Maybe<Scalars["URL"]["output"]>
  /** The list of vaulted payment methods for the order with their permissions. */
  vaultedPaymentMethods?: Maybe<Array<ShopifyPaymentMandate>>
}

/** The status of a customer's payment for an order. */
export interface ShopifyOrderPaymentStatus {
  __typename?: "OrderPaymentStatus"
  /** A message describing an error during the asynchronous processing of a payment. */
  errorMessage?: Maybe<Scalars["String"]["output"]>
  /** The ID of the payment, initially returned by an `orderCreateMandatePayment` or `orderCreatePayment` mutation. */
  paymentReferenceId: Scalars["String"]["output"]
  /** The status of the payment. */
  status: ShopifyOrderPaymentStatusResult
  /** The transaction associated with the payment. */
  transactions: Array<ShopifyOrderTransaction>
  /** A translated message describing an error during the asynchronous processing of a payment. */
  translatedErrorMessage?: Maybe<Scalars["String"]["output"]>
}

/** The type of a payment status. */
export type ShopifyOrderPaymentStatusResult =
  /** The payment is authorized. */
  | "AUTHORIZED"
  /** The payment is captured. */
  | "CAPTURED"
  /** There was an error initiating the payment. */
  | "ERROR"
  /** The payment is awaiting processing. */
  | "INITIATED"
  /** The payment is pending with the provider, and may take a while. */
  | "PENDING"
  /** The payment is still being processed. */
  | "PROCESSING"
  /** The payment is in purchased status. */
  | "PURCHASED"
  /** Redirect required. */
  | "REDIRECT_REQUIRED"
  /** The payment is refunded. */
  | "REFUNDED"
  /** Payment can be retried. */
  | "RETRYABLE"
  /** The payment succeeded. */
  | "SUCCESS"
  /** Status is unknown. */
  | "UNKNOWN"
  /** The payment is voided. */
  | "VOIDED"
  | "%future added value"

/**
 * The order's aggregated return status that's used for display purposes.
 * An order might have multiple returns, so this field communicates the prioritized return status.
 * The `OrderReturnStatus` enum is a supported filter parameter in the [`orders` query](https://shopify.dev/api/admin-graphql/latest/queries/orders#:~:text=reference_location_id-,return_status,-risk_level).
 */
export type ShopifyOrderReturnStatus =
  /** All return shipments from a return in this order were inspected. */
  | "INSPECTION_COMPLETE"
  /** Some items in the order are being returned. */
  | "IN_PROGRESS"
  /** No items in the order were returned. */
  | "NO_RETURN"
  /** Some items in the order were returned. */
  | "RETURNED"
  /** Some returns in the order were not completed successfully. */
  | "RETURN_FAILED"
  /** A return was requested for some items in the order. */
  | "RETURN_REQUESTED"
  | "%future added value"

/** Represents a fraud check on an order. This object is deprecated in favor of [OrderRiskAssessment](https://shopify.dev/api/admin-graphql/latest/objects/OrderRiskAssessment) and its enhanced capabilities. */
export interface ShopifyOrderRisk {
  __typename?: "OrderRisk"
  /**
   * Whether the risk level is shown in the Shopify admin. If false, then this order risk is ignored when Shopify determines the overall risk level for the order.
   * @deprecated This field is deprecated in favor of OrderRiskAssessment.facts.
   */
  display: Scalars["Boolean"]["output"]
  /**
   * The likelihood that an order is fraudulent, based on this order risk. The level can be set by Shopify risk analysis or by an app.
   * @deprecated This field is deprecated in favor of OrderRiskAssessment.riskLevel which allows for more granular risk levels, including PENDING and NONE.
   */
  level?: Maybe<ShopifyOrderRiskLevel>
  /**
   * The risk message that's shown to the merchant in the Shopify admin.
   * @deprecated This field is deprecated in favor of OrderRiskAssessment.facts.
   */
  message?: Maybe<Scalars["String"]["output"]>
}

/**
 * The risk assessments for an order.
 *
 * See the [example query "Retrieves a list of all order risks for an order"](https://shopify.dev/docs/api/admin-graphql/unstable/queries/order?example=Retrieves+a+list+of+all+order+risks+for+an+order).
 */
export interface ShopifyOrderRiskAssessment {
  __typename?: "OrderRiskAssessment"
  /**
   * Optional facts used to describe the risk assessment. The values in here are specific to the provider.
   * See the [examples for the mutation orderRiskAssessmentCreate](https://shopify.dev/api/admin-graphql/unstable/mutations/orderRiskAssessmentCreate#section-examples).
   */
  facts: Array<ShopifyRiskFact>
  /** The app that provided the assessment, `null` if the assessment was provided by Shopify. */
  provider?: Maybe<ShopifyApp>
  /** The likelihood that the order is fraudulent, based on this risk assessment. */
  riskLevel: ShopifyRiskAssessmentResult
}

/** The input fields for an order risk assessment. */
export interface ShopifyOrderRiskAssessmentCreateInput {
  /** The list of facts used to determine the fraud assessment. */
  facts: Array<ShopifyOrderRiskAssessmentFactInput>
  /** The ID of the order receiving the fraud assessment. */
  orderId: Scalars["ID"]["input"]
  /** The risk level of the fraud assessment. */
  riskLevel: ShopifyRiskAssessmentResult
}

/** Return type for `orderRiskAssessmentCreate` mutation. */
export interface ShopifyOrderRiskAssessmentCreatePayload {
  __typename?: "OrderRiskAssessmentCreatePayload"
  /** The order risk assessment created. */
  orderRiskAssessment?: Maybe<ShopifyOrderRiskAssessment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOrderRiskAssessmentCreateUserError>
}

/** An error that occurs during the execution of `OrderRiskAssessmentCreate`. */
export interface ShopifyOrderRiskAssessmentCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "OrderRiskAssessmentCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyOrderRiskAssessmentCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `OrderRiskAssessmentCreateUserError`. */
export type ShopifyOrderRiskAssessmentCreateUserErrorCode =
  /** The input value is invalid. */
  | "INVALID"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** The order is marked as fulfilled and can no longer accept new risk assessments. */
  | "ORDER_ALREADY_FULFILLED"
  /** Too many facts were provided for the risk assessment. */
  | "TOO_MANY_FACTS"
  | "%future added value"

/** The input fields to create a fact on an order risk assessment. */
export interface ShopifyOrderRiskAssessmentFactInput {
  /** A description of the fact. Large values are truncated to 256 characters. */
  description: Scalars["String"]["input"]
  /** Indicates whether the fact is a negative, neutral or positive contributor with regards to risk. */
  sentiment: ShopifyRiskFactSentiment
}

/**
 * The likelihood that an order is fraudulent.
 * This enum is deprecated in favor of
 * [RiskAssessmentResult](https://shopify.dev/api/admin-graphql/latest/enums/RiskAssessmentResult)
 * which allows for more granular risk levels, including PENDING and NONE.
 */
export type ShopifyOrderRiskLevel =
  /** There is a high level of risk that this order is fraudulent. */
  | "HIGH"
  /** There is a low level of risk that this order is fraudulent. */
  | "LOW"
  /** There is a medium level of risk that this order is fraudulent. */
  | "MEDIUM"
  | "%future added value"

/** List of possible values for an OrderRiskRecommendation recommendation. */
export type ShopifyOrderRiskRecommendationResult =
  /** Recommends fulfilling the order. */
  | "ACCEPT"
  /** Recommends cancelling the order. */
  | "CANCEL"
  /** Recommends investigating the order by contacting buyers. */
  | "INVESTIGATE"
  /** There is no recommended action for the order. */
  | "NONE"
  | "%future added value"

/**
 * Summary of risk characteristics for an order.
 *
 * See the [example query "Retrieves a list of all order risks for an order"](https://shopify.dev/docs/api/admin-graphql/unstable/queries/order?example=Retrieves+a+list+of+all+order+risks+for+an+order).
 */
export interface ShopifyOrderRiskSummary {
  __typename?: "OrderRiskSummary"
  /** The list of risk assessments for the order. */
  assessments: Array<ShopifyOrderRiskAssessment>
  /** The recommendation for the order based on the results of the risk assessments. This suggests the action the merchant should take with regards to its risk of fraud. */
  recommendation: ShopifyOrderRiskRecommendationResult
}

/** The set of valid sort keys for the Order query. */
export type ShopifyOrderSortKeys =
  /** Sorts by the date and time the order was created. */
  | "CREATED_AT"
  /** Sorts by the customer's name. */
  | "CUSTOMER_NAME"
  /** Sort by shipping address to analyze regional sales patterns or plan logistics. */
  | "DESTINATION"
  /** Sorts by the financial status of the order. */
  | "FINANCIAL_STATUS"
  /** Sorts by the order's fulfillment status. */
  | "FULFILLMENT_STATUS"
  /** Sort by the `id` value. */
  | "ID"
  /** Sorts by the order number. */
  | "ORDER_NUMBER"
  /** Sort by the purchase order number to match external procurement systems or track recent orders. */
  | "PO_NUMBER"
  /** Sorts by the date and time the order was processed. */
  | "PROCESSED_AT"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  /** Sort by the total quantity of all line items to identify large purchases or analyze inventory demand patterns. */
  | "TOTAL_ITEMS_QUANTITY"
  /** Sorts by the total sold price of an order in the shop currency, excluding any returns/refunds/removals. */
  | "TOTAL_PRICE"
  /** Sorts by the date and time the order was last updated. */
  | "UPDATED_AT"
  | "%future added value"

/** A change that has been applied to an order. */
export type ShopifyOrderStagedChange =
  | ShopifyOrderStagedChangeAddCustomItem
  | ShopifyOrderStagedChangeAddLineItemDiscount
  | ShopifyOrderStagedChangeAddShippingLine
  | ShopifyOrderStagedChangeAddVariant
  | ShopifyOrderStagedChangeDecrementItem
  | ShopifyOrderStagedChangeIncrementItem
  | ShopifyOrderStagedChangeRemoveShippingLine

/**
 * A change to the order representing the addition of a
 * custom line item. For example, you might want to add gift wrapping service
 * as a custom line item.
 */
export interface ShopifyOrderStagedChangeAddCustomItem {
  __typename?: "OrderStagedChangeAddCustomItem"
  /** The price of an individual item without any discounts applied. This value can't be negative. */
  originalUnitPrice: ShopifyMoneyV2
  /** The quantity of the custom item to add to the order. This value must be greater than zero. */
  quantity: Scalars["Int"]["output"]
  /** The title of the custom item. */
  title: Scalars["String"]["output"]
}

/** The discount applied to an item that was added during the current order edit. */
export interface ShopifyOrderStagedChangeAddLineItemDiscount {
  __typename?: "OrderStagedChangeAddLineItemDiscount"
  /** The description of the discount. */
  description: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The pricing value of the discount. */
  value: ShopifyPricingValue
}

/**
 * A new [shipping line](https://shopify.dev/api/admin-graphql/latest/objects/shippingline)
 * added as part of an order edit.
 */
export interface ShopifyOrderStagedChangeAddShippingLine {
  __typename?: "OrderStagedChangeAddShippingLine"
  /** The phone number at the shipping address. */
  phone?: Maybe<Scalars["String"]["output"]>
  /** The shipping line's title that's shown to the buyer. */
  presentmentTitle?: Maybe<Scalars["String"]["output"]>
  /** The price that applies to the shipping line. */
  price: ShopifyMoneyV2
  /** The title of the shipping line. */
  title?: Maybe<Scalars["String"]["output"]>
}

/** A change to the order representing the addition of an existing product variant. */
export interface ShopifyOrderStagedChangeAddVariant {
  __typename?: "OrderStagedChangeAddVariant"
  /** The quantity of the product variant that was added. */
  quantity: Scalars["Int"]["output"]
  /** The product variant that was added. */
  variant: ShopifyProductVariant
}

/** An auto-generated type for paginating through multiple OrderStagedChanges. */
export interface ShopifyOrderStagedChangeConnection {
  __typename?: "OrderStagedChangeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyOrderStagedChangeEdge>
  /** A list of nodes that are contained in OrderStagedChangeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyOrderStagedChange>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An removal of items from an existing line item on the order. */
export interface ShopifyOrderStagedChangeDecrementItem {
  __typename?: "OrderStagedChangeDecrementItem"
  /** The number of items removed. */
  delta: Scalars["Int"]["output"]
  /** The original line item. */
  lineItem: ShopifyLineItem
  /** The intention to restock the removed items. */
  restock: Scalars["Boolean"]["output"]
}

/** An auto-generated type which holds one OrderStagedChange and a cursor during pagination. */
export interface ShopifyOrderStagedChangeEdge {
  __typename?: "OrderStagedChangeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of OrderStagedChangeEdge. */
  node: ShopifyOrderStagedChange
}

/** An addition of items to an existing line item on the order. */
export interface ShopifyOrderStagedChangeIncrementItem {
  __typename?: "OrderStagedChangeIncrementItem"
  /** The number of items added. */
  delta: Scalars["Int"]["output"]
  /** The original line item. */
  lineItem: ShopifyLineItem
}

/** A shipping line removed during an order edit. */
export interface ShopifyOrderStagedChangeRemoveShippingLine {
  __typename?: "OrderStagedChangeRemoveShippingLine"
  /** The removed shipping line. */
  shippingLine: ShopifyShippingLine
}

/**
 * The `OrderTransaction` object represents a payment transaction that's associated with an order. An order
 * transaction is a specific action or event that happens within the context of an order, such as a customer paying
 * for a purchase or receiving a refund, or other payment-related activity.
 *
 * Use the `OrderTransaction` object to capture the complete lifecycle of a payment, from initial
 * authorization to final settlement, including refunds and currency exchanges. Common use cases for using the
 * `OrderTransaction` object include:
 *
 * - Processing new payments for orders
 * - Managing payment authorizations and captures
 * - Processing refunds for returned items
 * - Tracking payment status and errors
 * - Managing multi-currency transactions
 * - Handling payment gateway integrations
 *
 * Each `OrderTransaction` object has a [`kind`](https://shopify.dev/docs/api/admin-graphql/latest/enums/OrderTransactionKind)
 * that defines the type of transaction and a [`status`](https://shopify.dev/docs/api/admin-graphql/latest/enums/OrderTransactionStatus)
 * that indicates the current state of the transaction. The object stores detailed information about payment
 * methods, gateway processing, and settlement details.
 *
 * Learn more about [payment processing](https://help.shopify.com/manual/payments)
 * and [payment gateway integrations](https://www.shopify.com/ca/payment-gateways).
 */
export interface ShopifyOrderTransaction extends ShopifyNode {
  __typename?: "OrderTransaction"
  /** The masked account number associated with the payment method. */
  accountNumber?: Maybe<Scalars["String"]["output"]>
  /**
   * The amount of money.
   * @deprecated Use `amountSet` instead.
   */
  amount: Scalars["Money"]["output"]
  /** The rounding adjustment applied on the cash amount in shop and presentment currencies. */
  amountRoundingSet?: Maybe<ShopifyMoneyBag>
  /** The amount and currency of the transaction in shop and presentment currencies. */
  amountSet: ShopifyMoneyBag
  /**
   * The amount and currency of the transaction.
   * @deprecated Use `amountSet` instead.
   */
  amountV2: ShopifyMoneyV2
  /** Authorization code associated with the transaction. */
  authorizationCode?: Maybe<Scalars["String"]["output"]>
  /** The time when the authorization expires. This field is available only to stores on a Shopify Plus plan. */
  authorizationExpiresAt?: Maybe<Scalars["DateTime"]["output"]>
  /** Date and time when the transaction was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** An adjustment on the transaction showing the amount lost or gained  due to fluctuations in the currency exchange rate. */
  currencyExchangeAdjustment?: Maybe<ShopifyCurrencyExchangeAdjustment>
  /** The Shopify Point of Sale device used to process the transaction. */
  device?: Maybe<ShopifyPointOfSaleDevice>
  /** A standardized error code, independent of the payment provider. */
  errorCode?: Maybe<ShopifyOrderTransactionErrorCode>
  /** The transaction fees charged on the order transaction. Only present for Shopify Payments transactions. */
  fees: Array<ShopifyTransactionFee>
  /** The human-readable payment gateway name used to process the transaction. */
  formattedGateway?: Maybe<Scalars["String"]["output"]>
  /** The payment gateway used to process the transaction. */
  gateway?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The kind of transaction. */
  kind: ShopifyOrderTransactionKind
  /** The physical location where the transaction was processed. */
  location?: Maybe<ShopifyLocation>
  /** Whether the transaction is processed by manual payment gateway. */
  manualPaymentGateway: Scalars["Boolean"]["output"]
  /** Whether the transaction can be manually captured. */
  manuallyCapturable: Scalars["Boolean"]["output"]
  /**
   * Specifies the available amount to refund on the gateway.
   * This value is only available for transactions of type `SuggestedRefund`.
   * @deprecated Use `maximumRefundableV2` instead.
   */
  maximumRefundable?: Maybe<Scalars["Money"]["output"]>
  /**
   * Specifies the available amount with currency to refund on the gateway.
   * This value is only available for transactions of type `SuggestedRefund`.
   */
  maximumRefundableV2?: Maybe<ShopifyMoneyV2>
  /** Whether the transaction can be captured multiple times. */
  multiCapturable: Scalars["Boolean"]["output"]
  /** The associated order. */
  order?: Maybe<ShopifyOrder>
  /** The associated parent transaction, for example the authorization of a capture. */
  parentTransaction?: Maybe<ShopifyOrderTransaction>
  /** The payment details for the transaction. */
  paymentDetails?: Maybe<ShopifyPaymentDetails>
  /** The payment icon to display for the transaction. */
  paymentIcon?: Maybe<ShopifyImage>
  /** The payment ID associated with the transaction. */
  paymentId?: Maybe<Scalars["String"]["output"]>
  /**
   * The payment method used for the transaction. This value is `null` if the payment method is unknown.
   * @deprecated Use `paymentIcon` instead.
   */
  paymentMethod?: Maybe<ShopifyPaymentMethods>
  /** Date and time when the transaction was processed. */
  processedAt?: Maybe<Scalars["DateTime"]["output"]>
  /**
   * The transaction receipt that the payment gateway attaches to the transaction.
   * The value of this field depends on which payment gateway processed the transaction.
   */
  receiptJson?: Maybe<Scalars["JSON"]["output"]>
  /** The settlement currency. */
  settlementCurrency?: Maybe<ShopifyCurrencyCode>
  /** The rate used when converting the transaction amount to settlement currency. */
  settlementCurrencyRate?: Maybe<Scalars["Decimal"]["output"]>
  /** Contains all Shopify Payments information related to an order transaction. This field is available only to stores on a Shopify Plus plan. */
  shopifyPaymentsSet?: Maybe<ShopifyShopifyPaymentsTransactionSet>
  /** The status of this transaction. */
  status: ShopifyOrderTransactionStatus
  /** Whether the transaction is a test transaction. */
  test: Scalars["Boolean"]["output"]
  /**
   * Specifies the available amount to capture on the gateway.
   * Only available when an amount is capturable or manually mark as paid.
   * @deprecated Use `totalUnsettledSet` instead.
   */
  totalUnsettled?: Maybe<Scalars["Money"]["output"]>
  /**
   * Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.
   * Only available when an amount is capturable or manually mark as paid.
   */
  totalUnsettledSet?: Maybe<ShopifyMoneyBag>
  /**
   * Specifies the available amount with currency to capture on the gateway.
   * Only available when an amount is capturable or manually mark as paid.
   * @deprecated Use `totalUnsettledSet` instead.
   */
  totalUnsettledV2?: Maybe<ShopifyMoneyV2>
  /** Staff member who was logged into the Shopify POS device when the transaction was processed. */
  user?: Maybe<ShopifyStaffMember>
}

/** An auto-generated type for paginating through multiple OrderTransactions. */
export interface ShopifyOrderTransactionConnection {
  __typename?: "OrderTransactionConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyOrderTransactionEdge>
  /** A list of nodes that are contained in OrderTransactionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyOrderTransaction>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one OrderTransaction and a cursor during pagination. */
export interface ShopifyOrderTransactionEdge {
  __typename?: "OrderTransactionEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of OrderTransactionEdge. */
  node: ShopifyOrderTransaction
}

/** A standardized error code, independent of the payment provider. */
export type ShopifyOrderTransactionErrorCode =
  /** The payment method was invalid. */
  | "AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD"
  /** The maximum amount has been captured. */
  | "AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED"
  /** The maximum amount has been refunded. */
  | "AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED"
  /** The maximum of 10 authorizations has been captured for an order. */
  | "AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED"
  /** The maximum of 10 refunds has been processed for an order. */
  | "AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED"
  /** The order was canceled, which canceled all open authorizations. */
  | "AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED"
  /** The order was not confirmed within three hours. */
  | "AMAZON_PAYMENTS_STALE"
  /** Call the card issuer. */
  | "CALL_ISSUER"
  /** The card was declined. */
  | "CARD_DECLINED"
  /** There is an error in the gateway or merchant configuration. */
  | "CONFIG_ERROR"
  /** The card is expired. */
  | "EXPIRED_CARD"
  /** There was an unknown error with processing the payment. */
  | "GENERIC_ERROR"
  /** The address does not match the card number. */
  | "INCORRECT_ADDRESS"
  /** The CVC does not match the card number. */
  | "INCORRECT_CVC"
  /** The card number is incorrect. */
  | "INCORRECT_NUMBER"
  /** The entered PIN is incorrect. */
  | "INCORRECT_PIN"
  /** The ZIP or postal code does not match the card number. */
  | "INCORRECT_ZIP"
  /** The amount is either too high or too low for the provider. */
  | "INVALID_AMOUNT"
  /** The payment method is not available in the customer's country. */
  | "INVALID_COUNTRY"
  /** The format of the CVC is incorrect. */
  | "INVALID_CVC"
  /** The format of the expiry date is incorrect. */
  | "INVALID_EXPIRY_DATE"
  /** The format of the card number is incorrect. */
  | "INVALID_NUMBER"
  /** The payment method is momentarily unavailable. */
  | "PAYMENT_METHOD_UNAVAILABLE"
  /** The card has been reported as lost or stolen, and the card issuer has requested that the merchant keep the card and call the number on the back. */
  | "PICK_UP_CARD"
  /** There was an error while processing the payment. */
  | "PROCESSING_ERROR"
  /** A real card was used but the gateway was in test mode. */
  | "TEST_MODE_LIVE_CARD"
  /** The gateway or merchant configuration doesn't support a feature, such as network tokenization. */
  | "UNSUPPORTED_FEATURE"
  | "%future added value"

/** The input fields for the information needed to create an order transaction. */
export interface ShopifyOrderTransactionInput {
  /** The amount of money for this transaction. */
  amount: Scalars["Money"]["input"]
  /** The payment gateway to use for this transaction. */
  gateway: Scalars["String"]["input"]
  /** The kind of transaction. */
  kind: ShopifyOrderTransactionKind
  /** The ID of the order associated with the transaction. */
  orderId: Scalars["ID"]["input"]
  /** The ID of the optional parent transaction, for example the authorization of a capture. */
  parentId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The different kinds of order transactions. */
export type ShopifyOrderTransactionKind =
  /**
   * An amount reserved against the cardholder's funding source.
   * Money does not change hands until the authorization is captured.
   */
  | "AUTHORIZATION"
  /** A transfer of the money that was reserved by an authorization. */
  | "CAPTURE"
  /** The money returned to the customer when they've paid too much during a cash transaction. */
  | "CHANGE"
  /** An authorization for a payment taken with an EMV credit card reader. */
  | "EMV_AUTHORIZATION"
  /**
   * A partial or full return of captured funds to the cardholder.
   * A refund can happen only after a capture is processed.
   */
  | "REFUND"
  /** An authorization and capture performed together in a single step. */
  | "SALE"
  /** A suggested refund transaction that can be used to create a refund. */
  | "SUGGESTED_REFUND"
  /** A cancelation of an authorization transaction. */
  | "VOID"
  | "%future added value"

/** The different states that an `OrderTransaction` can have. */
export type ShopifyOrderTransactionStatus =
  /** Awaiting a response. */
  | "AWAITING_RESPONSE"
  /** There was an error while processing the transaction. */
  | "ERROR"
  /** The transaction failed. */
  | "FAILURE"
  /** The transaction is pending. */
  | "PENDING"
  /** The transaction succeeded. */
  | "SUCCESS"
  /** The transaction status is unknown. */
  | "UNKNOWN"
  | "%future added value"

/** Return type for `orderUpdate` mutation. */
export interface ShopifyOrderUpdatePayload {
  __typename?: "OrderUpdatePayload"
  /** The updated order. */
  order?: Maybe<ShopifyOrder>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** A page on the Online Store. */
export interface ShopifyPage
  extends ShopifyHasEvents,
    ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyHasPublishedTranslations,
    ShopifyNavigable,
    ShopifyNode {
  __typename?: "Page"
  /** The text content of the page, complete with HTML markup. */
  body: Scalars["HTML"]["output"]
  /** The first 150 characters of the page body. If the page body contains more than 150 characters, additional characters are truncated by ellipses. */
  bodySummary: Scalars["String"]["output"]
  /** The date and time (ISO 8601 format) of the page creation. */
  createdAt: Scalars["DateTime"]["output"]
  /** A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars["String"]["output"]
  /** The paginated list of events associated with the host subject. */
  events: ShopifyEventConnection
  /**
   * A unique, human-friendly string for the page.
   * In themes, the Liquid templating language refers to a page by its handle.
   */
  handle: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Whether or not the page is visible. */
  isPublished: Scalars["Boolean"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /**
   * The date and time (ISO 8601 format) when the page became or will become visible.
   * Returns null when the page isn't visible.
   */
  publishedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The suffix of the template that's used to render the page. */
  templateSuffix?: Maybe<Scalars["String"]["output"]>
  /** Title of the page. */
  title: Scalars["String"]["output"]
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
  /** The date and time (ISO 8601 format) of the latest page update. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** A page on the Online Store. */
export interface ShopifyPageEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/** A page on the Online Store. */
export interface ShopifyPageMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** A page on the Online Store. */
export interface ShopifyPageMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/** A page on the Online Store. */
export interface ShopifyPageMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A page on the Online Store. */
export interface ShopifyPageTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/** An auto-generated type for paginating through multiple Pages. */
export interface ShopifyPageConnection {
  __typename?: "PageConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyPageEdge>
  /** A list of nodes that are contained in PageEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyPage>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields to create a page. */
export interface ShopifyPageCreateInput {
  /** The text content of the page, complete with HTML markup. */
  body?: InputMaybe<Scalars["String"]["input"]>
  /**
   * A unique, human-friendly string for the page. If no handle is specified, a handle will be generated automatically from the page title.
   * In themes, the Liquid templating language refers to a page by its handle.
   */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** Whether or not the page should be visible. Defaults to `true` if no publish date is specified. */
  isPublished?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The input fields to create or update a metafield. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The date and time (ISO 8601 format) when the page should become visible. */
  publishDate?: InputMaybe<Scalars["DateTime"]["input"]>
  /**
   * The suffix of the template that's used to render the page.
   * If the value is an empty string or `null`, then the default page template is used.
   */
  templateSuffix?: InputMaybe<Scalars["String"]["input"]>
  /** The title of the page. */
  title: Scalars["String"]["input"]
}

/** Return type for `pageCreate` mutation. */
export interface ShopifyPageCreatePayload {
  __typename?: "PageCreatePayload"
  /** The page that was created. */
  page?: Maybe<ShopifyPage>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPageCreateUserError>
}

/** An error that occurs during the execution of `PageCreate`. */
export interface ShopifyPageCreateUserError extends ShopifyDisplayableError {
  __typename?: "PageCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyPageCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `PageCreateUserError`. */
export type ShopifyPageCreateUserErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** The input value is invalid. */
  | "INVALID"
  /** Can’t set isPublished to true and also set a future publish date. */
  | "INVALID_PUBLISH_DATE"
  /** The metafield type is invalid. */
  | "INVALID_TYPE"
  /** The value is invalid for the metafield type or for the definition options. */
  | "INVALID_VALUE"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too big. */
  | "TOO_BIG"
  /** The input value is too long. */
  | "TOO_LONG"
  | "%future added value"

/** Return type for `pageDelete` mutation. */
export interface ShopifyPageDeletePayload {
  __typename?: "PageDeletePayload"
  /** The ID of the deleted page. */
  deletedPageId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPageDeleteUserError>
}

/** An error that occurs during the execution of `PageDelete`. */
export interface ShopifyPageDeleteUserError extends ShopifyDisplayableError {
  __typename?: "PageDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyPageDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `PageDeleteUserError`. */
export type ShopifyPageDeleteUserErrorCode =
  /** The record with the ID used as the input value couldn't be found. */
  "NOT_FOUND" | "%future added value"

/** An auto-generated type which holds one Page and a cursor during pagination. */
export interface ShopifyPageEdge {
  __typename?: "PageEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of PageEdge. */
  node: ShopifyPage
}

/**
 * Returns information about pagination in a connection, in accordance with the
 * [Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
 * For more information, please read our [GraphQL Pagination Usage Guide](https://shopify.dev/api/usage/pagination-graphql).
 */
export interface ShopifyPageInfo {
  __typename?: "PageInfo"
  /** The cursor corresponding to the last node in edges. */
  endCursor?: Maybe<Scalars["String"]["output"]>
  /** Whether there are more pages to fetch following the current page. */
  hasNextPage: Scalars["Boolean"]["output"]
  /** Whether there are any pages prior to the current page. */
  hasPreviousPage: Scalars["Boolean"]["output"]
  /** The cursor corresponding to the first node in edges. */
  startCursor?: Maybe<Scalars["String"]["output"]>
}

/** The set of valid sort keys for the Page query. */
export type ShopifyPageSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `published_at` value. */
  | "PUBLISHED_AT"
  /** Sort by the `title` value. */
  | "TITLE"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** The input fields to update a page. */
export interface ShopifyPageUpdateInput {
  /** The text content of the page, complete with HTML markup. */
  body?: InputMaybe<Scalars["String"]["input"]>
  /**
   * A unique, human-friendly string for the page. If no handle is specified, a handle will be generated automatically from the page title.
   * In themes, the Liquid templating language refers to a page by its handle.
   */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** Whether or not the page should be visible. Defaults to `true` if no publish date is specified. */
  isPublished?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The input fields to create or update a metafield. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The date and time (ISO 8601 format) when the page should become visible. */
  publishDate?: InputMaybe<Scalars["DateTime"]["input"]>
  /**
   * Whether a redirect is required after a new handle has been provided.
   * If `true`, then the old handle is redirected to the new one automatically.
   */
  redirectNewHandle?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * The suffix of the template that's used to render the page.
   * If the value is an empty string or `null`, then the default page template is used.
   */
  templateSuffix?: InputMaybe<Scalars["String"]["input"]>
  /** The title of the page. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `pageUpdate` mutation. */
export interface ShopifyPageUpdatePayload {
  __typename?: "PageUpdatePayload"
  /** The page that was updated. */
  page?: Maybe<ShopifyPage>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPageUpdateUserError>
}

/** An error that occurs during the execution of `PageUpdate`. */
export interface ShopifyPageUpdateUserError extends ShopifyDisplayableError {
  __typename?: "PageUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyPageUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `PageUpdateUserError`. */
export type ShopifyPageUpdateUserErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** The input value is invalid. */
  | "INVALID"
  /** Can’t set isPublished to true and also set a future publish date. */
  | "INVALID_PUBLISH_DATE"
  /** The metafield type is invalid. */
  | "INVALID_TYPE"
  /** The value is invalid for the metafield type or for the definition options. */
  | "INVALID_VALUE"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too big. */
  | "TOO_BIG"
  /** The input value is too long. */
  | "TOO_LONG"
  | "%future added value"

/** A payment customization. */
export interface ShopifyPaymentCustomization
  extends ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyNode {
  __typename?: "PaymentCustomization"
  /** The enabled status of the payment customization. */
  enabled: Scalars["Boolean"]["output"]
  /** The error history on the most recent version of the payment customization. */
  errorHistory?: Maybe<ShopifyFunctionsErrorHistory>
  /** The ID of the Shopify Function implementing the payment customization. */
  functionId: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** The Shopify Function implementing the payment customization. */
  shopifyFunction: ShopifyShopifyFunction
  /** The title of the payment customization. */
  title: Scalars["String"]["output"]
}

/** A payment customization. */
export interface ShopifyPaymentCustomizationMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** A payment customization. */
export interface ShopifyPaymentCustomizationMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/** A payment customization. */
export interface ShopifyPaymentCustomizationMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `paymentCustomizationActivation` mutation. */
export interface ShopifyPaymentCustomizationActivationPayload {
  __typename?: "PaymentCustomizationActivationPayload"
  /** The IDs of the updated payment customizations. */
  ids?: Maybe<Array<Scalars["String"]["output"]>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPaymentCustomizationError>
}

/** An auto-generated type for paginating through multiple PaymentCustomizations. */
export interface ShopifyPaymentCustomizationConnection {
  __typename?: "PaymentCustomizationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyPaymentCustomizationEdge>
  /** A list of nodes that are contained in PaymentCustomizationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyPaymentCustomization>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `paymentCustomizationCreate` mutation. */
export interface ShopifyPaymentCustomizationCreatePayload {
  __typename?: "PaymentCustomizationCreatePayload"
  /** Returns the created payment customization. */
  paymentCustomization?: Maybe<ShopifyPaymentCustomization>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPaymentCustomizationError>
}

/** Return type for `paymentCustomizationDelete` mutation. */
export interface ShopifyPaymentCustomizationDeletePayload {
  __typename?: "PaymentCustomizationDeletePayload"
  /** Returns the deleted payment customization ID. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPaymentCustomizationError>
}

/** An auto-generated type which holds one PaymentCustomization and a cursor during pagination. */
export interface ShopifyPaymentCustomizationEdge {
  __typename?: "PaymentCustomizationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of PaymentCustomizationEdge. */
  node: ShopifyPaymentCustomization
}

/** An error that occurs during the execution of a payment customization mutation. */
export interface ShopifyPaymentCustomizationError
  extends ShopifyDisplayableError {
  __typename?: "PaymentCustomizationError"
  /** The error code. */
  code?: Maybe<ShopifyPaymentCustomizationErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `PaymentCustomizationError`. */
export type ShopifyPaymentCustomizationErrorCode =
  /** Shop plan not eligible to use Functions from a custom app. */
  | "CUSTOM_APP_FUNCTION_NOT_ELIGIBLE"
  /** Function does not implement the required interface. */
  | "FUNCTION_DOES_NOT_IMPLEMENT"
  /** Function ID cannot be changed. */
  | "FUNCTION_ID_CANNOT_BE_CHANGED"
  /** Function not found. */
  | "FUNCTION_NOT_FOUND"
  /** Function is pending deletion. */
  | "FUNCTION_PENDING_DELETION"
  /** The input value is invalid. */
  | "INVALID"
  /** Could not create or update metafields. */
  | "INVALID_METAFIELDS"
  /** Maximum payment customizations are already enabled. */
  | "MAXIMUM_ACTIVE_PAYMENT_CUSTOMIZATIONS"
  /** Shop must be on a Shopify Plus plan to activate payment customizations from a custom app. */
  | "PAYMENT_CUSTOMIZATION_FUNCTION_NOT_ELIGIBLE"
  /** Payment customization not found. */
  | "PAYMENT_CUSTOMIZATION_NOT_FOUND"
  /** Required input field must be present. */
  | "REQUIRED_INPUT_FIELD"
  | "%future added value"

/** The input fields to create and update a payment customization. */
export interface ShopifyPaymentCustomizationInput {
  /** The enabled status of the payment customization. */
  enabled?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The ID of the function providing the payment customization. */
  functionId?: InputMaybe<Scalars["String"]["input"]>
  /** Additional metafields to associate to the payment customization. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The title of the payment customization. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `paymentCustomizationUpdate` mutation. */
export interface ShopifyPaymentCustomizationUpdatePayload {
  __typename?: "PaymentCustomizationUpdatePayload"
  /** Returns the updated payment customization. */
  paymentCustomization?: Maybe<ShopifyPaymentCustomization>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPaymentCustomizationError>
}

/** Payment details related to a transaction. */
export type ShopifyPaymentDetails =
  | ShopifyCardPaymentDetails
  | ShopifyLocalPaymentMethodsPaymentDetails
  | ShopifyPaypalWalletPaymentDetails
  | ShopifyShopPayInstallmentsPaymentDetails

/** All possible instrument outputs for Payment Mandates. */
export type ShopifyPaymentInstrument =
  | ShopifyVaultCreditCard
  | ShopifyVaultPaypalBillingAgreement

/**
 * A payment instrument and the permission
 * the owner of the instrument gives to the merchant to debit it.
 */
export interface ShopifyPaymentMandate extends ShopifyNode {
  __typename?: "PaymentMandate"
  /** The unique ID of a payment mandate. */
  id: Scalars["ID"]["output"]
  /** The outputs details of the payment instrument. */
  paymentInstrument: ShopifyPaymentInstrument
}

/** Some of the payment methods used in Shopify. */
export type ShopifyPaymentMethods =
  | "AMERICAN_EXPRESS"
  /** The payment method for Bancontact payment. */
  | "BANCONTACT"
  | "BITCOIN"
  | "BOGUS"
  /** The payment method for Cartes Bancaires payment. */
  | "CARTES_BANCAIRES"
  | "DANKORT"
  | "DINERS_CLUB"
  | "DISCOVER"
  | "DOGECOIN"
  /** The payment method for eftpos_au payment. */
  | "EFTPOS"
  /** The payment method for Elo payment. */
  | "ELO"
  | "FORBRUGSFORENINGEN"
  /** The payment method for Interac payment. */
  | "INTERAC"
  | "JCB"
  | "LITECOIN"
  | "MAESTRO"
  | "MASTERCARD"
  | "PAYPAL"
  /** The payment method for UnionPay payment. */
  | "UNIONPAY"
  | "VISA"
  | "%future added value"

/** Return type for `paymentReminderSend` mutation. */
export interface ShopifyPaymentReminderSendPayload {
  __typename?: "PaymentReminderSendPayload"
  /** Whether the payment reminder email was successfully sent. */
  success?: Maybe<Scalars["Boolean"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPaymentReminderSendUserError>
}

/** An error that occurs during the execution of `PaymentReminderSend`. */
export interface ShopifyPaymentReminderSendUserError
  extends ShopifyDisplayableError {
  __typename?: "PaymentReminderSendUserError"
  /** The error code. */
  code?: Maybe<ShopifyPaymentReminderSendUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `PaymentReminderSendUserError`. */
export type ShopifyPaymentReminderSendUserErrorCode =
  /** An error occurred while sending the payment reminder. */
  "PAYMENT_REMINDER_SEND_UNSUCCESSFUL" | "%future added value"

/** Represents the payment schedule for a single payment defined in the payment terms. */
export interface ShopifyPaymentSchedule extends ShopifyNode {
  __typename?: "PaymentSchedule"
  /**
   * Amount owed for this payment schedule.
   * @deprecated Use `balanceDue`, `totalBalance`, or `Order.totalOutstandingSet` instead.
   */
  amount: ShopifyMoneyV2
  /** Date and time when the payment schedule is paid or fulfilled. */
  completedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** Date and time when the payment schedule is due. */
  dueAt?: Maybe<Scalars["DateTime"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Date and time when the invoice is sent. */
  issuedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The payment terms the payment schedule belongs to. */
  paymentTerms: ShopifyPaymentTerms
}

/** An auto-generated type for paginating through multiple PaymentSchedules. */
export interface ShopifyPaymentScheduleConnection {
  __typename?: "PaymentScheduleConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyPaymentScheduleEdge>
  /** A list of nodes that are contained in PaymentScheduleEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyPaymentSchedule>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one PaymentSchedule and a cursor during pagination. */
export interface ShopifyPaymentScheduleEdge {
  __typename?: "PaymentScheduleEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of PaymentScheduleEdge. */
  node: ShopifyPaymentSchedule
}

/** The input fields used to create a payment schedule for payment terms. */
export interface ShopifyPaymentScheduleInput {
  /** Specifies the date and time when the payment schedule is due. This field must be provided for fixed type payment terms. */
  dueAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** Specifies the date and time that the payment schedule was issued. This field must be provided for net type payment terms. */
  issuedAt?: InputMaybe<Scalars["DateTime"]["input"]>
}

/** Settings related to payments. */
export interface ShopifyPaymentSettings {
  __typename?: "PaymentSettings"
  /** List of the digital wallets which the shop supports. */
  supportedDigitalWallets: Array<ShopifyDigitalWallet>
}

/** Represents the payment terms for an order or draft order. */
export interface ShopifyPaymentTerms extends ShopifyNode {
  __typename?: "PaymentTerms"
  /** The draft order associated with the payment terms. */
  draftOrder?: Maybe<ShopifyDraftOrder>
  /** Duration of payment terms in days based on the payment terms template used to create the payment terms. */
  dueInDays?: Maybe<Scalars["Int"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The order associated with the payment terms. */
  order?: Maybe<ShopifyOrder>
  /** Whether the payment terms have overdue payment schedules. */
  overdue: Scalars["Boolean"]["output"]
  /** List of schedules for the payment terms. */
  paymentSchedules: ShopifyPaymentScheduleConnection
  /** The name of the payment terms template used to create the payment terms. */
  paymentTermsName: Scalars["String"]["output"]
  /** The payment terms template type used to create the payment terms. */
  paymentTermsType: ShopifyPaymentTermsType
  /** The payment terms name, translated into the shop admin's preferred language. */
  translatedName: Scalars["String"]["output"]
}

/** Represents the payment terms for an order or draft order. */
export interface ShopifyPaymentTermsPaymentSchedulesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The input fields used to create a payment terms. */
export interface ShopifyPaymentTermsCreateInput {
  /** Specifies the payment schedules for the payment terms. */
  paymentSchedules?: InputMaybe<Array<ShopifyPaymentScheduleInput>>
  /** Specifies the payment terms template ID used to generate payment terms. */
  paymentTermsTemplateId: Scalars["ID"]["input"]
}

/** Return type for `paymentTermsCreate` mutation. */
export interface ShopifyPaymentTermsCreatePayload {
  __typename?: "PaymentTermsCreatePayload"
  /** The created payment terms. */
  paymentTerms?: Maybe<ShopifyPaymentTerms>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPaymentTermsCreateUserError>
}

/** An error that occurs during the execution of `PaymentTermsCreate`. */
export interface ShopifyPaymentTermsCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "PaymentTermsCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyPaymentTermsCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `PaymentTermsCreateUserError`. */
export type ShopifyPaymentTermsCreateUserErrorCode =
  /** An error occurred while creating payment terms. */
  "PAYMENT_TERMS_CREATION_UNSUCCESSFUL" | "%future added value"

/** The input fields used to delete the payment terms. */
export interface ShopifyPaymentTermsDeleteInput {
  /** The ID of the payment terms being deleted. */
  paymentTermsId: Scalars["ID"]["input"]
}

/** Return type for `paymentTermsDelete` mutation. */
export interface ShopifyPaymentTermsDeletePayload {
  __typename?: "PaymentTermsDeletePayload"
  /** The deleted payment terms ID. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPaymentTermsDeleteUserError>
}

/** An error that occurs during the execution of `PaymentTermsDelete`. */
export interface ShopifyPaymentTermsDeleteUserError
  extends ShopifyDisplayableError {
  __typename?: "PaymentTermsDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyPaymentTermsDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `PaymentTermsDeleteUserError`. */
export type ShopifyPaymentTermsDeleteUserErrorCode =
  /** An error occurred while deleting payment terms. */
  "PAYMENT_TERMS_DELETE_UNSUCCESSFUL" | "%future added value"

/** The input fields to create payment terms. Payment terms set the date that payment is due. */
export interface ShopifyPaymentTermsInput {
  /** Specifies the payment schedules for the payment terms. */
  paymentSchedules?: InputMaybe<Array<ShopifyPaymentScheduleInput>>
  /**
   * Specifies the ID of the payment terms template.
   *         Payment terms templates provide preset configurations to create common payment terms.
   *         Refer to the
   *         [PaymentTermsTemplate](https://shopify.dev/api/admin-graphql/latest/objects/paymenttermstemplate)
   *         object for more details.
   */
  paymentTermsTemplateId?: InputMaybe<Scalars["ID"]["input"]>
}

/** Represents the payment terms template object. */
export interface ShopifyPaymentTermsTemplate extends ShopifyNode {
  __typename?: "PaymentTermsTemplate"
  /** The description of the payment terms template. */
  description: Scalars["String"]["output"]
  /** The number of days between the issued date and due date if this is the net type of payment terms. */
  dueInDays?: Maybe<Scalars["Int"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The name of the payment terms template. */
  name: Scalars["String"]["output"]
  /** The type of the payment terms template. */
  paymentTermsType: ShopifyPaymentTermsType
  /** The translated payment terms template name. */
  translatedName: Scalars["String"]["output"]
}

/** The type of a payment terms or a payment terms template. */
export type ShopifyPaymentTermsType =
  /** The payment terms or payment terms template is a fixed type. It's due on a specified date. */
  | "FIXED"
  /** The payment terms or payment terms template is due on fulfillment. */
  | "FULFILLMENT"
  /** The payment terms or payment terms template is a net type. It's due a number of days after issue. */
  | "NET"
  /** The payment terms or payment terms template is due on receipt. */
  | "RECEIPT"
  /** The type of the payment terms or payment terms template is unknown. */
  | "UNKNOWN"
  | "%future added value"

/** The input fields used to update the payment terms. */
export interface ShopifyPaymentTermsUpdateInput {
  /** The attributes used to update the payment terms. */
  paymentTermsAttributes: ShopifyPaymentTermsInput
  /** The ID of the payment terms being updated. */
  paymentTermsId: Scalars["ID"]["input"]
}

/** Return type for `paymentTermsUpdate` mutation. */
export interface ShopifyPaymentTermsUpdatePayload {
  __typename?: "PaymentTermsUpdatePayload"
  /** The updated payment terms. */
  paymentTerms?: Maybe<ShopifyPaymentTerms>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPaymentTermsUpdateUserError>
}

/** An error that occurs during the execution of `PaymentTermsUpdate`. */
export interface ShopifyPaymentTermsUpdateUserError
  extends ShopifyDisplayableError {
  __typename?: "PaymentTermsUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyPaymentTermsUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `PaymentTermsUpdateUserError`. */
export type ShopifyPaymentTermsUpdateUserErrorCode =
  /** An error occurred while updating payment terms. */
  "PAYMENT_TERMS_UPDATE_UNSUCCESSFUL" | "%future added value"

/** The set of valid sort keys for the Payout query. */
export type ShopifyPayoutSortKeys =
  /** Sort by the `adjustment_gross` value. */
  | "ADJUSTMENT_GROSS"
  /** Sort by the `advance_gross` value. */
  | "ADVANCE_GROSS"
  /** Sort by the `amount` value. */
  | "AMOUNT"
  /** Sort by the `charge_gross` value. */
  | "CHARGE_GROSS"
  /** Sort by the `duties_gross` value. */
  | "DUTIES_GROSS"
  /** Sort by the `fee_amount` value. */
  | "FEE_AMOUNT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `issued_at` value. */
  | "ISSUED_AT"
  /** Sort by the `refund_gross` value. */
  | "REFUND_GROSS"
  /** Sort by the `shipping_label_gross` value. */
  | "SHIPPING_LABEL_GROSS"
  /** Sort by the `status` value. */
  | "STATUS"
  | "%future added value"

/** Represents a valid PayPal Express subscriptions gateway status. */
export type ShopifyPaypalExpressSubscriptionsGatewayStatus =
  /** The status is disabled. */
  | "DISABLED"
  /** The status is enabled. */
  | "ENABLED"
  /** The status is pending. */
  | "PENDING"
  | "%future added value"

/** PayPal Wallet payment details related to a transaction. */
export interface ShopifyPaypalWalletPaymentDetails
  extends ShopifyBasePaymentDetails {
  __typename?: "PaypalWalletPaymentDetails"
  /** The name of payment method used by the buyer. */
  paymentMethodName?: Maybe<Scalars["String"]["output"]>
}

/** A location for in-store pickup. */
export interface ShopifyPickupInStoreLocation {
  __typename?: "PickupInStoreLocation"
  /** The code of the pickup location. */
  code: Scalars["String"]["output"]
  /** Distance from the buyer to the pickup location. */
  distanceFromBuyer?: Maybe<ShopifyDistance>
  /** A unique identifier for this pickup location. */
  handle: Scalars["String"]["output"]
  /** Pickup instructions. */
  instructions: Scalars["String"]["output"]
  /** The location ID of the pickup location. */
  locationId: Scalars["ID"]["output"]
  /** The source of the pickup location. */
  source: Scalars["String"]["output"]
  /** Title of the pickup location. */
  title: Scalars["String"]["output"]
}

/** Represents a mobile device that Shopify Point of Sale has been installed on. */
export interface ShopifyPointOfSaleDevice extends ShopifyNode {
  __typename?: "PointOfSaleDevice"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
}

/** The input fields used to include the line items of a specified fulfillment order that should be marked as prepared for pickup by a customer. */
export interface ShopifyPreparedFulfillmentOrderLineItemsInput {
  /** The ID of the fulfillment order. */
  fulfillmentOrderId: Scalars["ID"]["input"]
}

/** How to calculate the parent product variant's price while bulk updating variant relationships. */
export type ShopifyPriceCalculationType =
  /** The price of the parent will be the sum of the components price times their quantity. */
  | "COMPONENTS_SUM"
  /** The price of the parent will be set to the price provided. */
  | "FIXED"
  /** The price of the parent will not be adjusted. */
  | "NONE"
  | "%future added value"

/** The input fields for updating the price of a parent product variant. */
export interface ShopifyPriceInput {
  /**
   * The specific type of calculation done to determine the price of the parent variant.
   * The price is calculated during Bundle creation. Updating a component variant won't recalculate the price.
   */
  calculation?: InputMaybe<ShopifyPriceCalculationType>
  /** The price of the parent product variant. This will be be used if calcualtion is set to 'FIXED'. */
  price?: InputMaybe<Scalars["Money"]["input"]>
}

/**
 * Represents a price list, including information about related prices and eligibility rules.
 * You can use price lists to specify either fixed prices or adjusted relative prices that
 * override initial product variant prices. Price lists are applied to customers
 * using context rules, which determine price list eligibility.
 *
 *   For more information on price lists, refer to
 *   [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
 */
export interface ShopifyPriceList extends ShopifyNode {
  __typename?: "PriceList"
  /** The catalog that the price list is associated with. */
  catalog?: Maybe<ShopifyCatalog>
  /** The currency for fixed prices associated with this price list. */
  currency: ShopifyCurrencyCode
  /** The number of fixed prices on the price list. */
  fixedPricesCount: Scalars["Int"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The unique name of the price list, used as a human-readable identifier. */
  name: Scalars["String"]["output"]
  /** Relative adjustments to other prices. */
  parent?: Maybe<ShopifyPriceListParent>
  /** A list of prices associated with the price list. */
  prices: ShopifyPriceListPriceConnection
  /** A list of quantity rules associated with the price list, ordered by product variants. */
  quantityRules: ShopifyQuantityRuleConnection
}

/**
 * Represents a price list, including information about related prices and eligibility rules.
 * You can use price lists to specify either fixed prices or adjusted relative prices that
 * override initial product variant prices. Price lists are applied to customers
 * using context rules, which determine price list eligibility.
 *
 *   For more information on price lists, refer to
 *   [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
 */
export interface ShopifyPriceListPricesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  originType?: InputMaybe<ShopifyPriceListPriceOriginType>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents a price list, including information about related prices and eligibility rules.
 * You can use price lists to specify either fixed prices or adjusted relative prices that
 * override initial product variant prices. Price lists are applied to customers
 * using context rules, which determine price list eligibility.
 *
 *   For more information on price lists, refer to
 *   [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
 */
export interface ShopifyPriceListQuantityRulesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  originType?: InputMaybe<ShopifyQuantityRuleOriginType>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The type and value of a price list adjustment.
 *
 * For more information on price lists, refer to
 * [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
 */
export interface ShopifyPriceListAdjustment {
  __typename?: "PriceListAdjustment"
  /** The type of price adjustment, such as percentage increase or decrease. */
  type: ShopifyPriceListAdjustmentType
  /**
   * The value of price adjustment, where positive numbers reduce the prices and negative numbers
   * increase them.
   */
  value: Scalars["Float"]["output"]
}

/** The input fields to set a price list adjustment. */
export interface ShopifyPriceListAdjustmentInput {
  /** The type of price adjustment, such as percentage increase or decrease. */
  type: ShopifyPriceListAdjustmentType
  /** The value of the price adjustment as specified by the `type`. */
  value: Scalars["Float"]["input"]
}

/** Represents the settings of price list adjustments. */
export interface ShopifyPriceListAdjustmentSettings {
  __typename?: "PriceListAdjustmentSettings"
  /** The type of price list adjustment setting for compare at price. */
  compareAtMode: ShopifyPriceListCompareAtMode
}

/** The input fields to set a price list's adjustment settings. */
export interface ShopifyPriceListAdjustmentSettingsInput {
  /** Determines how adjustments are applied to compare at prices. */
  compareAtMode?: ShopifyPriceListCompareAtMode
}

/** Represents a percentage price adjustment type. */
export type ShopifyPriceListAdjustmentType =
  /** Percentage decrease type. Prices will have a lower value. */
  | "PERCENTAGE_DECREASE"
  /** Percentage increase type. Prices will have a higher value. */
  | "PERCENTAGE_INCREASE"
  | "%future added value"

/** Represents how the compare at price will be determined for a price list. */
export type ShopifyPriceListCompareAtMode =
  /** The compare at price is adjusted based on percentage specified in price list. */
  | "ADJUSTED"
  /** The compare at prices are set to `null` unless explicitly defined by a fixed price value. */
  | "NULLIFY"
  | "%future added value"

/** An auto-generated type for paginating through multiple PriceLists. */
export interface ShopifyPriceListConnection {
  __typename?: "PriceListConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyPriceListEdge>
  /** A list of nodes that are contained in PriceListEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyPriceList>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields to create a price list. */
export interface ShopifyPriceListCreateInput {
  /** The ID of the catalog to associate with this price list.If the catalog was already associated with another price list then it will be unlinked. */
  catalogId?: InputMaybe<Scalars["ID"]["input"]>
  /** Three letter currency code for fixed prices associated with this price list. */
  currency: ShopifyCurrencyCode
  /** The unique name of the price list, used as a human-readable identifier. */
  name: Scalars["String"]["input"]
  /** Relative adjustments to other prices. */
  parent: ShopifyPriceListParentCreateInput
}

/** Return type for `priceListCreate` mutation. */
export interface ShopifyPriceListCreatePayload {
  __typename?: "PriceListCreatePayload"
  /** The newly created price list. */
  priceList?: Maybe<ShopifyPriceList>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPriceListUserError>
}

/** Return type for `priceListDelete` mutation. */
export interface ShopifyPriceListDeletePayload {
  __typename?: "PriceListDeletePayload"
  /** The ID of the deleted price list. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPriceListUserError>
}

/** An auto-generated type which holds one PriceList and a cursor during pagination. */
export interface ShopifyPriceListEdge {
  __typename?: "PriceListEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of PriceListEdge. */
  node: ShopifyPriceList
}

/** Return type for `priceListFixedPricesAdd` mutation. */
export interface ShopifyPriceListFixedPricesAddPayload {
  __typename?: "PriceListFixedPricesAddPayload"
  /** The list of fixed prices that were added to or updated in the price list. */
  prices?: Maybe<Array<ShopifyPriceListPrice>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPriceListPriceUserError>
}

/** Error codes for failed price list fixed prices by product bulk update operations. */
export interface ShopifyPriceListFixedPricesByProductBulkUpdateUserError
  extends ShopifyDisplayableError {
  __typename?: "PriceListFixedPricesByProductBulkUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyPriceListFixedPricesByProductBulkUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `PriceListFixedPricesByProductBulkUpdateUserError`. */
export type ShopifyPriceListFixedPricesByProductBulkUpdateUserErrorCode =
  /** Duplicate ID in input. */
  | "DUPLICATE_ID_IN_INPUT"
  /** IDs must be mutually exclusive across add or delete operations. */
  | "ID_MUST_BE_MUTUALLY_EXCLUSIVE"
  /** No update operations specified. */
  | "NO_UPDATE_OPERATIONS_SPECIFIED"
  /** The currency specified does not match the price list's currency. */
  | "PRICES_TO_ADD_CURRENCY_MISMATCH"
  /** Exceeded the 10000 prices to add limit. */
  | "PRICE_LIMIT_EXCEEDED"
  /** Price list does not exist. */
  | "PRICE_LIST_DOES_NOT_EXIST"
  /** Product does not exist. */
  | "PRODUCT_DOES_NOT_EXIST"
  | "%future added value"

/** Return type for `priceListFixedPricesByProductUpdate` mutation. */
export interface ShopifyPriceListFixedPricesByProductUpdatePayload {
  __typename?: "PriceListFixedPricesByProductUpdatePayload"
  /** The price list for which the fixed prices were modified. */
  priceList?: Maybe<ShopifyPriceList>
  /** The product for which the fixed prices were added. */
  pricesToAddProducts?: Maybe<Array<ShopifyProduct>>
  /** The product for which the fixed prices were deleted. */
  pricesToDeleteProducts?: Maybe<Array<ShopifyProduct>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPriceListFixedPricesByProductBulkUpdateUserError>
}

/** Return type for `priceListFixedPricesDelete` mutation. */
export interface ShopifyPriceListFixedPricesDeletePayload {
  __typename?: "PriceListFixedPricesDeletePayload"
  /** A list of product variant IDs whose fixed prices were removed from the price list. */
  deletedFixedPriceVariantIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPriceListPriceUserError>
}

/** Return type for `priceListFixedPricesUpdate` mutation. */
export interface ShopifyPriceListFixedPricesUpdatePayload {
  __typename?: "PriceListFixedPricesUpdatePayload"
  /** A list of deleted variant IDs for prices. */
  deletedFixedPriceVariantIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** The price list for which the fixed prices were modified. */
  priceList?: Maybe<ShopifyPriceList>
  /** The prices that were added to the price list. */
  pricesAdded?: Maybe<Array<ShopifyPriceListPrice>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPriceListPriceUserError>
}

/**
 * Represents relative adjustments from one price list to other prices.
 *   You can use a `PriceListParent` to specify an adjusted relative price using a percentage-based
 *   adjustment. Adjusted prices work in conjunction with exchange rules and rounding.
 *
 *   [Adjustment types](https://shopify.dev/api/admin-graphql/latest/enums/pricelistadjustmenttype)
 *   support both percentage increases and decreases.
 */
export interface ShopifyPriceListParent {
  __typename?: "PriceListParent"
  /** A price list adjustment. */
  adjustment: ShopifyPriceListAdjustment
  /** A price list's settings for adjustment. */
  settings: ShopifyPriceListAdjustmentSettings
}

/** The input fields to create a price list adjustment. */
export interface ShopifyPriceListParentCreateInput {
  /** The relative adjustments to other prices. */
  adjustment: ShopifyPriceListAdjustmentInput
  /** The price list adjustment settings. */
  settings?: InputMaybe<ShopifyPriceListAdjustmentSettingsInput>
}

/** The input fields used to update a price list's adjustment. */
export interface ShopifyPriceListParentUpdateInput {
  /** The relative adjustments to other prices.. */
  adjustment: ShopifyPriceListAdjustmentInput
  /** The price list adjustment settings. */
  settings?: InputMaybe<ShopifyPriceListAdjustmentSettingsInput>
}

/**
 * Represents information about pricing for a product variant
 *         as defined on a price list, such as the price, compare at price, and origin type. You can use a `PriceListPrice` to specify a fixed price for a specific product variant. For examples, refer to [PriceListFixedPricesAdd](https://shopify.dev/api/admin-graphql/latest/mutations/priceListFixedPricesAdd) and [PriceList](https://shopify.dev/api/admin-graphql/latest/queries/priceList#section-examples).
 */
export interface ShopifyPriceListPrice {
  __typename?: "PriceListPrice"
  /** The compare-at price of the product variant on this price list. */
  compareAtPrice?: Maybe<ShopifyMoneyV2>
  /** The origin of a price, either fixed (defined on the price list) or relative (calculated using a price list adjustment configuration). */
  originType: ShopifyPriceListPriceOriginType
  /** The price of the product variant on this price list. */
  price: ShopifyMoneyV2
  /** A list of quantity breaks for the product variant. */
  quantityPriceBreaks: ShopifyQuantityPriceBreakConnection
  /** The product variant associated with this price. */
  variant: ShopifyProductVariant
}

/**
 * Represents information about pricing for a product variant
 *         as defined on a price list, such as the price, compare at price, and origin type. You can use a `PriceListPrice` to specify a fixed price for a specific product variant. For examples, refer to [PriceListFixedPricesAdd](https://shopify.dev/api/admin-graphql/latest/mutations/priceListFixedPricesAdd) and [PriceList](https://shopify.dev/api/admin-graphql/latest/queries/priceList#section-examples).
 */
export interface ShopifyPriceListPriceQuantityPriceBreaksArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyQuantityPriceBreakSortKeys>
}

/** An auto-generated type for paginating through multiple PriceListPrices. */
export interface ShopifyPriceListPriceConnection {
  __typename?: "PriceListPriceConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyPriceListPriceEdge>
  /** A list of nodes that are contained in PriceListPriceEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyPriceListPrice>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one PriceListPrice and a cursor during pagination. */
export interface ShopifyPriceListPriceEdge {
  __typename?: "PriceListPriceEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of PriceListPriceEdge. */
  node: ShopifyPriceListPrice
}

/** The input fields for providing the fields and values to use when creating or updating a fixed price list price. */
export interface ShopifyPriceListPriceInput {
  /** The compare-at price of the product variant on this price list. */
  compareAtPrice?: InputMaybe<ShopifyMoneyInput>
  /** The price of the product variant on this price list. */
  price: ShopifyMoneyInput
  /** The product variant ID associated with the price list price. */
  variantId: Scalars["ID"]["input"]
}

/** Represents the origin of a price, either fixed (defined on the price list) or relative (calculated using a price list adjustment configuration). For examples, refer to [PriceList](https://shopify.dev/api/admin-graphql/latest/queries/priceList#section-examples). */
export type ShopifyPriceListPriceOriginType =
  /** The price is defined on the price list. */
  | "FIXED"
  /** The price is relative to the adjustment type and value. */
  | "RELATIVE"
  | "%future added value"

/** An error for a failed price list price operation. */
export interface ShopifyPriceListPriceUserError
  extends ShopifyDisplayableError {
  __typename?: "PriceListPriceUserError"
  /** The error code. */
  code?: Maybe<ShopifyPriceListPriceUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `PriceListPriceUserError`. */
export type ShopifyPriceListPriceUserErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** The specified currency doesn't match the price list's currency. */
  | "PRICE_LIST_CURRENCY_MISMATCH"
  /** The price list doesn't exist. */
  | "PRICE_LIST_NOT_FOUND"
  /** Only fixed prices can be deleted. */
  | "PRICE_NOT_FIXED"
  /** A fixed price for the specified product variant doesn't exist. */
  | "VARIANT_NOT_FOUND"
  | "%future added value"

/** The input fields representing the price for all variants of a product. */
export interface ShopifyPriceListProductPriceInput {
  /** The price of the product to use for all variants with its currency. */
  price: ShopifyMoneyInput
  /** Specifies the ID of the product to update its variants for. */
  productId: Scalars["ID"]["input"]
}

/** The set of valid sort keys for the PriceList query. */
export type ShopifyPriceListSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `name` value. */
  | "NAME"
  | "%future added value"

/** The input fields used to update a price list. */
export interface ShopifyPriceListUpdateInput {
  /** The ID of the catalog to associate with this price list. */
  catalogId?: InputMaybe<Scalars["ID"]["input"]>
  /** The three-letter currency code for fixed prices associated with this price list. */
  currency?: InputMaybe<ShopifyCurrencyCode>
  /** The unique name of the price list, used as a human-readable identifier. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** Relative adjustments to other prices. */
  parent?: InputMaybe<ShopifyPriceListParentUpdateInput>
}

/** Return type for `priceListUpdate` mutation. */
export interface ShopifyPriceListUpdatePayload {
  __typename?: "PriceListUpdatePayload"
  /** The updated price list. */
  priceList?: Maybe<ShopifyPriceList>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPriceListUserError>
}

/** Error codes for failed contextual pricing operations. */
export interface ShopifyPriceListUserError extends ShopifyDisplayableError {
  __typename?: "PriceListUserError"
  /** The error code. */
  code?: Maybe<ShopifyPriceListUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `PriceListUserError`. */
export type ShopifyPriceListUserErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** Quantity price breaks can be associated only with company location catalogs or catalogs associated with compatible markets. */
  | "CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_PRICE_BREAKS"
  /** Quantity rules can be associated only with company location catalogs or catalogs associated with compatible markets. */
  | "CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES"
  /** The specified catalog does not exist. */
  | "CATALOG_DOES_NOT_EXIST"
  /** The price list currency must match the market catalog currency. */
  | "CATALOG_MARKET_AND_PRICE_LIST_CURRENCY_MISMATCH"
  /** Catalog has a price list already assigned. */
  | "CATALOG_TAKEN"
  /** Only one context rule option may be specified. */
  | "CONTEXT_RULE_LIMIT_ONE_OPTION"
  /** A country catalog cannot be assigned to a price list. */
  | "COUNTRY_PRICE_LIST_ASSIGNMENT"
  /** A price list’s currency must be the market currency. */
  | "CURRENCY_MARKET_MISMATCH"
  /** The price list currency is not supported by the shop's payment gateway. */
  | "CURRENCY_NOT_SUPPORTED"
  /** Something went wrong when trying to save the price list. Please try again. */
  | "GENERIC_ERROR"
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** The adjustment value must not be greater than 1000% for `type` `PERCENTAGE_INCREASE`. */
  | "INVALID_ADJUSTMENT_MAX_VALUE"
  /** The adjustment value must not be greater than 100% for `type` `PERCENTAGE_DECREASE`. */
  | "INVALID_ADJUSTMENT_MIN_VALUE"
  /** The adjustment value must be a positive value and not be greater than 100% for `type` `PERCENTAGE_DECREASE` and not be greater than 1000% for `type` `PERCENTAGE_INCREASE`. */
  | "INVALID_ADJUSTMENT_VALUE"
  /** The price list is currently being modified. Please try again later. */
  | "PRICE_LIST_LOCKED"
  /** Cannot create price list for a primary market. */
  | "PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET"
  /** The specified price list doesn't exist. */
  | "PRICE_LIST_NOT_FOUND"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too long. */
  | "TOO_LONG"
  | "%future added value"

/**
 * Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply.
 *
 * We recommend using the types and queries detailed at [Getting started with discounts](https://shopify.dev/docs/apps/selling-strategies/discounts/getting-started) instead. These will replace the GraphQL `PriceRule` object and REST Admin `PriceRule` and `DiscountCode` resources.
 */
export interface ShopifyPriceRule
  extends ShopifyCommentEventSubject,
    ShopifyHasEvents,
    ShopifyLegacyInteroperability,
    ShopifyNode {
  __typename?: "PriceRule"
  /** The maximum number of times that the price rule can be allocated onto an order. */
  allocationLimit?: Maybe<Scalars["Int"]["output"]>
  /** The method by which the price rule's value is allocated to its entitled items. */
  allocationMethod: ShopifyPriceRuleAllocationMethod
  /** The application that created the price rule. */
  app?: Maybe<ShopifyApp>
  /**
   * The
   * [discount classes](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that you can use in combination with
   * [Shopify discount types](https://help.shopify.com/manual/discounts/discount-types).
   */
  combinesWith: ShopifyDiscountCombinesWith
  /** The date and time when the price rule was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The customers that can use this price rule. */
  customerSelection: ShopifyPriceRuleCustomerSelection
  /**
   * The
   * [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
   * that's used to control how discounts can be combined.
   * @deprecated Use `discountClasses` instead.
   */
  discountClass: ShopifyDiscountClass
  /** The classes of the discount. */
  discountClasses: Array<ShopifyDiscountClass>
  /** List of the price rule's discount codes. */
  discountCodes: ShopifyPriceRuleDiscountCodeConnection
  /** How many discount codes associated with the price rule. */
  discountCodesCount?: Maybe<ShopifyCount>
  /** The date and time when the price rule ends. For open-ended price rules, use `null`. */
  endsAt?: Maybe<Scalars["DateTime"]["output"]>
  /**
   * Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
   * @deprecated Use `prerequisiteToEntitlementQuantityRatio` instead.
   */
  entitlementToPrerequisiteQuantityRatio?: Maybe<ShopifyPriceRuleEntitlementToPrerequisiteQuantityRatio>
  /** The paginated list of events associated with the price rule. */
  events: ShopifyEventConnection
  /** A list of the price rule's features. */
  features: Array<ShopifyPriceRuleFeature>
  /** Indicates whether there are any timeline comments on the price rule. */
  hasTimelineComment: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The items to which the price rule applies. */
  itemEntitlements: ShopifyPriceRuleItemEntitlements
  /** The items required for the price rule to be applicable. */
  itemPrerequisites: ShopifyPriceRuleLineItemPrerequisites
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** Whether the price rule can be applied only once per customer. */
  oncePerCustomer: Scalars["Boolean"]["output"]
  /** The number of the entitled items must fall within this range for the price rule to be applicable. */
  prerequisiteQuantityRange?: Maybe<ShopifyPriceRuleQuantityRange>
  /** The shipping cost must fall within this range for the price rule to be applicable. */
  prerequisiteShippingPriceRange?: Maybe<ShopifyPriceRuleMoneyRange>
  /** The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable. */
  prerequisiteSubtotalRange?: Maybe<ShopifyPriceRuleMoneyRange>
  /** Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items. */
  prerequisiteToEntitlementQuantityRatio?: Maybe<ShopifyPriceRulePrerequisiteToEntitlementQuantityRatio>
  /** URLs that can be used to share the discount. */
  shareableUrls: Array<ShopifyPriceRuleShareableUrl>
  /** The shipping lines to which the price rule applies. */
  shippingEntitlements: ShopifyPriceRuleShippingLineEntitlements
  /** The date and time when the price rule starts. */
  startsAt: Scalars["DateTime"]["output"]
  /** The status of the price rule. */
  status: ShopifyPriceRuleStatus
  /** A detailed summary of the price rule. */
  summary?: Maybe<Scalars["String"]["output"]>
  /** The type of lines (line_item or shipping_line) to which the price rule applies. */
  target: ShopifyPriceRuleTarget
  /** The title of the price rule. */
  title: Scalars["String"]["output"]
  /** The total sales from orders where the price rule was used. */
  totalSales?: Maybe<ShopifyMoneyV2>
  /**
   * A list of the price rule's features.
   * @deprecated Use `features` instead.
   */
  traits: Array<ShopifyPriceRuleTrait>
  /** The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count. */
  usageCount: Scalars["Int"]["output"]
  /** The maximum number of times that the price rule can be used in total. */
  usageLimit?: Maybe<Scalars["Int"]["output"]>
  /** A time period during which a price rule is applicable. */
  validityPeriod: ShopifyPriceRuleValidityPeriod
  /**
   * The value of the price rule.
   * @deprecated Use `valueV2` instead.
   */
  value: ShopifyPriceRuleValue
  /** The value of the price rule. */
  valueV2: ShopifyPricingValue
}

/**
 * Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply.
 *
 * We recommend using the types and queries detailed at [Getting started with discounts](https://shopify.dev/docs/apps/selling-strategies/discounts/getting-started) instead. These will replace the GraphQL `PriceRule` object and REST Admin `PriceRule` and `DiscountCode` resources.
 */
export interface ShopifyPriceRuleDiscountCodesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyDiscountCodeSortKeys>
}

/**
 * Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply.
 *
 * We recommend using the types and queries detailed at [Getting started with discounts](https://shopify.dev/docs/apps/selling-strategies/discounts/getting-started) instead. These will replace the GraphQL `PriceRule` object and REST Admin `PriceRule` and `DiscountCode` resources.
 */
export interface ShopifyPriceRuleEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/** The method by which the price rule's value is allocated to its entitled items. */
export type ShopifyPriceRuleAllocationMethod =
  /** The value will be applied once across the entitled items. */
  | "ACROSS"
  /** The value will be applied to each of the entitled items. */
  | "EACH"
  | "%future added value"

/** A selection of customers for whom the price rule applies. */
export interface ShopifyPriceRuleCustomerSelection {
  __typename?: "PriceRuleCustomerSelection"
  /** List of customers to whom the price rule applies. */
  customers: ShopifyCustomerConnection
  /** Whether the price rule applies to all customers. */
  forAllCustomers: Scalars["Boolean"]["output"]
  /** A list of customer segments that contain the customers who can use the price rule. */
  segments: Array<ShopifySegment>
}

/** A selection of customers for whom the price rule applies. */
export interface ShopifyPriceRuleCustomerSelectionCustomersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyCustomerSortKeys>
}

/** A discount code of a price rule. */
export interface ShopifyPriceRuleDiscountCode extends ShopifyNode {
  __typename?: "PriceRuleDiscountCode"
  /** The application that created the discount code. */
  app?: Maybe<ShopifyApp>
  /** The code to apply the discount. */
  code: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count. */
  usageCount: Scalars["Int"]["output"]
}

/** An auto-generated type for paginating through multiple PriceRuleDiscountCodes. */
export interface ShopifyPriceRuleDiscountCodeConnection {
  __typename?: "PriceRuleDiscountCodeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyPriceRuleDiscountCodeEdge>
  /** A list of nodes that are contained in PriceRuleDiscountCodeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyPriceRuleDiscountCode>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one PriceRuleDiscountCode and a cursor during pagination. */
export interface ShopifyPriceRuleDiscountCodeEdge {
  __typename?: "PriceRuleDiscountCodeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of PriceRuleDiscountCodeEdge. */
  node: ShopifyPriceRuleDiscountCode
}

/** Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items. */
export interface ShopifyPriceRuleEntitlementToPrerequisiteQuantityRatio {
  __typename?: "PriceRuleEntitlementToPrerequisiteQuantityRatio"
  /** The quantity of entitled items in the ratio. */
  entitlementQuantity: Scalars["Int"]["output"]
  /** The quantity of prerequisite items in the ratio. */
  prerequisiteQuantity: Scalars["Int"]["output"]
}

/** The list of features that can be supported by a price rule. */
export type ShopifyPriceRuleFeature =
  /** The price rule supports bulk discounts. */
  | "BULK"
  /** The price rule supports Buy X, Get Y (BXGY) discounts. */
  | "BUY_ONE_GET_ONE"
  /** The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit. */
  | "BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT"
  /** The price rule supports discounts that require a quantity. */
  | "QUANTITY_DISCOUNTS"
  /** The price rule targets specific customers. */
  | "SPECIFIC_CUSTOMERS"
  | "%future added value"

/** The value of a fixed amount price rule. */
export interface ShopifyPriceRuleFixedAmountValue {
  __typename?: "PriceRuleFixedAmountValue"
  /** The monetary value of the price rule. */
  amount: Scalars["Money"]["output"]
}

/** The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned. */
export interface ShopifyPriceRuleItemEntitlements {
  __typename?: "PriceRuleItemEntitlements"
  /** The collections to which the price rule applies. */
  collections: ShopifyCollectionConnection
  /** The product variants to which the price rule applies. */
  productVariants: ShopifyProductVariantConnection
  /** The products to which the price rule applies. */
  products: ShopifyProductConnection
  /** Whether the price rule applies to all line items. */
  targetAllLineItems: Scalars["Boolean"]["output"]
}

/** The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned. */
export interface ShopifyPriceRuleItemEntitlementsCollectionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned. */
export interface ShopifyPriceRuleItemEntitlementsProductVariantsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned. */
export interface ShopifyPriceRuleItemEntitlementsProductsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination. */
export interface ShopifyPriceRuleLineItemPrerequisites {
  __typename?: "PriceRuleLineItemPrerequisites"
  /** The collections required for the price rule to be applicable. */
  collections: ShopifyCollectionConnection
  /** The product variants required for the price rule to be applicable. */
  productVariants: ShopifyProductVariantConnection
  /** The products required for the price rule to be applicable. */
  products: ShopifyProductConnection
}

/** Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination. */
export interface ShopifyPriceRuleLineItemPrerequisitesCollectionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination. */
export interface ShopifyPriceRuleLineItemPrerequisitesProductVariantsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination. */
export interface ShopifyPriceRuleLineItemPrerequisitesProductsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A money range within which the price rule is applicable. */
export interface ShopifyPriceRuleMoneyRange {
  __typename?: "PriceRuleMoneyRange"
  /** The lower bound of the money range. */
  greaterThan?: Maybe<Scalars["Money"]["output"]>
  /** The lower bound or equal of the money range. */
  greaterThanOrEqualTo?: Maybe<Scalars["Money"]["output"]>
  /** The upper bound of the money range. */
  lessThan?: Maybe<Scalars["Money"]["output"]>
  /** The upper bound or equal of the money range. */
  lessThanOrEqualTo?: Maybe<Scalars["Money"]["output"]>
}

/** The value of a percent price rule. */
export interface ShopifyPriceRulePercentValue {
  __typename?: "PriceRulePercentValue"
  /** The percent value of the price rule. */
  percentage: Scalars["Float"]["output"]
}

/** Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items. */
export interface ShopifyPriceRulePrerequisiteToEntitlementQuantityRatio {
  __typename?: "PriceRulePrerequisiteToEntitlementQuantityRatio"
  /** The quantity of entitled items in the ratio. */
  entitlementQuantity: Scalars["Int"]["output"]
  /** The quantity of prerequisite items in the ratio. */
  prerequisiteQuantity: Scalars["Int"]["output"]
}

/** A quantity range within which the price rule is applicable. */
export interface ShopifyPriceRuleQuantityRange {
  __typename?: "PriceRuleQuantityRange"
  /** The lower bound of the quantity range. */
  greaterThan?: Maybe<Scalars["Int"]["output"]>
  /** The lower bound or equal of the quantity range. */
  greaterThanOrEqualTo?: Maybe<Scalars["Int"]["output"]>
  /** The upper bound of the quantity range. */
  lessThan?: Maybe<Scalars["Int"]["output"]>
  /** The upper bound or equal of the quantity range. */
  lessThanOrEqualTo?: Maybe<Scalars["Int"]["output"]>
}

/** Shareable URL for the discount code associated with the price rule. */
export interface ShopifyPriceRuleShareableUrl {
  __typename?: "PriceRuleShareableUrl"
  /** The image URL of the item (product or collection) to which the discount applies. */
  targetItemImage?: Maybe<ShopifyImage>
  /** The type of page that's associated with the URL. */
  targetType: ShopifyPriceRuleShareableUrlTargetType
  /** The title of the page that's associated with the URL. */
  title: Scalars["String"]["output"]
  /** The URL for the discount code. */
  url: Scalars["URL"]["output"]
}

/** The type of page where a shareable price rule URL lands. */
export type ShopifyPriceRuleShareableUrlTargetType =
  /** The URL lands on a collection page. */
  | "COLLECTION"
  /** The URL lands on a home page. */
  | "HOME"
  /** The URL lands on a product page. */
  | "PRODUCT"
  | "%future added value"

/** The shipping lines to which the price rule applies to. */
export interface ShopifyPriceRuleShippingLineEntitlements {
  __typename?: "PriceRuleShippingLineEntitlements"
  /** The codes for the countries to which the price rule applies to. */
  countryCodes: Array<ShopifyCountryCode>
  /** Whether the price rule is applicable to countries that haven't been defined in the shop's shipping zones. */
  includeRestOfWorld: Scalars["Boolean"]["output"]
  /** Whether the price rule applies to all shipping lines. */
  targetAllShippingLines: Scalars["Boolean"]["output"]
}

/** The status of the price rule. */
export type ShopifyPriceRuleStatus =
  /** The price rule is active. */
  | "ACTIVE"
  /** The price rule is expired. */
  | "EXPIRED"
  /** The price rule is scheduled. */
  | "SCHEDULED"
  | "%future added value"

/** The type of lines (line_item or shipping_line) to which the price rule applies. */
export type ShopifyPriceRuleTarget =
  /** The price rule applies to line items. */
  | "LINE_ITEM"
  /** The price rule applies to shipping lines. */
  | "SHIPPING_LINE"
  | "%future added value"

/** The list of features that can be supported by a price rule. */
export type ShopifyPriceRuleTrait =
  /** The price rule supports bulk discounts. */
  | "BULK"
  /** The price rule supports Buy X, Get Y (BXGY) discounts. */
  | "BUY_ONE_GET_ONE"
  /** The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit. */
  | "BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT"
  /** The price rule supports discounts that require a quantity. */
  | "QUANTITY_DISCOUNTS"
  /** The price rule targets specific customers. */
  | "SPECIFIC_CUSTOMERS"
  | "%future added value"

/** A time period during which a price rule is applicable. */
export interface ShopifyPriceRuleValidityPeriod {
  __typename?: "PriceRuleValidityPeriod"
  /** The time after which the price rule becomes invalid. */
  end?: Maybe<Scalars["DateTime"]["output"]>
  /** The time after which the price rule is valid. */
  start: Scalars["DateTime"]["output"]
}

/** The type of the price rule value. The price rule value might be a percentage value, or a fixed amount. */
export type ShopifyPriceRuleValue =
  | ShopifyPriceRuleFixedAmountValue
  | ShopifyPriceRulePercentValue

/**
 * One type of value given to a customer when a discount is applied to an order.
 * The application of a discount with this value gives the customer the specified percentage off a specified item.
 */
export interface ShopifyPricingPercentageValue {
  __typename?: "PricingPercentageValue"
  /** The percentage value of the object. This is a number between -100 (free) and 0 (no discount). */
  percentage: Scalars["Float"]["output"]
}

/** The type of value given to a customer when a discount is applied to an order. For example, the application of the discount might give the customer a percentage off a specified item. Alternatively, the application of the discount might give the customer a monetary value in a given currency off an order. */
export type ShopifyPricingValue = ShopifyMoneyV2 | ShopifyPricingPercentageValue

/** A country code from the `ISO 3166` standard. e.g. `CA` for Canada. */
export type ShopifyPrivacyCountryCode =
  /** The `ISO 3166` country code of `AC`. */
  | "AC"
  /** The `ISO 3166` country code of `AD`. */
  | "AD"
  /** The `ISO 3166` country code of `AE`. */
  | "AE"
  /** The `ISO 3166` country code of `AF`. */
  | "AF"
  /** The `ISO 3166` country code of `AG`. */
  | "AG"
  /** The `ISO 3166` country code of `AI`. */
  | "AI"
  /** The `ISO 3166` country code of `AL`. */
  | "AL"
  /** The `ISO 3166` country code of `AM`. */
  | "AM"
  /** The `ISO 3166` country code of `AN`. */
  | "AN"
  /** The `ISO 3166` country code of `AO`. */
  | "AO"
  /** The `ISO 3166` country code of `AQ`. */
  | "AQ"
  /** The `ISO 3166` country code of `AR`. */
  | "AR"
  /** The `ISO 3166` country code of `AS`. */
  | "AS"
  /** The `ISO 3166` country code of `AT`. */
  | "AT"
  /** The `ISO 3166` country code of `AU`. */
  | "AU"
  /** The `ISO 3166` country code of `AW`. */
  | "AW"
  /** The `ISO 3166` country code of `AX`. */
  | "AX"
  /** The `ISO 3166` country code of `AZ`. */
  | "AZ"
  /** The `ISO 3166` country code of `BA`. */
  | "BA"
  /** The `ISO 3166` country code of `BB`. */
  | "BB"
  /** The `ISO 3166` country code of `BD`. */
  | "BD"
  /** The `ISO 3166` country code of `BE`. */
  | "BE"
  /** The `ISO 3166` country code of `BF`. */
  | "BF"
  /** The `ISO 3166` country code of `BG`. */
  | "BG"
  /** The `ISO 3166` country code of `BH`. */
  | "BH"
  /** The `ISO 3166` country code of `BI`. */
  | "BI"
  /** The `ISO 3166` country code of `BJ`. */
  | "BJ"
  /** The `ISO 3166` country code of `BL`. */
  | "BL"
  /** The `ISO 3166` country code of `BM`. */
  | "BM"
  /** The `ISO 3166` country code of `BN`. */
  | "BN"
  /** The `ISO 3166` country code of `BO`. */
  | "BO"
  /** The `ISO 3166` country code of `BQ`. */
  | "BQ"
  /** The `ISO 3166` country code of `BR`. */
  | "BR"
  /** The `ISO 3166` country code of `BS`. */
  | "BS"
  /** The `ISO 3166` country code of `BT`. */
  | "BT"
  /** The `ISO 3166` country code of `BV`. */
  | "BV"
  /** The `ISO 3166` country code of `BW`. */
  | "BW"
  /** The `ISO 3166` country code of `BY`. */
  | "BY"
  /** The `ISO 3166` country code of `BZ`. */
  | "BZ"
  /** The `ISO 3166` country code of `CA`. */
  | "CA"
  /** The `ISO 3166` country code of `CC`. */
  | "CC"
  /** The `ISO 3166` country code of `CD`. */
  | "CD"
  /** The `ISO 3166` country code of `CF`. */
  | "CF"
  /** The `ISO 3166` country code of `CG`. */
  | "CG"
  /** The `ISO 3166` country code of `CH`. */
  | "CH"
  /** The `ISO 3166` country code of `CI`. */
  | "CI"
  /** The `ISO 3166` country code of `CK`. */
  | "CK"
  /** The `ISO 3166` country code of `CL`. */
  | "CL"
  /** The `ISO 3166` country code of `CM`. */
  | "CM"
  /** The `ISO 3166` country code of `CN`. */
  | "CN"
  /** The `ISO 3166` country code of `CO`. */
  | "CO"
  /** The `ISO 3166` country code of `CR`. */
  | "CR"
  /** The `ISO 3166` country code of `CU`. */
  | "CU"
  /** The `ISO 3166` country code of `CV`. */
  | "CV"
  /** The `ISO 3166` country code of `CW`. */
  | "CW"
  /** The `ISO 3166` country code of `CX`. */
  | "CX"
  /** The `ISO 3166` country code of `CY`. */
  | "CY"
  /** The `ISO 3166` country code of `CZ`. */
  | "CZ"
  /** The `ISO 3166` country code of `DE`. */
  | "DE"
  /** The `ISO 3166` country code of `DJ`. */
  | "DJ"
  /** The `ISO 3166` country code of `DK`. */
  | "DK"
  /** The `ISO 3166` country code of `DM`. */
  | "DM"
  /** The `ISO 3166` country code of `DO`. */
  | "DO"
  /** The `ISO 3166` country code of `DZ`. */
  | "DZ"
  /** The `ISO 3166` country code of `EC`. */
  | "EC"
  /** The `ISO 3166` country code of `EE`. */
  | "EE"
  /** The `ISO 3166` country code of `EG`. */
  | "EG"
  /** The `ISO 3166` country code of `EH`. */
  | "EH"
  /** The `ISO 3166` country code of `ER`. */
  | "ER"
  /** The `ISO 3166` country code of `ES`. */
  | "ES"
  /** The `ISO 3166` country code of `ET`. */
  | "ET"
  /** The `ISO 3166` country code of `FI`. */
  | "FI"
  /** The `ISO 3166` country code of `FJ`. */
  | "FJ"
  /** The `ISO 3166` country code of `FK`. */
  | "FK"
  /** The `ISO 3166` country code of `FM`. */
  | "FM"
  /** The `ISO 3166` country code of `FO`. */
  | "FO"
  /** The `ISO 3166` country code of `FR`. */
  | "FR"
  /** The `ISO 3166` country code of `GA`. */
  | "GA"
  /** The `ISO 3166` country code of `GB`. */
  | "GB"
  /** The `ISO 3166` country code of `GD`. */
  | "GD"
  /** The `ISO 3166` country code of `GE`. */
  | "GE"
  /** The `ISO 3166` country code of `GF`. */
  | "GF"
  /** The `ISO 3166` country code of `GG`. */
  | "GG"
  /** The `ISO 3166` country code of `GH`. */
  | "GH"
  /** The `ISO 3166` country code of `GI`. */
  | "GI"
  /** The `ISO 3166` country code of `GL`. */
  | "GL"
  /** The `ISO 3166` country code of `GM`. */
  | "GM"
  /** The `ISO 3166` country code of `GN`. */
  | "GN"
  /** The `ISO 3166` country code of `GP`. */
  | "GP"
  /** The `ISO 3166` country code of `GQ`. */
  | "GQ"
  /** The `ISO 3166` country code of `GR`. */
  | "GR"
  /** The `ISO 3166` country code of `GS`. */
  | "GS"
  /** The `ISO 3166` country code of `GT`. */
  | "GT"
  /** The `ISO 3166` country code of `GU`. */
  | "GU"
  /** The `ISO 3166` country code of `GW`. */
  | "GW"
  /** The `ISO 3166` country code of `GY`. */
  | "GY"
  /** The `ISO 3166` country code of `HK`. */
  | "HK"
  /** The `ISO 3166` country code of `HM`. */
  | "HM"
  /** The `ISO 3166` country code of `HN`. */
  | "HN"
  /** The `ISO 3166` country code of `HR`. */
  | "HR"
  /** The `ISO 3166` country code of `HT`. */
  | "HT"
  /** The `ISO 3166` country code of `HU`. */
  | "HU"
  /** The `ISO 3166` country code of `ID`. */
  | "ID"
  /** The `ISO 3166` country code of `IE`. */
  | "IE"
  /** The `ISO 3166` country code of `IL`. */
  | "IL"
  /** The `ISO 3166` country code of `IM`. */
  | "IM"
  /** The `ISO 3166` country code of `IN`. */
  | "IN"
  /** The `ISO 3166` country code of `IO`. */
  | "IO"
  /** The `ISO 3166` country code of `IQ`. */
  | "IQ"
  /** The `ISO 3166` country code of `IR`. */
  | "IR"
  /** The `ISO 3166` country code of `IS`. */
  | "IS"
  /** The `ISO 3166` country code of `IT`. */
  | "IT"
  /** The `ISO 3166` country code of `JE`. */
  | "JE"
  /** The `ISO 3166` country code of `JM`. */
  | "JM"
  /** The `ISO 3166` country code of `JO`. */
  | "JO"
  /** The `ISO 3166` country code of `JP`. */
  | "JP"
  /** The `ISO 3166` country code of `KE`. */
  | "KE"
  /** The `ISO 3166` country code of `KG`. */
  | "KG"
  /** The `ISO 3166` country code of `KH`. */
  | "KH"
  /** The `ISO 3166` country code of `KI`. */
  | "KI"
  /** The `ISO 3166` country code of `KM`. */
  | "KM"
  /** The `ISO 3166` country code of `KN`. */
  | "KN"
  /** The `ISO 3166` country code of `KP`. */
  | "KP"
  /** The `ISO 3166` country code of `KR`. */
  | "KR"
  /** The `ISO 3166` country code of `KW`. */
  | "KW"
  /** The `ISO 3166` country code of `KY`. */
  | "KY"
  /** The `ISO 3166` country code of `KZ`. */
  | "KZ"
  /** The `ISO 3166` country code of `LA`. */
  | "LA"
  /** The `ISO 3166` country code of `LB`. */
  | "LB"
  /** The `ISO 3166` country code of `LC`. */
  | "LC"
  /** The `ISO 3166` country code of `LI`. */
  | "LI"
  /** The `ISO 3166` country code of `LK`. */
  | "LK"
  /** The `ISO 3166` country code of `LR`. */
  | "LR"
  /** The `ISO 3166` country code of `LS`. */
  | "LS"
  /** The `ISO 3166` country code of `LT`. */
  | "LT"
  /** The `ISO 3166` country code of `LU`. */
  | "LU"
  /** The `ISO 3166` country code of `LV`. */
  | "LV"
  /** The `ISO 3166` country code of `LY`. */
  | "LY"
  /** The `ISO 3166` country code of `MA`. */
  | "MA"
  /** The `ISO 3166` country code of `MC`. */
  | "MC"
  /** The `ISO 3166` country code of `MD`. */
  | "MD"
  /** The `ISO 3166` country code of `ME`. */
  | "ME"
  /** The `ISO 3166` country code of `MF`. */
  | "MF"
  /** The `ISO 3166` country code of `MG`. */
  | "MG"
  /** The `ISO 3166` country code of `MH`. */
  | "MH"
  /** The `ISO 3166` country code of `MK`. */
  | "MK"
  /** The `ISO 3166` country code of `ML`. */
  | "ML"
  /** The `ISO 3166` country code of `MM`. */
  | "MM"
  /** The `ISO 3166` country code of `MN`. */
  | "MN"
  /** The `ISO 3166` country code of `MO`. */
  | "MO"
  /** The `ISO 3166` country code of `MP`. */
  | "MP"
  /** The `ISO 3166` country code of `MQ`. */
  | "MQ"
  /** The `ISO 3166` country code of `MR`. */
  | "MR"
  /** The `ISO 3166` country code of `MS`. */
  | "MS"
  /** The `ISO 3166` country code of `MT`. */
  | "MT"
  /** The `ISO 3166` country code of `MU`. */
  | "MU"
  /** The `ISO 3166` country code of `MV`. */
  | "MV"
  /** The `ISO 3166` country code of `MW`. */
  | "MW"
  /** The `ISO 3166` country code of `MX`. */
  | "MX"
  /** The `ISO 3166` country code of `MY`. */
  | "MY"
  /** The `ISO 3166` country code of `MZ`. */
  | "MZ"
  /** The `ISO 3166` country code of `NA`. */
  | "NA"
  /** The `ISO 3166` country code of `NC`. */
  | "NC"
  /** The `ISO 3166` country code of `NE`. */
  | "NE"
  /** The `ISO 3166` country code of `NF`. */
  | "NF"
  /** The `ISO 3166` country code of `NG`. */
  | "NG"
  /** The `ISO 3166` country code of `NI`. */
  | "NI"
  /** The `ISO 3166` country code of `NL`. */
  | "NL"
  /** The `ISO 3166` country code of `NO`. */
  | "NO"
  /** The `ISO 3166` country code of `NP`. */
  | "NP"
  /** The `ISO 3166` country code of `NR`. */
  | "NR"
  /** The `ISO 3166` country code of `NS`. */
  | "NS"
  /** The `ISO 3166` country code of `NU`. */
  | "NU"
  /** The `ISO 3166` country code of `NZ`. */
  | "NZ"
  /** The `ISO 3166` country code of `OM`. */
  | "OM"
  /** The `ISO 3166` country code of `PA`. */
  | "PA"
  /** The `ISO 3166` country code of `PE`. */
  | "PE"
  /** The `ISO 3166` country code of `PF`. */
  | "PF"
  /** The `ISO 3166` country code of `PG`. */
  | "PG"
  /** The `ISO 3166` country code of `PH`. */
  | "PH"
  /** The `ISO 3166` country code of `PK`. */
  | "PK"
  /** The `ISO 3166` country code of `PL`. */
  | "PL"
  /** The `ISO 3166` country code of `PM`. */
  | "PM"
  /** The `ISO 3166` country code of `PN`. */
  | "PN"
  /** The `ISO 3166` country code of `PR`. */
  | "PR"
  /** The `ISO 3166` country code of `PS`. */
  | "PS"
  /** The `ISO 3166` country code of `PT`. */
  | "PT"
  /** The `ISO 3166` country code of `PW`. */
  | "PW"
  /** The `ISO 3166` country code of `PY`. */
  | "PY"
  /** The `ISO 3166` country code of `QA`. */
  | "QA"
  /** The `ISO 3166` country code of `RE`. */
  | "RE"
  /** The `ISO 3166` country code of `RO`. */
  | "RO"
  /** The `ISO 3166` country code of `RS`. */
  | "RS"
  /** The `ISO 3166` country code of `RU`. */
  | "RU"
  /** The `ISO 3166` country code of `RW`. */
  | "RW"
  /** The `ISO 3166` country code of `SA`. */
  | "SA"
  /** The `ISO 3166` country code of `SB`. */
  | "SB"
  /** The `ISO 3166` country code of `SC`. */
  | "SC"
  /** The `ISO 3166` country code of `SD`. */
  | "SD"
  /** The `ISO 3166` country code of `SE`. */
  | "SE"
  /** The `ISO 3166` country code of `SG`. */
  | "SG"
  /** The `ISO 3166` country code of `SH`. */
  | "SH"
  /** The `ISO 3166` country code of `SI`. */
  | "SI"
  /** The `ISO 3166` country code of `SJ`. */
  | "SJ"
  /** The `ISO 3166` country code of `SK`. */
  | "SK"
  /** The `ISO 3166` country code of `SL`. */
  | "SL"
  /** The `ISO 3166` country code of `SM`. */
  | "SM"
  /** The `ISO 3166` country code of `SN`. */
  | "SN"
  /** The `ISO 3166` country code of `SO`. */
  | "SO"
  /** The `ISO 3166` country code of `SR`. */
  | "SR"
  /** The `ISO 3166` country code of `SS`. */
  | "SS"
  /** The `ISO 3166` country code of `ST`. */
  | "ST"
  /** The `ISO 3166` country code of `SV`. */
  | "SV"
  /** The `ISO 3166` country code of `SX`. */
  | "SX"
  /** The `ISO 3166` country code of `SY`. */
  | "SY"
  /** The `ISO 3166` country code of `SZ`. */
  | "SZ"
  /** The `ISO 3166` country code of `TA`. */
  | "TA"
  /** The `ISO 3166` country code of `TC`. */
  | "TC"
  /** The `ISO 3166` country code of `TD`. */
  | "TD"
  /** The `ISO 3166` country code of `TF`. */
  | "TF"
  /** The `ISO 3166` country code of `TG`. */
  | "TG"
  /** The `ISO 3166` country code of `TH`. */
  | "TH"
  /** The `ISO 3166` country code of `TJ`. */
  | "TJ"
  /** The `ISO 3166` country code of `TK`. */
  | "TK"
  /** The `ISO 3166` country code of `TL`. */
  | "TL"
  /** The `ISO 3166` country code of `TM`. */
  | "TM"
  /** The `ISO 3166` country code of `TN`. */
  | "TN"
  /** The `ISO 3166` country code of `TO`. */
  | "TO"
  /** The `ISO 3166` country code of `TR`. */
  | "TR"
  /** The `ISO 3166` country code of `TT`. */
  | "TT"
  /** The `ISO 3166` country code of `TV`. */
  | "TV"
  /** The `ISO 3166` country code of `TW`. */
  | "TW"
  /** The `ISO 3166` country code of `TZ`. */
  | "TZ"
  /** The `ISO 3166` country code of `UA`. */
  | "UA"
  /** The `ISO 3166` country code of `UG`. */
  | "UG"
  /** The `ISO 3166` country code of `UM`. */
  | "UM"
  /** The `ISO 3166` country code of `US`. */
  | "US"
  /** The `ISO 3166` country code of `UY`. */
  | "UY"
  /** The `ISO 3166` country code of `UZ`. */
  | "UZ"
  /** The `ISO 3166` country code of `VA`. */
  | "VA"
  /** The `ISO 3166` country code of `VC`. */
  | "VC"
  /** The `ISO 3166` country code of `VE`. */
  | "VE"
  /** The `ISO 3166` country code of `VG`. */
  | "VG"
  /** The `ISO 3166` country code of `VI`. */
  | "VI"
  /** The `ISO 3166` country code of `VN`. */
  | "VN"
  /** The `ISO 3166` country code of `VU`. */
  | "VU"
  /** The `ISO 3166` country code of `WF`. */
  | "WF"
  /** The `ISO 3166` country code of `WS`. */
  | "WS"
  /** The `ISO 3166` country code of `XK`. */
  | "XK"
  /** The `ISO 3166` country code of `XX`. */
  | "XX"
  /** The `ISO 3166` country code of `YE`. */
  | "YE"
  /** The `ISO 3166` country code of `YT`. */
  | "YT"
  /** The `ISO 3166` country code of `ZA`. */
  | "ZA"
  /** The `ISO 3166` country code of `ZM`. */
  | "ZM"
  /** The `ISO 3166` country code of `ZW`. */
  | "ZW"
  | "%future added value"

/** Return type for `privacyFeaturesDisable` mutation. */
export interface ShopifyPrivacyFeaturesDisablePayload {
  __typename?: "PrivacyFeaturesDisablePayload"
  /** The privacy features that were disabled. */
  featuresDisabled?: Maybe<Array<ShopifyPrivacyFeaturesEnum>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPrivacyFeaturesDisableUserError>
}

/** An error that occurs during the execution of `PrivacyFeaturesDisable`. */
export interface ShopifyPrivacyFeaturesDisableUserError
  extends ShopifyDisplayableError {
  __typename?: "PrivacyFeaturesDisableUserError"
  /** The error code. */
  code?: Maybe<ShopifyPrivacyFeaturesDisableUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `PrivacyFeaturesDisableUserError`. */
export type ShopifyPrivacyFeaturesDisableUserErrorCode =
  /** Failed to disable privacy features. */
  "FAILED" | "%future added value"

/** The input fields for a shop's privacy settings. */
export type ShopifyPrivacyFeaturesEnum =
  /** The cookie banner feature. */
  | "COOKIE_BANNER"
  /** The data sale opt out page feature. */
  | "DATA_SALE_OPT_OUT_PAGE"
  /** The privacy policy feature. */
  | "PRIVACY_POLICY"
  | "%future added value"

/** A shop's privacy policy settings. */
export interface ShopifyPrivacyPolicy {
  __typename?: "PrivacyPolicy"
  /** Whether the policy is auto managed. */
  autoManaged: Scalars["Boolean"]["output"]
  /** Policy template supported locales. */
  supportedLocales: Array<Scalars["String"]["output"]>
}

/** A shop's privacy settings. */
export interface ShopifyPrivacySettings {
  __typename?: "PrivacySettings"
  /** Banner customizations for the 'cookie banner'. */
  banner?: Maybe<ShopifyCookieBanner>
  /** A shop's data sale opt out page (e.g. CCPA). */
  dataSaleOptOutPage?: Maybe<ShopifyDataSaleOptOutPage>
  /** A shop's privacy policy settings. */
  privacyPolicy?: Maybe<ShopifyPrivacyPolicy>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProduct
  extends ShopifyHasEvents,
    ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyHasPublishedTranslations,
    ShopifyLegacyInteroperability,
    ShopifyNavigable,
    ShopifyNode,
    ShopifyOnlineStorePreviewable,
    ShopifyPublishable {
  __typename?: "Product"
  /**
   * The number of
   * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
   * that a resource is published to, without
   * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
   */
  availablePublicationsCount?: Maybe<ShopifyCount>
  /**
   * The description of the product, with
   * HTML tags. For example, the description might include
   * bold `<strong></strong>` and italic `<i></i>` text.
   * @deprecated Use `descriptionHtml` instead.
   */
  bodyHtml?: Maybe<Scalars["String"]["output"]>
  /**
   * A list of [components](https://shopify.dev/docs/apps/build/product-merchandising/bundles/add-product-fixed-bundle)
   * that are associated with a product in a bundle.
   */
  bundleComponents: ShopifyProductBundleComponentConnection
  /**
   * The category of a product
   * from [Shopify's Standard Product Taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17).
   */
  category?: Maybe<ShopifyTaxonomyCategory>
  /**
   * A list of [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection)
   * that include the product.
   */
  collections: ShopifyCollectionConnection
  /**
   * A special product type that combines separate products from a store into a single product listing.
   * [Combined listings](https://shopify.dev/apps/build/product-merchandising/combined-listings) are connected
   * by a shared option, such as color, model, or dimension.
   */
  combinedListing?: Maybe<ShopifyCombinedListing>
  /**
   * The [role of the product](https://shopify.dev/docs/apps/build/product-merchandising/combined-listings/build-for-combined-listings)
   * in a combined listing.
   *
   * If `null`, then the product isn't part of any combined listing.
   */
  combinedListingRole?: Maybe<ShopifyCombinedListingsRole>
  /**
   * The [compare-at price range](https://help.shopify.com/manual/products/details/product-pricing/sale-pricing)
   * of the product in the shop's default currency.
   */
  compareAtPriceRange?: Maybe<ShopifyProductCompareAtPriceRange>
  /** The pricing that applies to a customer in a specific context. For example, a price might vary depending on the customer's location. Only active markets are considered in the price resolution. */
  contextualPricing: ShopifyProductContextualPricing
  /** The date and time when the product was created. */
  createdAt: Scalars["DateTime"]["output"]
  /**
   * The custom product type specified by the merchant.
   * @deprecated Use `productType` instead.
   */
  customProductType?: Maybe<Scalars["String"]["output"]>
  /** A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars["String"]["output"]
  /**
   * A single-line description of the product,
   * with [HTML tags](https://developer.mozilla.org/en-US/docs/Web/HTML) removed.
   */
  description: Scalars["String"]["output"]
  /**
   * The description of the product, with
   * HTML tags. For example, the description might include
   * bold `<strong></strong>` and italic `<i></i>` text.
   */
  descriptionHtml: Scalars["HTML"]["output"]
  /**
   * Stripped description of the product, single line with HTML tags removed.
   * Truncated to 60 characters.
   * @deprecated Use `description` instead.
   */
  descriptionPlainSummary: Scalars["String"]["output"]
  /** The paginated list of events associated with the host subject. */
  events: ShopifyEventConnection
  /**
   * The featured image for the product.
   * @deprecated Use `featuredMedia` instead.
   */
  featuredImage?: Maybe<ShopifyImage>
  /**
   * The featured [media](https://shopify.dev/docs/apps/build/online-store/product-media)
   * associated with the product.
   */
  featuredMedia?: Maybe<ShopifyMedia>
  /**
   * The information that lets merchants know what steps they need to take
   * to make sure that the app is set up correctly.
   *
   * For example, if a merchant hasn't set up a product correctly in the app,
   * then the feedback might include a message that says "You need to add a price
   * to this product".
   */
  feedback?: Maybe<ShopifyResourceFeedback>
  /** The [theme template](https://shopify.dev/docs/storefronts/themes/architecture/templates) that's used when customers view the gift card in a store. */
  giftCardTemplateSuffix?: Maybe<Scalars["String"]["output"]>
  /**
   * A unique, human-readable string of the product's title. A handle can contain letters, hyphens (`-`), and numbers, but no spaces.
   * The handle is used in the online store URL for the product.
   */
  handle: Scalars["String"]["output"]
  /** Whether the product has only a single variant with the default option and value. */
  hasOnlyDefaultVariant: Scalars["Boolean"]["output"]
  /** Whether the product has variants that are out of stock. */
  hasOutOfStockVariants: Scalars["Boolean"]["output"]
  /**
   * Whether at least one of the product variants requires
   * [bundle components](https://shopify.dev/docs/apps/build/product-merchandising/bundles/add-product-fixed-bundle).
   *
   * Learn more about
   * [store eligibility for bundles](https://shopify.dev/docs/apps/build/product-merchandising/bundles#store-eligibility).
   */
  hasVariantsThatRequiresComponents: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * The images associated with the product.
   * @deprecated Use `media` instead.
   */
  images: ShopifyImageConnection
  /**
   * Whether the product
   * is in a specified
   * [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
   */
  inCollection: Scalars["Boolean"]["output"]
  /** Whether the product is a gift card. */
  isGiftCard: Scalars["Boolean"]["output"]
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** The [media](https://shopify.dev/docs/apps/build/online-store/product-media) associated with the product. Valid media are images, 3D models, videos. */
  media: ShopifyMediaConnection
  /**
   * The total count of [media](https://shopify.dev/docs/apps/build/online-store/product-media)
   * that's associated with a product.
   */
  mediaCount?: Maybe<ShopifyCount>
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** The [preview URL](https://help.shopify.com/manual/online-store/setting-up#preview-your-store) for the online store. */
  onlineStorePreviewUrl?: Maybe<Scalars["URL"]["output"]>
  /**
   * The product's URL on the online store.
   * If `null`, then the product isn't published to the online store sales channel.
   */
  onlineStoreUrl?: Maybe<Scalars["URL"]["output"]>
  /**
   * A list of product options. The limit is defined by the
   * [shop's resource limits for product options](https://shopify.dev/docs/api/admin-graphql/latest/objects/Shop#field-resourcelimits) (`Shop.resourceLimits.maxProductOptions`).
   */
  options: Array<ShopifyProductOption>
  /**
   * The price range of the product.
   * @deprecated Use `priceRangeV2` instead.
   */
  priceRange: ShopifyProductPriceRange
  /**
   * The minimum and maximum prices of a product, expressed in decimal numbers.
   * For example, if the product is priced between $10.00 and $50.00,
   * then the price range is $10.00 - $50.00.
   */
  priceRangeV2: ShopifyProductPriceRangeV2
  /**
   * The product category specified by the merchant.
   * @deprecated Use `category` instead.
   */
  productCategory?: Maybe<ShopifyProductCategory>
  /**
   * A list of products that contain at least one variant associated with
   * at least one of the current products' variants via group relationship.
   */
  productComponents: ShopifyProductComponentTypeConnection
  /**
   * A count of unique products that contain at least one variant associated with
   * at least one of the current products' variants via group relationship.
   */
  productComponentsCount?: Maybe<ShopifyCount>
  /** A list of products that has a variant that contains any of this product's variants as a component. */
  productParents: ShopifyProductConnection
  /**
   * A list of the channels where the product is published.
   * @deprecated Use `resourcePublications` instead.
   */
  productPublications: ShopifyProductPublicationConnection
  /**
   * The [product type](https://help.shopify.com/manual/products/details/product-type)
   * that merchants define.
   */
  productType: Scalars["String"]["output"]
  /**
   * The number of
   * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
   * that a resource is published to, without
   * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
   * @deprecated Use `resourcePublicationsCount` instead.
   */
  publicationCount: Scalars["Int"]["output"]
  /**
   * A list of the channels where the product is published.
   * @deprecated Use `resourcePublications` instead.
   */
  publications: ShopifyProductPublicationConnection
  /** The date and time when the product was published to the online store. */
  publishedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** Whether the product is published for a customer only in a specified context. For example, a product might be published for a customer only in a specific location. */
  publishedInContext: Scalars["Boolean"]["output"]
  /**
   * Whether the resource is published to a specific channel.
   * @deprecated Use `publishedOnPublication` instead.
   */
  publishedOnChannel: Scalars["Boolean"]["output"]
  /**
   * Whether the resource is published to a
   * [channel](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel).
   * For example, the resource might be published to the online store channel.
   * @deprecated Use `publishedOnCurrentPublication` instead.
   */
  publishedOnCurrentChannel: Scalars["Boolean"]["output"]
  /**
   * Whether the resource is published to the app's
   * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
   * For example, the resource might be published to the app's online store channel.
   */
  publishedOnCurrentPublication: Scalars["Boolean"]["output"]
  /**
   * Whether the resource is published to a specified
   * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
   */
  publishedOnPublication: Scalars["Boolean"]["output"]
  /**
   * Whether the product can only be purchased with
   * a [selling plan](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans).
   * Products that are sold on subscription (`requiresSellingPlan: true`) can be updated only for online stores.
   * If you update a product to be subscription-only (`requiresSellingPlan:false`), then the product is unpublished from all channels, except the online store.
   */
  requiresSellingPlan: Scalars["Boolean"]["output"]
  /**
   * The resource that's either published or staged to be published to
   * the [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
   */
  resourcePublicationOnCurrentPublication?: Maybe<ShopifyResourcePublicationV2>
  /**
   * The list of resources that are published to a
   * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
   */
  resourcePublications: ShopifyResourcePublicationConnection
  /**
   * The number of
   * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
   * that a resource is published to, without
   * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
   */
  resourcePublicationsCount?: Maybe<ShopifyCount>
  /**
   * The list of resources that are either published or staged to be published to a
   * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
   */
  resourcePublicationsV2: ShopifyResourcePublicationV2Connection
  /**
   * Whether the merchant can make changes to the product when they
   * [edit the order](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps/edit-orders)
   * associated with the product. For example, a merchant might be restricted from changing product details when they
   * edit an order.
   */
  restrictedForResource?: Maybe<ShopifyRestrictedForResource>
  /**
   * A count of [selling plan groups](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans/build-a-selling-plan)
   * that are associated with the product.
   * @deprecated Use `sellingPlanGroupsCount` instead.
   */
  sellingPlanGroupCount: Scalars["Int"]["output"]
  /**
   * A list of all [selling plan groups](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans/build-a-selling-plan)
   * that are associated with the product either directly, or through the product's variants.
   */
  sellingPlanGroups: ShopifySellingPlanGroupConnection
  /**
   * A count of [selling plan groups](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans/build-a-selling-plan)
   * that are associated with the product.
   */
  sellingPlanGroupsCount?: Maybe<ShopifyCount>
  /**
   * The [SEO title and description](https://help.shopify.com/manual/promoting-marketing/seo/adding-keywords)
   * that are associated with a product.
   */
  seo: ShopifySeo
  /**
   * The standardized product type in the Shopify product taxonomy.
   * @deprecated Use `productCategory` instead.
   */
  standardizedProductType?: Maybe<ShopifyStandardizedProductType>
  /**
   * The [product status](https://help.shopify.com/manual/products/details/product-details-page#product-status),
   * which controls visibility across all sales channels.
   */
  status: ShopifyProductStatus
  /**
   * The Storefront GraphQL API ID of the `Product`.
   *
   * The Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
   * @deprecated Use `id` instead.
   */
  storefrontId: Scalars["StorefrontID"]["output"]
  /**
   * A comma-separated list of searchable keywords that are
   * associated with the product. For example, a merchant might apply the `sports`
   * and `summer` tags to products that are associated with sportwear for summer.
   *
   * Updating `tags` overwrites
   * any existing tags that were previously added to the product. To add new tags without overwriting
   * existing tags, use the [`tagsAdd`](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   */
  tags: Array<Scalars["String"]["output"]>
  /** The [theme template](https://shopify.dev/docs/storefronts/themes/architecture/templates) that's used when customers view the product in a store. */
  templateSuffix?: Maybe<Scalars["String"]["output"]>
  /**
   * The name for the product that displays to customers. The title is used to construct the product's handle.
   * For example, if a product is titled "Black Sunglasses", then the handle is `black-sunglasses`.
   */
  title: Scalars["String"]["output"]
  /** The quantity of inventory that's in stock. */
  totalInventory: Scalars["Int"]["output"]
  /**
   * The number of [variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)
   * that are associated with the product.
   * @deprecated Use `variantsCount` instead.
   */
  totalVariants: Scalars["Int"]["output"]
  /**
   * Whether [inventory tracking](https://help.shopify.com/manual/products/inventory/getting-started-with-inventory/set-up-inventory-tracking)
   * has been enabled for the product.
   */
  tracksInventory: Scalars["Boolean"]["output"]
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
  /**
   * The list of channels that the resource is not published to.
   * @deprecated Use `unpublishedPublications` instead.
   */
  unpublishedChannels: ShopifyChannelConnection
  /**
   * The list of [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
   * that the resource isn't published to.
   */
  unpublishedPublications: ShopifyPublicationConnection
  /**
   * The date and time when the product was last modified.
   * A product's `updatedAt` value can change for different reasons. For example, if an order
   * is placed for a product that has inventory tracking set up, then the inventory adjustment
   * is counted as an update.
   */
  updatedAt: Scalars["DateTime"]["output"]
  /**
   * A list of [variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant) associated with the product.
   * If querying a single product at the root, you can fetch up to 2000 variants.
   */
  variants: ShopifyProductVariantConnection
  /**
   * The number of [variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)
   * that are associated with the product.
   */
  variantsCount?: Maybe<ShopifyCount>
  /** The name of the product's vendor. */
  vendor: Scalars["String"]["output"]
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductBundleComponentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductCollectionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCollectionSortKeys>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductContextualPricingArgs {
  context: ShopifyContextualPricingContext
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductDescriptionArgs {
  truncateAt?: InputMaybe<Scalars["Int"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductImagesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyProductImageSortKeys>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductInCollectionArgs {
  id: Scalars["ID"]["input"]
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductMediaArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyProductMediaSortKeys>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductOptionsArgs {
  first?: InputMaybe<Scalars["Int"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductProductComponentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductProductParentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductProductPublicationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductPublicationCountArgs {
  onlyPublished?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductPublicationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  onlyPublished?: InputMaybe<Scalars["Boolean"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductPublishedInContextArgs {
  context: ShopifyContextualPublicationContext
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductPublishedOnChannelArgs {
  channelId: Scalars["ID"]["input"]
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductPublishedOnPublicationArgs {
  publicationId: Scalars["ID"]["input"]
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductResourcePublicationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  onlyPublished?: InputMaybe<Scalars["Boolean"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductResourcePublicationsCountArgs {
  onlyPublished?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductResourcePublicationsV2Args {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  catalogType?: InputMaybe<ShopifyCatalogType>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  onlyPublished?: InputMaybe<Scalars["Boolean"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductRestrictedForResourceArgs {
  calculatedOrderId: Scalars["ID"]["input"]
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductSellingPlanGroupsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductUnpublishedChannelsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductUnpublishedPublicationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Product` object lets you manage products in a merchant’s store.
 *
 * Products are the goods and services that merchants offer to customers. They can include various details such as title, description, price, images, and options such as size or color.
 * You can use [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product.
 * You can also add or update product [media](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/media).
 * Products can be organized by grouping them into a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/collection).
 *
 * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components),
 * including limitations and considerations.
 */
export interface ShopifyProductVariantsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyProductVariantSortKeys>
}

/** The product's component information. */
export interface ShopifyProductBundleComponent {
  __typename?: "ProductBundleComponent"
  /** The product that's related as a component. */
  componentProduct: ShopifyProduct
  /** The list of products' variants that are components. */
  componentVariants: ShopifyProductVariantConnection
  /** The number of component variants for the product component. */
  componentVariantsCount?: Maybe<ShopifyCount>
  /**
   * The options in the parent and the component options they're connected to, along with the chosen option values
   * that appear in the bundle.
   */
  optionSelections: Array<ShopifyProductBundleComponentOptionSelection>
  /**
   * The quantity of the component product set for this bundle line.
   * It will be null if there's a quantityOption present.
   */
  quantity?: Maybe<Scalars["Int"]["output"]>
  /** The quantity as option of the component product. It will be null if there's a quantity set. */
  quantityOption?: Maybe<ShopifyProductBundleComponentQuantityOption>
}

/** The product's component information. */
export interface ShopifyProductBundleComponentComponentVariantsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple ProductBundleComponents. */
export interface ShopifyProductBundleComponentConnection {
  __typename?: "ProductBundleComponentConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyProductBundleComponentEdge>
  /** A list of nodes that are contained in ProductBundleComponentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyProductBundleComponent>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ProductBundleComponent and a cursor during pagination. */
export interface ShopifyProductBundleComponentEdge {
  __typename?: "ProductBundleComponentEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ProductBundleComponentEdge. */
  node: ShopifyProductBundleComponent
}

/** The input fields for a single component related to a componentized product. */
export interface ShopifyProductBundleComponentInput {
  /** The options to use in the component product, and the values for the option. */
  optionSelections: Array<ShopifyProductBundleComponentOptionSelectionInput>
  /** The ID of the component product to add to the bundle product. */
  productId: Scalars["ID"]["input"]
  /** The quantity of the component product to add to the bundle product. This field can't exceed 2000. */
  quantity?: InputMaybe<Scalars["Int"]["input"]>
  /**
   * New option to be created on the bundle parent that enables the buyer to select different quantities for
   * this component (e.g. two-pack, three-pack). Can only be used if quantity isn't set.
   */
  quantityOption?: InputMaybe<ShopifyProductBundleComponentQuantityOptionInput>
}

/** A relationship between a component option and a parent option. */
export interface ShopifyProductBundleComponentOptionSelection {
  __typename?: "ProductBundleComponentOptionSelection"
  /** The option that existed on the component product prior to the fixed bundle creation. */
  componentOption: ShopifyProductOption
  /** The option that was created on the parent product. */
  parentOption?: Maybe<ShopifyProductOption>
  /** The component option values that are actively selected for this relationship. */
  values: Array<ShopifyProductBundleComponentOptionSelectionValue>
}

/** The input fields for a single option related to a component product. */
export interface ShopifyProductBundleComponentOptionSelectionInput {
  /** The ID of the option present on the component product. */
  componentOptionId: Scalars["ID"]["input"]
  /** The name to create for this option on the parent product. */
  name: Scalars["String"]["input"]
  /** Array of selected option values. */
  values: Array<Scalars["String"]["input"]>
}

/** The status of a component option value related to a bundle. */
export type ShopifyProductBundleComponentOptionSelectionStatus =
  /** The component option value is not selected as sellable in the bundle. */
  | "DESELECTED"
  /** The component option value was not initially selected, but is now available for the bundle. */
  | "NEW"
  /** The component option value is selected as sellable in the bundle. */
  | "SELECTED"
  /** The component option value was selected, is no longer available for the bundle. */
  | "UNAVAILABLE"
  | "%future added value"

/** A component option value related to a bundle line. */
export interface ShopifyProductBundleComponentOptionSelectionValue {
  __typename?: "ProductBundleComponentOptionSelectionValue"
  /** Selection status of the option. */
  selectionStatus: ShopifyProductBundleComponentOptionSelectionStatus
  /** The value of the option. */
  value: Scalars["String"]["output"]
}

/** A quantity option related to a bundle. */
export interface ShopifyProductBundleComponentQuantityOption {
  __typename?: "ProductBundleComponentQuantityOption"
  /** The name of the option value. */
  name: Scalars["String"]["output"]
  /** The option that was created on the parent product. */
  parentOption?: Maybe<ShopifyProductOption>
  /** The quantity values of the option. */
  values: Array<ShopifyProductBundleComponentQuantityOptionValue>
}

/** Input for the quantity option related to a component product. This will become a new option on the parent bundle product that doesn't have a corresponding option on the component. */
export interface ShopifyProductBundleComponentQuantityOptionInput {
  /** The option name to create on the parent product. */
  name: Scalars["String"]["input"]
  /** Array of option values. */
  values: Array<ShopifyProductBundleComponentQuantityOptionValueInput>
}

/** A quantity option value related to a componentized product. */
export interface ShopifyProductBundleComponentQuantityOptionValue {
  __typename?: "ProductBundleComponentQuantityOptionValue"
  /** The name of the option value. */
  name: Scalars["String"]["output"]
  /** The quantity of the option value. */
  quantity: Scalars["Int"]["output"]
}

/** The input fields for a single quantity option value related to a component product. */
export interface ShopifyProductBundleComponentQuantityOptionValueInput {
  /** The name associated with the option, e.g. one-pack, two-pack. */
  name: Scalars["String"]["input"]
  /** How many of the variant will be included for the option value (e.g. two-pack has quantity 2). */
  quantity: Scalars["Int"]["input"]
}

/** The input fields for creating a componentized product. */
export interface ShopifyProductBundleCreateInput {
  /** The component products to bundle with the bundle product. */
  components: Array<ShopifyProductBundleComponentInput>
  /** The title of the product to create. */
  title: Scalars["String"]["input"]
}

/** Return type for `productBundleCreate` mutation. */
export interface ShopifyProductBundleCreatePayload {
  __typename?: "ProductBundleCreatePayload"
  /** The asynchronous ProductBundleOperation creating the componentized product. */
  productBundleOperation?: Maybe<ShopifyProductBundleOperation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Defines errors encountered while managing a product bundle. */
export interface ShopifyProductBundleMutationUserError
  extends ShopifyDisplayableError {
  __typename?: "ProductBundleMutationUserError"
  /** The error code. */
  code?: Maybe<ShopifyProductBundleMutationUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ProductBundleMutationUserError`. */
export type ShopifyProductBundleMutationUserErrorCode =
  /** Something went wrong, please try again. */
  | "GENERIC_ERROR"
  /** Input is not valid. */
  | "INVALID_INPUT"
  /** Error processing request in the background job. */
  | "JOB_ERROR"
  /** Product does not exist. */
  | "PRODUCT_DOES_NOT_EXIST"
  | "%future added value"

/**
 * An entity that represents details of an asynchronous
 * [ProductBundleCreate](https://shopify.dev/api/admin-graphql/current/mutations/productBundleCreate) or
 * [ProductBundleUpdate](https://shopify.dev/api/admin-graphql/current/mutations/productBundleUpdate) mutation.
 *
 * By querying this entity with the
 * [productOperation](https://shopify.dev/api/admin-graphql/current/queries/productOperation) query
 * using the ID that was returned when the bundle was created or updated, this can be used to check the status of an operation.
 *
 * The `status` field indicates whether the operation is `CREATED`, `ACTIVE`, or `COMPLETE`.
 *
 * The `product` field provides the details of the created or updated product.
 *
 * The `userErrors` field provides mutation errors that occurred during the operation.
 */
export interface ShopifyProductBundleOperation
  extends ShopifyNode,
    ShopifyProductOperation {
  __typename?: "ProductBundleOperation"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The product on which the operation is being performed. */
  product?: Maybe<ShopifyProduct>
  /** The status of this operation. */
  status: ShopifyProductOperationStatus
  /** Returns mutation errors occurred during background mutation processing. */
  userErrors: Array<ShopifyProductBundleMutationUserError>
}

/** The input fields for updating a componentized product. */
export interface ShopifyProductBundleUpdateInput {
  /** The components to update existing ones. If none provided, no changes occur. Note: This replaces, not adds to, current components. */
  components?: InputMaybe<Array<ShopifyProductBundleComponentInput>>
  /** The ID of the componentized product to update. */
  productId: Scalars["ID"]["input"]
  /** The title to rename the componentized product to, if provided. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `productBundleUpdate` mutation. */
export interface ShopifyProductBundleUpdatePayload {
  __typename?: "ProductBundleUpdatePayload"
  /** The asynchronous ProductBundleOperation updating the componentized product. */
  productBundleOperation?: Maybe<ShopifyProductBundleOperation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The details of a specific product category within the [Shopify product taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17). */
export interface ShopifyProductCategory {
  __typename?: "ProductCategory"
  /** The product taxonomy node associated with the product category. */
  productTaxonomyNode?: Maybe<ShopifyProductTaxonomyNode>
}

/** Return type for `productChangeStatus` mutation. */
export interface ShopifyProductChangeStatusPayload {
  __typename?: "ProductChangeStatusPayload"
  /** The product object. */
  product?: Maybe<ShopifyProduct>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyProductChangeStatusUserError>
}

/** An error that occurs during the execution of `ProductChangeStatus`. */
export interface ShopifyProductChangeStatusUserError
  extends ShopifyDisplayableError {
  __typename?: "ProductChangeStatusUserError"
  /** The error code. */
  code?: Maybe<ShopifyProductChangeStatusUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ProductChangeStatusUserError`. */
export type ShopifyProductChangeStatusUserErrorCode =
  /** Cannot be unarchived because combined listings are not compatible with this store. */
  | "COMBINED_LISTINGS_NOT_COMPATIBLE_WITH_SHOP"
  /** Product could not be found. */
  | "PRODUCT_NOT_FOUND"
  | "%future added value"

/** The input fields to claim ownership for Product features such as Bundles. */
export interface ShopifyProductClaimOwnershipInput {
  /**
   * Claiming ownership of bundles lets the app render a custom UI for the bundles' card on the
   * products details page in the Shopify admin.
   *
   * Bundle ownership can only be claimed when creating the product. If you create `ProductVariantComponents`
   * in any of its product variants, then the bundle ownership is automatically assigned to the app making the call.
   *
   * [Learn more](https://shopify.dev/docs/apps/selling-strategies/bundles/product-config).
   */
  bundles?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The set of valid sort keys for products belonging to a collection. */
export type ShopifyProductCollectionSortKeys =
  /** Sort by best selling. */
  | "BEST_SELLING"
  /** Sort by collection default order. */
  | "COLLECTION_DEFAULT"
  /** Sort by creation time. */
  | "CREATED"
  /** Sort by id. */
  | "ID"
  /** Sort by manual order. */
  | "MANUAL"
  /** Sort by price. */
  | "PRICE"
  /** Sort by relevance. */
  | "RELEVANCE"
  /** Sort by title. */
  | "TITLE"
  | "%future added value"

/** The compare-at price range of the product. */
export interface ShopifyProductCompareAtPriceRange {
  __typename?: "ProductCompareAtPriceRange"
  /** The highest variant's compare-at price. */
  maxVariantCompareAtPrice: ShopifyMoneyV2
  /** The lowest variant's compare-at price. */
  minVariantCompareAtPrice: ShopifyMoneyV2
}

/** The product component information. */
export interface ShopifyProductComponentType {
  __typename?: "ProductComponentType"
  /** The list of products' variants that are components. */
  componentVariants: ShopifyProductVariantConnection
  /** The number of component variants for the product component. */
  componentVariantsCount?: Maybe<ShopifyCount>
  /** The list of products' variants that are not components. */
  nonComponentVariants: ShopifyProductVariantConnection
  /** The number of non_components variants for the product component. */
  nonComponentVariantsCount?: Maybe<ShopifyCount>
  /** The product that's a component. */
  product: ShopifyProduct
}

/** The product component information. */
export interface ShopifyProductComponentTypeComponentVariantsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The product component information. */
export interface ShopifyProductComponentTypeNonComponentVariantsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple ProductComponentTypes. */
export interface ShopifyProductComponentTypeConnection {
  __typename?: "ProductComponentTypeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyProductComponentTypeEdge>
  /** A list of nodes that are contained in ProductComponentTypeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyProductComponentType>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ProductComponentType and a cursor during pagination. */
export interface ShopifyProductComponentTypeEdge {
  __typename?: "ProductComponentTypeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ProductComponentTypeEdge. */
  node: ShopifyProductComponentType
}

/** An auto-generated type for paginating through multiple Products. */
export interface ShopifyProductConnection {
  __typename?: "ProductConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyProductEdge>
  /** A list of nodes that are contained in ProductEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyProduct>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/**
 * The price of a product in a specific country.
 * Prices vary between countries.
 * Refer to [Product](https://shopify.dev/docs/api/admin-graphql/latest/queries/product?example=Get+the+price+range+for+a+product+for+buyers+from+Canada)
 * for more information on how to use this object.
 */
export interface ShopifyProductContextualPricing {
  __typename?: "ProductContextualPricing"
  /** The number of fixed quantity rules for the product's variants on the price list. */
  fixedQuantityRulesCount: Scalars["Int"]["output"]
  /** The pricing of the variant with the highest price in the given context. */
  maxVariantPricing?: Maybe<ShopifyProductVariantContextualPricing>
  /** The pricing of the variant with the lowest price in the given context. */
  minVariantPricing?: Maybe<ShopifyProductVariantContextualPricing>
  /**
   * The minimum and maximum prices of a product, expressed in decimal numbers.
   * For example, if the product is priced between $10.00 and $50.00,
   * then the price range is $10.00 - $50.00.
   */
  priceRange: ShopifyProductPriceRangeV2
}

/** The input fields required to create a product. */
export interface ShopifyProductCreateInput {
  /**
   * The ID of the [category](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17)
   * that's associated with the product.
   */
  category?: InputMaybe<Scalars["ID"]["input"]>
  /**
   * The input field to enable an app to provide additional product features.
   * For example, you can specify
   * [`bundles: true`](https://shopify.dev/docs/api/admin-graphql/latest/input-objects/ProductClaimOwnershipInput#field-bundles)
   * in the `claimOwnership` field to let an app add a
   * [product configuration extension](https://shopify.dev/docs/apps/build/product-merchandising/bundles/product-configuration-extension/add-merchant-config-ui).
   */
  claimOwnership?: InputMaybe<ShopifyProductClaimOwnershipInput>
  /** A list of collection IDs to associate with the product. */
  collectionsToJoin?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The role of the product in a [combined listing](https://shopify.dev/apps/build/product-merchandising/combined-listings). */
  combinedListingRole?: InputMaybe<ShopifyCombinedListingsRole>
  /**
   * The description of the product, with HTML tags.
   * For example, the description might include bold `<strong></strong>` and italic `<i></i>` text.
   */
  descriptionHtml?: InputMaybe<Scalars["String"]["input"]>
  /** Whether the product is a gift card. */
  giftCard?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The [theme template](https://shopify.dev/docs/storefronts/themes/architecture/templates) that's used when customers view a gift card in a store. */
  giftCardTemplateSuffix?: InputMaybe<Scalars["String"]["input"]>
  /**
   * A unique, human-readable string that's used to identify the product in URLs. A handle can contain letters, hyphens (`-`), and numbers, but no spaces.
   * If no handle is explicitly provided, then the title is used to construct the product's handle.
   * For example, if a product is titled "Black Sunglasses" and no handle is provided, then the handle `black-sunglasses` is generated (unless that handle
   * is already taken, in which case a suffix is added to make the handle unique).
   */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The [custom fields](https://shopify.dev/docs/apps/build/custom-data) to associate with the product
   * for the purposes of adding and storing additional information.
   */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** A list of product options and option values. Maximum product options: three. There's no limit on the number of option values. */
  productOptions?: InputMaybe<Array<ShopifyOptionCreateInput>>
  /**
   * The [product type](https://help.shopify.com/manual/products/details/product-type)
   * that merchants define.
   */
  productType?: InputMaybe<Scalars["String"]["input"]>
  /**
   * Whether the product can only be purchased with
   * a [selling plan](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans).
   * Products that are sold on subscription (`requiresSellingPlan: true`) can be updated only for online stores.
   * If you update a product to be subscription-only (`requiresSellingPlan:false`), then the product is unpublished from all channels except the online store.
   */
  requiresSellingPlan?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * The [SEO title and description](https://help.shopify.com/manual/promoting-marketing/seo/adding-keywords)
   * that are associated with a product.
   */
  seo?: InputMaybe<ShopifySeoInput>
  /**
   * The [product status](https://help.shopify.com/manual/products/details/product-details-page#product-status),
   * which controls visibility across all sales channels.
   */
  status?: InputMaybe<ShopifyProductStatus>
  /**
   * A list of searchable keywords that are
   * associated with the product. For example, a merchant might apply the `sports`
   * and `summer` tags to products that are associated with sportwear for summer.
   *
   * Updating `tags` overwrites any existing tags that were previously added to the product.
   * To add new tags without overwriting existing tags, use the
   * [`tagsAdd`](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The [theme template](https://shopify.dev/docs/storefronts/themes/architecture/templates) that's used when customers view a product in a store. */
  templateSuffix?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The name for the product that displays to customers. If no handle is explicitly provided, then the title is used to construct the product's handle.
   * For example, if a product is titled "Black Sunglasses" and no handle is provided, then the handle `black-sunglasses` is generated.
   */
  title?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the product's vendor. */
  vendor?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `productCreateMedia` mutation. */
export interface ShopifyProductCreateMediaPayload {
  __typename?: "ProductCreateMediaPayload"
  /** The newly created media. */
  media?: Maybe<Array<ShopifyMedia>>
  /** The list of errors that occurred from executing the mutation. */
  mediaUserErrors: Array<ShopifyMediaUserError>
  /** The product associated with the media. */
  product?: Maybe<ShopifyProduct>
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `mediaUserErrors` instead.
   */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `productCreate` mutation. */
export interface ShopifyProductCreatePayload {
  __typename?: "ProductCreatePayload"
  /** The product object. */
  product?: Maybe<ShopifyProduct>
  /** The shop associated with the product. */
  shop: ShopifyShop
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields for specifying the product to delete. */
export interface ShopifyProductDeleteInput {
  /** The ID of the product. */
  id: Scalars["ID"]["input"]
}

/** Return type for `productDeleteMedia` mutation. */
export interface ShopifyProductDeleteMediaPayload {
  __typename?: "ProductDeleteMediaPayload"
  /** List of media IDs which were deleted. */
  deletedMediaIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** List of product image IDs which were deleted. */
  deletedProductImageIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** The list of errors that occurred from executing the mutation. */
  mediaUserErrors: Array<ShopifyMediaUserError>
  /** The product associated with the deleted media. */
  product?: Maybe<ShopifyProduct>
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `mediaUserErrors` instead.
   */
  userErrors: Array<ShopifyUserError>
}

/**
 * An entity that represents details of an asynchronous
 * [ProductDelete](https://shopify.dev/api/admin-graphql/current/mutations/productDelete) mutation.
 *
 * By querying this entity with the
 * [productOperation](https://shopify.dev/api/admin-graphql/current/queries/productOperation) query
 * using the ID that was returned when the product was deleted, this can be used to check the status of an operation.
 *
 * The `status` field indicates whether the operation is `CREATED`, `ACTIVE`, or `COMPLETE`.
 *
 * The `deletedProductId` field provides the ID of the deleted product.
 *
 * The `userErrors` field provides mutation errors that occurred during the operation.
 */
export interface ShopifyProductDeleteOperation
  extends ShopifyNode,
    ShopifyProductOperation {
  __typename?: "ProductDeleteOperation"
  /** The ID of the deleted product. */
  deletedProductId?: Maybe<Scalars["ID"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The product on which the operation is being performed. */
  product?: Maybe<ShopifyProduct>
  /** The status of this operation. */
  status: ShopifyProductOperationStatus
  /** Returns mutation errors occurred during background mutation processing. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `productDelete` mutation. */
export interface ShopifyProductDeletePayload {
  __typename?: "ProductDeletePayload"
  /** The ID of the deleted product. */
  deletedProductId?: Maybe<Scalars["ID"]["output"]>
  /** The product delete operation, returned when run in asynchronous mode. */
  productDeleteOperation?: Maybe<ShopifyProductDeleteOperation>
  /** The shop associated with the product. */
  shop: ShopifyShop
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Represents a product duplication job. */
export interface ShopifyProductDuplicateJob {
  __typename?: "ProductDuplicateJob"
  /** This indicates if the job is still queued or has been run. */
  done: Scalars["Boolean"]["output"]
  /** A globally-unique ID that's returned when running an asynchronous mutation. */
  id: Scalars["ID"]["output"]
}

/**
 * An entity that represents details of an asynchronous
 * [ProductDuplicate](https://shopify.dev/api/admin-graphql/current/mutations/productDuplicate) mutation.
 *
 * By querying this entity with the
 * [productOperation](https://shopify.dev/api/admin-graphql/current/queries/productOperation) query
 * using the ID that was returned
 * [when the product was duplicated](https://shopify.dev/api/admin/migrate/new-product-model/sync-data#create-a-product-with-variants-and-options-asynchronously),
 * this can be used to check the status of an operation.
 *
 * The `status` field indicates whether the operation is `CREATED`, `ACTIVE`, or `COMPLETE`.
 *
 * The `product` field provides the details of the original product.
 *
 * The `newProduct` field provides the details of the new duplicate of the product.
 *
 * The `userErrors` field provides mutation errors that occurred during the operation.
 */
export interface ShopifyProductDuplicateOperation
  extends ShopifyNode,
    ShopifyProductOperation {
  __typename?: "ProductDuplicateOperation"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The newly created duplicate of the original product. */
  newProduct?: Maybe<ShopifyProduct>
  /** The product on which the operation is being performed. */
  product?: Maybe<ShopifyProduct>
  /** The status of this operation. */
  status: ShopifyProductOperationStatus
  /** Returns mutation errors occurred during background mutation processing. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `productDuplicate` mutation. */
export interface ShopifyProductDuplicatePayload {
  __typename?: "ProductDuplicatePayload"
  /** The asynchronous job that duplicates the product images. */
  imageJob?: Maybe<ShopifyJob>
  /** The duplicated product. */
  newProduct?: Maybe<ShopifyProduct>
  /** The product duplicate operation, returned when run in asynchronous mode. */
  productDuplicateOperation?: Maybe<ShopifyProductDuplicateOperation>
  /** The user's shop. */
  shop: ShopifyShop
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type which holds one Product and a cursor during pagination. */
export interface ShopifyProductEdge {
  __typename?: "ProductEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ProductEdge. */
  node: ShopifyProduct
}

/** A product feed. */
export interface ShopifyProductFeed extends ShopifyNode {
  __typename?: "ProductFeed"
  /** The country of the product feed. */
  country?: Maybe<ShopifyCountryCode>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The language of the product feed. */
  language?: Maybe<ShopifyLanguageCode>
  /** The status of the product feed. */
  status: ShopifyProductFeedStatus
}

/** An auto-generated type for paginating through multiple ProductFeeds. */
export interface ShopifyProductFeedConnection {
  __typename?: "ProductFeedConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyProductFeedEdge>
  /** A list of nodes that are contained in ProductFeedEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyProductFeed>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `productFeedCreate` mutation. */
export interface ShopifyProductFeedCreatePayload {
  __typename?: "ProductFeedCreatePayload"
  /** The newly created product feed. */
  productFeed?: Maybe<ShopifyProductFeed>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyProductFeedCreateUserError>
}

/** An error that occurs during the execution of `ProductFeedCreate`. */
export interface ShopifyProductFeedCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "ProductFeedCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyProductFeedCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ProductFeedCreateUserError`. */
export type ShopifyProductFeedCreateUserErrorCode =
  /** The input value is invalid. */
  | "INVALID"
  /** The input value is already taken. */
  | "TAKEN"
  | "%future added value"

/** Return type for `productFeedDelete` mutation. */
export interface ShopifyProductFeedDeletePayload {
  __typename?: "ProductFeedDeletePayload"
  /** The ID of the product feed that was deleted. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyProductFeedDeleteUserError>
}

/** An error that occurs during the execution of `ProductFeedDelete`. */
export interface ShopifyProductFeedDeleteUserError
  extends ShopifyDisplayableError {
  __typename?: "ProductFeedDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyProductFeedDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ProductFeedDeleteUserError`. */
export type ShopifyProductFeedDeleteUserErrorCode =
  /** The input value is invalid. */
  "INVALID" | "%future added value"

/** An auto-generated type which holds one ProductFeed and a cursor during pagination. */
export interface ShopifyProductFeedEdge {
  __typename?: "ProductFeedEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ProductFeedEdge. */
  node: ShopifyProductFeed
}

/** The input fields required to create a product feed. */
export interface ShopifyProductFeedInput {
  /** The country of the product feed. */
  country: ShopifyCountryCode
  /** The language of the product feed. */
  language: ShopifyLanguageCode
}

/** The valid values for the status of product feed. */
export type ShopifyProductFeedStatus =
  /** The product feed is active. */
  | "ACTIVE"
  /** The product feed is inactive. */
  | "INACTIVE"
  | "%future added value"

/** Return type for `productFullSync` mutation. */
export interface ShopifyProductFullSyncPayload {
  __typename?: "ProductFullSyncPayload"
  /** The ID for the full sync operation. */
  id?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyProductFullSyncUserError>
}

/** An error that occurs during the execution of `ProductFullSync`. */
export interface ShopifyProductFullSyncUserError
  extends ShopifyDisplayableError {
  __typename?: "ProductFullSyncUserError"
  /** The error code. */
  code?: Maybe<ShopifyProductFullSyncUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ProductFullSyncUserError`. */
export type ShopifyProductFullSyncUserErrorCode =
  /** The input value is invalid. */
  "INVALID" | "%future added value"

/** The input fields for identifying a product. */
export interface ShopifyProductIdentifierInput {
  /** The [custom ID](https://shopify.dev/docs/apps/build/custom-data/metafields/working-with-custom-ids) of the product. */
  customId?: InputMaybe<ShopifyUniqueMetafieldValueInput>
  /** The handle of the product. */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of the product. */
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** The set of valid sort keys for the ProductImage query. */
export type ShopifyProductImageSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `position` value. */
  | "POSITION"
  | "%future added value"

/** The input fields for creating or updating a product. */
export interface ShopifyProductInput {
  /**
   * The ID of the [category](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17)
   * that's associated with the product.
   */
  category?: InputMaybe<Scalars["ID"]["input"]>
  /**
   * The input field to enable an app to provide additional product features.
   * For example, you can specify
   * [`bundles: true`](https://shopify.dev/docs/api/admin-graphql/latest/input-objects/ProductClaimOwnershipInput#field-bundles)
   * in the `claimOwnership` field to let an app add a
   * [product configuration extension](https://shopify.dev/docs/apps/build/product-merchandising/bundles/product-configuration-extension/add-merchant-config-ui).
   */
  claimOwnership?: InputMaybe<ShopifyProductClaimOwnershipInput>
  /** A list of collection IDs to associate with the product. */
  collectionsToJoin?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The collection IDs to disassociate from the product. */
  collectionsToLeave?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /**
   * The role of the product in a [combined listing](https://shopify.dev/apps/build/product-merchandising/combined-listings).
   * You can specify this field only when you create a product.
   */
  combinedListingRole?: InputMaybe<ShopifyCombinedListingsRole>
  /**
   * The description of the product, with HTML tags.
   * For example, the description might include bold `<strong></strong>` and italic `<i></i>` text.
   */
  descriptionHtml?: InputMaybe<Scalars["String"]["input"]>
  /** Whether the product is a gift card. */
  giftCard?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The [theme template](https://shopify.dev/docs/storefronts/themes/architecture/templates) that's used when customers view a gift card in a store. */
  giftCardTemplateSuffix?: InputMaybe<Scalars["String"]["input"]>
  /**
   * A unique, human-readable string that's used to identify the product in URLs. A handle can contain letters, hyphens (`-`), and numbers, but no spaces.
   * If no handle is explicitly provided, then the title is used to construct the product's handle.
   * For example, if a product is titled "Black Sunglasses" and no handle is provided, then the handle `black-sunglasses` is generated (unless that handle
   * is already taken, in which case a suffix is added to make the handle unique).
   */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The product's ID.
   *
   * If you're creating a product, then you don't need to pass the `id` as input to the
   * [`productCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productCreate) mutation.
   * If you're updating a product, then you do need to pass the `id` as input to the
   * [`productUpdate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productUpdate) mutation
   * to identify which product you want to update.
   */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /**
   * The [custom fields](https://shopify.dev/docs/apps/build/custom-data) to associate with the product
   * for the purposes of adding and storing additional information.
   */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /**
   * A list of product options and option values. Maximum product options: three. There's no limit on the number of option values.
   * This input is supported only with the [`productCreate`](https://shopify.dev/docs/api/admin-graphql/latest/mutations/productCreate)
   * mutation.
   */
  productOptions?: InputMaybe<Array<ShopifyOptionCreateInput>>
  /**
   * The [product type](https://help.shopify.com/manual/products/details/product-type)
   * that merchants define.
   */
  productType?: InputMaybe<Scalars["String"]["input"]>
  /**
   * Whether a redirect is required after a new handle has been provided.
   * If `true`, then the old handle is redirected to the new one automatically.
   */
  redirectNewHandle?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * Whether the product can only be purchased with
   * a [selling plan](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans).
   * Products that are sold on subscription (`requiresSellingPlan: true`) can be updated only for online stores.
   * If you update a product to be subscription-only (`requiresSellingPlan:false`), then the product is unpublished from all channels except the online store.
   */
  requiresSellingPlan?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * The [SEO title and description](https://help.shopify.com/manual/promoting-marketing/seo/adding-keywords)
   * that are associated with a product.
   */
  seo?: InputMaybe<ShopifySeoInput>
  /**
   * The [product status](https://help.shopify.com/manual/products/details/product-details-page#product-status),
   * which controls visibility across all sales channels.
   */
  status?: InputMaybe<ShopifyProductStatus>
  /**
   * A list of searchable keywords that are
   * associated with the product. For example, a merchant might apply the `sports`
   * and `summer` tags to products that are associated with sportwear for summer.
   *
   * Updating `tags` overwrites any existing tags that were previously added to the product.
   * To add new tags without overwriting existing tags, use the
   * [`tagsAdd`](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The [theme template](https://shopify.dev/docs/storefronts/themes/architecture/templates) that's used when customers view a product in a store. */
  templateSuffix?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The name for the product that displays to customers. If no handle is explicitly provided, then the title is used to construct the product's handle.
   * For example, if a product is titled "Black Sunglasses" and no handle is provided, then the handle `black-sunglasses` is generated.
   */
  title?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the product's vendor. */
  vendor?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `productJoinSellingPlanGroups` mutation. */
export interface ShopifyProductJoinSellingPlanGroupsPayload {
  __typename?: "ProductJoinSellingPlanGroupsPayload"
  /** The product object. */
  product?: Maybe<ShopifyProduct>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySellingPlanGroupUserError>
}

/** Return type for `productLeaveSellingPlanGroups` mutation. */
export interface ShopifyProductLeaveSellingPlanGroupsPayload {
  __typename?: "ProductLeaveSellingPlanGroupsPayload"
  /** The product object. */
  product?: Maybe<ShopifyProduct>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySellingPlanGroupUserError>
}

/** The set of valid sort keys for the ProductMedia query. */
export type ShopifyProductMediaSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `position` value. */
  | "POSITION"
  | "%future added value"

/** An entity that represents details of an asynchronous operation on a product. */
export interface ShopifyProductOperation {
  /** The product on which the operation is being performed. */
  product?: Maybe<ShopifyProduct>
  /** The status of this operation. */
  status: ShopifyProductOperationStatus
}

/** Represents the state of this product operation. */
export type ShopifyProductOperationStatus =
  /** Operation is currently running. */
  | "ACTIVE"
  /** Operation is complete. */
  | "COMPLETE"
  /** Operation has been created. */
  | "CREATED"
  | "%future added value"

/**
 * The product property names. For example, "Size", "Color", and "Material".
 * Variants are selected based on permutations of these options.
 * The limit for each product property name is 255 characters.
 */
export interface ShopifyProductOption
  extends ShopifyHasPublishedTranslations,
    ShopifyNode {
  __typename?: "ProductOption"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The metafield identifier linked to this option. */
  linkedMetafield?: Maybe<ShopifyLinkedMetafield>
  /** The product option’s name. */
  name: Scalars["String"]["output"]
  /** Similar to values, option_values returns all the corresponding option value objects to the product option, including values not assigned to any variants. */
  optionValues: Array<ShopifyProductOptionValue>
  /** The product option's position. */
  position: Scalars["Int"]["output"]
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
  /** The corresponding value to the product option name. */
  values: Array<Scalars["String"]["output"]>
}

/**
 * The product property names. For example, "Size", "Color", and "Material".
 * Variants are selected based on permutations of these options.
 * The limit for each product property name is 255 characters.
 */
export interface ShopifyProductOptionTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The set of variant strategies available for use in the `productOptionsCreate` mutation. */
export type ShopifyProductOptionCreateVariantStrategy =
  /**
   * Existing variants are updated with the first option value of each added option. New variants are
   * created for each combination of existing variant option values and new option values.
   */
  | "CREATE"
  /**
   * No additional variants are created in response to the added options. Existing variants are updated with the
   * first option value of each option added.
   */
  | "LEAVE_AS_IS"
  | "%future added value"

/** The set of strategies available for use on the `productOptionDelete` mutation. */
export type ShopifyProductOptionDeleteStrategy =
  /** The default strategy, the specified `Option` may only have one corresponding `value`. */
  | "DEFAULT"
  /** An `Option` with multiple `values` can be deleted, but the operation only succeeds if no product variants get deleted. */
  | "NON_DESTRUCTIVE"
  /** An `Option` with multiple `values` can be deleted. Remaining variants will be deleted, highest `position` first, in the event of duplicates being detected. */
  | "POSITION"
  | "%future added value"

/** Return type for `productOptionUpdate` mutation. */
export interface ShopifyProductOptionUpdatePayload {
  __typename?: "ProductOptionUpdatePayload"
  /** The product with which the option being updated is associated. */
  product?: Maybe<ShopifyProduct>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyProductOptionUpdateUserError>
}

/** Error codes for failed `ProductOptionUpdate` mutation. */
export interface ShopifyProductOptionUpdateUserError
  extends ShopifyDisplayableError {
  __typename?: "ProductOptionUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyProductOptionUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ProductOptionUpdateUserError`. */
export type ShopifyProductOptionUpdateUserErrorCode =
  /** An option cannot have both metafield linked and nonlinked option values. */
  | "CANNOT_COMBINE_LINKED_AND_NONLINKED_OPTION_VALUES"
  /** The number of variants will be above the limit after this operation. */
  | "CANNOT_CREATE_VARIANTS_ABOVE_LIMIT"
  /** Deleting all option values of an option is not allowed. */
  | "CANNOT_DELETE_ALL_OPTION_VALUES_IN_OPTION"
  /** Cannot update the option because it would result in deleting variants, and you don't have the required permissions. */
  | "CANNOT_DELETE_VARIANT_WITHOUT_PERMISSION"
  /** An option cannot be left only with option values that are not linked to any variant. */
  | "CANNOT_LEAVE_OPTIONS_WITHOUT_VARIANTS"
  /** At least one of the product variants has invalid SKUs. */
  | "CANNOT_MAKE_CHANGES_IF_VARIANT_IS_MISSING_REQUIRED_SKU"
  /** Duplicated option value. */
  | "DUPLICATED_OPTION_VALUE"
  /** Cannot link multiple options to the same metafield. */
  | "DUPLICATE_LINKED_OPTION"
  /** Invalid metafield value for linked option. */
  | "INVALID_METAFIELD_VALUE_FOR_LINKED_OPTION"
  /** The name provided is not valid. */
  | "INVALID_NAME"
  /** The option position provided is not valid. */
  | "INVALID_POSITION"
  /** A key is missing in the input. */
  | "KEY_MISSING_IN_INPUT"
  /** No valid metafield definition found for linked option. */
  | "LINKED_METAFIELD_DEFINITION_NOT_FOUND"
  /** Linked options are currently not supported for this shop. */
  | "LINKED_OPTIONS_NOT_SUPPORTED_FOR_SHOP"
  /** Updating the linked_metafield of an option requires a linked_metafield_value for each option value. */
  | "LINKED_OPTION_UPDATE_MISSING_VALUES"
  /** On create, this key cannot be used. */
  | "NO_KEY_ON_CREATE"
  /** Option already exists. */
  | "OPTION_ALREADY_EXISTS"
  /** Option does not exist. */
  | "OPTION_DOES_NOT_EXIST"
  /** An option linked to the provided metafield already exists. */
  | "OPTION_LINKED_METAFIELD_ALREADY_TAKEN"
  /** Option name is too long. */
  | "OPTION_NAME_TOO_LONG"
  /** Option values count is over the allowed limit. */
  | "OPTION_VALUES_OVER_LIMIT"
  /** Option value already exists. */
  | "OPTION_VALUE_ALREADY_EXISTS"
  /** Performing conflicting actions on an option value. */
  | "OPTION_VALUE_CONFLICTING_OPERATION"
  /** Option value does not exist. */
  | "OPTION_VALUE_DOES_NOT_EXIST"
  /** Option value with variants linked cannot be deleted. */
  | "OPTION_VALUE_HAS_VARIANTS"
  /** Option value name is too long. */
  | "OPTION_VALUE_NAME_TOO_LONG"
  /** Product does not exist. */
  | "PRODUCT_DOES_NOT_EXIST"
  /** Product is suspended. */
  | "PRODUCT_SUSPENDED"
  /** The number of option values created with the MANAGE strategy would exceed the variant limit. */
  | "TOO_MANY_VARIANTS_CREATED"
  /** Operation is not supported for a combined listing parent product. */
  | "UNSUPPORTED_COMBINED_LISTING_PARENT_OPERATION"
  | "%future added value"

/** The set of variant strategies available for use in the `productOptionUpdate` mutation. */
export type ShopifyProductOptionUpdateVariantStrategy =
  /**
   * Variants are not created nor deleted in response to option values to add or delete.
   * In cases where deleting a variant would be necessary to complete the operation, an error will be returned.
   */
  | "LEAVE_AS_IS"
  /**
   * Variants are created and deleted according to the option values to add and to delete.
   *
   * If an option value is added, a new variant will be added for each existing option combination
   * available on the product. For example, if the existing options are `Size` and `Color`, with
   * values `S`/`XL` and `Red`/`Blue`, adding a new option value `Green` for the option `Color` will create
   * variants with the option value combinations `S`/`Green` and `XL`/`Green`.
   *
   * If an option value is deleted, all variants referencing that option value will be deleted.
   */
  | "MANAGE"
  | "%future added value"

/** The product option value names. For example, "Red", "Blue", and "Green" for a "Color" option. */
export interface ShopifyProductOptionValue
  extends ShopifyHasPublishedTranslations,
    ShopifyNode {
  __typename?: "ProductOptionValue"
  /** Whether the product option value has any linked variants. */
  hasVariants: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The value of the linked metafield. */
  linkedMetafieldValue?: Maybe<Scalars["String"]["output"]>
  /** The name of the product option value. */
  name: Scalars["String"]["output"]
  /** The swatch associated with the product option value. */
  swatch?: Maybe<ShopifyProductOptionValueSwatch>
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
}

/** The product option value names. For example, "Red", "Blue", and "Green" for a "Color" option. */
export interface ShopifyProductOptionValueTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/** A swatch associated with a product option value. */
export interface ShopifyProductOptionValueSwatch {
  __typename?: "ProductOptionValueSwatch"
  /** The color representation of the swatch. */
  color?: Maybe<Scalars["Color"]["output"]>
  /** An image representation of the swatch. */
  image?: Maybe<ShopifyMediaImage>
}

/** Return type for `productOptionsCreate` mutation. */
export interface ShopifyProductOptionsCreatePayload {
  __typename?: "ProductOptionsCreatePayload"
  /** The updated product object. */
  product?: Maybe<ShopifyProduct>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyProductOptionsCreateUserError>
}

/** Error codes for failed `ProductOptionsCreate` mutation. */
export interface ShopifyProductOptionsCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "ProductOptionsCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyProductOptionsCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ProductOptionsCreateUserError`. */
export type ShopifyProductOptionsCreateUserErrorCode =
  /** Cannot combine linked metafield and option values. */
  | "CANNOT_COMBINE_LINKED_METAFIELD_AND_OPTION_VALUES"
  /** At least one of the product variants has invalid SKUs. */
  | "CANNOT_MAKE_CHANGES_IF_VARIANT_IS_MISSING_REQUIRED_SKU"
  /** Duplicated option name. */
  | "DUPLICATED_OPTION_NAME"
  /** Duplicated option value. */
  | "DUPLICATED_OPTION_VALUE"
  /** Cannot link multiple options to the same metafield. */
  | "DUPLICATE_LINKED_OPTION"
  /** Invalid metafield value for linked option. */
  | "INVALID_METAFIELD_VALUE_FOR_LINKED_OPTION"
  /** The name provided is not valid. */
  | "INVALID_NAME"
  /** No valid metafield definition found for linked option. */
  | "LINKED_METAFIELD_DEFINITION_NOT_FOUND"
  /** Cannot specify 'linkedMetafieldValue' for an option that is not linked to a metafield. */
  | "LINKED_METAFIELD_VALUE_WITHOUT_LINKED_OPTION"
  /** Linked options are currently not supported for this shop. */
  | "LINKED_OPTIONS_NOT_SUPPORTED_FOR_SHOP"
  /** Missing metafield values for linked option. */
  | "MISSING_METAFIELD_VALUES_FOR_LINKED_OPTION"
  /** Cannot create new options without values for all existing variants. */
  | "NEW_OPTION_WITHOUT_VALUE_FOR_EXISTING_VARIANTS"
  /** Options count is over the allowed limit. */
  | "OPTIONS_OVER_LIMIT"
  /** Option already exists. */
  | "OPTION_ALREADY_EXISTS"
  /** An option linked to the provided metafield already exists. */
  | "OPTION_LINKED_METAFIELD_ALREADY_TAKEN"
  /** Each option must have a name specified. */
  | "OPTION_NAME_MISSING"
  /** Option name is too long. */
  | "OPTION_NAME_TOO_LONG"
  /** If specified, position field must be present in all option inputs. */
  | "OPTION_POSITION_MISSING"
  /** Each option must have at least one option value specified. */
  | "OPTION_VALUES_MISSING"
  /** Option values count is over the allowed limit. */
  | "OPTION_VALUES_OVER_LIMIT"
  /** Option value name is too long. */
  | "OPTION_VALUE_NAME_TOO_LONG"
  /** Position must be between 1 and the maximum number of options per product. */
  | "POSITION_OUT_OF_BOUNDS"
  /** Product does not exist. */
  | "PRODUCT_DOES_NOT_EXIST"
  /** Product is suspended. */
  | "PRODUCT_SUSPENDED"
  /** The number of option values created with the CREATE strategy would exceed the variant limit. */
  | "TOO_MANY_VARIANTS_CREATED"
  /** Operation is not supported for a combined listing parent product. */
  | "UNSUPPORTED_COMBINED_LISTING_PARENT_OPERATION"
  | "%future added value"

/** Return type for `productOptionsDelete` mutation. */
export interface ShopifyProductOptionsDeletePayload {
  __typename?: "ProductOptionsDeletePayload"
  /** IDs of the options deleted. */
  deletedOptionsIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** The updated product object. */
  product?: Maybe<ShopifyProduct>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyProductOptionsDeleteUserError>
}

/** Error codes for failed `ProductOptionsDelete` mutation. */
export interface ShopifyProductOptionsDeleteUserError
  extends ShopifyDisplayableError {
  __typename?: "ProductOptionsDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyProductOptionsDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ProductOptionsDeleteUserError`. */
export type ShopifyProductOptionsDeleteUserErrorCode =
  /** Can't delete option with multiple values. */
  | "CANNOT_DELETE_OPTION_WITH_MULTIPLE_VALUES"
  /** Cannot perform option deletion because it would result in deleting variants, and you don't have the required permissions. */
  | "CANNOT_DELETE_VARIANT_WITHOUT_PERMISSION"
  /** At least one of the product variants has invalid SKUs. */
  | "CANNOT_MAKE_CHANGES_IF_VARIANT_IS_MISSING_REQUIRED_SKU"
  /** Cannot delete options without deleting variants. */
  | "CANNOT_USE_NON_DESTRUCTIVE_STRATEGY"
  /** Options do not belong to the same product. */
  | "OPTIONS_DO_NOT_BELONG_TO_THE_SAME_PRODUCT"
  /** Option does not exist. */
  | "OPTION_DOES_NOT_EXIST"
  /** Product does not exist. */
  | "PRODUCT_DOES_NOT_EXIST"
  /** Product is suspended. */
  | "PRODUCT_SUSPENDED"
  /** Operation is not supported for a combined listing parent product. */
  | "UNSUPPORTED_COMBINED_LISTING_PARENT_OPERATION"
  | "%future added value"

/** Return type for `productOptionsReorder` mutation. */
export interface ShopifyProductOptionsReorderPayload {
  __typename?: "ProductOptionsReorderPayload"
  /** The updated product object. */
  product?: Maybe<ShopifyProduct>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyProductOptionsReorderUserError>
}

/** Error codes for failed `ProductOptionsReorder` mutation. */
export interface ShopifyProductOptionsReorderUserError
  extends ShopifyDisplayableError {
  __typename?: "ProductOptionsReorderUserError"
  /** The error code. */
  code?: Maybe<ShopifyProductOptionsReorderUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ProductOptionsReorderUserError`. */
export type ShopifyProductOptionsReorderUserErrorCode =
  /** At least one of the product variants has invalid SKUs. */
  | "CANNOT_MAKE_CHANGES_IF_VARIANT_IS_MISSING_REQUIRED_SKU"
  /** Duplicated option name. */
  | "DUPLICATED_OPTION_NAME"
  /** Duplicated option value. */
  | "DUPLICATED_OPTION_VALUE"
  /** Missing option name. */
  | "MISSING_OPTION_NAME"
  /** Missing option value. */
  | "MISSING_OPTION_VALUE"
  /** Cannot specify different options or option values using mixed id and name reference key. */
  | "MIXING_ID_AND_NAME_KEYS_IS_NOT_ALLOWED"
  /** On reorder, this key cannot be used. */
  | "NO_KEY_ON_REORDER"
  /** Option id does not exist. */
  | "OPTION_ID_DOES_NOT_EXIST"
  /** Option name does not exist. */
  | "OPTION_NAME_DOES_NOT_EXIST"
  /** Option value does not exist. */
  | "OPTION_VALUE_DOES_NOT_EXIST"
  /** Option value id does not exist. */
  | "OPTION_VALUE_ID_DOES_NOT_EXIST"
  /** Product does not exist. */
  | "PRODUCT_DOES_NOT_EXIST"
  /** Product is suspended. */
  | "PRODUCT_SUSPENDED"
  | "%future added value"

/** The price range of the product. */
export interface ShopifyProductPriceRange {
  __typename?: "ProductPriceRange"
  /** The highest variant's price. */
  maxVariantPrice: ShopifyMoneyV2
  /** The lowest variant's price. */
  minVariantPrice: ShopifyMoneyV2
}

/** The price range of the product. */
export interface ShopifyProductPriceRangeV2 {
  __typename?: "ProductPriceRangeV2"
  /** The highest variant's price. */
  maxVariantPrice: ShopifyMoneyV2
  /** The lowest variant's price. */
  minVariantPrice: ShopifyMoneyV2
}

/** Represents the channels where a product is published. */
export interface ShopifyProductPublication {
  __typename?: "ProductPublication"
  /** The channel where the product was or is published. */
  channel: ShopifyChannel
  /** Whether the publication is published or not. */
  isPublished: Scalars["Boolean"]["output"]
  /** The product that was or is going to be published on the channel. */
  product: ShopifyProduct
  /** The date that the product was or is going to be published on the channel. */
  publishDate?: Maybe<Scalars["DateTime"]["output"]>
}

/** An auto-generated type for paginating through multiple ProductPublications. */
export interface ShopifyProductPublicationConnection {
  __typename?: "ProductPublicationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyProductPublicationEdge>
  /** A list of nodes that are contained in ProductPublicationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyProductPublication>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ProductPublication and a cursor during pagination. */
export interface ShopifyProductPublicationEdge {
  __typename?: "ProductPublicationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ProductPublicationEdge. */
  node: ShopifyProductPublication
}

/** The input fields for specifying a publication to which a product will be published. */
export interface ShopifyProductPublicationInput {
  /** ID of the publication. */
  publicationId?: InputMaybe<Scalars["ID"]["input"]>
  /** The date and time that the product was (or will be) published. */
  publishDate?: InputMaybe<Scalars["DateTime"]["input"]>
}

/** The input fields for specifying a product to publish and the channels to publish it to. */
export interface ShopifyProductPublishInput {
  /** The product to create or update publications for. */
  id: Scalars["ID"]["input"]
  /** The publication that the product is published to. */
  productPublications: Array<ShopifyProductPublicationInput>
}

/** Return type for `productPublish` mutation. */
export interface ShopifyProductPublishPayload {
  __typename?: "ProductPublishPayload"
  /** The product that has been published. */
  product?: Maybe<ShopifyProduct>
  /**
   * The channels where the product is published.
   * @deprecated Use Product.publications instead.
   */
  productPublications?: Maybe<Array<ShopifyProductPublication>>
  /** The user's shop. */
  shop: ShopifyShop
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `productReorderMedia` mutation. */
export interface ShopifyProductReorderMediaPayload {
  __typename?: "ProductReorderMediaPayload"
  /** The asynchronous job which reorders the media. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  mediaUserErrors: Array<ShopifyMediaUserError>
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `mediaUserErrors` instead.
   */
  userErrors: Array<ShopifyUserError>
}

/**
 * Reports the status of product for a Sales Channel or Storefront API.
 * This might include why a product is not available in a Sales Channel
 * and how a merchant might fix this.
 */
export interface ShopifyProductResourceFeedback {
  __typename?: "ProductResourceFeedback"
  /**
   * The time when the feedback was generated. Used to help determine whether
   * incoming feedback is outdated compared to existing feedback.
   */
  feedbackGeneratedAt: Scalars["DateTime"]["output"]
  /** The feedback messages presented to the merchant. */
  messages: Array<Scalars["String"]["output"]>
  /** The ID of the product associated with the feedback. */
  productId: Scalars["ID"]["output"]
  /** The timestamp of the product associated with the feedback. */
  productUpdatedAt: Scalars["DateTime"]["output"]
  /** Conveys the state of the feedback and whether it requires merchant action or not. */
  state: ShopifyResourceFeedbackState
}

/** The input fields used to create a product feedback. */
export interface ShopifyProductResourceFeedbackInput {
  /**
   * The date and time when the payload is constructed.
   * Used to help determine whether incoming feedback is outdated compared to feedback already received, and if it should be ignored upon arrival.
   */
  feedbackGeneratedAt: Scalars["DateTime"]["input"]
  /**
   * A concise set of copy strings to be displayed to merchants. Used to guide merchants in resolving problems that your app encounters when trying to make use of their products.
   * You can specify up to ten messages. Each message is limited to 100 characters.
   */
  messages?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The ID of the product that the feedback was created on. */
  productId: Scalars["ID"]["input"]
  /** The timestamp of the product associated with the feedback. */
  productUpdatedAt: Scalars["DateTime"]["input"]
  /** Whether the merchant needs to take action on the product. */
  state: ShopifyResourceFeedbackState
}

/** A sale associated with a product. */
export interface ShopifyProductSale extends ShopifySale {
  __typename?: "ProductSale"
  /** The type of order action that the sale represents. */
  actionType: ShopifySaleActionType
  /** The unique ID for the sale. */
  id: Scalars["ID"]["output"]
  /** The line item for the associated sale. */
  lineItem: ShopifyLineItem
  /** The line type assocated with the sale. */
  lineType: ShopifySaleLineType
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars["Int"]["output"]>
  /** All individual taxes associated with the sale. */
  taxes: Array<ShopifySaleTax>
  /** The total sale amount after taxes and discounts. */
  totalAmount: ShopifyMoneyBag
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: ShopifyMoneyBag
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: ShopifyMoneyBag
  /** The total amount of taxes for the sale. */
  totalTaxAmount: ShopifyMoneyBag
}

/** The input fields required to identify a resource. */
export interface ShopifyProductSetIdentifiers {
  /** Custom ID of product to upsert. */
  customId?: InputMaybe<ShopifyUniqueMetafieldValueInput>
  /** Handle of product to upsert. */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** ID of product to update. */
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** The input fields required to create or update a product via ProductSet mutation. */
export interface ShopifyProductSetInput {
  /**
   * The ID of the [category](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17)
   * that's associated with the product.
   */
  category?: InputMaybe<Scalars["ID"]["input"]>
  /**
   * The input field to enable an app to provide additional product features.
   * For example, you can specify
   * [`bundles: true`](https://shopify.dev/docs/api/admin-graphql/latest/input-objects/ProductClaimOwnershipInput#field-bundles)
   * in the `claimOwnership` field to let an app add a
   * [product configuration extension](https://shopify.dev/docs/apps/build/product-merchandising/bundles/product-configuration-extension/add-merchant-config-ui).
   */
  claimOwnership?: InputMaybe<ShopifyProductClaimOwnershipInput>
  /** The IDs of collections that this product will be a member of. */
  collections?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The role of the product in a product grouping. It can only be set during creation. */
  combinedListingRole?: InputMaybe<ShopifyCombinedListingsRole>
  /**
   * The description of the product, with HTML tags.
   * For example, the description might include bold `<strong></strong>` and italic `<i></i>` text.
   */
  descriptionHtml?: InputMaybe<Scalars["String"]["input"]>
  /** The files to associate with the product. */
  files?: InputMaybe<Array<ShopifyFileSetInput>>
  /** Whether the product is a gift card. */
  giftCard?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The [theme template](https://shopify.dev/docs/storefronts/themes/architecture/templates) that's used when customers view a gift card in a store. */
  giftCardTemplateSuffix?: InputMaybe<Scalars["String"]["input"]>
  /**
   * A unique, human-readable string that's used to identify the product in URLs. A handle can contain letters, hyphens (`-`), and numbers, but no spaces.
   * If no handle is explicitly provided, then the title is used to construct the product's handle.
   * For example, if a product is titled "Black Sunglasses" and no handle is provided, then the handle `black-sunglasses` is generated (unless that handle
   * is already taken, in which case a suffix is added to make the handle unique).
   */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** The metafields to associate with this product. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** List of custom product options and option values (maximum of 3 per product). */
  productOptions?: InputMaybe<Array<ShopifyOptionSetInput>>
  /**
   * The [product type](https://help.shopify.com/manual/products/details/product-type)
   * that merchants define.
   */
  productType?: InputMaybe<Scalars["String"]["input"]>
  /**
   * Whether a redirect is required after a new handle has been provided.
   * If `true`, then the old handle is redirected to the new one automatically.
   */
  redirectNewHandle?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether the product can only be purchased with a selling plan (subscription). Products that are sold exclusively on subscription can only be created on online stores. If set to `true` on an already existing product, then the product will be marked unavailable on channels that don't support subscriptions. */
  requiresSellingPlan?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * The [SEO title and description](https://help.shopify.com/manual/promoting-marketing/seo/adding-keywords)
   * that are associated with a product.
   */
  seo?: InputMaybe<ShopifySeoInput>
  /** The status of the product. */
  status?: InputMaybe<ShopifyProductStatus>
  /**
   * A list of searchable keywords that are
   * associated with the product. For example, a merchant might apply the `sports`
   * and `summer` tags to products that are associated with sportwear for summer.
   *
   * Updating `tags` overwrites any existing tags that were previously added to the product.
   * To add new tags without overwriting existing tags, use the
   * [`tagsAdd`](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The [theme template](https://shopify.dev/docs/storefronts/themes/architecture/templates) that's used when customers view a product in a store. */
  templateSuffix?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The name for the product that displays to customers. If no handle is explicitly provided, then the title is used to construct the product's handle.
   * For example, if a product is titled "Black Sunglasses" and no handle is provided, then the handle `black-sunglasses` is generated.
   */
  title?: InputMaybe<Scalars["String"]["input"]>
  /** A list of variants associated with the product. */
  variants?: InputMaybe<Array<ShopifyProductVariantSetInput>>
  /** The name of the product's vendor. */
  vendor?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields required to set inventory quantities using `productSet` mutation. */
export interface ShopifyProductSetInventoryInput {
  /** The ID of the location of the inventory quantity being set. */
  locationId: Scalars["ID"]["input"]
  /** The name of the inventory quantity being set. Must be one of `available` or `on_hand`. */
  name: Scalars["String"]["input"]
  /** The values to which each quantities will be set. */
  quantity: Scalars["Int"]["input"]
}

/**
 * An entity that represents details of an asynchronous
 * [ProductSet](https://shopify.dev/api/admin-graphql/current/mutations/productSet) mutation.
 *
 * By querying this entity with the
 * [productOperation](https://shopify.dev/api/admin-graphql/current/queries/productOperation) query
 * using the ID that was returned
 * [when the product was created or updated](https://shopify.dev/api/admin/migrate/new-product-model/sync-data#create-a-product-with-variants-and-options-asynchronously),
 * this can be used to check the status of an operation.
 *
 * The `status` field indicates whether the operation is `CREATED`, `ACTIVE`, or `COMPLETE`.
 *
 * The `product` field provides the details of the created or updated product.
 *
 * The `userErrors` field provides mutation errors that occurred during the operation.
 */
export interface ShopifyProductSetOperation
  extends ShopifyNode,
    ShopifyProductOperation {
  __typename?: "ProductSetOperation"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The product on which the operation is being performed. */
  product?: Maybe<ShopifyProduct>
  /** The status of this operation. */
  status: ShopifyProductOperationStatus
  /** Returns mutation errors occurred during background mutation processing. */
  userErrors: Array<ShopifyProductSetUserError>
}

/** Return type for `productSet` mutation. */
export interface ShopifyProductSetPayload {
  __typename?: "ProductSetPayload"
  /** The product object. */
  product?: Maybe<ShopifyProduct>
  /** The product set operation, returned when run in asynchronous mode. */
  productSetOperation?: Maybe<ShopifyProductSetOperation>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyProductSetUserError>
}

/** Defines errors for ProductSet mutation. */
export interface ShopifyProductSetUserError extends ShopifyDisplayableError {
  __typename?: "ProductSetUserError"
  /** The error code. */
  code?: Maybe<ShopifyProductSetUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ProductSetUserError`. */
export type ShopifyProductSetUserErrorCode =
  /** An option cannot have both metafield linked and nonlinked option values. */
  | "CANNOT_COMBINE_LINKED_AND_NONLINKED_OPTION_VALUES"
  /** The metafield violates a capability restriction. */
  | "CAPABILITY_VIOLATION"
  /** Duplicated metafield value for linked option. */
  | "DUPLICATED_METAFIELD_VALUE"
  /** Duplicated option name. */
  | "DUPLICATED_OPTION_NAME"
  /** Duplicated option value. */
  | "DUPLICATED_OPTION_VALUE"
  /** Duplicated value. */
  | "DUPLICATED_VALUE"
  /** Cannot link multiple options to the same metafield. */
  | "DUPLICATE_LINKED_OPTION"
  /** Something went wrong, please try again. */
  | "GENERIC_ERROR"
  /** Gift card products can only be created after they have been activated. */
  | "GIFT_CARDS_NOT_ACTIVATED"
  /** The product gift_card attribute cannot be changed after creation. */
  | "GIFT_CARD_ATTRIBUTE_CANNOT_BE_CHANGED"
  /** Handle already in use. Please provide a new handle. */
  | "HANDLE_NOT_UNIQUE"
  /** The id field is not allowed if identifier is provided. */
  | "ID_NOT_ALLOWED"
  /** The identifier value does not match the value of the corresponding field in the input. */
  | "INPUT_MISMATCH"
  /** Input is not valid. */
  | "INVALID_INPUT"
  /** Metafield is not valid. */
  | "INVALID_METAFIELD"
  /** Invalid metafield value for linked option. */
  | "INVALID_METAFIELD_VALUE_FOR_LINKED_OPTION"
  /** Product is not valid. */
  | "INVALID_PRODUCT"
  /** Product variant is not valid. */
  | "INVALID_VARIANT"
  /** Error processing request in the background job. */
  | "JOB_ERROR"
  /** No valid metafield definition found for linked option. */
  | "LINKED_METAFIELD_DEFINITION_NOT_FOUND"
  /** Linked options are currently not supported for this shop. */
  | "LINKED_OPTIONS_NOT_SUPPORTED_FOR_SHOP"
  /** The input argument `metafields` (if present) must contain the `customId` value. */
  | "METAFIELD_MISMATCH"
  /** The input field corresponding to the identifier is required. */
  | "MISSING_FIELD_REQUIRED"
  /** Resource matching the identifier was not found. */
  | "NOT_FOUND"
  /** Options over limit. */
  | "OPTIONS_OVER_LIMIT"
  /** Option does not exist. */
  | "OPTION_DOES_NOT_EXIST"
  /** Each option must have at least one option value specified. */
  | "OPTION_VALUES_MISSING"
  /** Option values over limit. */
  | "OPTION_VALUES_OVER_LIMIT"
  /** Option value does not exist. */
  | "OPTION_VALUE_DOES_NOT_EXIST"
  /** Product does not exist. */
  | "PRODUCT_DOES_NOT_EXIST"
  /** Must specify product options when updating variants. */
  | "PRODUCT_OPTIONS_INPUT_MISSING"
  /** Product is suspended. */
  | "PRODUCT_SUSPENDED"
  /** Product variant does not exist. */
  | "PRODUCT_VARIANT_DOES_NOT_EXIST"
  /** Must specify variants when updating options. */
  | "VARIANTS_INPUT_MISSING"
  /** Number of product variants exceeds shop limit. */
  | "VARIANTS_OVER_LIMIT"
  | "%future added value"

/** The set of valid sort keys for the Product query. */
export type ShopifyProductSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `inventory_total` value. */
  | "INVENTORY_TOTAL"
  /** Sort by the `product_type` value. */
  | "PRODUCT_TYPE"
  /** Sort by the `published_at` value. */
  | "PUBLISHED_AT"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  /** Sort by the `title` value. */
  | "TITLE"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  /** Sort by the `vendor` value. */
  | "VENDOR"
  | "%future added value"

/** The possible product statuses. */
export type ShopifyProductStatus =
  /** The product is ready to sell and can be published to sales channels and apps. Products with an active status aren't automatically published to sales channels, such as the online store, or apps. By default, existing products are set to active. */
  | "ACTIVE"
  /** The product is no longer being sold and isn't available to customers on sales channels and apps. */
  | "ARCHIVED"
  /** The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft. */
  | "DRAFT"
  | "%future added value"

/** Represents a [Shopify product taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17) node. */
export interface ShopifyProductTaxonomyNode extends ShopifyNode {
  __typename?: "ProductTaxonomyNode"
  /** The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds. */
  fullName: Scalars["String"]["output"]
  /** The ID of the product taxonomy node. */
  id: Scalars["ID"]["output"]
  /** Whether the node is a leaf node. */
  isLeaf: Scalars["Boolean"]["output"]
  /** Whether the node is a root node. */
  isRoot: Scalars["Boolean"]["output"]
  /** The name of the product taxonomy node. For example, Dog Beds. */
  name: Scalars["String"]["output"]
}

/** The input fields for specifying a product to unpublish from a channel and the sales channels to unpublish it from. */
export interface ShopifyProductUnpublishInput {
  /** The ID of the product to create or update publications for. */
  id: Scalars["ID"]["input"]
  /** The channels to unpublish the product from. */
  productPublications: Array<ShopifyProductPublicationInput>
}

/** Return type for `productUnpublish` mutation. */
export interface ShopifyProductUnpublishPayload {
  __typename?: "ProductUnpublishPayload"
  /** The product that has been unpublished. */
  product?: Maybe<ShopifyProduct>
  /** The user's shop. */
  shop: ShopifyShop
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields for updating a product. */
export interface ShopifyProductUpdateInput {
  /**
   * The ID of the [category](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17)
   * that's associated with the product.
   */
  category?: InputMaybe<Scalars["ID"]["input"]>
  /** A list of collection IDs to associate with the product. */
  collectionsToJoin?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The collection IDs to disassociate from the product. */
  collectionsToLeave?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /**
   * Whether to delete metafields whose constraints don't match the product's category.
   * Can only be used when updating the product's category.
   */
  deleteConflictingConstrainedMetafields?: InputMaybe<
    Scalars["Boolean"]["input"]
  >
  /**
   * The description of the product, with HTML tags.
   * For example, the description might include bold `<strong></strong>` and italic `<i></i>` text.
   */
  descriptionHtml?: InputMaybe<Scalars["String"]["input"]>
  /** The [theme template](https://shopify.dev/docs/storefronts/themes/architecture/templates) that's used when customers view a gift card in a store. */
  giftCardTemplateSuffix?: InputMaybe<Scalars["String"]["input"]>
  /**
   * A unique, human-readable string that's used to identify the product in URLs. A handle can contain letters, hyphens (`-`), and numbers, but no spaces.
   * If no handle is explicitly provided, then the title is used to construct the product's handle.
   * For example, if a product is titled "Black Sunglasses" and no handle is provided, then the handle `black-sunglasses` is generated (unless that handle
   * is already taken, in which case a suffix is added to make the handle unique).
   */
  handle?: InputMaybe<Scalars["String"]["input"]>
  /** The product's ID. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /**
   * The [custom fields](https://shopify.dev/docs/apps/build/custom-data) to associate with the product
   * for the purposes of adding and storing additional information.
   */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /**
   * The [product type](https://help.shopify.com/manual/products/details/product-type)
   * that merchants define.
   */
  productType?: InputMaybe<Scalars["String"]["input"]>
  /**
   * Whether a redirect is required after a new handle has been provided.
   * If `true`, then the old handle is redirected to the new one automatically.
   */
  redirectNewHandle?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * Whether the product can only be purchased with
   * a [selling plan](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans).
   * Products that are sold on subscription (`requiresSellingPlan: true`) can be updated only for online stores.
   * If you update a product to be subscription-only (`requiresSellingPlan:false`), then the product is unpublished from all channels except the online store.
   */
  requiresSellingPlan?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * The [SEO title and description](https://help.shopify.com/manual/promoting-marketing/seo/adding-keywords)
   * that are associated with a product.
   */
  seo?: InputMaybe<ShopifySeoInput>
  /**
   * The [product status](https://help.shopify.com/manual/products/details/product-details-page#product-status),
   * which controls visibility across all sales channels.
   */
  status?: InputMaybe<ShopifyProductStatus>
  /**
   * A list of searchable keywords that are
   * associated with the product. For example, a merchant might apply the `sports`
   * and `summer` tags to products that are associated with sportwear for summer.
   *
   * Updating `tags` overwrites any existing tags that were previously added to the product.
   * To add new tags without overwriting existing tags, use the
   * [`tagsAdd`](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   */
  tags?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The [theme template](https://shopify.dev/docs/storefronts/themes/architecture/templates) that's used when customers view a product in a store. */
  templateSuffix?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The name for the product that displays to customers. If no handle is explicitly provided, then the title is used to construct the product's handle.
   * For example, if a product is titled "Black Sunglasses" and no handle is provided, then the handle `black-sunglasses` is generated.
   */
  title?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the product's vendor. */
  vendor?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `productUpdateMedia` mutation. */
export interface ShopifyProductUpdateMediaPayload {
  __typename?: "ProductUpdateMediaPayload"
  /** The updated media object. */
  media?: Maybe<Array<ShopifyMedia>>
  /** The list of errors that occurred from executing the mutation. */
  mediaUserErrors: Array<ShopifyMediaUserError>
  /** The product on which media was updated. */
  product?: Maybe<ShopifyProduct>
  /**
   * The list of errors that occurred from executing the mutation.
   * @deprecated Use `mediaUserErrors` instead.
   */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `productUpdate` mutation. */
export interface ShopifyProductUpdatePayload {
  __typename?: "ProductUpdatePayload"
  /** The updated product object. */
  product?: Maybe<ShopifyProduct>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/**
 * The `ProductVariant` object represents a version of a
 * [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that comes in more than one [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption),
 * such as size or color. For example, if a merchant sells t-shirts with options for size and color, then a small,
 * blue t-shirt would be one product variant and a large, blue t-shirt would be another.
 *
 * Use the `ProductVariant` object to manage the full lifecycle and configuration of a product's variants. Common
 * use cases for using the `ProductVariant` object include:
 *
 * - Tracking inventory for each variant
 * - Setting unique prices for each variant
 * - Assigning barcodes and SKUs to connect variants to fulfillment services
 * - Attaching variant-specific images and media
 * - Setting delivery and tax requirements
 * - Supporting product bundles, subscriptions, and selling plans
 *
 * A `ProductVariant` is associated with a parent
 * [`Product`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) object.
 * `ProductVariant` serves as the central link between a product's merchandising configuration, inventory,
 * pricing, fulfillment, and sales channels within the GraphQL Admin API schema. Each variant
 * can reference other GraphQL types such as:
 *
 * - [`InventoryItem`](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem): Used for inventory tracking
 * - [`Image`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Image): Used for variant-specific images
 * - [`SellingPlanGroup`](https://shopify.dev/docs/api/admin-graphql/latest/objects/SellingPlanGroup): Used for subscriptions and selling plans
 *
 * Learn more about [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
 */
export interface ShopifyProductVariant
  extends ShopifyHasEvents,
    ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyHasPublishedTranslations,
    ShopifyLegacyInteroperability,
    ShopifyNavigable,
    ShopifyNode {
  __typename?: "ProductVariant"
  /** Whether the product variant is available for sale. */
  availableForSale: Scalars["Boolean"]["output"]
  /** The value of the barcode associated with the product. */
  barcode?: Maybe<Scalars["String"]["output"]>
  /** The compare-at price of the variant in the default shop currency. */
  compareAtPrice?: Maybe<Scalars["Money"]["output"]>
  /** The pricing that applies for a customer in a given context. As of API version 2025-04, only active markets are considered in the price resolution. */
  contextualPricing: ShopifyProductVariantContextualPricing
  /** The date and time when the variant was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** A default [cursor](https://shopify.dev/api/usage/pagination-graphql) that returns the single next record, sorted ascending by ID. */
  defaultCursor: Scalars["String"]["output"]
  /** The [delivery profile](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryProfile) for the variant. */
  deliveryProfile?: Maybe<ShopifyDeliveryProfile>
  /** Display name of the variant, based on product's title + variant's title. */
  displayName: Scalars["String"]["output"]
  /** The paginated list of events associated with the host subject. */
  events: ShopifyEventConnection
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The featured image for the variant. */
  image?: Maybe<ShopifyImage>
  /** The inventory item, which is used to query for inventory information. */
  inventoryItem: ShopifyInventoryItem
  /** Whether customers are allowed to place an order for the product variant when it's out of stock. */
  inventoryPolicy: ShopifyProductVariantInventoryPolicy
  /** The total sellable quantity of the variant. */
  inventoryQuantity?: Maybe<Scalars["Int"]["output"]>
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** The media associated with the product variant. */
  media: ShopifyMediaConnection
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** The order of the product variant in the list of product variants. The first position in the list is 1. */
  position: Scalars["Int"]["output"]
  /**
   * List of prices and compare-at prices in the presentment currencies for this shop.
   * @deprecated Use `contextualPricing` instead.
   */
  presentmentPrices: ShopifyProductVariantPricePairConnection
  /** The price of the product variant in the default shop currency. */
  price: Scalars["Money"]["output"]
  /** The product that this variant belongs to. */
  product: ShopifyProduct
  /** A list of products that have product variants that contain this variant as a product component. */
  productParents: ShopifyProductConnection
  /** A list of the product variant components. */
  productVariantComponents: ShopifyProductVariantComponentConnection
  /**
   * Whether a product variant requires components. The default value is `false`.
   * If `true`, then the product variant can only be purchased as a parent bundle with components and it will be omitted
   * from channels that don't support bundles.
   */
  requiresComponents: Scalars["Boolean"]["output"]
  /** List of product options applied to the variant. */
  selectedOptions: Array<ShopifySelectedOption>
  /**
   * The total sellable quantity of the variant for online channels.
   * This doesn't represent the total available inventory or capture
   * [limitations based on customer location](https://help.shopify.com/manual/markets/inventory_and_fulfillment).
   */
  sellableOnlineQuantity: Scalars["Int"]["output"]
  /**
   * Count of selling plan groups associated with the product variant.
   * @deprecated Use `sellingPlanGroupsCount` instead.
   */
  sellingPlanGroupCount: Scalars["Int"]["output"]
  /** A list of all selling plan groups defined in the current shop associated with the product variant. */
  sellingPlanGroups: ShopifySellingPlanGroupConnection
  /** Count of selling plan groups associated with the product variant. */
  sellingPlanGroupsCount?: Maybe<ShopifyCount>
  /** Whether to show the unit price for this product variant. */
  showUnitPrice: Scalars["Boolean"]["output"]
  /**
   * A case-sensitive identifier for the product variant in the shop.
   * Required in order to connect to a fulfillment service.
   */
  sku?: Maybe<Scalars["String"]["output"]>
  /**
   * The Storefront GraphQL API ID of the `ProductVariant`.
   *
   * The Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
   * @deprecated Use `id` instead.
   */
  storefrontId: Scalars["StorefrontID"]["output"]
  /**
   * Avalara tax code for the product variant. Applies only to the stores that have the Avalara AvaTax app installed.
   * @deprecated This field should no longer be used in new integrations. This field will not be available in future API versions.
   */
  taxCode?: Maybe<Scalars["String"]["output"]>
  /** Whether a tax is charged when the product variant is sold. */
  taxable: Scalars["Boolean"]["output"]
  /** The title of the product variant. */
  title: Scalars["String"]["output"]
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
  /** The unit price value for the variant based on the variant measurement. */
  unitPrice?: Maybe<ShopifyMoneyV2>
  /** The unit price measurement for the variant. */
  unitPriceMeasurement?: Maybe<ShopifyUnitPriceMeasurement>
  /** The date and time (ISO 8601 format) when the product variant was last modified. */
  updatedAt: Scalars["DateTime"]["output"]
}

/**
 * The `ProductVariant` object represents a version of a
 * [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that comes in more than one [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption),
 * such as size or color. For example, if a merchant sells t-shirts with options for size and color, then a small,
 * blue t-shirt would be one product variant and a large, blue t-shirt would be another.
 *
 * Use the `ProductVariant` object to manage the full lifecycle and configuration of a product's variants. Common
 * use cases for using the `ProductVariant` object include:
 *
 * - Tracking inventory for each variant
 * - Setting unique prices for each variant
 * - Assigning barcodes and SKUs to connect variants to fulfillment services
 * - Attaching variant-specific images and media
 * - Setting delivery and tax requirements
 * - Supporting product bundles, subscriptions, and selling plans
 *
 * A `ProductVariant` is associated with a parent
 * [`Product`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) object.
 * `ProductVariant` serves as the central link between a product's merchandising configuration, inventory,
 * pricing, fulfillment, and sales channels within the GraphQL Admin API schema. Each variant
 * can reference other GraphQL types such as:
 *
 * - [`InventoryItem`](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem): Used for inventory tracking
 * - [`Image`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Image): Used for variant-specific images
 * - [`SellingPlanGroup`](https://shopify.dev/docs/api/admin-graphql/latest/objects/SellingPlanGroup): Used for subscriptions and selling plans
 *
 * Learn more about [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
 */
export interface ShopifyProductVariantContextualPricingArgs {
  context: ShopifyContextualPricingContext
}

/**
 * The `ProductVariant` object represents a version of a
 * [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that comes in more than one [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption),
 * such as size or color. For example, if a merchant sells t-shirts with options for size and color, then a small,
 * blue t-shirt would be one product variant and a large, blue t-shirt would be another.
 *
 * Use the `ProductVariant` object to manage the full lifecycle and configuration of a product's variants. Common
 * use cases for using the `ProductVariant` object include:
 *
 * - Tracking inventory for each variant
 * - Setting unique prices for each variant
 * - Assigning barcodes and SKUs to connect variants to fulfillment services
 * - Attaching variant-specific images and media
 * - Setting delivery and tax requirements
 * - Supporting product bundles, subscriptions, and selling plans
 *
 * A `ProductVariant` is associated with a parent
 * [`Product`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) object.
 * `ProductVariant` serves as the central link between a product's merchandising configuration, inventory,
 * pricing, fulfillment, and sales channels within the GraphQL Admin API schema. Each variant
 * can reference other GraphQL types such as:
 *
 * - [`InventoryItem`](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem): Used for inventory tracking
 * - [`Image`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Image): Used for variant-specific images
 * - [`SellingPlanGroup`](https://shopify.dev/docs/api/admin-graphql/latest/objects/SellingPlanGroup): Used for subscriptions and selling plans
 *
 * Learn more about [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
 */
export interface ShopifyProductVariantEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/**
 * The `ProductVariant` object represents a version of a
 * [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that comes in more than one [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption),
 * such as size or color. For example, if a merchant sells t-shirts with options for size and color, then a small,
 * blue t-shirt would be one product variant and a large, blue t-shirt would be another.
 *
 * Use the `ProductVariant` object to manage the full lifecycle and configuration of a product's variants. Common
 * use cases for using the `ProductVariant` object include:
 *
 * - Tracking inventory for each variant
 * - Setting unique prices for each variant
 * - Assigning barcodes and SKUs to connect variants to fulfillment services
 * - Attaching variant-specific images and media
 * - Setting delivery and tax requirements
 * - Supporting product bundles, subscriptions, and selling plans
 *
 * A `ProductVariant` is associated with a parent
 * [`Product`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) object.
 * `ProductVariant` serves as the central link between a product's merchandising configuration, inventory,
 * pricing, fulfillment, and sales channels within the GraphQL Admin API schema. Each variant
 * can reference other GraphQL types such as:
 *
 * - [`InventoryItem`](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem): Used for inventory tracking
 * - [`Image`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Image): Used for variant-specific images
 * - [`SellingPlanGroup`](https://shopify.dev/docs/api/admin-graphql/latest/objects/SellingPlanGroup): Used for subscriptions and selling plans
 *
 * Learn more about [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
 */
export interface ShopifyProductVariantMediaArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `ProductVariant` object represents a version of a
 * [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that comes in more than one [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption),
 * such as size or color. For example, if a merchant sells t-shirts with options for size and color, then a small,
 * blue t-shirt would be one product variant and a large, blue t-shirt would be another.
 *
 * Use the `ProductVariant` object to manage the full lifecycle and configuration of a product's variants. Common
 * use cases for using the `ProductVariant` object include:
 *
 * - Tracking inventory for each variant
 * - Setting unique prices for each variant
 * - Assigning barcodes and SKUs to connect variants to fulfillment services
 * - Attaching variant-specific images and media
 * - Setting delivery and tax requirements
 * - Supporting product bundles, subscriptions, and selling plans
 *
 * A `ProductVariant` is associated with a parent
 * [`Product`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) object.
 * `ProductVariant` serves as the central link between a product's merchandising configuration, inventory,
 * pricing, fulfillment, and sales channels within the GraphQL Admin API schema. Each variant
 * can reference other GraphQL types such as:
 *
 * - [`InventoryItem`](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem): Used for inventory tracking
 * - [`Image`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Image): Used for variant-specific images
 * - [`SellingPlanGroup`](https://shopify.dev/docs/api/admin-graphql/latest/objects/SellingPlanGroup): Used for subscriptions and selling plans
 *
 * Learn more about [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
 */
export interface ShopifyProductVariantMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * The `ProductVariant` object represents a version of a
 * [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that comes in more than one [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption),
 * such as size or color. For example, if a merchant sells t-shirts with options for size and color, then a small,
 * blue t-shirt would be one product variant and a large, blue t-shirt would be another.
 *
 * Use the `ProductVariant` object to manage the full lifecycle and configuration of a product's variants. Common
 * use cases for using the `ProductVariant` object include:
 *
 * - Tracking inventory for each variant
 * - Setting unique prices for each variant
 * - Assigning barcodes and SKUs to connect variants to fulfillment services
 * - Attaching variant-specific images and media
 * - Setting delivery and tax requirements
 * - Supporting product bundles, subscriptions, and selling plans
 *
 * A `ProductVariant` is associated with a parent
 * [`Product`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) object.
 * `ProductVariant` serves as the central link between a product's merchandising configuration, inventory,
 * pricing, fulfillment, and sales channels within the GraphQL Admin API schema. Each variant
 * can reference other GraphQL types such as:
 *
 * - [`InventoryItem`](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem): Used for inventory tracking
 * - [`Image`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Image): Used for variant-specific images
 * - [`SellingPlanGroup`](https://shopify.dev/docs/api/admin-graphql/latest/objects/SellingPlanGroup): Used for subscriptions and selling plans
 *
 * Learn more about [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
 */
export interface ShopifyProductVariantMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/**
 * The `ProductVariant` object represents a version of a
 * [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that comes in more than one [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption),
 * such as size or color. For example, if a merchant sells t-shirts with options for size and color, then a small,
 * blue t-shirt would be one product variant and a large, blue t-shirt would be another.
 *
 * Use the `ProductVariant` object to manage the full lifecycle and configuration of a product's variants. Common
 * use cases for using the `ProductVariant` object include:
 *
 * - Tracking inventory for each variant
 * - Setting unique prices for each variant
 * - Assigning barcodes and SKUs to connect variants to fulfillment services
 * - Attaching variant-specific images and media
 * - Setting delivery and tax requirements
 * - Supporting product bundles, subscriptions, and selling plans
 *
 * A `ProductVariant` is associated with a parent
 * [`Product`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) object.
 * `ProductVariant` serves as the central link between a product's merchandising configuration, inventory,
 * pricing, fulfillment, and sales channels within the GraphQL Admin API schema. Each variant
 * can reference other GraphQL types such as:
 *
 * - [`InventoryItem`](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem): Used for inventory tracking
 * - [`Image`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Image): Used for variant-specific images
 * - [`SellingPlanGroup`](https://shopify.dev/docs/api/admin-graphql/latest/objects/SellingPlanGroup): Used for subscriptions and selling plans
 *
 * Learn more about [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
 */
export interface ShopifyProductVariantMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `ProductVariant` object represents a version of a
 * [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that comes in more than one [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption),
 * such as size or color. For example, if a merchant sells t-shirts with options for size and color, then a small,
 * blue t-shirt would be one product variant and a large, blue t-shirt would be another.
 *
 * Use the `ProductVariant` object to manage the full lifecycle and configuration of a product's variants. Common
 * use cases for using the `ProductVariant` object include:
 *
 * - Tracking inventory for each variant
 * - Setting unique prices for each variant
 * - Assigning barcodes and SKUs to connect variants to fulfillment services
 * - Attaching variant-specific images and media
 * - Setting delivery and tax requirements
 * - Supporting product bundles, subscriptions, and selling plans
 *
 * A `ProductVariant` is associated with a parent
 * [`Product`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) object.
 * `ProductVariant` serves as the central link between a product's merchandising configuration, inventory,
 * pricing, fulfillment, and sales channels within the GraphQL Admin API schema. Each variant
 * can reference other GraphQL types such as:
 *
 * - [`InventoryItem`](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem): Used for inventory tracking
 * - [`Image`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Image): Used for variant-specific images
 * - [`SellingPlanGroup`](https://shopify.dev/docs/api/admin-graphql/latest/objects/SellingPlanGroup): Used for subscriptions and selling plans
 *
 * Learn more about [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
 */
export interface ShopifyProductVariantPresentmentPricesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  presentmentCurrencies?: InputMaybe<Array<ShopifyCurrencyCode>>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `ProductVariant` object represents a version of a
 * [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that comes in more than one [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption),
 * such as size or color. For example, if a merchant sells t-shirts with options for size and color, then a small,
 * blue t-shirt would be one product variant and a large, blue t-shirt would be another.
 *
 * Use the `ProductVariant` object to manage the full lifecycle and configuration of a product's variants. Common
 * use cases for using the `ProductVariant` object include:
 *
 * - Tracking inventory for each variant
 * - Setting unique prices for each variant
 * - Assigning barcodes and SKUs to connect variants to fulfillment services
 * - Attaching variant-specific images and media
 * - Setting delivery and tax requirements
 * - Supporting product bundles, subscriptions, and selling plans
 *
 * A `ProductVariant` is associated with a parent
 * [`Product`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) object.
 * `ProductVariant` serves as the central link between a product's merchandising configuration, inventory,
 * pricing, fulfillment, and sales channels within the GraphQL Admin API schema. Each variant
 * can reference other GraphQL types such as:
 *
 * - [`InventoryItem`](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem): Used for inventory tracking
 * - [`Image`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Image): Used for variant-specific images
 * - [`SellingPlanGroup`](https://shopify.dev/docs/api/admin-graphql/latest/objects/SellingPlanGroup): Used for subscriptions and selling plans
 *
 * Learn more about [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
 */
export interface ShopifyProductVariantProductParentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `ProductVariant` object represents a version of a
 * [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that comes in more than one [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption),
 * such as size or color. For example, if a merchant sells t-shirts with options for size and color, then a small,
 * blue t-shirt would be one product variant and a large, blue t-shirt would be another.
 *
 * Use the `ProductVariant` object to manage the full lifecycle and configuration of a product's variants. Common
 * use cases for using the `ProductVariant` object include:
 *
 * - Tracking inventory for each variant
 * - Setting unique prices for each variant
 * - Assigning barcodes and SKUs to connect variants to fulfillment services
 * - Attaching variant-specific images and media
 * - Setting delivery and tax requirements
 * - Supporting product bundles, subscriptions, and selling plans
 *
 * A `ProductVariant` is associated with a parent
 * [`Product`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) object.
 * `ProductVariant` serves as the central link between a product's merchandising configuration, inventory,
 * pricing, fulfillment, and sales channels within the GraphQL Admin API schema. Each variant
 * can reference other GraphQL types such as:
 *
 * - [`InventoryItem`](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem): Used for inventory tracking
 * - [`Image`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Image): Used for variant-specific images
 * - [`SellingPlanGroup`](https://shopify.dev/docs/api/admin-graphql/latest/objects/SellingPlanGroup): Used for subscriptions and selling plans
 *
 * Learn more about [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
 */
export interface ShopifyProductVariantProductVariantComponentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `ProductVariant` object represents a version of a
 * [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that comes in more than one [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption),
 * such as size or color. For example, if a merchant sells t-shirts with options for size and color, then a small,
 * blue t-shirt would be one product variant and a large, blue t-shirt would be another.
 *
 * Use the `ProductVariant` object to manage the full lifecycle and configuration of a product's variants. Common
 * use cases for using the `ProductVariant` object include:
 *
 * - Tracking inventory for each variant
 * - Setting unique prices for each variant
 * - Assigning barcodes and SKUs to connect variants to fulfillment services
 * - Attaching variant-specific images and media
 * - Setting delivery and tax requirements
 * - Supporting product bundles, subscriptions, and selling plans
 *
 * A `ProductVariant` is associated with a parent
 * [`Product`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) object.
 * `ProductVariant` serves as the central link between a product's merchandising configuration, inventory,
 * pricing, fulfillment, and sales channels within the GraphQL Admin API schema. Each variant
 * can reference other GraphQL types such as:
 *
 * - [`InventoryItem`](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem): Used for inventory tracking
 * - [`Image`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Image): Used for variant-specific images
 * - [`SellingPlanGroup`](https://shopify.dev/docs/api/admin-graphql/latest/objects/SellingPlanGroup): Used for subscriptions and selling plans
 *
 * Learn more about [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
 */
export interface ShopifyProductVariantSellingPlanGroupsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `ProductVariant` object represents a version of a
 * [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
 * that comes in more than one [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption),
 * such as size or color. For example, if a merchant sells t-shirts with options for size and color, then a small,
 * blue t-shirt would be one product variant and a large, blue t-shirt would be another.
 *
 * Use the `ProductVariant` object to manage the full lifecycle and configuration of a product's variants. Common
 * use cases for using the `ProductVariant` object include:
 *
 * - Tracking inventory for each variant
 * - Setting unique prices for each variant
 * - Assigning barcodes and SKUs to connect variants to fulfillment services
 * - Attaching variant-specific images and media
 * - Setting delivery and tax requirements
 * - Supporting product bundles, subscriptions, and selling plans
 *
 * A `ProductVariant` is associated with a parent
 * [`Product`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) object.
 * `ProductVariant` serves as the central link between a product's merchandising configuration, inventory,
 * pricing, fulfillment, and sales channels within the GraphQL Admin API schema. Each variant
 * can reference other GraphQL types such as:
 *
 * - [`InventoryItem`](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem): Used for inventory tracking
 * - [`Image`](https://shopify.dev/docs/api/admin-graphql/latest/objects/Image): Used for variant-specific images
 * - [`SellingPlanGroup`](https://shopify.dev/docs/api/admin-graphql/latest/objects/SellingPlanGroup): Used for subscriptions and selling plans
 *
 * Learn more about [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
 */
export interface ShopifyProductVariantTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The input fields required to append media to a single variant. */
export interface ShopifyProductVariantAppendMediaInput {
  /** Specifies the media to append to the variant. */
  mediaIds: Array<Scalars["ID"]["input"]>
  /** Specifies the variant to which media will be appended. */
  variantId: Scalars["ID"]["input"]
}

/** Return type for `productVariantAppendMedia` mutation. */
export interface ShopifyProductVariantAppendMediaPayload {
  __typename?: "ProductVariantAppendMediaPayload"
  /** The product associated with the variants and media. */
  product?: Maybe<ShopifyProduct>
  /** The product variants that were updated. */
  productVariants?: Maybe<Array<ShopifyProductVariant>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMediaUserError>
}

/**
 * A product variant component that is included within a bundle.
 *
 * These are the individual product variants that make up a bundle product,
 * where each component has a specific required quantity.
 */
export interface ShopifyProductVariantComponent extends ShopifyNode {
  __typename?: "ProductVariantComponent"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The product variant associated with the component. */
  productVariant: ShopifyProductVariant
  /** The required quantity of the component. */
  quantity: Scalars["Int"]["output"]
}

/** An auto-generated type for paginating through multiple ProductVariantComponents. */
export interface ShopifyProductVariantComponentConnection {
  __typename?: "ProductVariantComponentConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyProductVariantComponentEdge>
  /** A list of nodes that are contained in ProductVariantComponentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyProductVariantComponent>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ProductVariantComponent and a cursor during pagination. */
export interface ShopifyProductVariantComponentEdge {
  __typename?: "ProductVariantComponentEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ProductVariantComponentEdge. */
  node: ShopifyProductVariantComponent
}

/** An auto-generated type for paginating through multiple ProductVariants. */
export interface ShopifyProductVariantConnection {
  __typename?: "ProductVariantConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyProductVariantEdge>
  /** A list of nodes that are contained in ProductVariantEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyProductVariant>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/**
 * The price of a product variant in a specific country.
 * Prices vary between countries.
 */
export interface ShopifyProductVariantContextualPricing {
  __typename?: "ProductVariantContextualPricing"
  /** The final compare-at price after all adjustments are applied. */
  compareAtPrice?: Maybe<ShopifyMoneyV2>
  /** The final price after all adjustments are applied. */
  price: ShopifyMoneyV2
  /** A list of quantity breaks for the product variant. */
  quantityPriceBreaks: ShopifyQuantityPriceBreakConnection
  /** The quantity rule applied for a given context. */
  quantityRule: ShopifyQuantityRule
  /** The unit price value for the given context based on the variant measurement. */
  unitPrice?: Maybe<ShopifyMoneyV2>
}

/**
 * The price of a product variant in a specific country.
 * Prices vary between countries.
 */
export interface ShopifyProductVariantContextualPricingQuantityPriceBreaksArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyQuantityPriceBreakSortKeys>
}

/** The input fields required to detach media from a single variant. */
export interface ShopifyProductVariantDetachMediaInput {
  /** Specifies the media to detach from the variant. */
  mediaIds: Array<Scalars["ID"]["input"]>
  /** Specifies the variant from which media will be detached. */
  variantId: Scalars["ID"]["input"]
}

/** Return type for `productVariantDetachMedia` mutation. */
export interface ShopifyProductVariantDetachMediaPayload {
  __typename?: "ProductVariantDetachMediaPayload"
  /** The product associated with the variants and media. */
  product?: Maybe<ShopifyProduct>
  /** The product variants that were updated. */
  productVariants?: Maybe<Array<ShopifyProductVariant>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMediaUserError>
}

/** An auto-generated type which holds one ProductVariant and a cursor during pagination. */
export interface ShopifyProductVariantEdge {
  __typename?: "ProductVariantEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ProductVariantEdge. */
  node: ShopifyProductVariant
}

/** The input fields for the bundle components for core. */
export interface ShopifyProductVariantGroupRelationshipInput {
  /** The ID of the product variant that's a component of the bundle. */
  id: Scalars["ID"]["input"]
  /** The number of units of the product variant required to construct one unit of the bundle. */
  quantity: Scalars["Int"]["input"]
}

/** The input fields for identifying a product variant. */
export interface ShopifyProductVariantIdentifierInput {
  /** The [custom ID](https://shopify.dev/docs/apps/build/custom-data/metafields/working-with-custom-ids) of the product variant. */
  customId?: InputMaybe<ShopifyUniqueMetafieldValueInput>
  /** The ID of the product variant. */
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** The valid values for the inventory policy of a product variant once it is out of stock. */
export type ShopifyProductVariantInventoryPolicy =
  /** Customers can buy this product variant after it's out of stock. */
  | "CONTINUE"
  /** Customers can't buy this product variant after it's out of stock. */
  | "DENY"
  | "%future added value"

/** Return type for `productVariantJoinSellingPlanGroups` mutation. */
export interface ShopifyProductVariantJoinSellingPlanGroupsPayload {
  __typename?: "ProductVariantJoinSellingPlanGroupsPayload"
  /** The product variant object. */
  productVariant?: Maybe<ShopifyProductVariant>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySellingPlanGroupUserError>
}

/** Return type for `productVariantLeaveSellingPlanGroups` mutation. */
export interface ShopifyProductVariantLeaveSellingPlanGroupsPayload {
  __typename?: "ProductVariantLeaveSellingPlanGroupsPayload"
  /** The product variant object. */
  productVariant?: Maybe<ShopifyProductVariant>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySellingPlanGroupUserError>
}

/** The input fields representing a product variant position. */
export interface ShopifyProductVariantPositionInput {
  /** Specifies the ID of the product variant to update. */
  id: Scalars["ID"]["input"]
  /** The order of the product variant in the list of product variants. The first position in the list is 1. */
  position: Scalars["Int"]["input"]
}

/** The compare-at price and price of a variant sharing a currency. */
export interface ShopifyProductVariantPricePair {
  __typename?: "ProductVariantPricePair"
  /** The compare-at price of the variant with associated currency. */
  compareAtPrice?: Maybe<ShopifyMoneyV2>
  /** The price of the variant with associated currency. */
  price: ShopifyMoneyV2
}

/** An auto-generated type for paginating through multiple ProductVariantPricePairs. */
export interface ShopifyProductVariantPricePairConnection {
  __typename?: "ProductVariantPricePairConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyProductVariantPricePairEdge>
  /** A list of nodes that are contained in ProductVariantPricePairEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyProductVariantPricePair>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination. */
export interface ShopifyProductVariantPricePairEdge {
  __typename?: "ProductVariantPricePairEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ProductVariantPricePairEdge. */
  node: ShopifyProductVariantPricePair
}

/** Return type for `productVariantRelationshipBulkUpdate` mutation. */
export interface ShopifyProductVariantRelationshipBulkUpdatePayload {
  __typename?: "ProductVariantRelationshipBulkUpdatePayload"
  /** The product variants with successfully updated product variant relationships. */
  parentProductVariants?: Maybe<Array<ShopifyProductVariant>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyProductVariantRelationshipBulkUpdateUserError>
}

/** An error that occurs during the execution of `ProductVariantRelationshipBulkUpdate`. */
export interface ShopifyProductVariantRelationshipBulkUpdateUserError
  extends ShopifyDisplayableError {
  __typename?: "ProductVariantRelationshipBulkUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyProductVariantRelationshipBulkUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ProductVariantRelationshipBulkUpdateUserError`. */
export type ShopifyProductVariantRelationshipBulkUpdateUserErrorCode =
  /** Combined listing cannot be child product variants. */
  | "CHILD_PRODUCT_VARIANT_CANNOT_BE_COMBINED_LISTING"
  /** A parent product variant cannot contain itself as a component. */
  | "CIRCULAR_REFERENCE"
  /** A parent product variant must not contain duplicate product variant relationships. */
  | "DUPLICATE_PRODUCT_VARIANT_RELATIONSHIP"
  /** Exceeded the maximum allowable product variant relationships in a parent product variant. */
  | "EXCEEDED_PRODUCT_VARIANT_RELATIONSHIP_LIMIT"
  /** Unable to create parent product variant. */
  | "FAILED_TO_CREATE"
  /** Unable to remove product variant relationships. */
  | "FAILED_TO_REMOVE"
  /** Unable to update product variant relationships. */
  | "FAILED_TO_UPDATE"
  /** Unable to update parent product variant price. */
  | "FAILED_TO_UPDATE_PARENT_PRODUCT_VARIANT_PRICE"
  /** Product variant relationships must have a quantity greater than 0. */
  | "INVALID_QUANTITY"
  /** The product variant relationships to remove must be specified if all the parent product variant's components aren't being removed. */
  | "MUST_SPECIFY_COMPONENTS"
  /** Nested parent product variants aren't supported. */
  | "NESTED_PARENT_PRODUCT_VARIANT"
  /** Combined listing cannot be parent product variants. */
  | "PARENT_PRODUCT_VARIANT_CANNOT_BE_COMBINED_LISTING"
  /** Gift cards cannot be parent product variants. */
  | "PARENT_PRODUCT_VARIANT_CANNOT_BE_GIFT_CARD"
  /** Parent product variants cannot require a selling plan. */
  | "PARENT_PRODUCT_VARIANT_CANNOT_REQUIRE_SELLING_PLAN"
  /** A parent product variant ID or product ID must be provided. */
  | "PARENT_REQUIRED"
  /** The products for these product variants are already owned by another App. */
  | "PRODUCT_EXPANDER_APP_OWNERSHIP_ALREADY_EXISTS"
  /** Some of the provided product variants are not components of the specified parent product variant. */
  | "PRODUCT_VARIANTS_NOT_COMPONENTS"
  /** The product variants were not found. */
  | "PRODUCT_VARIANTS_NOT_FOUND"
  /** A Core type relationship cannot be added to a composite product variant with SFN type relationships. */
  | "PRODUCT_VARIANT_RELATIONSHIP_TYPE_CONFLICT"
  /** Unexpected error. */
  | "UNEXPECTED_ERROR"
  /** Multipack bundles are not supported. */
  | "UNSUPPORTED_MULTIPACK_RELATIONSHIP"
  /** A price must be provided for a parent product variant if the price calculation is set to fixed. */
  | "UPDATE_PARENT_VARIANT_PRICE_REQUIRED"
  | "%future added value"

/** The input fields for updating a composite product variant. */
export interface ShopifyProductVariantRelationshipUpdateInput {
  /** A product ID which contains product variants that have relationships with other variants. */
  parentProductId?: InputMaybe<Scalars["ID"]["input"]>
  /** The product variant ID representing that which contains the relationships with other variants. */
  parentProductVariantId?: InputMaybe<Scalars["ID"]["input"]>
  /** Method in which to update the price of the parent product variant. */
  priceInput?: InputMaybe<ShopifyPriceInput>
  /** The product variants and associated quantitites to add to the product variant. */
  productVariantRelationshipsToCreate?: InputMaybe<
    Array<ShopifyProductVariantGroupRelationshipInput>
  >
  /** The bundle component product variants to be removed from the product variant. */
  productVariantRelationshipsToRemove?: InputMaybe<
    Array<Scalars["ID"]["input"]>
  >
  /** The product variants and associated quantitites to update in specified product variant. */
  productVariantRelationshipsToUpdate?: InputMaybe<
    Array<ShopifyProductVariantGroupRelationshipInput>
  >
  /** Whether to remove all components from the product variant. The default value is `false`. */
  removeAllProductVariantRelationships?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The input fields for specifying a product variant to create or update. */
export interface ShopifyProductVariantSetInput {
  /** The value of the barcode associated with the product. */
  barcode?: InputMaybe<Scalars["String"]["input"]>
  /** The compare-at price of the variant. */
  compareAtPrice?: InputMaybe<Scalars["Money"]["input"]>
  /**
   * The file to associate with the variant.
   * Any file specified here must also be specified in the `files` input for the product.
   */
  file?: InputMaybe<ShopifyFileSetInput>
  /** Specifies the product variant to update or create a new variant if absent. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** The inventory item associated with the variant, used for unit cost. */
  inventoryItem?: InputMaybe<ShopifyInventoryItemInput>
  /** Whether customers are allowed to place an order for the product variant when it's out of stock. Defaults to `DENY`. */
  inventoryPolicy?: InputMaybe<ShopifyProductVariantInventoryPolicy>
  /**
   * The inventory quantities at each location where the variant is stocked.
   * If you're updating an existing variant, then you can only update the
   * quantities at locations where the variant is already stocked.
   */
  inventoryQuantities?: InputMaybe<Array<ShopifyProductSetInventoryInput>>
  /** Additional customizable information about the product variant. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The custom properties that a shop owner uses to define product variants. */
  optionValues: Array<ShopifyVariantOptionValueInput>
  /** The order of the product variant in the list of product variants. The first position in the list is 1. */
  position?: InputMaybe<Scalars["Int"]["input"]>
  /** The price of the variant. */
  price?: InputMaybe<Scalars["Money"]["input"]>
  /**
   * Whether a product variant requires components. The default value is `false`.
   * If `true`, then the product variant can only be purchased as a parent bundle with components and it will be omitted
   * from channels that don't support bundles.
   */
  requiresComponents?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether or not unit price should be shown for this product variant. */
  showUnitPrice?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The SKU for the variant. Case-sensitive string. */
  sku?: InputMaybe<Scalars["String"]["input"]>
  /** The tax code associated with the variant. */
  taxCode?: InputMaybe<Scalars["String"]["input"]>
  /** Whether the variant is taxable. */
  taxable?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The unit price measurement for the product variant. */
  unitPriceMeasurement?: InputMaybe<ShopifyUnitPriceMeasurementInput>
}

/** The set of valid sort keys for the ProductVariant query. */
export type ShopifyProductVariantSortKeys =
  /** Sort by the `full_title` value. */
  | "FULL_TITLE"
  /** Sort by the `id` value. */
  | "ID"
  /**
   * Sort by available inventory quantity in the location specified by the `query:"location_id:"` argument.
   * Don't use this sort key when no `location_id` in query is specified.
   */
  | "INVENTORY_LEVELS_AVAILABLE"
  /** Sort by the `inventory_management` value. */
  | "INVENTORY_MANAGEMENT"
  /** Sort by the `inventory_policy` value. */
  | "INVENTORY_POLICY"
  /** Sort by the `inventory_quantity` value. */
  | "INVENTORY_QUANTITY"
  /** Sort by the `name` value. */
  | "NAME"
  /** Sort by the `popular` value. */
  | "POPULAR"
  /** Sort by the `position` value. */
  | "POSITION"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  /** Sort by the `sku` value. */
  | "SKU"
  /** Sort by the `title` value. */
  | "TITLE"
  | "%future added value"

/** Return type for `productVariantsBulkCreate` mutation. */
export interface ShopifyProductVariantsBulkCreatePayload {
  __typename?: "ProductVariantsBulkCreatePayload"
  /** The updated product object. */
  product?: Maybe<ShopifyProduct>
  /** The newly created variants. */
  productVariants?: Maybe<Array<ShopifyProductVariant>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyProductVariantsBulkCreateUserError>
}

/** The set of strategies available for use on the `productVariantsBulkCreate` mutation. */
export type ShopifyProductVariantsBulkCreateStrategy =
  /** The default strategy. Deletes the standalone default ("Default Title") variant when it's the only variant on the product. Preserves the standalone custom variant. */
  | "DEFAULT"
  /** Deletes the existing standalone variant when the product has only a single default ("Default Title") or custom variant. */
  | "REMOVE_STANDALONE_VARIANT"
  | "%future added value"

/** Error codes for failed product variant bulk create mutations. */
export interface ShopifyProductVariantsBulkCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "ProductVariantsBulkCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyProductVariantsBulkCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ProductVariantsBulkCreateUserError`. */
export type ShopifyProductVariantsBulkCreateUserErrorCode =
  /** Cannot set name for an option value linked to a metafield. */
  | "CANNOT_SET_NAME_FOR_LINKED_OPTION_VALUE"
  /** Variant price must be greater than or equal to zero. */
  | "GREATER_THAN_OR_EQUAL_TO"
  /** Invalid input detected. */
  | "INVALID"
  /** Input is invalid. */
  | "INVALID_INPUT"
  /** Input must be for this product. */
  | "MUST_BE_FOR_THIS_PRODUCT"
  /** Variant options are not enough. */
  | "NEED_TO_ADD_OPTION_VALUES"
  /** Price cannot take a negative value. */
  | "NEGATIVE_PRICE_VALUE"
  /** Input is not defined for this shop. */
  | "NOT_DEFINED_FOR_SHOP"
  /** On create, this key cannot be used. */
  | "NO_KEY_ON_CREATE"
  /** Variant options are more than the product options. */
  | "OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS"
  /** Product does not exist. */
  | "PRODUCT_DOES_NOT_EXIST"
  /** Product is suspended. */
  | "PRODUCT_SUSPENDED"
  /** You reached the limit of available SKUs in your current plan. */
  | "SUBSCRIPTION_VIOLATION"
  /** Inventory locations cannot exceed the allowed resource limit or 10. */
  | "TOO_MANY_INVENTORY_LOCATIONS"
  /** Quantity could not be set. The location was not found. */
  | "TRACKED_VARIANT_LOCATION_NOT_FOUND"
  /** Operation is not supported for a combined listing parent product. */
  | "UNSUPPORTED_COMBINED_LISTING_PARENT_OPERATION"
  /** Variant already exists. */
  | "VARIANT_ALREADY_EXISTS"
  /** Variant options already exist. Please change the variant option(s). */
  | "VARIANT_ALREADY_EXISTS_CHANGE_OPTION_VALUE"
  | "%future added value"

/** Return type for `productVariantsBulkDelete` mutation. */
export interface ShopifyProductVariantsBulkDeletePayload {
  __typename?: "ProductVariantsBulkDeletePayload"
  /** The updated product object. */
  product?: Maybe<ShopifyProduct>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyProductVariantsBulkDeleteUserError>
}

/** Error codes for failed bulk variant delete mutations. */
export interface ShopifyProductVariantsBulkDeleteUserError
  extends ShopifyDisplayableError {
  __typename?: "ProductVariantsBulkDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyProductVariantsBulkDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ProductVariantsBulkDeleteUserError`. */
export type ShopifyProductVariantsBulkDeleteUserErrorCode =
  /** The variant does not exist. */
  | "AT_LEAST_ONE_VARIANT_DOES_NOT_BELONG_TO_THE_PRODUCT"
  /** Cannot delete default variant. */
  | "CANNOT_DELETE_LAST_VARIANT"
  /** Product does not exist. */
  | "PRODUCT_DOES_NOT_EXIST"
  /** Product is suspended. */
  | "PRODUCT_SUSPENDED"
  /** Operation is not supported for a combined listing parent product. */
  | "UNSUPPORTED_COMBINED_LISTING_PARENT_OPERATION"
  | "%future added value"

/** The input fields for specifying a product variant to create as part of a variant bulk mutation. */
export interface ShopifyProductVariantsBulkInput {
  /** The value of the barcode associated with the product variant. */
  barcode?: InputMaybe<Scalars["String"]["input"]>
  /** The compare-at price of the variant. */
  compareAtPrice?: InputMaybe<Scalars["Money"]["input"]>
  /** Specifies the product variant to update or delete. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** The inventory item associated with the variant, used for unit cost. */
  inventoryItem?: InputMaybe<ShopifyInventoryItemInput>
  /** Whether customers are allowed to place an order for the variant when it's out of stock. Defaults to `DENY`. */
  inventoryPolicy?: InputMaybe<ShopifyProductVariantInventoryPolicy>
  /**
   * The inventory quantities at each location where the variant is stocked. The number of elements
   * in the array of inventory quantities can't exceed the amount specified for the plan.
   * Supported as input with the `productVariantsBulkCreate` mutation only.
   */
  inventoryQuantities?: InputMaybe<Array<ShopifyInventoryLevelInput>>
  /** The ID of the media that's associated with the variant. */
  mediaId?: InputMaybe<Scalars["ID"]["input"]>
  /** The URL of the media to associate with the variant. */
  mediaSrc?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The additional customizable information about the product variant. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The custom properties that a shop owner uses to define product variants. */
  optionValues?: InputMaybe<Array<ShopifyVariantOptionValueInput>>
  /** The price of the variant. */
  price?: InputMaybe<Scalars["Money"]["input"]>
  /**
   * Whether a product variant requires components. The default value is `false`.
   * If `true`, then the product variant can only be purchased as a parent bundle with components and it will be
   * omitted from channels that don't support bundles.
   */
  requiresComponents?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether the unit price should be shown for this product variant. */
  showUnitPrice?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The tax code associated with the variant. */
  taxCode?: InputMaybe<Scalars["String"]["input"]>
  /** Whether the variant is taxable. */
  taxable?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The unit price measurement for the product variant. */
  unitPriceMeasurement?: InputMaybe<ShopifyUnitPriceMeasurementInput>
}

/** Return type for `productVariantsBulkReorder` mutation. */
export interface ShopifyProductVariantsBulkReorderPayload {
  __typename?: "ProductVariantsBulkReorderPayload"
  /** The updated product. */
  product?: Maybe<ShopifyProduct>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyProductVariantsBulkReorderUserError>
}

/** Error codes for failed bulk product variants reorder operation. */
export interface ShopifyProductVariantsBulkReorderUserError
  extends ShopifyDisplayableError {
  __typename?: "ProductVariantsBulkReorderUserError"
  /** The error code. */
  code?: Maybe<ShopifyProductVariantsBulkReorderUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ProductVariantsBulkReorderUserError`. */
export type ShopifyProductVariantsBulkReorderUserErrorCode =
  /** Product variant IDs must be unique. */
  | "DUPLICATED_VARIANT_ID"
  /** Something went wrong, please try again. */
  | "GENERIC_ERROR"
  /** Product variant position cannot be zero or negative number. */
  | "INVALID_POSITION"
  /** Product variant does not exist. */
  | "MISSING_VARIANT"
  /** Product does not exist. */
  | "PRODUCT_DOES_NOT_EXIST"
  | "%future added value"

/** Return type for `productVariantsBulkUpdate` mutation. */
export interface ShopifyProductVariantsBulkUpdatePayload {
  __typename?: "ProductVariantsBulkUpdatePayload"
  /** The updated product object. */
  product?: Maybe<ShopifyProduct>
  /** The updated variants. */
  productVariants?: Maybe<Array<ShopifyProductVariant>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyProductVariantsBulkUpdateUserError>
}

/** Error codes for failed variant bulk update mutations. */
export interface ShopifyProductVariantsBulkUpdateUserError
  extends ShopifyDisplayableError {
  __typename?: "ProductVariantsBulkUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyProductVariantsBulkUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ProductVariantsBulkUpdateUserError`. */
export type ShopifyProductVariantsBulkUpdateUserErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** Cannot set name for an option value linked to a metafield. */
  | "CANNOT_SET_NAME_FOR_LINKED_OPTION_VALUE"
  /** Mutually exclusive input fields provided. */
  | "CANNOT_SPECIFY_BOTH"
  /** The price of the variant must be greater than or equal to zero. */
  | "GREATER_THAN_OR_EQUAL_TO"
  /** Input is invalid. */
  | "INVALID_INPUT"
  /** Metafield value is invalid. */
  | "INVALID_VALUE"
  /** Input must be for this product. */
  | "MUST_BE_FOR_THIS_PRODUCT"
  /** Mandatory field input field missing. */
  | "MUST_SPECIFY_ONE_OF_PAIR"
  /** Variant options are not enough. */
  | "NEED_TO_ADD_OPTION_VALUES"
  /** Price cannot take a negative value. */
  | "NEGATIVE_PRICE_VALUE"
  /** Input is not defined for this shop. */
  | "NOT_DEFINED_FOR_SHOP"
  /** Inventory quantities cannot be provided during update. */
  | "NO_INVENTORY_QUANTITES_DURING_UPDATE"
  /** Inventory quantities can only be provided during create. To update inventory for existing variants, use inventoryAdjustQuantities. */
  | "NO_INVENTORY_QUANTITIES_ON_VARIANTS_UPDATE"
  /** Option does not exist. */
  | "OPTION_DOES_NOT_EXIST"
  /** Variant options are more than the product options. */
  | "OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS"
  /** Option value does not exist. */
  | "OPTION_VALUE_DOES_NOT_EXIST"
  /** Option value name is too long. */
  | "OPTION_VALUE_NAME_TOO_LONG"
  /** Product does not exist. */
  | "PRODUCT_DOES_NOT_EXIST"
  /** Product is suspended. */
  | "PRODUCT_SUSPENDED"
  /** Product variant does not exist. */
  | "PRODUCT_VARIANT_DOES_NOT_EXIST"
  /** Product variant is missing ID attribute. */
  | "PRODUCT_VARIANT_ID_MISSING"
  /** You reached the limit of available SKUs in your current plan. */
  | "SUBSCRIPTION_VIOLATION"
  /** The input value is too long. */
  | "TOO_LONG"
  /** The input value is too short. */
  | "TOO_SHORT"
  /** Operation is not supported for a combined listing parent product. */
  | "UNSUPPORTED_COMBINED_LISTING_PARENT_OPERATION"
  /** The variant already exists. */
  | "VARIANT_ALREADY_EXISTS"
  | "%future added value"

/** The set of valid sort keys for the ProfileItem query. */
export type ShopifyProfileItemSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `inventory_total` value. */
  | "INVENTORY_TOTAL"
  /** Sort by the `product_type` value. */
  | "PRODUCT_TYPE"
  /** Sort by the `published_at` value. */
  | "PUBLISHED_AT"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  /** Sort by the `title` value. */
  | "TITLE"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  /** Sort by the `vendor` value. */
  | "VENDOR"
  | "%future added value"

/** Return type for `pubSubServerPixelUpdate` mutation. */
export interface ShopifyPubSubServerPixelUpdatePayload {
  __typename?: "PubSubServerPixelUpdatePayload"
  /** The server pixel as configured by the mutation. */
  serverPixel?: Maybe<ShopifyServerPixel>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyErrorsServerPixelUserError>
}

/** Return type for `pubSubWebhookSubscriptionCreate` mutation. */
export interface ShopifyPubSubWebhookSubscriptionCreatePayload {
  __typename?: "PubSubWebhookSubscriptionCreatePayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPubSubWebhookSubscriptionCreateUserError>
  /** The webhook subscription that was created. */
  webhookSubscription?: Maybe<ShopifyWebhookSubscription>
}

/** An error that occurs during the execution of `PubSubWebhookSubscriptionCreate`. */
export interface ShopifyPubSubWebhookSubscriptionCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "PubSubWebhookSubscriptionCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyPubSubWebhookSubscriptionCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `PubSubWebhookSubscriptionCreateUserError`. */
export type ShopifyPubSubWebhookSubscriptionCreateUserErrorCode =
  /** Invalid parameters provided. */
  | "INVALID_PARAMETERS"
  /** Address for this topic has already been taken. */
  | "TAKEN"
  | "%future added value"

/** The input fields for a PubSub webhook subscription. */
export interface ShopifyPubSubWebhookSubscriptionInput {
  /** A constraint specified using search syntax that ensures only webhooks that match the specified filter are emitted. See our [guide on filters](https://shopify.dev/docs/apps/build/webhooks/customize/filters) for more details. */
  filter?: InputMaybe<Scalars["String"]["input"]>
  /** The format in which the webhook subscription should send the data. */
  format?: InputMaybe<ShopifyWebhookSubscriptionFormat>
  /** The list of fields to be included in the webhook subscription. Only the fields specified will be included in the webhook payload. If null, then all fields will be included. Learn more about [modifying webhook payloads](https://shopify.dev/docs/apps/build/webhooks/customize/modify_payloads). */
  includeFields?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The list of namespaces for any metafields that should be included in the webhook subscription. */
  metafieldNamespaces?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** A list of identifiers specifying metafields to include in the webhook payload. */
  metafields?: InputMaybe<Array<ShopifyHasMetafieldsMetafieldIdentifierInput>>
  /** The Pub/Sub project ID. */
  pubSubProject: Scalars["String"]["input"]
  /** The Pub/Sub topic ID. */
  pubSubTopic: Scalars["String"]["input"]
}

/** Return type for `pubSubWebhookSubscriptionUpdate` mutation. */
export interface ShopifyPubSubWebhookSubscriptionUpdatePayload {
  __typename?: "PubSubWebhookSubscriptionUpdatePayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPubSubWebhookSubscriptionUpdateUserError>
  /** The webhook subscription that was updated. */
  webhookSubscription?: Maybe<ShopifyWebhookSubscription>
}

/** An error that occurs during the execution of `PubSubWebhookSubscriptionUpdate`. */
export interface ShopifyPubSubWebhookSubscriptionUpdateUserError
  extends ShopifyDisplayableError {
  __typename?: "PubSubWebhookSubscriptionUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyPubSubWebhookSubscriptionUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `PubSubWebhookSubscriptionUpdateUserError`. */
export type ShopifyPubSubWebhookSubscriptionUpdateUserErrorCode =
  /** Invalid parameters provided. */
  | "INVALID_PARAMETERS"
  /** Address for this topic has already been taken. */
  | "TAKEN"
  | "%future added value"

/** A publication is a group of products and collections that is published to an app. */
export interface ShopifyPublication extends ShopifyNode {
  __typename?: "Publication"
  /**
   * The app associated with the publication.
   * @deprecated Use [AppCatalog.apps](https://shopify.dev/api/admin-graphql/unstable/objects/AppCatalog#connection-appcatalog-apps) instead.
   */
  app: ShopifyApp
  /** Whether new products are automatically published to this publication. */
  autoPublish: Scalars["Boolean"]["output"]
  /** The catalog associated with the publication. */
  catalog?: Maybe<ShopifyCatalog>
  /** The collection publications for the list of collections published to the publication. */
  collectionPublicationsV3: ShopifyResourcePublicationConnection
  /** The list of collections published to the publication. */
  collections: ShopifyCollectionConnection
  /** Whether the collection is available to the publication. */
  hasCollection: Scalars["Boolean"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The list of products included, but not necessarily published, in the publication. */
  includedProducts: ShopifyProductConnection
  /**
   * Name of the publication.
   * @deprecated Use [Catalog.title](https://shopify.dev/api/admin-graphql/unstable/interfaces/Catalog#field-catalog-title) instead.
   */
  name: Scalars["String"]["output"]
  /** A background operation associated with this publication. */
  operation?: Maybe<ShopifyPublicationOperation>
  /** The product publications for the list of products published to the publication. */
  productPublicationsV3: ShopifyResourcePublicationConnection
  /** The list of products published to the publication. */
  products: ShopifyProductConnection
  /** Whether the publication supports future publishing. */
  supportsFuturePublishing: Scalars["Boolean"]["output"]
}

/** A publication is a group of products and collections that is published to an app. */
export interface ShopifyPublicationCollectionPublicationsV3Args {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A publication is a group of products and collections that is published to an app. */
export interface ShopifyPublicationCollectionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A publication is a group of products and collections that is published to an app. */
export interface ShopifyPublicationHasCollectionArgs {
  id: Scalars["ID"]["input"]
}

/** A publication is a group of products and collections that is published to an app. */
export interface ShopifyPublicationIncludedProductsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A publication is a group of products and collections that is published to an app. */
export interface ShopifyPublicationProductPublicationsV3Args {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A publication is a group of products and collections that is published to an app. */
export interface ShopifyPublicationProductsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple Publications. */
export interface ShopifyPublicationConnection {
  __typename?: "PublicationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyPublicationEdge>
  /** A list of nodes that are contained in PublicationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyPublication>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields for creating a publication. */
export interface ShopifyPublicationCreateInput {
  /** Whether to automatically add newly created products to this publication. */
  autoPublish?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The ID of the catalog. */
  catalogId?: InputMaybe<Scalars["ID"]["input"]>
  /** Whether to create an empty publication or prepopulate it with all products. */
  defaultState?: InputMaybe<ShopifyPublicationCreateInputPublicationDefaultState>
}

/** The input fields for the possible values for the default state of a publication. */
export type ShopifyPublicationCreateInputPublicationDefaultState =
  /** The publication is populated with all products. */
  | "ALL_PRODUCTS"
  /** The publication is empty. */
  | "EMPTY"
  | "%future added value"

/** Return type for `publicationCreate` mutation. */
export interface ShopifyPublicationCreatePayload {
  __typename?: "PublicationCreatePayload"
  /** The publication that's been created. */
  publication?: Maybe<ShopifyPublication>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPublicationUserError>
}

/** Return type for `publicationDelete` mutation. */
export interface ShopifyPublicationDeletePayload {
  __typename?: "PublicationDeletePayload"
  /** The ID of the publication that was deleted. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPublicationUserError>
}

/** An auto-generated type which holds one Publication and a cursor during pagination. */
export interface ShopifyPublicationEdge {
  __typename?: "PublicationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of PublicationEdge. */
  node: ShopifyPublication
}

/** The input fields required to publish a resource. */
export interface ShopifyPublicationInput {
  /** ID of the publication. */
  publicationId?: InputMaybe<Scalars["ID"]["input"]>
  /** The date and time that the resource was published. Setting this to a date in the future will schedule the resource to be published. Only online store channels support future publishing. This field has no effect if you include it in the `publishableUnpublish` mutation. */
  publishDate?: InputMaybe<Scalars["DateTime"]["input"]>
}

/** The possible types of publication operations. */
export type ShopifyPublicationOperation =
  | ShopifyAddAllProductsOperation
  | ShopifyCatalogCsvOperation
  | ShopifyPublicationResourceOperation

/** A bulk update operation on a publication. */
export interface ShopifyPublicationResourceOperation
  extends ShopifyNode,
    ShopifyResourceOperation {
  __typename?: "PublicationResourceOperation"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The count of processed rows, summing imported, failed, and skipped rows. */
  processedRowCount?: Maybe<Scalars["Int"]["output"]>
  /** Represents a rows objects within this background operation. */
  rowCount?: Maybe<ShopifyRowCount>
  /** The status of this operation. */
  status: ShopifyResourceOperationStatus
}

/** The input fields for updating a publication. */
export interface ShopifyPublicationUpdateInput {
  /** Whether new products should be automatically published to the publication. */
  autoPublish?: InputMaybe<Scalars["Boolean"]["input"]>
  /** A list of publishable IDs to add. The maximum number of publishables to update simultaneously is 50. */
  publishablesToAdd?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** A list of publishable IDs to remove. The maximum number of publishables to update simultaneously is 50. */
  publishablesToRemove?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** Return type for `publicationUpdate` mutation. */
export interface ShopifyPublicationUpdatePayload {
  __typename?: "PublicationUpdatePayload"
  /** The publication that's been updated. */
  publication?: Maybe<ShopifyPublication>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyPublicationUserError>
}

/** Defines errors encountered while managing a publication. */
export interface ShopifyPublicationUserError extends ShopifyDisplayableError {
  __typename?: "PublicationUserError"
  /** The error code. */
  code?: Maybe<ShopifyPublicationUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `PublicationUserError`. */
export type ShopifyPublicationUserErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** Cannot modify a catalog for an app. */
  | "CANNOT_MODIFY_APP_CATALOG"
  /** Can't modify a publication that belongs to an app catalog. */
  | "CANNOT_MODIFY_APP_CATALOG_PUBLICATION"
  /** Cannot modify a catalog for a market. */
  | "CANNOT_MODIFY_MARKET_CATALOG"
  /** Can't modify a publication that belongs to a market catalog. */
  | "CANNOT_MODIFY_MARKET_CATALOG_PUBLICATION"
  /** Catalog does not exist. */
  | "CATALOG_NOT_FOUND"
  /** The input value is invalid. */
  | "INVALID"
  /** Publishable ID not found. */
  | "INVALID_PUBLISHABLE_ID"
  /** Market does not exist. */
  | "MARKET_NOT_FOUND"
  /** A product publication cannot be created because the catalog type associated with this publication does not permit publications of this product type. */
  | "PRODUCT_TYPE_INCOMPATIBLE_WITH_CATALOG_TYPE"
  /** The publication is currently being modified. Please try again later. */
  | "PUBLICATION_LOCKED"
  /** Publication not found. */
  | "PUBLICATION_NOT_FOUND"
  /** The limit for simultaneous publication updates has been exceeded. */
  | "PUBLICATION_UPDATE_LIMIT_EXCEEDED"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too long. */
  | "TOO_LONG"
  /** The input value is too short. */
  | "TOO_SHORT"
  /** Can't perform this action on a publication. */
  | "UNSUPPORTED_PUBLICATION_ACTION"
  /** A catalog publication can only contain products. */
  | "UNSUPPORTED_PUBLISHABLE_TYPE"
  | "%future added value"

/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export interface ShopifyPublishable {
  /**
   * The number of
   * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
   * that a resource is published to, without
   * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
   */
  availablePublicationsCount?: Maybe<ShopifyCount>
  /**
   * The number of
   * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
   * that a resource is published to, without
   * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
   * @deprecated Use `resourcePublicationsCount` instead.
   */
  publicationCount: Scalars["Int"]["output"]
  /**
   * Whether the resource is published to a specific channel.
   * @deprecated Use `publishedOnPublication` instead.
   */
  publishedOnChannel: Scalars["Boolean"]["output"]
  /**
   * Whether the resource is published to a
   * [channel](https://shopify.dev/docs/api/admin-graphql/latest/objects/Channel).
   * For example, the resource might be published to the online store channel.
   * @deprecated Use `publishedOnCurrentPublication` instead.
   */
  publishedOnCurrentChannel: Scalars["Boolean"]["output"]
  /**
   * Whether the resource is published to the app's
   * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
   * For example, the resource might be published to the app's online store channel.
   */
  publishedOnCurrentPublication: Scalars["Boolean"]["output"]
  /**
   * Whether the resource is published to a specified
   * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
   */
  publishedOnPublication: Scalars["Boolean"]["output"]
  /**
   * The list of resources that are published to a
   * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
   */
  resourcePublications: ShopifyResourcePublicationConnection
  /**
   * The number of
   * [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
   * that a resource is published to, without
   * [feedback errors](https://shopify.dev/docs/api/admin-graphql/latest/objects/ResourceFeedback).
   */
  resourcePublicationsCount?: Maybe<ShopifyCount>
  /**
   * The list of resources that are either published or staged to be published to a
   * [publication](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication).
   */
  resourcePublicationsV2: ShopifyResourcePublicationV2Connection
  /**
   * The list of channels that the resource is not published to.
   * @deprecated Use `unpublishedPublications` instead.
   */
  unpublishedChannels: ShopifyChannelConnection
  /**
   * The list of [publications](https://shopify.dev/docs/api/admin-graphql/latest/objects/Publication)
   * that the resource isn't published to.
   */
  unpublishedPublications: ShopifyPublicationConnection
}

/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export interface ShopifyPublishablePublicationCountArgs {
  onlyPublished?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export interface ShopifyPublishablePublishedOnChannelArgs {
  channelId: Scalars["ID"]["input"]
}

/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export interface ShopifyPublishablePublishedOnPublicationArgs {
  publicationId: Scalars["ID"]["input"]
}

/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export interface ShopifyPublishableResourcePublicationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  onlyPublished?: InputMaybe<Scalars["Boolean"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export interface ShopifyPublishableResourcePublicationsCountArgs {
  onlyPublished?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export interface ShopifyPublishableResourcePublicationsV2Args {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  catalogType?: InputMaybe<ShopifyCatalogType>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  onlyPublished?: InputMaybe<Scalars["Boolean"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export interface ShopifyPublishableUnpublishedChannelsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 */
export interface ShopifyPublishableUnpublishedPublicationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `publishablePublish` mutation. */
export interface ShopifyPublishablePublishPayload {
  __typename?: "PublishablePublishPayload"
  /** Resource that has been published. */
  publishable?: Maybe<ShopifyPublishable>
  /** The user's shop. */
  shop: ShopifyShop
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `publishablePublishToCurrentChannel` mutation. */
export interface ShopifyPublishablePublishToCurrentChannelPayload {
  __typename?: "PublishablePublishToCurrentChannelPayload"
  /** Resource that has been published. */
  publishable?: Maybe<ShopifyPublishable>
  /** The user's shop. */
  shop: ShopifyShop
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `publishableUnpublish` mutation. */
export interface ShopifyPublishableUnpublishPayload {
  __typename?: "PublishableUnpublishPayload"
  /** Resource that has been unpublished. */
  publishable?: Maybe<ShopifyPublishable>
  /** The user's shop. */
  shop: ShopifyShop
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `publishableUnpublishToCurrentChannel` mutation. */
export interface ShopifyPublishableUnpublishToCurrentChannelPayload {
  __typename?: "PublishableUnpublishToCurrentChannelPayload"
  /** Resource that has been unpublished. */
  publishable?: Maybe<ShopifyPublishable>
  /** The user's shop. */
  shop: ShopifyShop
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Represents information about the purchasing company for the order or draft order. */
export interface ShopifyPurchasingCompany {
  __typename?: "PurchasingCompany"
  /** The company associated to the order or draft order. */
  company: ShopifyCompany
  /** The company contact associated to the order or draft order. */
  contact?: Maybe<ShopifyCompanyContact>
  /** The company location associated to the order or draft order. */
  location: ShopifyCompanyLocation
}

/** The input fields for a purchasing company, which is a combination of company, company contact, and company location. */
export interface ShopifyPurchasingCompanyInput {
  /** ID of the company contact. */
  companyContactId: Scalars["ID"]["input"]
  /** ID of the company. */
  companyId: Scalars["ID"]["input"]
  /** ID of the company location. */
  companyLocationId: Scalars["ID"]["input"]
}

/** Represents information about the purchasing entity for the order or draft order. */
export type ShopifyPurchasingEntity = ShopifyCustomer | ShopifyPurchasingCompany

/** The input fields for a purchasing entity. Can either be a customer or a purchasing company. */
export interface ShopifyPurchasingEntityInput {
  /** Represents a customer. Null if there's a purchasing company. */
  customerId?: InputMaybe<Scalars["ID"]["input"]>
  /** Represents a purchasing company. Null if there's a customer. */
  purchasingCompany?: InputMaybe<ShopifyPurchasingCompanyInput>
}

/**
 * Quantity price breaks lets you offer different rates that are based on the
 * amount of a specific variant being ordered.
 */
export interface ShopifyQuantityPriceBreak extends ShopifyNode {
  __typename?: "QuantityPriceBreak"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Minimum quantity required to reach new quantity break price. */
  minimumQuantity: Scalars["Int"]["output"]
  /** The price of variant after reaching the minimum quanity. */
  price: ShopifyMoneyV2
  /** The price list associated with this quantity break. */
  priceList: ShopifyPriceList
  /** The product variant associated with this quantity break. */
  variant: ShopifyProductVariant
}

/** An auto-generated type for paginating through multiple QuantityPriceBreaks. */
export interface ShopifyQuantityPriceBreakConnection {
  __typename?: "QuantityPriceBreakConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyQuantityPriceBreakEdge>
  /** A list of nodes that are contained in QuantityPriceBreakEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyQuantityPriceBreak>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one QuantityPriceBreak and a cursor during pagination. */
export interface ShopifyQuantityPriceBreakEdge {
  __typename?: "QuantityPriceBreakEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of QuantityPriceBreakEdge. */
  node: ShopifyQuantityPriceBreak
}

/** The input fields and values to use when creating quantity price breaks. */
export interface ShopifyQuantityPriceBreakInput {
  /** The minimum required quantity for a variant to qualify for this price. */
  minimumQuantity: Scalars["Int"]["input"]
  /** The price of the product variant when its quantity meets the break's minimum quantity. */
  price: ShopifyMoneyInput
  /** The product variant ID associated with the quantity break. */
  variantId: Scalars["ID"]["input"]
}

/** The set of valid sort keys for the QuantityPriceBreak query. */
export type ShopifyQuantityPriceBreakSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `minimum_quantity` value. */
  | "MINIMUM_QUANTITY"
  | "%future added value"

/** The input fields used to update quantity pricing. */
export interface ShopifyQuantityPricingByVariantUpdateInput {
  /** A list of fixed prices to add. */
  pricesToAdd: Array<ShopifyPriceListPriceInput>
  /** A list of variant IDs that identify which fixed prices to remove. */
  pricesToDeleteByVariantId: Array<Scalars["ID"]["input"]>
  /** A list of quantity price breaks to add. */
  quantityPriceBreaksToAdd: Array<ShopifyQuantityPriceBreakInput>
  /** A list of quantity price break IDs that identify which quantity breaks to remove. */
  quantityPriceBreaksToDelete: Array<Scalars["ID"]["input"]>
  /** A list of product variant IDs that identify which quantity breaks to remove. */
  quantityPriceBreaksToDeleteByVariantId?: InputMaybe<
    Array<Scalars["ID"]["input"]>
  >
  /** A list of quantity rules to add. */
  quantityRulesToAdd: Array<ShopifyQuantityRuleInput>
  /** A list of variant IDs that identify which quantity rules to remove. */
  quantityRulesToDeleteByVariantId: Array<Scalars["ID"]["input"]>
}

/** Return type for `quantityPricingByVariantUpdate` mutation. */
export interface ShopifyQuantityPricingByVariantUpdatePayload {
  __typename?: "QuantityPricingByVariantUpdatePayload"
  /** The variants for which quantity pricing was created successfully in the price list. */
  productVariants?: Maybe<Array<ShopifyProductVariant>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyQuantityPricingByVariantUserError>
}

/** Error codes for failed volume pricing operations. */
export interface ShopifyQuantityPricingByVariantUserError
  extends ShopifyDisplayableError {
  __typename?: "QuantityPricingByVariantUserError"
  /** The error code. */
  code?: Maybe<ShopifyQuantityPricingByVariantUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `QuantityPricingByVariantUserError`. */
export type ShopifyQuantityPricingByVariantUserErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** Something went wrong when trying to update quantity pricing. Please try again later. */
  | "GENERIC_ERROR"
  /** Price list and fixed price currency mismatch. */
  | "PRICE_ADD_CURRENCY_MISMATCH"
  /** Prices to add inputs must be unique by variant id. */
  | "PRICE_ADD_DUPLICATE_INPUT_FOR_VARIANT"
  /** Fixed price's variant not found. */
  | "PRICE_ADD_VARIANT_NOT_FOUND"
  /** Price is not fixed. */
  | "PRICE_DELETE_PRICE_NOT_FIXED"
  /** Fixed price's variant not found. */
  | "PRICE_DELETE_VARIANT_NOT_FOUND"
  /** Price List does not exist. */
  | "PRICE_LIST_NOT_FOUND"
  /** Price list and quantity price break currency mismatch. */
  | "QUANTITY_PRICE_BREAK_ADD_CURRENCY_MISMATCH"
  /** Quantity price breaks to add inputs must be unique by variant id and minimum quantity. */
  | "QUANTITY_PRICE_BREAK_ADD_DUPLICATE_INPUT_FOR_VARIANT_AND_MIN"
  /** Failed to save quantity price break. */
  | "QUANTITY_PRICE_BREAK_ADD_FAILED_TO_SAVE"
  /** Invalid quantity price break. */
  | "QUANTITY_PRICE_BREAK_ADD_INVALID"
  /** Exceeded the allowed number of quantity price breaks per variant. */
  | "QUANTITY_PRICE_BREAK_ADD_LIMIT_EXCEEDED"
  /** Quantity price break miniumum is higher than the quantity rule maximum. */
  | "QUANTITY_PRICE_BREAK_ADD_MIN_HIGHER_THAN_QUANTITY_RULES_MAX"
  /** Quantity price break miniumum is less than the quantity rule minimum. */
  | "QUANTITY_PRICE_BREAK_ADD_MIN_LOWER_THAN_QUANTITY_RULES_MIN"
  /** Quantity price break miniumum is not multiple of the quantity rule increment. */
  | "QUANTITY_PRICE_BREAK_ADD_MIN_NOT_A_MULTIPLE_OF_QUANTITY_RULES_INCREMENT"
  /** Quantity price break's fixed price not found. */
  | "QUANTITY_PRICE_BREAK_ADD_PRICE_LIST_PRICE_NOT_FOUND"
  /** Quantity price break variant not found. */
  | "QUANTITY_PRICE_BREAK_ADD_VARIANT_NOT_FOUND"
  /** Variant to delete by is not found. */
  | "QUANTITY_PRICE_BREAK_DELETE_BY_VARIANT_ID_VARIANT_NOT_FOUND"
  /** Failed to delete quantity price break. */
  | "QUANTITY_PRICE_BREAK_DELETE_FAILED"
  /** Quantity price break not found. */
  | "QUANTITY_PRICE_BREAK_DELETE_NOT_FOUND"
  /** Quantity rule catalog context not supported. */
  | "QUANTITY_RULE_ADD_CATALOG_CONTEXT_NOT_SUPPORTED"
  /** Quantity rules to add inputs must be unique by variant id. */
  | "QUANTITY_RULE_ADD_DUPLICATE_INPUT_FOR_VARIANT"
  /** Quantity rule increment is greater than minimum. */
  | "QUANTITY_RULE_ADD_INCREMENT_IS_GREATER_THAN_MINIMUM"
  /** Quantity rule increment is less than one. */
  | "QUANTITY_RULE_ADD_INCREMENT_IS_LESS_THAN_ONE"
  /** Quantity rule increment must be a multiple of the quantity price break minimum. */
  | "QUANTITY_RULE_ADD_INCREMENT_NOT_A_MULTIPLE_OF_QUANTITY_PRICE_BREAK_MIN"
  /** Quantity rule maximum is less than one. */
  | "QUANTITY_RULE_ADD_MAXIMUM_IS_LESS_THAN_ONE"
  /** Quantity rule maximum is not a multiple of increment. */
  | "QUANTITY_RULE_ADD_MAXIMUM_NOT_A_MULTIPLE_OF_INCREMENT"
  /** Quantity rule maximum is less than the quantity price break minimum. */
  | "QUANTITY_RULE_ADD_MAX_LOWER_THAN_QUANTITY_PRICE_BREAK_MIN"
  /** Quantity rule minimum is greater than maximum. */
  | "QUANTITY_RULE_ADD_MINIMUM_GREATER_THAN_MAXIMUM"
  /** Quantity rule minimum is less than one. */
  | "QUANTITY_RULE_ADD_MINIMUM_IS_LESS_THAN_ONE"
  /** Quantity rule minimum is not a multiple of increment. */
  | "QUANTITY_RULE_ADD_MINIMUM_NOT_A_MULTIPLE_OF_INCREMENT"
  /** Quantity rule minimum is higher than the quantity price break minimum. */
  | "QUANTITY_RULE_ADD_MIN_HIGHER_THAN_QUANTITY_PRICE_BREAK_MIN"
  /** Quantity rule variant not found. */
  | "QUANTITY_RULE_ADD_VARIANT_NOT_FOUND"
  /** Quantity rule not found. */
  | "QUANTITY_RULE_DELETE_RULE_NOT_FOUND"
  /** Quantity rule variant not found. */
  | "QUANTITY_RULE_DELETE_VARIANT_NOT_FOUND"
  | "%future added value"

/** The quantity rule for the product variant in a given context. */
export interface ShopifyQuantityRule {
  __typename?: "QuantityRule"
  /**
   * The value that specifies the quantity increment between minimum and maximum of the rule.
   * Only quantities divisible by this value will be considered valid.
   *
   * The increment must be lower than or equal to the minimum and the maximum, and both minimum and maximum
   * must be divisible by this value.
   */
  increment: Scalars["Int"]["output"]
  /** Whether the quantity rule fields match one increment, one minimum and no maximum. */
  isDefault: Scalars["Boolean"]["output"]
  /**
   * An optional value that defines the highest allowed quantity purchased by the customer.
   * If defined, maximum must be lower than or equal to the minimum and must be a multiple of the increment.
   */
  maximum?: Maybe<Scalars["Int"]["output"]>
  /**
   * The value that defines the lowest allowed quantity purchased by the customer.
   * The minimum must be a multiple of the quantity rule's increment.
   */
  minimum: Scalars["Int"]["output"]
  /** Whether the values of the quantity rule were explicitly set. */
  originType: ShopifyQuantityRuleOriginType
  /** The product variant for which the quantity rule is applied. */
  productVariant: ShopifyProductVariant
}

/** An auto-generated type for paginating through multiple QuantityRules. */
export interface ShopifyQuantityRuleConnection {
  __typename?: "QuantityRuleConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyQuantityRuleEdge>
  /** A list of nodes that are contained in QuantityRuleEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyQuantityRule>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one QuantityRule and a cursor during pagination. */
export interface ShopifyQuantityRuleEdge {
  __typename?: "QuantityRuleEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of QuantityRuleEdge. */
  node: ShopifyQuantityRule
}

/** The input fields for the per-order quantity rule to be applied on the product variant. */
export interface ShopifyQuantityRuleInput {
  /** The quantity increment. */
  increment: Scalars["Int"]["input"]
  /** The maximum quantity. */
  maximum?: InputMaybe<Scalars["Int"]["input"]>
  /** The minimum quantity. */
  minimum: Scalars["Int"]["input"]
  /** Product variant on which to apply the quantity rule. */
  variantId: Scalars["ID"]["input"]
}

/** The origin of quantity rule on a price list. */
export type ShopifyQuantityRuleOriginType =
  /** Quantity rule is explicitly defined. */
  | "FIXED"
  /** Quantity rule falls back to the relative rule. */
  | "RELATIVE"
  | "%future added value"

/** An error for a failed quantity rule operation. */
export interface ShopifyQuantityRuleUserError extends ShopifyDisplayableError {
  __typename?: "QuantityRuleUserError"
  /** The error code. */
  code?: Maybe<ShopifyQuantityRuleUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `QuantityRuleUserError`. */
export type ShopifyQuantityRuleUserErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** Quantity rules can be associated only with company location catalogs or catalogs associated with compatible markets. */
  | "CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES"
  /** Quantity rule inputs must be unique by variant id. */
  | "DUPLICATE_INPUT_FOR_VARIANT"
  /** Something went wrong when trying to save the quantity rule. Please try again later. */
  | "GENERIC_ERROR"
  /** Value must be greater than or equal to 1. */
  | "GREATER_THAN_OR_EQUAL_TO"
  /** Increment must be lower than or equal to the minimum. */
  | "INCREMENT_IS_GREATER_THAN_MINIMUM"
  /** Increment must be a multiple of all quantity price break minimums associated with this variant in the specified price list. */
  | "INCREMENT_NOT_A_MULTIPLE_OF_QUANTITY_PRICE_BREAK_MINIMUM"
  /** Maximum must be greater than or equal to all quantity price break minimums associated with this variant in the specified price list. */
  | "MAXIMUM_IS_LOWER_THAN_QUANTITY_PRICE_BREAK_MINIMUM"
  /** The maximum must be a multiple of the increment. */
  | "MAXIMUM_NOT_MULTIPLE_OF_INCREMENT"
  /** Minimum must be lower than or equal to the maximum. */
  | "MINIMUM_IS_GREATER_THAN_MAXIMUM"
  /** Minimum must be less than or equal to all quantity price break minimums associated with this variant in the specified price list. */
  | "MINIMUM_IS_HIGHER_THAN_QUANTITY_PRICE_BREAK_MINIMUM"
  /** The minimum must be a multiple of the increment. */
  | "MINIMUM_NOT_MULTIPLE_OF_INCREMENT"
  /** Price list does not exist. */
  | "PRICE_LIST_DOES_NOT_EXIST"
  /** Product variant ID does not exist. */
  | "PRODUCT_VARIANT_DOES_NOT_EXIST"
  /** Quantity rule for variant associated with the price list provided does not exist. */
  | "VARIANT_QUANTITY_RULE_DOES_NOT_EXIST"
  | "%future added value"

/** Return type for `quantityRulesAdd` mutation. */
export interface ShopifyQuantityRulesAddPayload {
  __typename?: "QuantityRulesAddPayload"
  /** The list of quantity rules that were added to or updated in the price list. */
  quantityRules?: Maybe<Array<ShopifyQuantityRule>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyQuantityRuleUserError>
}

/** Return type for `quantityRulesDelete` mutation. */
export interface ShopifyQuantityRulesDeletePayload {
  __typename?: "QuantityRulesDeletePayload"
  /** A list of product variant IDs whose quantity rules were removed from the price list. */
  deletedQuantityRulesVariantIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyQuantityRuleUserError>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRoot {
  __typename?: "QueryRoot"
  /** List of abandoned checkouts. Includes checkouts that were recovered after being abandoned. */
  abandonedCheckouts: ShopifyAbandonedCheckoutConnection
  /** Returns the count of abandoned checkouts for the given shop. Limited to a maximum of 10000 by default. */
  abandonedCheckoutsCount?: Maybe<ShopifyCount>
  /** Returns an abandonment by ID. */
  abandonment?: Maybe<ShopifyAbandonment>
  /** Returns an Abandonment by the Abandoned Checkout ID. */
  abandonmentByAbandonedCheckoutId?: Maybe<ShopifyAbandonment>
  /** Lookup an App by ID or return the currently authenticated App. */
  app?: Maybe<ShopifyApp>
  /**
   * Fetches app by handle.
   * Returns null if the app doesn't exist.
   */
  appByHandle?: Maybe<ShopifyApp>
  /**
   * Fetches an app by its client ID.
   * Returns null if the app doesn't exist.
   */
  appByKey?: Maybe<ShopifyApp>
  /** An app discount type. */
  appDiscountType?: Maybe<ShopifyAppDiscountType>
  /** A list of app discount types installed by apps. */
  appDiscountTypes: Array<ShopifyAppDiscountType>
  /** A list of app discount types installed by apps. */
  appDiscountTypesNodes: ShopifyAppDiscountTypeConnection
  /** Lookup an AppInstallation by ID or return the AppInstallation for the currently authenticated App. */
  appInstallation?: Maybe<ShopifyAppInstallation>
  /** A list of app installations. To use this query, you need to contact [Shopify Support](https://partners.shopify.com/current/support/) to grant your custom app the `read_apps` access scope. Public apps can't be granted this access scope. */
  appInstallations: ShopifyAppInstallationConnection
  /** Returns an Article resource by ID. */
  article?: Maybe<ShopifyArticle>
  /** List of article authors for the shop. */
  articleAuthors: ShopifyArticleAuthorConnection
  /** List of all article tags. */
  articleTags: Array<Scalars["String"]["output"]>
  /** List of the shop's articles. */
  articles: ShopifyArticleConnection
  /**
   * The paginated list of fulfillment orders assigned to the shop locations owned by the app.
   *
   * Assigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations
   * managed by
   * [fulfillment services](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
   * that are registered by the app.
   * One app (api_client) can host multiple fulfillment services on a shop.
   * Each fulfillment service manages a dedicated location on a shop.
   * Assigned fulfillment orders can have associated
   * [fulfillment requests](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus),
   * or might currently not be requested to be fulfilled.
   *
   * The app must have the `read_assigned_fulfillment_orders`
   * [access scope](https://shopify.dev/docs/api/usage/access-scopes)
   * to be able to retrieve the fulfillment orders assigned to its locations.
   *
   * All assigned fulfillment orders (except those with the `CLOSED` status) will be returned by default.
   * Perform filtering with the `assignmentStatus` argument
   * to receive only fulfillment orders that have been requested to be fulfilled.
   */
  assignedFulfillmentOrders: ShopifyFulfillmentOrderConnection
  /**
   * Returns an automatic discount resource by ID.
   * @deprecated Use `automaticDiscountNode` instead.
   */
  automaticDiscount?: Maybe<ShopifyDiscountAutomatic>
  /** Returns a `DiscountAutomaticNode` resource by ID. */
  automaticDiscountNode?: Maybe<ShopifyDiscountAutomaticNode>
  /** Returns a list of [automatic discounts](https://help.shopify.com/manual/discounts/discount-types#automatic-discounts). */
  automaticDiscountNodes: ShopifyDiscountAutomaticNodeConnection
  /** List of the shop's automatic discount saved searches. */
  automaticDiscountSavedSearches: ShopifySavedSearchConnection
  /**
   * List of automatic discounts.
   * @deprecated Use `automaticDiscountNodes` instead.
   */
  automaticDiscounts: ShopifyDiscountAutomaticConnection
  /** The regions that can be used as the backup region of the shop. */
  availableBackupRegions: Array<ShopifyMarketRegion>
  /** Returns a list of activated carrier services and associated shop locations that support them. */
  availableCarrierServices: Array<ShopifyDeliveryCarrierServiceAndLocations>
  /** A list of available locales. */
  availableLocales: Array<ShopifyLocale>
  /** The backup region of the shop. */
  backupRegion: ShopifyMarketRegion
  /** Returns a Blog resource by ID. */
  blog?: Maybe<ShopifyBlog>
  /** List of the shop's blogs. */
  blogs: ShopifyBlogConnection
  /** Count of blogs. Limited to a maximum of 10000 by default. */
  blogsCount?: Maybe<ShopifyCount>
  /** Returns a list of Business Entities associated with the shop. */
  businessEntities: Array<ShopifyBusinessEntity>
  /** Returns a Business Entity by ID. */
  businessEntity?: Maybe<ShopifyBusinessEntity>
  /** Returns a `DeliveryCarrierService` resource by ID. */
  carrierService?: Maybe<ShopifyDeliveryCarrierService>
  /** Retrieve a list of CarrierServices. */
  carrierServices: ShopifyDeliveryCarrierServiceConnection
  /** List of Cart transform objects owned by the current API client. */
  cartTransforms: ShopifyCartTransformConnection
  /** Returns a `CashTrackingSession` resource by ID. */
  cashTrackingSession?: Maybe<ShopifyCashTrackingSession>
  /**
   * Returns a shop's cash tracking sessions for locations with a POS Pro subscription.
   *
   * Tip: To query for cash tracking sessions in bulk, you can
   * [perform a bulk operation](https://shopify.dev/docs/api/usage/bulk-operations/queries).
   */
  cashTrackingSessions: ShopifyCashTrackingSessionConnection
  /**
   * Retrieves a [catalog](https://shopify.dev/docs/api/admin-graphql/latest/interfaces/Catalog) by its ID.
   * A catalog represents a list of products with publishing and pricing information,
   * and can be associated with a context, such as a market, company location, or app.
   *
   * Use the `catalog` query to retrieve information associated with the following workflows:
   *
   * - Managing product publications across different contexts
   * - Setting up contextual pricing with price lists
   * - Managing market-specific product availability
   * - Configuring B2B customer catalogs
   *
   * There are several types of catalogs:
   *
   * - [`MarketCatalog`](https://shopify.dev/docs/api/admin-graphql/latest/objects/MarketCatalog)
   * - [`AppCatalog`](https://shopify.dev/docs/api/admin-graphql/latest/objects/AppCatalog)
   * - [`CompanyLocationCatalog`](https://shopify.dev/docs/api/admin-graphql/latest/objects/CompanyLocationCatalog)
   *
   * Learn more about [catalogs for different markets](https://shopify.dev/docs/apps/build/markets/catalogs-different-markets).
   */
  catalog?: Maybe<ShopifyCatalog>
  /** Returns the most recent catalog operations for the shop. */
  catalogOperations: Array<ShopifyResourceOperation>
  /** The catalogs belonging to the shop. */
  catalogs: ShopifyCatalogConnection
  /** The count of catalogs belonging to the shop. Limited to a maximum of 10000 by default. */
  catalogsCount?: Maybe<ShopifyCount>
  /**
   * Returns a `Channel` resource by ID.
   * @deprecated Use `publication` instead.
   */
  channel?: Maybe<ShopifyChannel>
  /**
   * List of the active sales channels.
   * @deprecated Use `publications` instead.
   */
  channels: ShopifyChannelConnection
  /**
   * Returns the visual customizations for checkout for a given checkout profile.
   *
   * To learn more about updating checkout branding settings, refer to the
   * [checkoutBrandingUpsert](https://shopify.dev/api/admin-graphql/unstable/mutations/checkoutBrandingUpsert)
   * mutation and the checkout branding [tutorial](https://shopify.dev/docs/apps/checkout/styling).
   */
  checkoutBranding?: Maybe<ShopifyCheckoutBranding>
  /** A checkout profile on a shop. */
  checkoutProfile?: Maybe<ShopifyCheckoutProfile>
  /** List of checkout profiles on a shop. */
  checkoutProfiles: ShopifyCheckoutProfileConnection
  /** Returns a [code discount](https://help.shopify.com/manual/discounts/discount-types#discount-codes) resource by ID. */
  codeDiscountNode?: Maybe<ShopifyDiscountCodeNode>
  /** Returns a code discount identified by its discount code. */
  codeDiscountNodeByCode?: Maybe<ShopifyDiscountCodeNode>
  /** Returns a list of [code-based discounts](https://help.shopify.com/manual/discounts/discount-types#discount-codes). */
  codeDiscountNodes: ShopifyDiscountCodeNodeConnection
  /** List of the shop's code discount saved searches. */
  codeDiscountSavedSearches: ShopifySavedSearchConnection
  /**
   * Retrieves a [collection](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection) by its ID.
   * A collection represents a grouping of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
   * that merchants can display and sell as a group in their [online store](https://shopify.dev/docs/apps/build/online-store) and
   * other [sales channels](https://shopify.dev/docs/apps/build/sales-channels).
   *
   * Use the `collection` query when you need to:
   *
   * - Manage collection publishing across sales channels
   * - Access collection metadata and SEO information
   * - Work with collection rules and product relationships
   *
   * A collection can be either a custom ([manual](https://help.shopify.com/manual/products/collections/manual-shopify-collection))
   * collection where products are manually added, or a smart ([automated](https://help.shopify.com/manual/products/collections/automated-collections))
   * collection where products are automatically included based on defined rules. Each collection has associated metadata including
   * title, description, handle, image, and [metafields](https://shopify.dev/docs/apps/build/custom-data/metafields).
   */
  collection?: Maybe<ShopifyCollection>
  /**
   * Retrieves a collection by its unique handle identifier. Handles provide a URL-friendly way to reference collections and are commonly used in storefront URLs and navigation.
   *
   * For example, a collection with the title "Summer Sale" might have the handle `summer-sale`, allowing you to fetch it directly without knowing the internal ID.
   *
   * Use `CollectionByHandle` to:
   * - Fetch collections for storefront display and navigation
   * - Build collection-based URLs and routing systems
   * - Validate collection existence before displaying content
   *
   * Handles are automatically generated from collection titles but can be customized by merchants for SEO and branding purposes.
   *
   * Learn more about [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection).
   * @deprecated Use `collectionByIdentifier` instead.
   */
  collectionByHandle?: Maybe<ShopifyCollection>
  /** Return a collection by an identifier. */
  collectionByIdentifier?: Maybe<ShopifyCollection>
  /** Lists all rules that can be used to create smart collections. */
  collectionRulesConditions: Array<ShopifyCollectionRuleConditions>
  /** Returns a list of the shop's collection saved searches. */
  collectionSavedSearches: ShopifySavedSearchConnection
  /**
   * Retrieves a list of [collections](https://shopify.dev/docs/api/admin-graphql/latest/objects/Collection)
   * in a store. Collections are groups of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
   * that merchants can organize for display in their [online store](https://shopify.dev/docs/apps/build/online-store) and
   * other [sales channels](https://shopify.dev/docs/apps/build/sales-channels).
   * For example, an athletics store might create different collections for running attire, shoes, and accessories.
   *
   * Use the `collections` query when you need to:
   *
   * - Build a browsing interface for a store's product groupings.
   * - Create collection searching, sorting, and filtering experiences (for example, by title, type, or published status).
   * - Sync collection data with external systems.
   * - Manage both custom ([manual](https://help.shopify.com/manual/products/collections/manual-shopify-collection))
   * and smart ([automated](https://help.shopify.com/manual/products/collections/automated-collections)) collections.
   *
   * The `collections` query supports [pagination](https://shopify.dev/docs/api/usage/pagination-graphql)
   * for large catalogs and [saved searches](https://shopify.dev/docs/api/admin-graphql/latest/queries/collections#arguments-savedSearchId)
   * for frequently used collection queries.
   *
   * The `collections` query returns collections with their associated metadata, including:
   *
   * - Basic collection information (title, description, handle, and type)
   * - Collection image and SEO metadata
   * - Product count and product relationships
   * - Collection rules (for smart collections)
   * - Publishing status and publication details
   * - Metafields and custom attributes
   *
   * Learn more about [using metafields with smart collections](https://shopify.dev/docs/apps/build/custom-data/metafields/use-metafield-capabilities).
   */
  collections: ShopifyCollectionConnection
  /** Count of collections. Limited to a maximum of 10000 by default. */
  collectionsCount?: Maybe<ShopifyCount>
  /** Returns a Comment resource by ID. */
  comment?: Maybe<ShopifyComment>
  /** List of the shop's comments. */
  comments: ShopifyCommentConnection
  /** Returns the list of companies in the shop. */
  companies: ShopifyCompanyConnection
  /** The number of companies for a shop. Limited to a maximum of 10000 by default. */
  companiesCount?: Maybe<ShopifyCount>
  /** Returns a `Company` resource by ID. */
  company?: Maybe<ShopifyCompany>
  /** Returns a `CompanyContact` resource by ID. */
  companyContact?: Maybe<ShopifyCompanyContact>
  /** Returns a `CompanyContactRole` resource by ID. */
  companyContactRole?: Maybe<ShopifyCompanyContactRole>
  /** Returns a `CompanyLocation` resource by ID. */
  companyLocation?: Maybe<ShopifyCompanyLocation>
  /** Returns the list of company locations in the shop. */
  companyLocations: ShopifyCompanyLocationConnection
  /** Returns the customer privacy consent policies of a shop. */
  consentPolicy: Array<ShopifyConsentPolicy>
  /** List of countries and regions for which consent policies can be created or updated. */
  consentPolicyRegions: Array<ShopifyConsentPolicyRegion>
  /** Return the AppInstallation for the currently authenticated App. */
  currentAppInstallation: ShopifyAppInstallation
  /** Returns the current app's most recent BulkOperation. Apps can run one bulk query and one bulk mutation operation at a time, by shop. */
  currentBulkOperation?: Maybe<ShopifyBulkOperation>
  /** The staff member making the API request. */
  currentStaffMember?: Maybe<ShopifyStaffMember>
  /** Returns a `Customer` resource by ID. */
  customer?: Maybe<ShopifyCustomer>
  /** Returns a customer account page. */
  customerAccountPage?: Maybe<ShopifyCustomerAccountPage>
  /** List of the shop's customer account pages. */
  customerAccountPages?: Maybe<ShopifyCustomerAccountPageConnection>
  /** Return a customer by an identifier. */
  customerByIdentifier?: Maybe<ShopifyCustomer>
  /** Returns the status of a customer merge request job. */
  customerMergeJobStatus?: Maybe<ShopifyCustomerMergeRequest>
  /** Returns a preview of a customer merge request. */
  customerMergePreview: ShopifyCustomerMergePreview
  /** Returns a CustomerPaymentMethod resource by its ID. */
  customerPaymentMethod?: Maybe<ShopifyCustomerPaymentMethod>
  /** List of the shop's customer saved searches. */
  customerSavedSearches: ShopifySavedSearchConnection
  /**
   * The list of members, such as customers, that's associated with an individual segment.
   * The maximum page size is 1000.
   */
  customerSegmentMembers: ShopifyCustomerSegmentMemberConnection
  /** Returns a `CustomerSegmentMembersQuery` resource by ID. */
  customerSegmentMembersQuery?: Maybe<ShopifyCustomerSegmentMembersQuery>
  /** Whether a member, which is a customer, belongs to a segment. */
  customerSegmentMembership: ShopifySegmentMembershipResponse
  /**
   * Returns a list of [customers](https://shopify.dev/api/admin-graphql/latest/objects/Customer) in your Shopify store, including key information such as name, email, location, and purchase history.
   * Use this query to segment your audience, personalize marketing campaigns, or analyze customer behavior by applying filters based on location, order history, marketing preferences and tags.
   * The `customers` query supports [pagination](https://shopify.dev/api/usage/pagination-graphql) and [sorting](https://shopify.dev/api/admin-graphql/latest/enums/CustomerSortKeys).
   */
  customers: ShopifyCustomerConnection
  /** The number of customers. Limited to a maximum of 10000 by default. */
  customersCount?: Maybe<ShopifyCount>
  /**
   * The paginated list of deletion events.
   * @deprecated Use `events` instead.
   */
  deletionEvents: ShopifyDeletionEventConnection
  /** The delivery customization. */
  deliveryCustomization?: Maybe<ShopifyDeliveryCustomization>
  /** The delivery customizations. */
  deliveryCustomizations: ShopifyDeliveryCustomizationConnection
  /** Returns a Delivery Profile resource by ID. */
  deliveryProfile?: Maybe<ShopifyDeliveryProfile>
  /** Returns a list of saved delivery profiles. */
  deliveryProfiles: ShopifyDeliveryProfileConnection
  /** Returns delivery promise participants. */
  deliveryPromiseParticipants?: Maybe<ShopifyDeliveryPromiseParticipantConnection>
  /** Lookup a delivery promise provider. */
  deliveryPromiseProvider?: Maybe<ShopifyDeliveryPromiseProvider>
  /** Represents the delivery promise settings for a shop. */
  deliveryPromiseSettings: ShopifyDeliveryPromiseSetting
  /** Returns the shop-wide shipping settings. */
  deliverySettings?: Maybe<ShopifyDeliverySetting>
  /** The total number of discount codes for the shop. Limited to a maximum of 10000 by default. */
  discountCodesCount?: Maybe<ShopifyCount>
  /** Returns a discount resource by ID. */
  discountNode?: Maybe<ShopifyDiscountNode>
  /** Returns a list of discounts. */
  discountNodes: ShopifyDiscountNodeConnection
  /** The total number of discounts for the shop. Limited to a maximum of 10000 by default. */
  discountNodesCount?: Maybe<ShopifyCount>
  /** Returns a `DiscountRedeemCodeBulkCreation` resource by ID. */
  discountRedeemCodeBulkCreation?: Maybe<ShopifyDiscountRedeemCodeBulkCreation>
  /** List of the shop's redeemed discount code saved searches. */
  discountRedeemCodeSavedSearches: ShopifySavedSearchConnection
  /** Returns a `ShopifyPaymentsDispute` resource by ID. */
  dispute?: Maybe<ShopifyShopifyPaymentsDispute>
  /** Returns a `ShopifyPaymentsDisputeEvidence` resource by ID. */
  disputeEvidence?: Maybe<ShopifyShopifyPaymentsDisputeEvidence>
  /** All disputes related to the Shop. */
  disputes: ShopifyShopifyPaymentsDisputeConnection
  /** Lookup a Domain by ID. */
  domain?: Maybe<ShopifyDomain>
  /**
   * Retrieves a [draft order](https://shopify.dev/docs/api/admin-graphql/latest/objects/DraftOrder) by its ID.
   * A draft order is an order created by a merchant on behalf of their
   * customers. Draft orders contain all necessary order details (products, pricing, customer information)
   * but require payment to be accepted before they can be converted into
   * [completed orders](https://shopify.dev/docs/api/admin-graphql/latest/mutations/draftOrderComplete).
   *
   * Use the `draftOrder` query to retrieve information associated with the following workflows:
   *
   * - Creating orders for phone, in-person, or chat sales
   * - Sending invoices to customers with secure checkout links
   * - Managing custom items and additional costs
   * - Selling products at discount or wholesale rates
   * - Processing pre-orders and saving drafts for later completion
   *
   * A draft order is associated with a
   * [customer](https://shopify.dev/docs/api/admin-graphql/latest/objects/Customer)
   * and contains multiple [line items](https://shopify.dev/docs/api/admin-graphql/latest/objects/DraftOrderLineItem).
   * Each draft order has a [status](https://shopify.dev/docs/api/admin-graphql/latest/objects/DraftOrder#field-DraftOrder.fields.status),
   * which indicates its progress through the sales workflow.
   */
  draftOrder?: Maybe<ShopifyDraftOrder>
  /** Returns a list of available delivery options for a draft order. */
  draftOrderAvailableDeliveryOptions: ShopifyDraftOrderAvailableDeliveryOptions
  /** List of the shop's draft order saved searches. */
  draftOrderSavedSearches: ShopifySavedSearchConnection
  /** Returns a `DraftOrderTag` resource by ID. */
  draftOrderTag?: Maybe<ShopifyDraftOrderTag>
  /** List of saved draft orders. */
  draftOrders: ShopifyDraftOrderConnection
  /** Returns the number of draft orders that match the query. Limited to a maximum of 10000 by default. */
  draftOrdersCount?: Maybe<ShopifyCount>
  /** Get a single event by its id. */
  event?: Maybe<ShopifyEvent>
  /** The paginated list of events associated with the store. */
  events?: Maybe<ShopifyEventConnection>
  /** Count of events. Limited to a maximum of 10000. */
  eventsCount?: Maybe<ShopifyCount>
  /** A list of the shop's file saved searches. */
  fileSavedSearches: ShopifySavedSearchConnection
  /**
   * Retrieves a paginated list of files that have been uploaded to a Shopify store. Files represent digital assets
   * that merchants can upload to their store for various purposes including product images, marketing materials,
   * documents, and brand assets.
   *
   * Use the `files` query to retrieve information associated with the following workflows:
   *
   * - [Managing product media and images](https://shopify.dev/docs/apps/build/online-store/product-media)
   * - [Theme development and asset management](https://shopify.dev/docs/storefronts/themes/store/success/brand-assets)
   * - Brand asset management and [checkout branding](https://shopify.dev/docs/apps/build/checkout/styling/add-favicon)
   *
   * Files can include multiple [content types](https://shopify.dev/docs/api/admin-graphql/latest/enums/FileContentType),
   * such as images, videos, 3D models, and generic files. Each file has
   * properties like dimensions, file size, alt text for accessibility, and upload status. Files can be filtered
   * by [media type](https://shopify.dev/docs/api/admin-graphql/latest/enums/MediaContentType) and can be associated with
   * [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product),
   * [themes](https://shopify.dev/docs/api/admin-graphql/latest/objects/OnlineStoreTheme),
   * and other store resources.
   */
  files: ShopifyFileConnection
  /** Returns the access policy for a finance app . */
  financeAppAccessPolicy: ShopifyFinanceAppAccessPolicy
  /** Returns the KYC information for the shop's Shopify Payments account, used in embedded finance apps. */
  financeKycInformation?: Maybe<ShopifyFinanceKycInformation>
  /** Returns a Fulfillment resource by ID. */
  fulfillment?: Maybe<ShopifyFulfillment>
  /** The fulfillment constraint rules that belong to a shop. */
  fulfillmentConstraintRules: Array<ShopifyFulfillmentConstraintRule>
  /** Returns a `FulfillmentOrder` resource by ID. */
  fulfillmentOrder?: Maybe<ShopifyFulfillmentOrder>
  /**
   * The paginated list of all fulfillment orders.
   * The returned fulfillment orders are filtered according to the
   * [fulfillment order access scopes](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder#api-access-scopes)
   * granted to the app.
   *
   * Use this query to retrieve fulfillment orders assigned to merchant-managed locations,
   * third-party fulfillment service locations, or all kinds of locations together.
   *
   * For fetching only the fulfillment orders assigned to the app's locations, use the
   * [assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/2024-07/objects/queryroot#connection-assignedfulfillmentorders)
   * connection.
   */
  fulfillmentOrders: ShopifyFulfillmentOrderConnection
  /** Returns a FulfillmentService resource by ID. */
  fulfillmentService?: Maybe<ShopifyFulfillmentService>
  /** Returns a gift card resource by ID. */
  giftCard?: Maybe<ShopifyGiftCard>
  /** The configuration for the shop's gift cards. */
  giftCardConfiguration: ShopifyGiftCardConfiguration
  /** Returns a list of gift cards. */
  giftCards: ShopifyGiftCardConnection
  /** The total number of gift cards issued for the shop. Limited to a maximum of 10000 by default. */
  giftCardsCount?: Maybe<ShopifyCount>
  /**
   * Returns an
   * [InventoryItem](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem)
   * object by ID.
   */
  inventoryItem?: Maybe<ShopifyInventoryItem>
  /** Returns a list of inventory items. */
  inventoryItems: ShopifyInventoryItemConnection
  /**
   * Returns an
   * [InventoryLevel](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryLevel)
   * object by ID.
   */
  inventoryLevel?: Maybe<ShopifyInventoryLevel>
  /** General inventory properties for the shop. */
  inventoryProperties: ShopifyInventoryProperties
  /** Returns an inventory shipment by ID. */
  inventoryShipment?: Maybe<ShopifyInventoryShipment>
  /** Returns an inventory transfer by ID. */
  inventoryTransfer?: Maybe<ShopifyInventoryTransfer>
  /** Returns a paginated list of transfers. */
  inventoryTransfers: ShopifyInventoryTransferConnection
  /** Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes. */
  job?: Maybe<ShopifyJob>
  /** Returns an inventory Location resource by ID. */
  location?: Maybe<ShopifyLocation>
  /** Return a location by an identifier. */
  locationByIdentifier?: Maybe<ShopifyLocation>
  /** Returns a list of active inventory locations. */
  locations: ShopifyLocationConnection
  /**
   * Returns a list of all origin locations available for a delivery profile.
   * @deprecated Use `locationsAvailableForDeliveryProfilesConnection` instead.
   */
  locationsAvailableForDeliveryProfiles?: Maybe<Array<ShopifyLocation>>
  /** Returns a list of all origin locations available for a delivery profile. */
  locationsAvailableForDeliveryProfilesConnection: ShopifyLocationConnection
  /** Returns the count of locations for the given shop. Limited to a maximum of 10000 by default. */
  locationsCount?: Maybe<ShopifyCount>
  /** Returns a list of fulfillment orders that are on hold. */
  manualHoldsFulfillmentOrders: ShopifyFulfillmentOrderConnection
  /** Returns a market resource by ID. */
  market?: Maybe<ShopifyMarket>
  /**
   * Returns the applicable market for a customer based on where they are in the world.
   * @deprecated This `market_by_geography` field will be removed in a future version of the API.
   */
  marketByGeography?: Maybe<ShopifyMarket>
  /** A resource that can have localized values for different markets. */
  marketLocalizableResource?: Maybe<ShopifyMarketLocalizableResource>
  /** Resources that can have localized values for different markets. */
  marketLocalizableResources: ShopifyMarketLocalizableResourceConnection
  /** Resources that can have localized values for different markets. */
  marketLocalizableResourcesByIds: ShopifyMarketLocalizableResourceConnection
  /** A list of marketing activities associated with the marketing app. */
  marketingActivities: ShopifyMarketingActivityConnection
  /** Returns a `MarketingActivity` resource by ID. */
  marketingActivity?: Maybe<ShopifyMarketingActivity>
  /** Returns a `MarketingEvent` resource by ID. */
  marketingEvent?: Maybe<ShopifyMarketingEvent>
  /** A list of marketing events associated with the marketing app. */
  marketingEvents: ShopifyMarketingEventConnection
  /** The markets configured for the shop. */
  markets: ShopifyMarketConnection
  /** The resolved values for a buyer signal. */
  marketsResolvedValues: ShopifyMarketsResolvedValues
  /** Returns a Menu resource by ID. */
  menu?: Maybe<ShopifyMenu>
  /** The shop's menus. */
  menus: ShopifyMenuConnection
  /** Returns a metafield definition by identifier. */
  metafieldDefinition?: Maybe<ShopifyMetafieldDefinition>
  /**
   * Each metafield definition has a type, which defines the type of information that it can store.
   * This type is enforced across every instance of the resource that owns the metafield definition.
   *
   * Refer to the [list of supported metafield types](https://shopify.dev/apps/metafields/types).
   */
  metafieldDefinitionTypes: Array<ShopifyMetafieldDefinitionType>
  /** Returns a list of metafield definitions. */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /** Retrieves a metaobject by ID. */
  metaobject?: Maybe<ShopifyMetaobject>
  /** Retrieves a metaobject by handle. */
  metaobjectByHandle?: Maybe<ShopifyMetaobject>
  /** Retrieves a metaobject definition by ID. */
  metaobjectDefinition?: Maybe<ShopifyMetaobjectDefinition>
  /** Finds a metaobject definition by type. */
  metaobjectDefinitionByType?: Maybe<ShopifyMetaobjectDefinition>
  /** All metaobject definitions. */
  metaobjectDefinitions: ShopifyMetaobjectDefinitionConnection
  /** All metaobjects for the shop. */
  metaobjects: ShopifyMetaobjectConnection
  /** Return a mobile platform application by its ID. */
  mobilePlatformApplication?: Maybe<ShopifyMobilePlatformApplication>
  /** List the mobile platform applications. */
  mobilePlatformApplications: ShopifyMobilePlatformApplicationConnection
  /**
   * Returns a specific node (any object that implements the
   * [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
   * interface) by ID, in accordance with the
   * [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
   * This field is commonly used for refetching an object.
   */
  node?: Maybe<ShopifyNode>
  /**
   * Returns the list of nodes (any objects that implement the
   * [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
   * interface) with the given IDs, in accordance with the
   * [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
   */
  nodes: Array<Maybe<ShopifyNode>>
  /** The shop's online store channel. */
  onlineStore: ShopifyOnlineStore
  /**
   * The `order` query retrieves an [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/order) by its ID. This query provides access to comprehensive order information such as customer details, line items, financial data, and fulfillment status.
   *
   * Use the `order` query to retrieve information associated with the following processes:
   *
   * - [Order management and fulfillment](https://shopify.dev/docs/apps/build/orders-fulfillment/order-management-apps)
   * - [Financial reporting](https://help.shopify.com/manual/finance)
   * - [Customer purchase history](https://help.shopify.com/manual/reports-and-analytics/shopify-reports/report-types/default-reports/customers-reports) and [transaction analysis](https://shopify.dev/docs/apps/launch/billing/view-charges-earnings#transaction-data-through-the-graphql-admin-api)
   * - [Shipping](https://shopify.dev/docs/apps/build/checkout/delivery-shipping) and [inventory management](https://shopify.dev/docs/apps/build/orders-fulfillment/inventory-management-apps)
   *
   * You can only retrieve the last 60 days worth of orders from a store by default. If you want to access older orders, then you need to [request access to all orders](https://shopify.dev/docs/api/usage/access-scopes#orders-permissions).
   *
   * For large order datasets, consider using [bulk operations](https://shopify.dev/docs/api/usage/bulk-operations/queries).
   * Bulk operations handle pagination automatically and allow you to retrieve data asynchronously without being constrained by API rate limits.
   * Learn more about [creating orders](https://shopify.dev/docs/api/admin-graphql/latest/mutations/ordercreate) and [building order management apps](https://shopify.dev/docs/apps/build/orders-fulfillment).
   */
  order?: Maybe<ShopifyOrder>
  /** Return an order by an identifier. */
  orderByIdentifier?: Maybe<ShopifyOrder>
  /** Returns a payment status by payment reference ID. Used to check the status of a deferred payment. */
  orderPaymentStatus?: Maybe<ShopifyOrderPaymentStatus>
  /** List of the shop's order saved searches. */
  orderSavedSearches: ShopifySavedSearchConnection
  /**
   * Returns a list of [orders](https://shopify.dev/api/admin-graphql/latest/objects/Order) placed in the store, including data such as order status, customer, and line item details.
   * Use the `orders` query to build reports, analyze sales performance, or automate fulfillment workflows. The `orders` query supports [pagination](https://shopify.dev/docs/api/usage/pagination-graphql),
   * [sorting](https://shopify.dev/docs/api/admin-graphql/latest/queries/orders#arguments-sortKey), and [filtering](https://shopify.dev/docs/api/admin-graphql/latest/queries/orders#arguments-query).
   */
  orders: ShopifyOrderConnection
  /** Returns the count of orders for the given shop. Limited to a maximum of 10000 by default. */
  ordersCount?: Maybe<ShopifyCount>
  /** Returns a Page resource by ID. */
  page?: Maybe<ShopifyPage>
  /** List of the shop's pages. */
  pages: ShopifyPageConnection
  /** Count of pages. Limited to a maximum of 10000 by default. */
  pagesCount?: Maybe<ShopifyCount>
  /** The payment customization. */
  paymentCustomization?: Maybe<ShopifyPaymentCustomization>
  /** The payment customizations. */
  paymentCustomizations: ShopifyPaymentCustomizationConnection
  /** The list of payment terms templates eligible for all shops and users. */
  paymentTermsTemplates: Array<ShopifyPaymentTermsTemplate>
  /** The number of pendings orders. Limited to a maximum of 10000. */
  pendingOrdersCount?: Maybe<ShopifyCount>
  /** Returns a `PointOfSaleDevice` resource by ID. */
  pointOfSaleDevice?: Maybe<ShopifyPointOfSaleDevice>
  /** Returns a price list resource by ID. */
  priceList?: Maybe<ShopifyPriceList>
  /** All price lists for a shop. */
  priceLists: ShopifyPriceListConnection
  /**
   * The primary market of the shop.
   * @deprecated Use `backupRegion` instead.
   */
  primaryMarket: ShopifyMarket
  /** Privacy related settings for a shop. */
  privacySettings: ShopifyPrivacySettings
  /**
   * Retrieves a [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) by its ID.
   * A product is an item that a merchant can sell in their store.
   *
   * Use the `product` query when you need to:
   *
   * - Access essential product data (for example, title, description, price, images, SEO metadata, and metafields).
   * - Build product detail pages and manage inventory.
   * - Handle international sales with localized pricing and content.
   * - Manage product variants and product options.
   *
   * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
   */
  product?: Maybe<ShopifyProduct>
  /**
   * Return a product by its handle.
   * @deprecated Use `productByIdentifier` instead.
   */
  productByHandle?: Maybe<ShopifyProduct>
  /** Return a product by an identifier. */
  productByIdentifier?: Maybe<ShopifyProduct>
  /** Returns the product duplicate job. */
  productDuplicateJob: ShopifyProductDuplicateJob
  /** Returns a ProductFeed resource by ID. */
  productFeed?: Maybe<ShopifyProductFeed>
  /** The product feeds for the shop. */
  productFeeds: ShopifyProductFeedConnection
  /**
   * Returns a ProductOperation resource by ID.
   *
   * This can be used to query the
   * [ProductSetOperation](https://shopify.dev/api/admin-graphql/current/objects/ProductSetOperation), using
   * the ID that was returned
   * [when the product was created or updated](https://shopify.dev/api/admin/migrate/new-product-model/sync-data#create-a-product-with-variants-and-options-asynchronously)
   * by the
   * [ProductSet](https://shopify.dev/api/admin-graphql/current/mutations/productSet) mutation.
   *
   * The `status` field indicates whether the operation is `CREATED`, `ACTIVE`, or `COMPLETE`.
   *
   * The `product` field provides the details of the created or updated product.
   *
   * For the
   * [ProductSetOperation](https://shopify.dev/api/admin-graphql/current/objects/ProductSetOperation), the
   * `userErrors` field provides mutation errors that occurred during the operation.
   */
  productOperation?: Maybe<ShopifyProductOperation>
  /**
   * Retrieves product resource feedback for the currently authenticated app, providing insights into product data quality, completeness, and optimization opportunities. This feedback helps apps guide merchants toward better product listings and improved store performance.
   *
   * For example, an SEO app might receive feedback indicating that certain products lack meta descriptions or have suboptimal titles, enabling the app to provide specific recommendations for improving search visibility and conversion rates.
   *
   * Use `ProductResourceFeedback` to:
   * - Display product optimization recommendations to merchants
   * - Identify data quality issues across product catalogs
   * - Build product improvement workflows and guided experiences
   * - Track progress on product listing completeness and quality
   * - Implement automated product auditing and scoring systems
   * - Generate reports on catalog health and optimization opportunities
   * - Provide contextual suggestions within product editing interfaces
   *
   * The feedback system evaluates products against various criteria including SEO best practices, required fields, media quality, and sales channel requirements. Each feedback item includes specific details about the issue, suggested improvements, and priority levels.
   *
   * Feedback is app-specific and reflects the particular focus of your application - marketing apps receive different insights than inventory management apps. The system continuously updates as merchants make changes, providing real-time guidance for product optimization.
   *
   * This resource is particularly valuable for apps that help merchants improve their product listings, optimize for search engines, or enhance their overall catalog quality. The feedback enables proactive suggestions rather than reactive problem-solving.
   *
   * Learn more about [product optimization](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product).
   */
  productResourceFeedback?: Maybe<ShopifyProductResourceFeedback>
  /** Returns a list of the shop's product saved searches. */
  productSavedSearches: ShopifySavedSearchConnection
  /**
   * A list of tags that have been added to products.
   * The maximum page size is 5000.
   */
  productTags?: Maybe<ShopifyStringConnection>
  /**
   * The list of types added to products.
   * The maximum page size is 1000.
   */
  productTypes?: Maybe<ShopifyStringConnection>
  /**
   * Retrieves a [product variant](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant) by its ID.
   *
   * A product variant is a specific version of a
   * [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product) that comes in more than
   * one [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption),
   * such as size or color. For example, if a merchant sells t-shirts with options for size and color,
   * then a small, blue t-shirt would be one product variant and a large, blue t-shirt would be another.
   *
   * Use the `productVariant` query when you need to:
   *
   * - Access essential product variant data (for example, title, price, image, and metafields).
   * - Build product detail pages and manage inventory.
   * - Handle international sales with localized pricing and content.
   * - Manage product variants that are part of a bundle or selling plan.
   *
   * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
   */
  productVariant?: Maybe<ShopifyProductVariant>
  /** Return a product variant by an identifier. */
  productVariantByIdentifier?: Maybe<ShopifyProductVariant>
  /**
   * Retrieves a list of [product variants](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductVariant)
   * associated with a [product](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product).
   *
   * A product variant is a specific version of a product that comes in more than
   * one [option](https://shopify.dev/docs/api/admin-graphql/latest/objects/ProductOption),
   * such as size or color. For example, if a merchant sells t-shirts with options for size and color,
   * then a small, blue t-shirt would be one product variant and a large, blue t-shirt would be another.
   *
   * Use the `productVariants` query when you need to:
   *
   * - Search for product variants by attributes such as SKU, barcode, or inventory quantity.
   * - Filter product variants by attributes, such as whether they're gift cards or have custom metafields.
   * - Fetch product variants for bulk operations, such as updating prices or inventory.
   * - Preload data for product variants, such as inventory items, selected options, or associated products.
   *
   * The `productVariants` query supports [pagination](https://shopify.dev/docs/api/usage/pagination-graphql)
   * to handle large product catalogs and [saved searches](https://shopify.dev/docs/api/admin-graphql/latest/queries/productVariants#arguments-savedSearchId)
   * for frequently used product variant queries.
   *
   * The `productVariants` query returns product variants with their associated metadata, including:
   *
   * - Basic product variant information (for example, title, SKU, barcode, price, and inventory)
   * - Media attachments (for example, images and videos)
   * - Associated products, selling plans, bundles, and metafields
   *
   * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
   */
  productVariants: ShopifyProductVariantConnection
  /** Count of product variants. Limited to a maximum of 10000 by default. */
  productVariantsCount?: Maybe<ShopifyCount>
  /**
   * The list of vendors added to products.
   * The maximum page size is 1000.
   */
  productVendors?: Maybe<ShopifyStringConnection>
  /**
   * Retrieves a list of [products](https://shopify.dev/docs/api/admin-graphql/latest/objects/Product)
   * in a store. Products are the items that merchants can sell in their store.
   *
   * Use the `products` query when you need to:
   *
   * - Build a browsing interface for a product catalog.
   * - Create product [searching](https://shopify.dev/docs/api/usage/search-syntax), [sorting](https://shopify.dev/docs/api/admin-graphql/latest/queries/products#arguments-sortKey), and [filtering](https://shopify.dev/docs/api/admin-graphql/latest/queries/products#arguments-query) experiences.
   * - Implement product recommendations.
   * - Sync product data with external systems.
   *
   * The `products` query supports [pagination](https://shopify.dev/docs/api/usage/pagination-graphql)
   * to handle large product catalogs and [saved searches](https://shopify.dev/docs/api/admin-graphql/latest/queries/products#arguments-savedSearchId)
   * for frequently used product queries.
   *
   * The `products` query returns products with their associated metadata, including:
   *
   * - Basic product information (for example, title, description, vendor, and type)
   * - Product options and product variants, with their prices and inventory
   * - Media attachments (for example, images and videos)
   * - SEO metadata
   * - Product categories and tags
   * - Product availability and publishing statuses
   *
   * Learn more about working with [Shopify's product model](https://shopify.dev/docs/apps/build/graphql/migrate/new-product-model/product-model-components).
   */
  products: ShopifyProductConnection
  /** Count of products. Limited to a maximum of 10000 by default. */
  productsCount?: Maybe<ShopifyCount>
  /** The list of publicly-accessible Admin API versions, including supported versions, the release candidate, and unstable versions. */
  publicApiVersions: Array<ShopifyApiVersion>
  /** Lookup a publication by ID. */
  publication?: Maybe<ShopifyPublication>
  /** List of publications. */
  publications: ShopifyPublicationConnection
  /** Count of publications. Limited to a maximum of 10000 by default. */
  publicationsCount?: Maybe<ShopifyCount>
  /** Returns a count of published products by publication ID. Limited to a maximum of 10000 by default. */
  publishedProductsCount?: Maybe<ShopifyCount>
  /**
   * Retrieves a [refund](https://shopify.dev/docs/api/admin-graphql/latest/objects/Refund) by its ID.
   * A refund represents a financial record of money returned to a customer from an order.
   * It provides a comprehensive view of all refunded amounts, transactions, and restocking
   * instructions associated with returning products or correcting order issues.
   *
   * Use the `refund` query to retrieve information associated with the following workflows:
   *
   * - Displaying refund details in order management interfaces
   * - Building customer service tools for reviewing refund history
   * - Creating reports on refunded amounts and reasons
   * - Auditing refund transactions and payment gateway records
   * - Tracking inventory impacts from refunded items
   *
   * A refund is associated with an
   * [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order)
   * and includes [refund line items](https://shopify.dev/docs/api/admin-graphql/latest/objects/RefundLineItem)
   * that specify which items were refunded. Each refund processes through
   * [order transactions](https://shopify.dev/docs/api/admin-graphql/latest/objects/OrderTransaction)
   * that handle the actual money transfer back to the customer.
   */
  refund?: Maybe<ShopifyRefund>
  /**
   * Retrieves a return by its ID. A return represents the intent of a buyer to ship one or more items from an
   * order back to a merchant or a third-party fulfillment location.
   *
   * Use the `return` query to retrieve information associated with the following workflows:
   *
   * - [Managing returns](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management)
   * - [Processing exchanges](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-exchanges)
   * - [Tracking reverse fulfillment orders](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-fulfillment-orders)
   *
   * A return is associated with an
   * [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order)
   * and can include multiple return [line items](https://shopify.dev/docs/api/admin-graphql/latest/objects/LineItem).
   * Each return has a [status](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps#return-statuses),
   * which indicates the state of the return.
   */
  return?: Maybe<ShopifyReturn>
  /** The calculated monetary value to be exchanged due to the return. */
  returnCalculate?: Maybe<ShopifyCalculatedReturn>
  /** Lookup a returnable fulfillment by ID. */
  returnableFulfillment?: Maybe<ShopifyReturnableFulfillment>
  /** List of returnable fulfillments. */
  returnableFulfillments: ShopifyReturnableFulfillmentConnection
  /** Lookup a reverse delivery by ID. */
  reverseDelivery?: Maybe<ShopifyReverseDelivery>
  /** Lookup a reverse fulfillment order by ID. */
  reverseFulfillmentOrder?: Maybe<ShopifyReverseFulfillmentOrder>
  /**
   * <div class="note"><h4>Theme app extensions</h4>
   *   <p>If your app integrates with a Shopify theme and you plan to submit it to the Shopify App Store, you must use theme app extensions instead of Script tags. Script tags can only be used with vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
   *
   * <div class="note"><h4>Script tag deprecation</h4>
   *   <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
   *
   *
   * Returns a `ScriptTag` resource by ID.
   */
  scriptTag?: Maybe<ShopifyScriptTag>
  /**
   * <div class="note"><h4>Theme app extensions</h4>
   *   <p>If your app integrates with a Shopify theme and you plan to submit it to the Shopify App Store, you must use theme app extensions instead of Script tags. Script tags can only be used with vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
   *
   * <div class="note"><h4>Script tag deprecation</h4>
   *   <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
   *
   *
   * A list of script tags.
   */
  scriptTags: ShopifyScriptTagConnection
  /** The Customer Segment. */
  segment?: Maybe<ShopifySegment>
  /** A list of filter suggestions associated with a segment. A segment is a group of members (commonly customers) that meet specific criteria. */
  segmentFilterSuggestions: ShopifySegmentFilterConnection
  /** A list of filters. */
  segmentFilters: ShopifySegmentFilterConnection
  /** A list of a shop's segment migrations. */
  segmentMigrations: ShopifySegmentMigrationConnection
  /** The list of suggested values corresponding to a particular filter for a segment. A segment is a group of members, such as customers, that meet specific criteria. */
  segmentValueSuggestions: ShopifySegmentValueConnection
  /** A list of a shop's segments. */
  segments: ShopifySegmentConnection
  /** The number of segments for a shop. Limited to a maximum of 10000 by default. */
  segmentsCount?: Maybe<ShopifyCount>
  /** Returns a Selling Plan Group resource by ID. */
  sellingPlanGroup?: Maybe<ShopifySellingPlanGroup>
  /** List Selling Plan Groups. */
  sellingPlanGroups: ShopifySellingPlanGroupConnection
  /** The server pixel configured by the app. */
  serverPixel?: Maybe<ShopifyServerPixel>
  /**
   * Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains
   * business and store management settings for the shop.
   */
  shop: ShopifyShop
  /** The shop's billing preferences. */
  shopBillingPreferences: ShopifyShopBillingPreferences
  /** A list of locales available on a shop. */
  shopLocales: Array<ShopifyShopLocale>
  /** Returns a Shop Pay payment request receipt. */
  shopPayPaymentRequestReceipt?: Maybe<ShopifyShopPayPaymentRequestReceipt>
  /** Returns a list of Shop Pay payment request receipts. */
  shopPayPaymentRequestReceipts?: Maybe<ShopifyShopPayPaymentRequestReceiptConnection>
  /**
   * Returns a Shopify Function by its ID.
   * [Functions](https://shopify.dev/apps/build/functions)
   * enable you to customize Shopify's backend logic at defined parts of the commerce loop.
   */
  shopifyFunction?: Maybe<ShopifyShopifyFunction>
  /** Returns the Shopify Functions owned by the querying API client installed on the shop. */
  shopifyFunctions: ShopifyShopifyFunctionConnection
  /** Shopify Payments account information, including balances and payouts. */
  shopifyPaymentsAccount?: Maybe<ShopifyShopifyPaymentsAccount>
  /** The StaffMember resource, by ID. */
  staffMember?: Maybe<ShopifyStaffMember>
  /** The shop staff members. */
  staffMembers?: Maybe<ShopifyStaffMemberConnection>
  /**
   * Standard metafield definitions are intended for specific, common use cases. Their namespace and keys reflect these use cases and are reserved.
   *
   * Refer to all available [`Standard Metafield Definition Templates`](https://shopify.dev/api/admin-graphql/latest/objects/StandardMetafieldDefinitionTemplate).
   */
  standardMetafieldDefinitionTemplates: ShopifyStandardMetafieldDefinitionTemplateConnection
  /** Returns a store credit account resource by ID. */
  storeCreditAccount?: Maybe<ShopifyStoreCreditAccount>
  /** Returns a SubscriptionBillingAttempt by ID. */
  subscriptionBillingAttempt?: Maybe<ShopifySubscriptionBillingAttempt>
  /** Returns subscription billing attempts on a store. */
  subscriptionBillingAttempts: ShopifySubscriptionBillingAttemptConnection
  /** Returns a subscription billing cycle found either by cycle index or date. */
  subscriptionBillingCycle?: Maybe<ShopifySubscriptionBillingCycle>
  /**
   * Retrieves the results of the asynchronous job for the subscription billing cycle bulk action based on the specified job ID.
   * This query can be used to obtain the billing cycles that match the criteria defined in the subscriptionBillingCycleBulkSearch and subscriptionBillingCycleBulkCharge mutations.
   */
  subscriptionBillingCycleBulkResults: ShopifySubscriptionBillingCycleConnection
  /** Returns subscription billing cycles for a contract ID. */
  subscriptionBillingCycles: ShopifySubscriptionBillingCycleConnection
  /** Returns a Subscription Contract resource by ID. */
  subscriptionContract?: Maybe<ShopifySubscriptionContract>
  /** List Subscription Contracts. */
  subscriptionContracts: ShopifySubscriptionContractConnection
  /** Returns a Subscription Draft resource by ID. */
  subscriptionDraft?: Maybe<ShopifySubscriptionDraft>
  /** The Taxonomy resource lets you access the categories, attributes and values of the loaded taxonomy tree. */
  taxonomy?: Maybe<ShopifyTaxonomy>
  /** Returns a list of TenderTransactions associated with the shop. */
  tenderTransactions: ShopifyTenderTransactionConnection
  /** Returns a particular theme for the shop. */
  theme?: Maybe<ShopifyOnlineStoreTheme>
  /** Returns a paginated list of themes for the shop. */
  themes?: Maybe<ShopifyOnlineStoreThemeConnection>
  /** A resource that can have localized values for different languages. */
  translatableResource?: Maybe<ShopifyTranslatableResource>
  /** Resources that can have localized values for different languages. */
  translatableResources: ShopifyTranslatableResourceConnection
  /** Resources that can have localized values for different languages. */
  translatableResourcesByIds: ShopifyTranslatableResourceConnection
  /** Returns a redirect resource by ID. */
  urlRedirect?: Maybe<ShopifyUrlRedirect>
  /** Returns a redirect import resource by ID. */
  urlRedirectImport?: Maybe<ShopifyUrlRedirectImport>
  /** A list of the shop's URL redirect saved searches. */
  urlRedirectSavedSearches: ShopifySavedSearchConnection
  /** A list of redirects for a shop. */
  urlRedirects: ShopifyUrlRedirectConnection
  /** Count of redirects. Limited to a maximum of 10000 by default. */
  urlRedirectsCount?: Maybe<ShopifyCount>
  /** Validation available on the shop. */
  validation?: Maybe<ShopifyValidation>
  /** Validations available on the shop. */
  validations: ShopifyValidationConnection
  /**
   * Returns a
   * [web pixel](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels)
   * by ID.
   */
  webPixel?: Maybe<ShopifyWebPixel>
  /** The web presences for the shop. */
  webPresences?: Maybe<ShopifyMarketWebPresenceConnection>
  /**
   * Returns a webhook subscription by ID.
   *
   * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
   */
  webhookSubscription?: Maybe<ShopifyWebhookSubscription>
  /**
   * Returns a list of webhook subscriptions.
   *
   * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe).
   */
  webhookSubscriptions: ShopifyWebhookSubscriptionConnection
  /**
   * The count of webhook subscriptions.
   *
   * Building an app? If you only use app-specific webhooks, you won't need this. App-specific webhook subscriptions specified in your `shopify.app.toml` may be easier. They are automatically kept up to date by Shopify & require less maintenance. Please read [About managing webhook subscriptions](https://shopify.dev/docs/apps/build/webhooks/subscribe). Limited to a maximum of 10000 by default.
   */
  webhookSubscriptionsCount?: Maybe<ShopifyCount>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAbandonedCheckoutsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyAbandonedCheckoutSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAbandonedCheckoutsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAbandonmentArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAbandonmentByAbandonedCheckoutIdArgs {
  abandonedCheckoutId: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAppArgs {
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAppByHandleArgs {
  handle: Scalars["String"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAppByKeyArgs {
  apiKey: Scalars["String"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAppDiscountTypeArgs {
  functionId: Scalars["String"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAppDiscountTypesNodesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAppInstallationArgs {
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAppInstallationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  category?: InputMaybe<ShopifyAppInstallationCategory>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  privacy?: InputMaybe<ShopifyAppInstallationPrivacy>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyAppInstallationSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootArticleArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootArticleAuthorsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootArticleTagsArgs {
  limit: Scalars["Int"]["input"]
  sort?: InputMaybe<ShopifyArticleTagSort>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootArticlesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyArticleSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAssignedFulfillmentOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  assignmentStatus?: InputMaybe<ShopifyFulfillmentOrderAssignmentStatus>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  locationIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyFulfillmentOrderSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAutomaticDiscountArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAutomaticDiscountNodeArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAutomaticDiscountNodesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyAutomaticDiscountSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAutomaticDiscountSavedSearchesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootAutomaticDiscountsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyAutomaticDiscountSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootBlogArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootBlogsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyBlogSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootBlogsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootBusinessEntityArgs {
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCarrierServiceArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCarrierServicesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCarrierServiceSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCartTransformsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCashTrackingSessionArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCashTrackingSessionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCashTrackingSessionsSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCatalogArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCatalogsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCatalogSortKeys>
  type?: InputMaybe<ShopifyCatalogType>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCatalogsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  type?: InputMaybe<ShopifyCatalogType>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootChannelArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootChannelsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCheckoutBrandingArgs {
  checkoutProfileId: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCheckoutProfileArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCheckoutProfilesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCheckoutProfileSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCodeDiscountNodeArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCodeDiscountNodeByCodeArgs {
  code: Scalars["String"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCodeDiscountNodesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyCodeDiscountSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCodeDiscountSavedSearchesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCollectionArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCollectionByHandleArgs {
  handle: Scalars["String"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCollectionByIdentifierArgs {
  identifier: ShopifyCollectionIdentifierInput
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCollectionSavedSearchesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCollectionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyCollectionSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCollectionsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCommentArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCommentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCommentSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCompaniesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCompanySortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCompaniesCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCompanyArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCompanyContactArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCompanyContactRoleArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCompanyLocationArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCompanyLocationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCompanyLocationSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootConsentPolicyArgs {
  consentRequired?: InputMaybe<Scalars["Boolean"]["input"]>
  countryCode?: InputMaybe<ShopifyPrivacyCountryCode>
  dataSaleOptOutRequired?: InputMaybe<Scalars["Boolean"]["input"]>
  id?: InputMaybe<Scalars["ID"]["input"]>
  regionCode?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCurrentBulkOperationArgs {
  type?: InputMaybe<ShopifyBulkOperationType>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCustomerArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCustomerAccountPageArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCustomerAccountPagesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCustomerByIdentifierArgs {
  identifier: ShopifyCustomerIdentifierInput
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCustomerMergeJobStatusArgs {
  jobId: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCustomerMergePreviewArgs {
  customerOneId: Scalars["ID"]["input"]
  customerTwoId: Scalars["ID"]["input"]
  overrideFields?: InputMaybe<ShopifyCustomerMergeOverrideFields>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCustomerPaymentMethodArgs {
  id: Scalars["ID"]["input"]
  showRevoked?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCustomerSavedSearchesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCustomerSavedSearchSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCustomerSegmentMembersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  queryId?: InputMaybe<Scalars["ID"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  segmentId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<Scalars["String"]["input"]>
  timezone?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCustomerSegmentMembersQueryArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCustomerSegmentMembershipArgs {
  customerId: Scalars["ID"]["input"]
  segmentIds: Array<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCustomersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCustomerSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootCustomersCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDeletionEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyDeletionEventSortKeys>
  subjectTypes?: InputMaybe<Array<ShopifyDeletionEventSubjectType>>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDeliveryCustomizationArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDeliveryCustomizationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDeliveryProfileArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDeliveryProfilesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  merchantOwnedOnly?: InputMaybe<Scalars["Boolean"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDeliveryPromiseParticipantsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  brandedPromiseHandle: Scalars["String"]["input"]
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  ownerIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDeliveryPromiseProviderArgs {
  locationId: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDiscountCodesCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDiscountNodeArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDiscountNodesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyDiscountSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDiscountNodesCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDiscountRedeemCodeBulkCreationArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDiscountRedeemCodeSavedSearchesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyDiscountCodeSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDisputeArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDisputeEvidenceArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDisputesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDomainArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDraftOrderArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDraftOrderAvailableDeliveryOptionsArgs {
  input: ShopifyDraftOrderAvailableDeliveryOptionsInput
  localPickupCount?: InputMaybe<Scalars["Int"]["input"]>
  localPickupFrom?: InputMaybe<Scalars["Int"]["input"]>
  search?: InputMaybe<Scalars["String"]["input"]>
  sessionToken?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDraftOrderSavedSearchesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDraftOrderTagArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDraftOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyDraftOrderSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootDraftOrdersCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootEventArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyEventSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootEventsCountArgs {
  query?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootFileSavedSearchesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootFilesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyFileSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootFulfillmentArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootFulfillmentOrderArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootFulfillmentOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  includeClosed?: InputMaybe<Scalars["Boolean"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyFulfillmentOrderSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootFulfillmentServiceArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootGiftCardArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootGiftCardsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyGiftCardSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootGiftCardsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootInventoryItemArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootInventoryItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootInventoryLevelArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootInventoryShipmentArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootInventoryTransferArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootInventoryTransfersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyTransferSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootJobArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootLocationArgs {
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootLocationByIdentifierArgs {
  identifier: ShopifyLocationIdentifierInput
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootLocationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  includeInactive?: InputMaybe<Scalars["Boolean"]["input"]>
  includeLegacy?: InputMaybe<Scalars["Boolean"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyLocationSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootLocationsAvailableForDeliveryProfilesConnectionArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootLocationsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootManualHoldsFulfillmentOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMarketArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMarketByGeographyArgs {
  countryCode: ShopifyCountryCode
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMarketLocalizableResourceArgs {
  resourceId: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMarketLocalizableResourcesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  resourceType: ShopifyMarketLocalizableResourceType
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMarketLocalizableResourcesByIdsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  resourceIds: Array<Scalars["ID"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMarketingActivitiesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  marketingActivityIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
  query?: InputMaybe<Scalars["String"]["input"]>
  remoteIds?: InputMaybe<Array<Scalars["String"]["input"]>>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyMarketingActivitySortKeys>
  utm?: InputMaybe<ShopifyUtmInput>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMarketingActivityArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMarketingEventArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMarketingEventsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMarketingEventSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMarketsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMarketsSortKeys>
  type?: InputMaybe<ShopifyMarketType>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMarketsResolvedValuesArgs {
  buyerSignal: ShopifyBuyerSignalInput
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMenuArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMenusArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMenuSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMetafieldDefinitionArgs {
  identifier?: InputMaybe<ShopifyMetafieldDefinitionIdentifierInput>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  constraintStatus?: InputMaybe<ShopifyMetafieldDefinitionConstraintStatus>
  constraintSubtype?: InputMaybe<ShopifyMetafieldDefinitionConstraintSubtypeIdentifier>
  first?: InputMaybe<Scalars["Int"]["input"]>
  key?: InputMaybe<Scalars["String"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  ownerType: ShopifyMetafieldOwnerType
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMetaobjectArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMetaobjectByHandleArgs {
  handle: ShopifyMetaobjectHandleInput
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMetaobjectDefinitionArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMetaobjectDefinitionByTypeArgs {
  type: Scalars["String"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMetaobjectDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMetaobjectsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<Scalars["String"]["input"]>
  type: Scalars["String"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMobilePlatformApplicationArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootMobilePlatformApplicationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootNodeArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootNodesArgs {
  ids: Array<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootOrderArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootOrderByIdentifierArgs {
  identifier: ShopifyOrderIdentifierInput
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootOrderPaymentStatusArgs {
  orderId: Scalars["ID"]["input"]
  paymentReferenceId: Scalars["String"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootOrderSavedSearchesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyOrderSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootOrdersCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootPageArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootPagesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyPageSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootPagesCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootPaymentCustomizationArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootPaymentCustomizationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootPaymentTermsTemplatesArgs {
  paymentTermsType?: InputMaybe<ShopifyPaymentTermsType>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootPointOfSaleDeviceArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootPriceListArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootPriceListsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyPriceListSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductByHandleArgs {
  handle: Scalars["String"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductByIdentifierArgs {
  identifier: ShopifyProductIdentifierInput
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductDuplicateJobArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductFeedArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductFeedsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductOperationArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductResourceFeedbackArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductSavedSearchesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductTagsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductTypesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductVariantArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductVariantByIdentifierArgs {
  identifier: ShopifyProductVariantIdentifierInput
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductVariantsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyProductVariantSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductVariantsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductVendorsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyProductSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootProductsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootPublicationArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootPublicationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  catalogType?: InputMaybe<ShopifyCatalogType>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootPublicationsCountArgs {
  catalogType?: InputMaybe<ShopifyCatalogType>
  limit?: InputMaybe<Scalars["Int"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootPublishedProductsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  publicationId: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootRefundArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootReturnArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootReturnCalculateArgs {
  input: ShopifyCalculateReturnInput
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootReturnableFulfillmentArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootReturnableFulfillmentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  orderId: Scalars["ID"]["input"]
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootReverseDeliveryArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootReverseFulfillmentOrderArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootScriptTagArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootScriptTagsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  src?: InputMaybe<Scalars["URL"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSegmentArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSegmentFilterSuggestionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  first: Scalars["Int"]["input"]
  search: Scalars["String"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSegmentFiltersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSegmentMigrationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSegmentValueSuggestionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  filterQueryName?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  functionParameterQueryName?: InputMaybe<Scalars["String"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  search: Scalars["String"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSegmentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifySegmentSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSegmentsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSellingPlanGroupArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSellingPlanGroupsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifySellingPlanGroupSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootShopLocalesArgs {
  published?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootShopPayPaymentRequestReceiptArgs {
  token: Scalars["String"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootShopPayPaymentRequestReceiptsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyShopPayPaymentRequestReceiptsSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootShopifyFunctionArgs {
  id: Scalars["String"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootShopifyFunctionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  apiType?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  useCreationUi?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootStaffMemberArgs {
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootStaffMembersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyStaffMembersSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootStandardMetafieldDefinitionTemplatesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  constraintStatus?: InputMaybe<ShopifyMetafieldDefinitionConstraintStatus>
  constraintSubtype?: InputMaybe<ShopifyMetafieldDefinitionConstraintSubtypeIdentifier>
  excludeActivated?: InputMaybe<Scalars["Boolean"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootStoreCreditAccountArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSubscriptionBillingAttemptArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSubscriptionBillingAttemptsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifySubscriptionBillingAttemptsSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSubscriptionBillingCycleArgs {
  billingCycleInput: ShopifySubscriptionBillingCycleInput
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSubscriptionBillingCycleBulkResultsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  jobId: Scalars["ID"]["input"]
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSubscriptionBillingCyclesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  billingCyclesDateRangeSelector?: InputMaybe<ShopifySubscriptionBillingCyclesDateRangeSelector>
  billingCyclesIndexRangeSelector?: InputMaybe<ShopifySubscriptionBillingCyclesIndexRangeSelector>
  contractId: Scalars["ID"]["input"]
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifySubscriptionBillingCyclesSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSubscriptionContractArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSubscriptionContractsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifySubscriptionContractsSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootSubscriptionDraftArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootTenderTransactionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootThemeArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootThemesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  names?: InputMaybe<Array<Scalars["String"]["input"]>>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  roles?: InputMaybe<Array<ShopifyThemeRole>>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootTranslatableResourceArgs {
  resourceId: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootTranslatableResourcesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  resourceType: ShopifyTranslatableResourceType
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootTranslatableResourcesByIdsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  resourceIds: Array<Scalars["ID"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootUrlRedirectArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootUrlRedirectImportArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootUrlRedirectSavedSearchesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootUrlRedirectsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyUrlRedirectSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootUrlRedirectsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootValidationArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootValidationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyValidationSortKeys>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootWebPixelArgs {
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootWebPresencesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootWebhookSubscriptionArgs {
  id: Scalars["ID"]["input"]
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootWebhookSubscriptionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  format?: InputMaybe<ShopifyWebhookSubscriptionFormat>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyWebhookSubscriptionSortKeys>
  topics?: InputMaybe<Array<ShopifyWebhookSubscriptionTopic>>
}

/** The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start. */
export interface ShopifyQueryRootWebhookSubscriptionsCountArgs {
  limit?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * The `Refund` object represents a financial record of money returned to a customer from an order.
 * It provides a comprehensive view of all refunded amounts, transactions, and restocking instructions
 * associated with returning products or correcting order issues.
 *
 * The `Refund` object provides information to:
 *
 * - Process customer returns and issue payments back to customers
 * - Handle partial or full refunds for line items with optional inventory restocking
 * - Refund shipping costs, duties, and additional fees
 * - Issue store credit refunds as an alternative to original payment method returns
 * - Track and reconcile all financial transactions related to refunds
 *
 * Each `Refund` object maintains detailed records of what was refunded, how much was refunded,
 * which payment transactions were involved, and any inventory restocking that occurred. The refund
 * can include multiple components such as product line items, shipping charges, taxes, duties, and
 * additional fees, all calculated with proper currency handling for international orders.
 *
 * Refunds are always associated with an [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order)
 * and can optionally be linked to a [return](https://shopify.dev/docs/api/admin-graphql/latest/objects/Return)
 * if the refund was initiated through the returns process. The refund tracks both the presentment currency
 * (what the customer sees) and the shop currency for accurate financial reporting.
 *
 * > Note:
 * > The existence of a `Refund` object doesn't guarantee that the money has been returned to the customer.
 * > The actual financial processing happens through associated
 * > [`OrderTransaction`](https://shopify.dev/docs/api/admin-graphql/latest/objects/OrderTransaction)
 * > objects, which can be in various states, such as pending, processing, success, or failure.
 * > To determine if money has actually been refunded, check the
 * > [status](https://shopify.dev/docs/api/admin-graphql/latest/objects/OrderTransaction#field-OrderTransaction.fields.status)
 * > of the associated transactions.
 *
 * Learn more about
 * [managing returns](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management),
 * [refunding duties](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/view-and-refund-duties), and
 * [processing refunds](https://shopify.dev/docs/api/admin-graphql/latest/mutations/refundCreate).
 */
export interface ShopifyRefund
  extends ShopifyLegacyInteroperability,
    ShopifyNode {
  __typename?: "Refund"
  /** The date and time when the refund was created. */
  createdAt?: Maybe<Scalars["DateTime"]["output"]>
  /** A list of the refunded duties as part of this refund. */
  duties?: Maybe<Array<ShopifyRefundDuty>>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** The optional note associated with the refund. */
  note?: Maybe<Scalars["String"]["output"]>
  /** The order associated with the refund. */
  order: ShopifyOrder
  /** The order adjustments that are attached with the refund. */
  orderAdjustments: ShopifyOrderAdjustmentConnection
  /** The `RefundLineItem` resources attached to the refund. */
  refundLineItems: ShopifyRefundLineItemConnection
  /** The `RefundShippingLine` resources attached to the refund. */
  refundShippingLines: ShopifyRefundShippingLineConnection
  /** The return associated with the refund. */
  return?: Maybe<ShopifyReturn>
  /** The staff member who created the refund. */
  staffMember?: Maybe<ShopifyStaffMember>
  /**
   * The total amount across all transactions for the refund.
   * @deprecated Use `totalRefundedSet` instead.
   */
  totalRefunded: ShopifyMoneyV2
  /** The total amount across all transactions for the refund, in shop and presentment currencies. */
  totalRefundedSet: ShopifyMoneyBag
  /** The transactions associated with the refund. */
  transactions: ShopifyOrderTransactionConnection
  /** The date and time when the refund was updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/**
 * The `Refund` object represents a financial record of money returned to a customer from an order.
 * It provides a comprehensive view of all refunded amounts, transactions, and restocking instructions
 * associated with returning products or correcting order issues.
 *
 * The `Refund` object provides information to:
 *
 * - Process customer returns and issue payments back to customers
 * - Handle partial or full refunds for line items with optional inventory restocking
 * - Refund shipping costs, duties, and additional fees
 * - Issue store credit refunds as an alternative to original payment method returns
 * - Track and reconcile all financial transactions related to refunds
 *
 * Each `Refund` object maintains detailed records of what was refunded, how much was refunded,
 * which payment transactions were involved, and any inventory restocking that occurred. The refund
 * can include multiple components such as product line items, shipping charges, taxes, duties, and
 * additional fees, all calculated with proper currency handling for international orders.
 *
 * Refunds are always associated with an [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order)
 * and can optionally be linked to a [return](https://shopify.dev/docs/api/admin-graphql/latest/objects/Return)
 * if the refund was initiated through the returns process. The refund tracks both the presentment currency
 * (what the customer sees) and the shop currency for accurate financial reporting.
 *
 * > Note:
 * > The existence of a `Refund` object doesn't guarantee that the money has been returned to the customer.
 * > The actual financial processing happens through associated
 * > [`OrderTransaction`](https://shopify.dev/docs/api/admin-graphql/latest/objects/OrderTransaction)
 * > objects, which can be in various states, such as pending, processing, success, or failure.
 * > To determine if money has actually been refunded, check the
 * > [status](https://shopify.dev/docs/api/admin-graphql/latest/objects/OrderTransaction#field-OrderTransaction.fields.status)
 * > of the associated transactions.
 *
 * Learn more about
 * [managing returns](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management),
 * [refunding duties](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/view-and-refund-duties), and
 * [processing refunds](https://shopify.dev/docs/api/admin-graphql/latest/mutations/refundCreate).
 */
export interface ShopifyRefundOrderAdjustmentsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Refund` object represents a financial record of money returned to a customer from an order.
 * It provides a comprehensive view of all refunded amounts, transactions, and restocking instructions
 * associated with returning products or correcting order issues.
 *
 * The `Refund` object provides information to:
 *
 * - Process customer returns and issue payments back to customers
 * - Handle partial or full refunds for line items with optional inventory restocking
 * - Refund shipping costs, duties, and additional fees
 * - Issue store credit refunds as an alternative to original payment method returns
 * - Track and reconcile all financial transactions related to refunds
 *
 * Each `Refund` object maintains detailed records of what was refunded, how much was refunded,
 * which payment transactions were involved, and any inventory restocking that occurred. The refund
 * can include multiple components such as product line items, shipping charges, taxes, duties, and
 * additional fees, all calculated with proper currency handling for international orders.
 *
 * Refunds are always associated with an [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order)
 * and can optionally be linked to a [return](https://shopify.dev/docs/api/admin-graphql/latest/objects/Return)
 * if the refund was initiated through the returns process. The refund tracks both the presentment currency
 * (what the customer sees) and the shop currency for accurate financial reporting.
 *
 * > Note:
 * > The existence of a `Refund` object doesn't guarantee that the money has been returned to the customer.
 * > The actual financial processing happens through associated
 * > [`OrderTransaction`](https://shopify.dev/docs/api/admin-graphql/latest/objects/OrderTransaction)
 * > objects, which can be in various states, such as pending, processing, success, or failure.
 * > To determine if money has actually been refunded, check the
 * > [status](https://shopify.dev/docs/api/admin-graphql/latest/objects/OrderTransaction#field-OrderTransaction.fields.status)
 * > of the associated transactions.
 *
 * Learn more about
 * [managing returns](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management),
 * [refunding duties](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/view-and-refund-duties), and
 * [processing refunds](https://shopify.dev/docs/api/admin-graphql/latest/mutations/refundCreate).
 */
export interface ShopifyRefundRefundLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Refund` object represents a financial record of money returned to a customer from an order.
 * It provides a comprehensive view of all refunded amounts, transactions, and restocking instructions
 * associated with returning products or correcting order issues.
 *
 * The `Refund` object provides information to:
 *
 * - Process customer returns and issue payments back to customers
 * - Handle partial or full refunds for line items with optional inventory restocking
 * - Refund shipping costs, duties, and additional fees
 * - Issue store credit refunds as an alternative to original payment method returns
 * - Track and reconcile all financial transactions related to refunds
 *
 * Each `Refund` object maintains detailed records of what was refunded, how much was refunded,
 * which payment transactions were involved, and any inventory restocking that occurred. The refund
 * can include multiple components such as product line items, shipping charges, taxes, duties, and
 * additional fees, all calculated with proper currency handling for international orders.
 *
 * Refunds are always associated with an [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order)
 * and can optionally be linked to a [return](https://shopify.dev/docs/api/admin-graphql/latest/objects/Return)
 * if the refund was initiated through the returns process. The refund tracks both the presentment currency
 * (what the customer sees) and the shop currency for accurate financial reporting.
 *
 * > Note:
 * > The existence of a `Refund` object doesn't guarantee that the money has been returned to the customer.
 * > The actual financial processing happens through associated
 * > [`OrderTransaction`](https://shopify.dev/docs/api/admin-graphql/latest/objects/OrderTransaction)
 * > objects, which can be in various states, such as pending, processing, success, or failure.
 * > To determine if money has actually been refunded, check the
 * > [status](https://shopify.dev/docs/api/admin-graphql/latest/objects/OrderTransaction#field-OrderTransaction.fields.status)
 * > of the associated transactions.
 *
 * Learn more about
 * [managing returns](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management),
 * [refunding duties](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/view-and-refund-duties), and
 * [processing refunds](https://shopify.dev/docs/api/admin-graphql/latest/mutations/refundCreate).
 */
export interface ShopifyRefundRefundShippingLinesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Refund` object represents a financial record of money returned to a customer from an order.
 * It provides a comprehensive view of all refunded amounts, transactions, and restocking instructions
 * associated with returning products or correcting order issues.
 *
 * The `Refund` object provides information to:
 *
 * - Process customer returns and issue payments back to customers
 * - Handle partial or full refunds for line items with optional inventory restocking
 * - Refund shipping costs, duties, and additional fees
 * - Issue store credit refunds as an alternative to original payment method returns
 * - Track and reconcile all financial transactions related to refunds
 *
 * Each `Refund` object maintains detailed records of what was refunded, how much was refunded,
 * which payment transactions were involved, and any inventory restocking that occurred. The refund
 * can include multiple components such as product line items, shipping charges, taxes, duties, and
 * additional fees, all calculated with proper currency handling for international orders.
 *
 * Refunds are always associated with an [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order)
 * and can optionally be linked to a [return](https://shopify.dev/docs/api/admin-graphql/latest/objects/Return)
 * if the refund was initiated through the returns process. The refund tracks both the presentment currency
 * (what the customer sees) and the shop currency for accurate financial reporting.
 *
 * > Note:
 * > The existence of a `Refund` object doesn't guarantee that the money has been returned to the customer.
 * > The actual financial processing happens through associated
 * > [`OrderTransaction`](https://shopify.dev/docs/api/admin-graphql/latest/objects/OrderTransaction)
 * > objects, which can be in various states, such as pending, processing, success, or failure.
 * > To determine if money has actually been refunded, check the
 * > [status](https://shopify.dev/docs/api/admin-graphql/latest/objects/OrderTransaction#field-OrderTransaction.fields.status)
 * > of the associated transactions.
 *
 * Learn more about
 * [managing returns](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management),
 * [refunding duties](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/view-and-refund-duties), and
 * [processing refunds](https://shopify.dev/docs/api/admin-graphql/latest/mutations/refundCreate).
 */
export interface ShopifyRefundTransactionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An agreement between the merchant and customer to refund all or a portion of the order. */
export interface ShopifyRefundAgreement extends ShopifySalesAgreement {
  __typename?: "RefundAgreement"
  /** The application that created the agreement. */
  app?: Maybe<ShopifyApp>
  /** The date and time at which the agreement occured. */
  happenedAt: Scalars["DateTime"]["output"]
  /** The unique ID for the agreement. */
  id: Scalars["ID"]["output"]
  /** The reason the agremeent was created. */
  reason: ShopifyOrderActionType
  /** The refund associated with the agreement. */
  refund: ShopifyRefund
  /** The sales associated with the agreement. */
  sales: ShopifySaleConnection
  /** The staff member associated with the agreement. */
  user?: Maybe<ShopifyStaffMember>
}

/** An agreement between the merchant and customer to refund all or a portion of the order. */
export interface ShopifyRefundAgreementSalesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple Refunds. */
export interface ShopifyRefundConnection {
  __typename?: "RefundConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyRefundEdge>
  /** A list of nodes that are contained in RefundEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyRefund>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `refundCreate` mutation. */
export interface ShopifyRefundCreatePayload {
  __typename?: "RefundCreatePayload"
  /** The order associated with the created refund. */
  order?: Maybe<ShopifyOrder>
  /** The created refund. */
  refund?: Maybe<ShopifyRefund>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Represents a refunded duty. */
export interface ShopifyRefundDuty {
  __typename?: "RefundDuty"
  /** The amount of a refunded duty in shop and presentment currencies. */
  amountSet: ShopifyMoneyBag
  /** The duty associated with this refunded duty. */
  originalDuty?: Maybe<ShopifyDuty>
}

/** The input fields required to reimburse duties on a refund. */
export interface ShopifyRefundDutyInput {
  /** The ID of the duty in the refund. */
  dutyId: Scalars["ID"]["input"]
  /** The type of refund for this duty. */
  refundType?: InputMaybe<ShopifyRefundDutyRefundType>
}

/** The type of refund to perform for a particular refund duty. */
export type ShopifyRefundDutyRefundType =
  /** The duty is fully refunded. */
  | "FULL"
  /** The duty is proportionally refunded based on the quantity of the refunded line item. */
  | "PROPORTIONAL"
  | "%future added value"

/** An auto-generated type which holds one Refund and a cursor during pagination. */
export interface ShopifyRefundEdge {
  __typename?: "RefundEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of RefundEdge. */
  node: ShopifyRefund
}

/** The input fields to create a refund. */
export interface ShopifyRefundInput {
  /** Whether to allow the total refunded amount to surpass the amount paid for the order. */
  allowOverRefunding?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The currency that is used to refund the order. This must be the presentment currency, which is the currency used by the customer. This is a required field for orders where the currency and presentment currency differ. */
  currency?: InputMaybe<ShopifyCurrencyCode>
  /** An optional reason for a discrepancy between calculated and actual refund amounts. */
  discrepancyReason?: InputMaybe<ShopifyOrderAdjustmentInputDiscrepancyReason>
  /** An optional note that's attached to the refund. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** Whether to send a refund notification to the customer. */
  notify?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The ID of the order that's being refunded. */
  orderId: Scalars["ID"]["input"]
  /** A list of duties to refund. */
  refundDuties?: InputMaybe<Array<ShopifyRefundDutyInput>>
  /** A list of line items to refund. */
  refundLineItems?: InputMaybe<Array<ShopifyRefundLineItemInput>>
  /** A list of instructions to process the financial outcome of the refund. */
  refundMethods?: InputMaybe<Array<ShopifyRefundMethodInput>>
  /** The input fields that are required to reimburse shipping costs. */
  shipping?: InputMaybe<ShopifyShippingRefundInput>
  /** A list of transactions involved in the refund. */
  transactions?: InputMaybe<Array<ShopifyOrderTransactionInput>>
}

/** A line item that's included in a refund. */
export interface ShopifyRefundLineItem {
  __typename?: "RefundLineItem"
  /** A globally-unique ID. */
  id?: Maybe<Scalars["ID"]["output"]>
  /** The `LineItem` resource associated to the refunded line item. */
  lineItem: ShopifyLineItem
  /** The inventory restock location. */
  location?: Maybe<ShopifyLocation>
  /**
   * The price of a refunded line item.
   * @deprecated Use `priceSet` instead.
   */
  price: Scalars["Money"]["output"]
  /** The price of a refunded line item in shop and presentment currencies. */
  priceSet: ShopifyMoneyBag
  /** The quantity of a refunded line item. */
  quantity: Scalars["Int"]["output"]
  /** The type of restock for the refunded line item. */
  restockType: ShopifyRefundLineItemRestockType
  /** Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund. */
  restocked: Scalars["Boolean"]["output"]
  /**
   * The subtotal price of a refunded line item.
   * @deprecated Use `subtotalSet` instead.
   */
  subtotal: Scalars["Money"]["output"]
  /** The subtotal price of a refunded line item in shop and presentment currencies. */
  subtotalSet: ShopifyMoneyBag
  /**
   * The total tax charged on a refunded line item.
   * @deprecated Use `totalTaxSet` instead.
   */
  totalTax: Scalars["Money"]["output"]
  /** The total tax charged on a refunded line item in shop and presentment currencies. */
  totalTaxSet: ShopifyMoneyBag
}

/** An auto-generated type for paginating through multiple RefundLineItems. */
export interface ShopifyRefundLineItemConnection {
  __typename?: "RefundLineItemConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyRefundLineItemEdge>
  /** A list of nodes that are contained in RefundLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyRefundLineItem>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one RefundLineItem and a cursor during pagination. */
export interface ShopifyRefundLineItemEdge {
  __typename?: "RefundLineItemEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of RefundLineItemEdge. */
  node: ShopifyRefundLineItem
}

/** The input fields required to reimburse line items on a refund. */
export interface ShopifyRefundLineItemInput {
  /** The ID of the line item in the refund. */
  lineItemId: Scalars["ID"]["input"]
  /** The intended location for restocking. If the `restockType` is set to `NO_RESTOCK`, then this value is empty. */
  locationId?: InputMaybe<Scalars["ID"]["input"]>
  /** The quantity of the associated line item to be refunded. */
  quantity: Scalars["Int"]["input"]
  /** The type of restock for this line item. */
  restockType?: InputMaybe<ShopifyRefundLineItemRestockType>
}

/** The type of restock performed for a particular refund line item. */
export type ShopifyRefundLineItemRestockType =
  /** The refund line item was canceled. Use this when restocking unfulfilled line items. */
  | "CANCEL"
  /** Deprecated. The refund line item was restocked, without specifically beingidentified as a return or cancelation. This value is not accepted when creating new refunds. */
  | "LEGACY_RESTOCK"
  /** Refund line item was not restocked. */
  | "NO_RESTOCK"
  /** The refund line item was returned. Use this when restocking line items that were fulfilled. */
  | "RETURN"
  | "%future added value"

/** The different methods that a refund amount can be allocated to. */
export type ShopifyRefundMethodAllocation =
  /** The refund is to original payment methods. */
  | "ORIGINAL_PAYMENT_METHODS"
  /** The refund is to store credit. */
  | "STORE_CREDIT"
  | "%future added value"

/** The input fields for processing the financial outcome of a refund. */
export interface ShopifyRefundMethodInput {
  /** The details of the refund to store credit. */
  storeCreditRefund?: InputMaybe<ShopifyStoreCreditRefundInput>
}

/** The financial transfer details for a return outcome that results in a refund. */
export interface ShopifyRefundReturnOutcome {
  __typename?: "RefundReturnOutcome"
  /** The total monetary value to be refunded in shop and presentment currencies. */
  amount: ShopifyMoneyBag
  /** A list of suggested refund methods. */
  suggestedRefundMethods: Array<ShopifySuggestedRefundMethod>
  /** A list of suggested order transactions. */
  suggestedTransactions: Array<ShopifySuggestedOrderTransaction>
}

/** The input fields for the shipping cost to refund. */
export interface ShopifyRefundShippingInput {
  /** Whether to refund the full shipping amount. */
  fullRefund?: InputMaybe<Scalars["Boolean"]["input"]>
  /**
   * The input fields required to refund shipping cost, in the presentment currency of the order.
   * This overrides the `fullRefund` argument.
   * This field defaults to 0.00 when not provided and when the `fullRefund` argument is false.
   */
  shippingRefundAmount?: InputMaybe<ShopifyMoneyInput>
}

/** A shipping line item that's included in a refund. */
export interface ShopifyRefundShippingLine extends ShopifyNode {
  __typename?: "RefundShippingLine"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The `ShippingLine` resource associated to the refunded shipping line item. */
  shippingLine: ShopifyShippingLine
  /** The subtotal amount of the refund shipping line in shop and presentment currencies. */
  subtotalAmountSet: ShopifyMoneyBag
  /** The tax amount of the refund shipping line in shop and presentment currencies. */
  taxAmountSet: ShopifyMoneyBag
}

/** An auto-generated type for paginating through multiple RefundShippingLines. */
export interface ShopifyRefundShippingLineConnection {
  __typename?: "RefundShippingLineConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyRefundShippingLineEdge>
  /** A list of nodes that are contained in RefundShippingLineEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyRefundShippingLine>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one RefundShippingLine and a cursor during pagination. */
export interface ShopifyRefundShippingLineEdge {
  __typename?: "RefundShippingLineEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of RefundShippingLineEdge. */
  node: ShopifyRefundShippingLine
}

/** A condition checking the visitor's region. */
export interface ShopifyRegionsCondition {
  __typename?: "RegionsCondition"
  /** The application level for the condition. */
  applicationLevel?: Maybe<ShopifyMarketConditionApplicationType>
  /** The regions that comprise the market. */
  regions: ShopifyMarketRegionConnection
}

/** A condition checking the visitor's region. */
export interface ShopifyRegionsConditionRegionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The input fields for a remote Authorize.net customer payment profile. */
export interface ShopifyRemoteAuthorizeNetCustomerPaymentProfileInput {
  /**
   * The customerPaymentProfileId value from the Authorize.net API. Starting on 2025,
   * customer_payment_profile_id will become mandatory for all API versions.
   */
  customerPaymentProfileId?: InputMaybe<Scalars["String"]["input"]>
  /** The customerProfileId value from the Authorize.net API. */
  customerProfileId: Scalars["String"]["input"]
}

/** The input fields for a remote Braintree customer payment profile. */
export interface ShopifyRemoteBraintreePaymentMethodInput {
  /** The `customer_id` value from the Braintree API. */
  customerId: Scalars["String"]["input"]
  /**
   * The `payment_method_token` value from the Braintree API. Starting on 2025,
   * payment_method_token will become mandatory for all API versions.
   */
  paymentMethodToken?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields for a remote stripe payment method. */
export interface ShopifyRemoteStripePaymentMethodInput {
  /** The customer_id value from the Stripe API. */
  customerId: Scalars["String"]["input"]
  /**
   * The payment_method_id value from the Stripe API. Starting on 2025,
   * payment_method_id will become mandatory for all API versions.
   */
  paymentMethodId?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `removeFromReturn` mutation. */
export interface ShopifyRemoveFromReturnPayload {
  __typename?: "RemoveFromReturnPayload"
  /** The modified return. */
  return?: Maybe<ShopifyReturn>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyReturnUserError>
}

/** The resolved price inclusivity attributes. */
export interface ShopifyResolvedPriceInclusivity {
  __typename?: "ResolvedPriceInclusivity"
  /** Whether duties are included in the price. */
  dutiesIncluded: Scalars["Boolean"]["output"]
  /** Whether taxes are included in the price. */
  taxesIncluded: Scalars["Boolean"]["output"]
}

/**
 * An alert message that appears in the Shopify admin about a problem with a store resource, with 1 or more actions to take. For example, you could use an alert to indicate that you're not charging taxes on some product variants.
 * They can optionally have a specific icon and be dismissed by merchants.
 */
export interface ShopifyResourceAlert {
  __typename?: "ResourceAlert"
  /**
   * Buttons in the alert that link to related information.
   * For example, _Edit variants_.
   */
  actions: Array<ShopifyResourceAlertAction>
  /** The secondary text in the alert that includes further information or instructions about how to solve a problem. */
  content: Scalars["HTML"]["output"]
  /**
   * Unique identifier that appears when an alert is manually closed by the merchant.
   * Most alerts can't be manually closed.
   */
  dismissibleHandle?: Maybe<Scalars["String"]["output"]>
  /** An icon that's optionally displayed with the alert. */
  icon?: Maybe<ShopifyResourceAlertIcon>
  /** Indication of how important the alert is. */
  severity: ShopifyResourceAlertSeverity
  /** The primary text in the alert that includes information or describes the problem. */
  title: Scalars["String"]["output"]
}

/** An action associated to a resource alert, such as editing variants. */
export interface ShopifyResourceAlertAction {
  __typename?: "ResourceAlertAction"
  /** Whether the action appears as a button or as a link. */
  primary: Scalars["Boolean"]["output"]
  /** Resource for the action to show. */
  show?: Maybe<Scalars["String"]["output"]>
  /** The text for the button in the alert. For example, _Edit variants_. */
  title: Scalars["String"]["output"]
  /** The target URL that the button links to. */
  url: Scalars["URL"]["output"]
}

/** The available icons for resource alerts. */
export type ShopifyResourceAlertIcon =
  /** A checkmark inside a circle. */
  | "CHECKMARK_CIRCLE"
  /** A lowercase `i` inside a circle. */
  | "INFORMATION_CIRCLE"
  | "%future added value"

/** The possible severity levels for a resource alert. */
export type ShopifyResourceAlertSeverity =
  /** Indicates a critical alert. For example, a blocked app. */
  | "CRITICAL"
  /** Indicates a neutral alert. For example, an accepted dispute. */
  | "DEFAULT"
  | "ERROR"
  /** Indicates an informative alert. For example, an escalated dispute. */
  | "INFO"
  /** Indicates a success alert. For example, a winning a dispute. */
  | "SUCCESS"
  /** Indicates an informative alert. For example, a new dispute. */
  | "WARNING"
  | "%future added value"

/** Represents feedback from apps about a resource, and the steps required to set up the apps on the shop. */
export interface ShopifyResourceFeedback {
  __typename?: "ResourceFeedback"
  /**
   * Feedback from an app about the steps a merchant needs to take to set up the app on their store.
   * @deprecated Use `details` instead.
   */
  appFeedback: Array<ShopifyAppFeedback>
  /** List of AppFeedback detailing issues regarding a resource. */
  details: Array<ShopifyAppFeedback>
  /** Summary of resource feedback pertaining to the resource. */
  summary: Scalars["String"]["output"]
}

/** The input fields for a resource feedback object. */
export interface ShopifyResourceFeedbackCreateInput {
  /**
   * The date and time when the feedback was generated. Used to help determine whether
   * incoming feedback is outdated compared to existing feedback.
   */
  feedbackGeneratedAt: Scalars["DateTime"]["input"]
  /**
   * If the feedback state is `requires_action`, then you can send a string message that communicates the action to be taken by the merchant.
   * The string must be a single message up to 100 characters long and must end with a period.
   * You need to adhere to the message formatting rules or your requests will fail:
   * - `[Explanation of the problem]. [Suggested action].`
   *
   * **Examples:**
   * - `[Your app name]` isn't connected. Connect your account to use this sales channel. `[Learn more]`
   * - `[Your app name]` isn't configured. Agree to the terms and conditions to use this app. `[Learn more]`
   * Both `Your app name` and `Learn more` (a button which directs merchants to your app) are automatically populated in the Shopify admin.
   */
  messages?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The state of the feedback and whether it requires merchant action. */
  state: ShopifyResourceFeedbackState
}

/** The state of the resource feedback. */
export type ShopifyResourceFeedbackState =
  /** No action required from merchant. */
  | "ACCEPTED"
  /** The merchant needs to resolve an issue with the resource. */
  | "REQUIRES_ACTION"
  | "%future added value"

/** Represents a merchandising background operation interface. */
export interface ShopifyResourceOperation {
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The count of processed rows, summing imported, failed, and skipped rows. */
  processedRowCount?: Maybe<Scalars["Int"]["output"]>
  /** Represents a rows objects within this background operation. */
  rowCount?: Maybe<ShopifyRowCount>
  /** The status of this operation. */
  status: ShopifyResourceOperationStatus
}

/** Represents the state of this catalog operation. */
export type ShopifyResourceOperationStatus =
  /** Operation is currently running. */
  | "ACTIVE"
  /** Operation is complete. */
  | "COMPLETE"
  /** Operation has been created. */
  | "CREATED"
  | "%future added value"

/**
 * A resource publication represents information about the publication of a resource.
 * An instance of `ResourcePublication`, unlike `ResourcePublicationV2`, can be neither published or scheduled to be published.
 *
 * See [ResourcePublicationV2](/api/admin-graphql/latest/objects/ResourcePublicationV2) for more context.
 */
export interface ShopifyResourcePublication {
  __typename?: "ResourcePublication"
  /**
   * The channel the resource publication is published to.
   * @deprecated Use `publication` instead.
   */
  channel: ShopifyChannel
  /**
   * Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.
   * If false, then the resource publication is neither published nor scheduled to be published.
   */
  isPublished: Scalars["Boolean"]["output"]
  /** The publication the resource publication is published to. */
  publication: ShopifyPublication
  /**
   * The date that the resource publication was or is going to be published to the publication.
   * If the product isn't published, then this field returns an epoch timestamp.
   */
  publishDate: Scalars["DateTime"]["output"]
  /** The resource published to the publication. */
  publishable: ShopifyPublishable
}

/** An auto-generated type for paginating through multiple ResourcePublications. */
export interface ShopifyResourcePublicationConnection {
  __typename?: "ResourcePublicationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyResourcePublicationEdge>
  /** A list of nodes that are contained in ResourcePublicationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyResourcePublication>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ResourcePublication and a cursor during pagination. */
export interface ShopifyResourcePublicationEdge {
  __typename?: "ResourcePublicationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ResourcePublicationEdge. */
  node: ShopifyResourcePublication
}

/**
 * A resource publication represents information about the publication of a resource.
 * Unlike `ResourcePublication`, an instance of `ResourcePublicationV2` can't be unpublished. It must either be published or scheduled to be published.
 *
 * See [ResourcePublication](/api/admin-graphql/latest/objects/ResourcePublication) for more context.
 */
export interface ShopifyResourcePublicationV2 {
  __typename?: "ResourcePublicationV2"
  /**
   * Whether the resource publication is published. If true, then the resource publication is published to the publication.
   * If false, then the resource publication is staged to be published to the publication.
   */
  isPublished: Scalars["Boolean"]["output"]
  /** The publication the resource publication is published to. */
  publication: ShopifyPublication
  /** The date that the resource publication was or is going to be published to the publication. */
  publishDate?: Maybe<Scalars["DateTime"]["output"]>
  /** The resource published to the publication. */
  publishable: ShopifyPublishable
}

/** An auto-generated type for paginating through multiple ResourcePublicationV2s. */
export interface ShopifyResourcePublicationV2Connection {
  __typename?: "ResourcePublicationV2Connection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyResourcePublicationV2Edge>
  /** A list of nodes that are contained in ResourcePublicationV2Edge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyResourcePublicationV2>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ResourcePublicationV2 and a cursor during pagination. */
export interface ShopifyResourcePublicationV2Edge {
  __typename?: "ResourcePublicationV2Edge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ResourcePublicationV2Edge. */
  node: ShopifyResourcePublicationV2
}

/**
 * A restocking fee is a fee captured as part of a return to cover the costs of handling a return line item.
 * Typically, this would cover the costs of inspecting, repackaging, and restocking the item.
 */
export interface ShopifyRestockingFee extends ShopifyFee {
  __typename?: "RestockingFee"
  /** The amount of the restocking fee, in shop and presentment currencies. */
  amountSet: ShopifyMoneyBag
  /** The unique ID for the Fee. */
  id: Scalars["ID"]["output"]
  /** The value of the fee as a percentage. */
  percentage: Scalars["Float"]["output"]
}

/** The input fields for a restocking fee. */
export interface ShopifyRestockingFeeInput {
  /** The value of the fee as a percentage. */
  percentage: Scalars["Float"]["input"]
}

/** Information about product is restricted for a given resource. */
export interface ShopifyRestrictedForResource {
  __typename?: "RestrictedForResource"
  /** Returns true when the product is restricted for the given resource. */
  restricted: Scalars["Boolean"]["output"]
  /** Restriction reason for the given resource. */
  restrictedReason: Scalars["String"]["output"]
}

/**
 * The `Return` object represents the intent of a buyer to ship one or more items from an order back to a merchant
 * or a third-party fulfillment location. A return is associated with an [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order)
 * and can include multiple return [line items](https://shopify.dev/docs/api/admin-graphql/latest/objects/LineItem).
 * Each return has a [status](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps#return-statuses),
 * which indicates the state of the return.
 *
 * Use the `Return` object to capture the financial, logistical,
 * and business intent of a return. For example, you can identify eligible items for a return and issue customers
 * a refund for returned items on behalf of the merchant.
 *
 * Learn more about providing a
 * [return management workflow](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management)
 * for merchants. You can also manage [exchanges](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-exchanges),
 * [reverse fulfillment orders](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-fulfillment-orders),
 * and [reverse deliveries](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-deliveries)
 * on behalf of merchants.
 */
export interface ShopifyReturn extends ShopifyNode {
  __typename?: "Return"
  /** The date and time when the return was closed. */
  closedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The date and time when the return was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** Additional information about the declined return. */
  decline?: Maybe<ShopifyReturnDecline>
  /** The exchange line items attached to the return. */
  exchangeLineItems: ShopifyExchangeLineItemConnection
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The name of the return. */
  name: Scalars["String"]["output"]
  /** The order that the return belongs to. */
  order: ShopifyOrder
  /** The list of refunds associated with the return. */
  refunds: ShopifyRefundConnection
  /** The date and time when the return was approved. */
  requestApprovedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The return line items attached to the return. */
  returnLineItems: ShopifyReturnLineItemTypeConnection
  /** The return shipping fees for the return. */
  returnShippingFees: Array<ShopifyReturnShippingFee>
  /** The list of reverse fulfillment orders for the return. */
  reverseFulfillmentOrders: ShopifyReverseFulfillmentOrderConnection
  /** The status of the return. */
  status: ShopifyReturnStatus
  /** A suggested financial outcome for the return. */
  suggestedFinancialOutcome?: Maybe<ShopifySuggestedReturnFinancialOutcome>
  /**
   * A suggested refund for the return.
   * @deprecated Use `suggestedFinancialOutcome` instead.
   */
  suggestedRefund?: Maybe<ShopifySuggestedReturnRefund>
  /** The sum of all return line item quantities for the return. */
  totalQuantity: Scalars["Int"]["output"]
}

/**
 * The `Return` object represents the intent of a buyer to ship one or more items from an order back to a merchant
 * or a third-party fulfillment location. A return is associated with an [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order)
 * and can include multiple return [line items](https://shopify.dev/docs/api/admin-graphql/latest/objects/LineItem).
 * Each return has a [status](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps#return-statuses),
 * which indicates the state of the return.
 *
 * Use the `Return` object to capture the financial, logistical,
 * and business intent of a return. For example, you can identify eligible items for a return and issue customers
 * a refund for returned items on behalf of the merchant.
 *
 * Learn more about providing a
 * [return management workflow](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management)
 * for merchants. You can also manage [exchanges](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-exchanges),
 * [reverse fulfillment orders](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-fulfillment-orders),
 * and [reverse deliveries](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-deliveries)
 * on behalf of merchants.
 */
export interface ShopifyReturnExchangeLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  includeRemovedItems?: InputMaybe<Scalars["Boolean"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Return` object represents the intent of a buyer to ship one or more items from an order back to a merchant
 * or a third-party fulfillment location. A return is associated with an [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order)
 * and can include multiple return [line items](https://shopify.dev/docs/api/admin-graphql/latest/objects/LineItem).
 * Each return has a [status](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps#return-statuses),
 * which indicates the state of the return.
 *
 * Use the `Return` object to capture the financial, logistical,
 * and business intent of a return. For example, you can identify eligible items for a return and issue customers
 * a refund for returned items on behalf of the merchant.
 *
 * Learn more about providing a
 * [return management workflow](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management)
 * for merchants. You can also manage [exchanges](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-exchanges),
 * [reverse fulfillment orders](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-fulfillment-orders),
 * and [reverse deliveries](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-deliveries)
 * on behalf of merchants.
 */
export interface ShopifyReturnRefundsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Return` object represents the intent of a buyer to ship one or more items from an order back to a merchant
 * or a third-party fulfillment location. A return is associated with an [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order)
 * and can include multiple return [line items](https://shopify.dev/docs/api/admin-graphql/latest/objects/LineItem).
 * Each return has a [status](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps#return-statuses),
 * which indicates the state of the return.
 *
 * Use the `Return` object to capture the financial, logistical,
 * and business intent of a return. For example, you can identify eligible items for a return and issue customers
 * a refund for returned items on behalf of the merchant.
 *
 * Learn more about providing a
 * [return management workflow](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management)
 * for merchants. You can also manage [exchanges](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-exchanges),
 * [reverse fulfillment orders](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-fulfillment-orders),
 * and [reverse deliveries](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-deliveries)
 * on behalf of merchants.
 */
export interface ShopifyReturnReturnLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Return` object represents the intent of a buyer to ship one or more items from an order back to a merchant
 * or a third-party fulfillment location. A return is associated with an [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order)
 * and can include multiple return [line items](https://shopify.dev/docs/api/admin-graphql/latest/objects/LineItem).
 * Each return has a [status](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps#return-statuses),
 * which indicates the state of the return.
 *
 * Use the `Return` object to capture the financial, logistical,
 * and business intent of a return. For example, you can identify eligible items for a return and issue customers
 * a refund for returned items on behalf of the merchant.
 *
 * Learn more about providing a
 * [return management workflow](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management)
 * for merchants. You can also manage [exchanges](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-exchanges),
 * [reverse fulfillment orders](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-fulfillment-orders),
 * and [reverse deliveries](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-deliveries)
 * on behalf of merchants.
 */
export interface ShopifyReturnReverseFulfillmentOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `Return` object represents the intent of a buyer to ship one or more items from an order back to a merchant
 * or a third-party fulfillment location. A return is associated with an [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order)
 * and can include multiple return [line items](https://shopify.dev/docs/api/admin-graphql/latest/objects/LineItem).
 * Each return has a [status](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps#return-statuses),
 * which indicates the state of the return.
 *
 * Use the `Return` object to capture the financial, logistical,
 * and business intent of a return. For example, you can identify eligible items for a return and issue customers
 * a refund for returned items on behalf of the merchant.
 *
 * Learn more about providing a
 * [return management workflow](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management)
 * for merchants. You can also manage [exchanges](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-exchanges),
 * [reverse fulfillment orders](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-fulfillment-orders),
 * and [reverse deliveries](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-deliveries)
 * on behalf of merchants.
 */
export interface ShopifyReturnSuggestedFinancialOutcomeArgs {
  exchangeLineItems: Array<ShopifySuggestedOutcomeExchangeLineItemInput>
  refundDuties?: InputMaybe<Array<ShopifyRefundDutyInput>>
  refundMethodAllocation?: InputMaybe<ShopifyRefundMethodAllocation>
  refundShipping?: InputMaybe<ShopifyRefundShippingInput>
  returnLineItems: Array<ShopifySuggestedOutcomeReturnLineItemInput>
}

/**
 * The `Return` object represents the intent of a buyer to ship one or more items from an order back to a merchant
 * or a third-party fulfillment location. A return is associated with an [order](https://shopify.dev/docs/api/admin-graphql/latest/objects/Order)
 * and can include multiple return [line items](https://shopify.dev/docs/api/admin-graphql/latest/objects/LineItem).
 * Each return has a [status](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps#return-statuses),
 * which indicates the state of the return.
 *
 * Use the `Return` object to capture the financial, logistical,
 * and business intent of a return. For example, you can identify eligible items for a return and issue customers
 * a refund for returned items on behalf of the merchant.
 *
 * Learn more about providing a
 * [return management workflow](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/build-return-management)
 * for merchants. You can also manage [exchanges](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-exchanges),
 * [reverse fulfillment orders](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-fulfillment-orders),
 * and [reverse deliveries](https://shopify.dev/docs/apps/build/orders-fulfillment/returns-apps/manage-reverse-deliveries)
 * on behalf of merchants.
 */
export interface ShopifyReturnSuggestedRefundArgs {
  refundDuties?: InputMaybe<Array<ShopifyRefundDutyInput>>
  refundShipping?: InputMaybe<ShopifyRefundShippingInput>
  returnRefundLineItems: Array<ShopifyReturnRefundLineItemInput>
}

/** An agreement between the merchant and customer for a return. */
export interface ShopifyReturnAgreement extends ShopifySalesAgreement {
  __typename?: "ReturnAgreement"
  /** The application that created the agreement. */
  app?: Maybe<ShopifyApp>
  /** The date and time at which the agreement occured. */
  happenedAt: Scalars["DateTime"]["output"]
  /** The unique ID for the agreement. */
  id: Scalars["ID"]["output"]
  /** The reason the agremeent was created. */
  reason: ShopifyOrderActionType
  /** The return associated with the agreement. */
  return: ShopifyReturn
  /** The sales associated with the agreement. */
  sales: ShopifySaleConnection
  /** The staff member associated with the agreement. */
  user?: Maybe<ShopifyStaffMember>
}

/** An agreement between the merchant and customer for a return. */
export interface ShopifyReturnAgreementSalesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The input fields for approving a customer's return request. */
export interface ShopifyReturnApproveRequestInput {
  /** The ID of the return that's being approved. */
  id: Scalars["ID"]["input"]
  /**
   * Notify the customer when a return request is approved.
   * The customer will only receive a notification if `Order.email` is present.
   */
  notifyCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `returnApproveRequest` mutation. */
export interface ShopifyReturnApproveRequestPayload {
  __typename?: "ReturnApproveRequestPayload"
  /** The approved return. */
  return?: Maybe<ShopifyReturn>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyReturnUserError>
}

/** Return type for `returnCancel` mutation. */
export interface ShopifyReturnCancelPayload {
  __typename?: "ReturnCancelPayload"
  /** The canceled return. */
  return?: Maybe<ShopifyReturn>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyReturnUserError>
}

/** Return type for `returnClose` mutation. */
export interface ShopifyReturnClosePayload {
  __typename?: "ReturnClosePayload"
  /** The closed return. */
  return?: Maybe<ShopifyReturn>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyReturnUserError>
}

/** An auto-generated type for paginating through multiple Returns. */
export interface ShopifyReturnConnection {
  __typename?: "ReturnConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyReturnEdge>
  /** A list of nodes that are contained in ReturnEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyReturn>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `returnCreate` mutation. */
export interface ShopifyReturnCreatePayload {
  __typename?: "ReturnCreatePayload"
  /** The created return. */
  return?: Maybe<ShopifyReturn>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyReturnUserError>
}

/** Additional information about why a merchant declined the customer's return request. */
export interface ShopifyReturnDecline {
  __typename?: "ReturnDecline"
  /**
   * The notification message sent to the customer about their declined return request.
   * Maximum length: 500 characters.
   */
  note?: Maybe<Scalars["String"]["output"]>
  /** The reason the customer's return request was declined. */
  reason: ShopifyReturnDeclineReason
}

/** The reason why the merchant declined a customer's return request. */
export type ShopifyReturnDeclineReason =
  /** The return contains final sale items. */
  | "FINAL_SALE"
  /** The return is declined for another reason. */
  | "OTHER"
  /** The return period has ended. */
  | "RETURN_PERIOD_ENDED"
  | "%future added value"

/** The input fields for declining a customer's return request. */
export interface ShopifyReturnDeclineRequestInput {
  /**
   * The notification message that's sent to a customer about their declined return request.
   * Maximum length: 500 characters.
   */
  declineNote?: InputMaybe<Scalars["String"]["input"]>
  /** The reason why the merchant declined the customer's return request. */
  declineReason: ShopifyReturnDeclineReason
  /** The ID of the return that's being declined. */
  id: Scalars["ID"]["input"]
  /**
   * Notify the customer when a return request is declined.
   * The customer will only receive a notification if `Order.email` is present.
   */
  notifyCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `returnDeclineRequest` mutation. */
export interface ShopifyReturnDeclineRequestPayload {
  __typename?: "ReturnDeclineRequestPayload"
  /** The declined return. */
  return?: Maybe<ShopifyReturn>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyReturnUserError>
}

/** An auto-generated type which holds one Return and a cursor during pagination. */
export interface ShopifyReturnEdge {
  __typename?: "ReturnEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ReturnEdge. */
  node: ShopifyReturn
}

/** Possible error codes that can be returned by `ReturnUserError`. */
export type ShopifyReturnErrorCode =
  /** The requested resource already exists. */
  | "ALREADY_EXISTS"
  /** The input value is blank. */
  | "BLANK"
  /** A requested resource could not be created. */
  | "CREATION_FAILED"
  /** The input value should be equal to the value allowed. */
  | "EQUAL_TO"
  /** A required feature is not enabled. */
  | "FEATURE_NOT_ENABLED"
  /** The input value should be greater than the minimum allowed value. */
  | "GREATER_THAN"
  /** The input value should be greater than or equal to the minimum value allowed. */
  | "GREATER_THAN_OR_EQUAL_TO"
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** Unexpected internal error happened. */
  | "INTERNAL_ERROR"
  /** The input value is invalid. */
  | "INVALID"
  /** A resource was not in the correct state for the operation to succeed. */
  | "INVALID_STATE"
  /** The input value should be less than the maximum value allowed. */
  | "LESS_THAN"
  /** The input value should be less than or equal to the maximum value allowed. */
  | "LESS_THAN_OR_EQUAL_TO"
  /** The user does not have permission to perform the operation. */
  | "MISSING_PERMISSION"
  /** A requested notification could not be sent. */
  | "NOTIFICATION_FAILED"
  /** The input value is not a number. */
  | "NOT_A_NUMBER"
  /** A requested item is not editable. */
  | "NOT_EDITABLE"
  /** A requested item could not be found. */
  | "NOT_FOUND"
  /** The input value needs to be blank. */
  | "PRESENT"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too big. */
  | "TOO_BIG"
  /** The input value is too long. */
  | "TOO_LONG"
  /** Too many arguments provided. */
  | "TOO_MANY_ARGUMENTS"
  /** The input value is too short. */
  | "TOO_SHORT"
  /** The input value is the wrong length. */
  | "WRONG_LENGTH"
  | "%future added value"

/** The input fields for a return. */
export interface ShopifyReturnInput {
  /** The new line items to be added to the order. */
  exchangeLineItems?: InputMaybe<Array<ShopifyExchangeLineItemInput>>
  /** The ID of the order to be returned. */
  orderId: Scalars["ID"]["input"]
  /** The UTC date and time when the return was first solicited by the customer. */
  requestedAt?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The return line items list to be handled. */
  returnLineItems: Array<ShopifyReturnLineItemInput>
  /** The return shipping fee to capture. */
  returnShippingFee?: InputMaybe<ShopifyReturnShippingFeeInput>
}

/** A return line item. */
export interface ShopifyReturnLineItem
  extends ShopifyNode,
    ShopifyReturnLineItemType {
  __typename?: "ReturnLineItem"
  /** A note from the customer that describes the item to be returned. Maximum length: 300 characters. */
  customerNote?: Maybe<Scalars["String"]["output"]>
  /** The fulfillment line item from which items are returned. */
  fulfillmentLineItem: ShopifyFulfillmentLineItem
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The quantity that can be processed. */
  processableQuantity: Scalars["Int"]["output"]
  /** The quantity that has been processed. */
  processedQuantity: Scalars["Int"]["output"]
  /** The quantity being returned. */
  quantity: Scalars["Int"]["output"]
  /** The quantity that can be refunded. */
  refundableQuantity: Scalars["Int"]["output"]
  /** The quantity that was refunded. */
  refundedQuantity: Scalars["Int"]["output"]
  /** The restocking fee for the return line item. */
  restockingFee?: Maybe<ShopifyRestockingFee>
  /** The reason for returning the item. */
  returnReason: ShopifyReturnReason
  /** Additional information about the reason for the return. Maximum length: 255 characters. */
  returnReasonNote: Scalars["String"]["output"]
  /** The total weight of the item. */
  totalWeight?: Maybe<ShopifyWeight>
  /** The quantity that has't been processed. */
  unprocessedQuantity: Scalars["Int"]["output"]
  /** The total line price after all discounts on the line item, including both line item level discounts and code-based line item discounts, are applied. */
  withCodeDiscountedTotalPriceSet: ShopifyMoneyBag
}

/** The input fields for a return line item. */
export interface ShopifyReturnLineItemInput {
  /**
   * The ID of the fulfillment line item to be returned.
   * Specifically, this field expects a `FulfillmentLineItem.id`.
   */
  fulfillmentLineItemId: Scalars["ID"]["input"]
  /** The quantity of the item to be returned. */
  quantity: Scalars["Int"]["input"]
  /** The restocking fee to capture. */
  restockingFee?: InputMaybe<ShopifyRestockingFeeInput>
  /** The reason for the item to be returned. */
  returnReason: ShopifyReturnReason
  /**
   * A note about the reason that the item is being returned.
   * Maximum length: 255 characters.
   */
  returnReasonNote?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields for a removing a return line item from a return. */
export interface ShopifyReturnLineItemRemoveFromReturnInput {
  /** The quantity of the associated return line item to be removed. */
  quantity: Scalars["Int"]["input"]
  /** The ID of the return line item to remove. */
  returnLineItemId: Scalars["ID"]["input"]
}

/** Return type for `returnLineItemRemoveFromReturn` mutation. */
export interface ShopifyReturnLineItemRemoveFromReturnPayload {
  __typename?: "ReturnLineItemRemoveFromReturnPayload"
  /** The modified return. */
  return?: Maybe<ShopifyReturn>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyReturnUserError>
}

/** A return line item of any type. */
export interface ShopifyReturnLineItemType {
  /** A note from the customer that describes the item to be returned. Maximum length: 300 characters. */
  customerNote?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The quantity that can be processed. */
  processableQuantity: Scalars["Int"]["output"]
  /** The quantity that has been processed. */
  processedQuantity: Scalars["Int"]["output"]
  /** The quantity being returned. */
  quantity: Scalars["Int"]["output"]
  /** The quantity that can be refunded. */
  refundableQuantity: Scalars["Int"]["output"]
  /** The quantity that was refunded. */
  refundedQuantity: Scalars["Int"]["output"]
  /** The reason for returning the item. */
  returnReason: ShopifyReturnReason
  /** Additional information about the reason for the return. Maximum length: 255 characters. */
  returnReasonNote: Scalars["String"]["output"]
  /** The quantity that has't been processed. */
  unprocessedQuantity: Scalars["Int"]["output"]
}

/** An auto-generated type for paginating through multiple ReturnLineItemTypes. */
export interface ShopifyReturnLineItemTypeConnection {
  __typename?: "ReturnLineItemTypeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyReturnLineItemTypeEdge>
  /** A list of nodes that are contained in ReturnLineItemTypeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyReturnLineItemType>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ReturnLineItemType and a cursor during pagination. */
export interface ShopifyReturnLineItemTypeEdge {
  __typename?: "ReturnLineItemTypeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ReturnLineItemTypeEdge. */
  node: ShopifyReturnLineItemType
}

/** The financial transfer details for the return outcome. */
export type ShopifyReturnOutcomeFinancialTransfer =
  | ShopifyInvoiceReturnOutcome
  | ShopifyRefundReturnOutcome

/** The input fields for an exchange line item. */
export interface ShopifyReturnProcessExchangeLineItemInput {
  /** The ID of the exchange line item. */
  id: Scalars["ID"]["input"]
  /** The quantity of the exchange line item. */
  quantity: Scalars["Int"]["input"]
}

/** The input fields for the financial transfer for the return. */
export interface ShopifyReturnProcessFinancialTransferInput {
  /** Issue a refund for the return. */
  issueRefund?: InputMaybe<ShopifyReturnProcessRefundInput>
}

/** The input fields for processing a return. */
export interface ShopifyReturnProcessInput {
  /** The exchange line items list to be handled. */
  exchangeLineItems?: InputMaybe<
    Array<ShopifyReturnProcessExchangeLineItemInput>
  >
  /** The financial transfer for the return. */
  financialTransfer?: InputMaybe<ShopifyReturnProcessFinancialTransferInput>
  /** The note for the return. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** Whether to notify the customer about the return. */
  notifyCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The refund duties list to be handled. */
  refundDuties?: InputMaybe<Array<ShopifyRefundDutyInput>>
  /** The shipping cost to refund. */
  refundShipping?: InputMaybe<ShopifyRefundShippingInput>
  /** The ID of the return to be processed. */
  returnId: Scalars["ID"]["input"]
  /** The return line items list to be handled. */
  returnLineItems?: InputMaybe<Array<ShopifyReturnProcessReturnLineItemInput>>
  /** ID of the tip line item. */
  tipLineId?: InputMaybe<Scalars["ID"]["input"]>
}

/** Return type for `returnProcess` mutation. */
export interface ShopifyReturnProcessPayload {
  __typename?: "ReturnProcessPayload"
  /** The processed return. */
  return?: Maybe<ShopifyReturn>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyReturnUserError>
}

/** The input fields for the refund for the return. */
export interface ShopifyReturnProcessRefundInput {
  /** Whether to allow the total refunded amount to surpass the amount paid for the order. */
  allowOverRefunding?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The order transactions for the refund. */
  orderTransactions: Array<ShopifyReturnRefundOrderTransactionInput>
  /** A list of instructions to process the financial outcome of the refund. */
  refundMethods?: InputMaybe<Array<ShopifyRefundMethodInput>>
}

/** The input fields for a return line item. */
export interface ShopifyReturnProcessReturnLineItemInput {
  /** The dispositions for the return line item. */
  dispositions?: InputMaybe<Array<ShopifyReverseFulfillmentOrderDisposeInput>>
  /** The ID of the return line item. */
  id: Scalars["ID"]["input"]
  /** The quantity of the return line item. */
  quantity: Scalars["Int"]["input"]
}

/** The reason for returning the return line item. */
export type ShopifyReturnReason =
  /** The item is returned because the buyer did not like the color. Displays as **Color**. */
  | "COLOR"
  /** The item is returned because it is damaged or defective. Displays as **Damaged or defective**. */
  | "DEFECTIVE"
  /** The item is returned because it was not as described. Displays as **Item not as described**. */
  | "NOT_AS_DESCRIBED"
  /** The item is returned for another reason. For this value, a return reason note is also provided. Displays as **Other**. */
  | "OTHER"
  /** The item is returned because the size was too large. Displays as **Size was too large**. */
  | "SIZE_TOO_LARGE"
  /** The item is returned because the size was too small. Displays as **Size was too small**. */
  | "SIZE_TOO_SMALL"
  /** The item is returned because the buyer did not like the style. Displays as **Style**. */
  | "STYLE"
  /** The item is returned because of an unknown reason. Displays as **Unknown**. */
  | "UNKNOWN"
  /** The item is returned because the customer changed their mind. Displays as **Customer changed their mind**. */
  | "UNWANTED"
  /** The item is returned because the customer received the wrong one. Displays as **Received the wrong item**. */
  | "WRONG_ITEM"
  | "%future added value"

/** The input fields to refund a return. */
export interface ShopifyReturnRefundInput {
  /** Whether to send a refund notification to the customer. */
  notifyCustomer?: InputMaybe<Scalars["Boolean"]["input"]>
  /** A list of transactions involved in refunding the return. */
  orderTransactions?: InputMaybe<
    Array<ShopifyReturnRefundOrderTransactionInput>
  >
  /** A list of duties to refund. */
  refundDuties?: InputMaybe<Array<ShopifyRefundDutyInput>>
  /** The shipping amount to refund. */
  refundShipping?: InputMaybe<ShopifyRefundShippingInput>
  /** The ID of the return. */
  returnId: Scalars["ID"]["input"]
  /** A list of return line items to refund. */
  returnRefundLineItems: Array<ShopifyReturnRefundLineItemInput>
}

/** The input fields for a return refund line item. */
export interface ShopifyReturnRefundLineItemInput {
  /** The quantity of the return line item to be refunded. */
  quantity: Scalars["Int"]["input"]
  /** The ID of the return line item to be refunded. */
  returnLineItemId: Scalars["ID"]["input"]
}

/** The input fields to create order transactions when refunding a return. */
export interface ShopifyReturnRefundOrderTransactionInput {
  /** The ID of the parent order transaction. The transaction must be of kind `CAPTURE` or a `SALE`. */
  parentId: Scalars["ID"]["input"]
  /** The amount of money for the transaction in the presentment currency of the order. */
  transactionAmount: ShopifyMoneyInput
}

/** Return type for `returnRefund` mutation. */
export interface ShopifyReturnRefundPayload {
  __typename?: "ReturnRefundPayload"
  /** The created refund. */
  refund?: Maybe<ShopifyRefund>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyReturnUserError>
}

/** Return type for `returnReopen` mutation. */
export interface ShopifyReturnReopenPayload {
  __typename?: "ReturnReopenPayload"
  /** The reopened return. */
  return?: Maybe<ShopifyReturn>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyReturnUserError>
}

/** The input fields for requesting a return. */
export interface ShopifyReturnRequestInput {
  /** The ID of the order that's being returned. */
  orderId: Scalars["ID"]["input"]
  /** The line items that are being handled in the return. */
  returnLineItems: Array<ShopifyReturnRequestLineItemInput>
  /** The return shipping fee to capture. */
  returnShippingFee?: InputMaybe<ShopifyReturnShippingFeeInput>
}

/** The input fields for a return line item. */
export interface ShopifyReturnRequestLineItemInput {
  /**
   * A note from the customer that describes the item to be returned.
   * For example, the note can communicate issues with the item to the merchant.
   * Maximum length: 300 characters.
   */
  customerNote?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The ID of the fulfillment line item to be returned.
   * Specifically, this field expects a `FulfillmentLineItem.id`.
   */
  fulfillmentLineItemId: Scalars["ID"]["input"]
  /** The quantity of the item that's being returned. */
  quantity: Scalars["Int"]["input"]
  /** The restocking fee to capture. */
  restockingFee?: InputMaybe<ShopifyRestockingFeeInput>
  /** The reason why the line item is being returned. */
  returnReason: ShopifyReturnReason
}

/** Return type for `returnRequest` mutation. */
export interface ShopifyReturnRequestPayload {
  __typename?: "ReturnRequestPayload"
  /** The requested return. */
  return?: Maybe<ShopifyReturn>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyReturnUserError>
}

/** A return shipping fee is a fee captured as part of a return to cover the costs of shipping the return. */
export interface ShopifyReturnShippingFee extends ShopifyFee {
  __typename?: "ReturnShippingFee"
  /** The amount of the return shipping fee, in shop and presentment currencies. */
  amountSet: ShopifyMoneyBag
  /** The unique ID for the Fee. */
  id: Scalars["ID"]["output"]
}

/** The input fields for a return shipping fee. */
export interface ShopifyReturnShippingFeeInput {
  /** The value of the fee as a fixed amount in the presentment currency of the order. */
  amount: ShopifyMoneyInput
}

/** The status of a return. */
export type ShopifyReturnStatus =
  /** The return has been canceled. */
  | "CANCELED"
  /** The return has been completed. */
  | "CLOSED"
  /** The return was declined. */
  | "DECLINED"
  /** The return is in progress. */
  | "OPEN"
  /** The return was requested. */
  | "REQUESTED"
  | "%future added value"

/** An error that occurs during the execution of a return mutation. */
export interface ShopifyReturnUserError extends ShopifyDisplayableError {
  __typename?: "ReturnUserError"
  /** The error code. */
  code?: Maybe<ShopifyReturnErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/**
 * A returnable fulfillment, which is an order that has been delivered
 * and is eligible to be returned to the merchant.
 */
export interface ShopifyReturnableFulfillment extends ShopifyNode {
  __typename?: "ReturnableFulfillment"
  /** The fulfillment that the returnable fulfillment refers to. */
  fulfillment: ShopifyFulfillment
  /** The unique ID of the Returnable Fulfillment. */
  id: Scalars["ID"]["output"]
  /** The list of returnable fulfillment line items. */
  returnableFulfillmentLineItems: ShopifyReturnableFulfillmentLineItemConnection
}

/**
 * A returnable fulfillment, which is an order that has been delivered
 * and is eligible to be returned to the merchant.
 */
export interface ShopifyReturnableFulfillmentReturnableFulfillmentLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple ReturnableFulfillments. */
export interface ShopifyReturnableFulfillmentConnection {
  __typename?: "ReturnableFulfillmentConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyReturnableFulfillmentEdge>
  /** A list of nodes that are contained in ReturnableFulfillmentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyReturnableFulfillment>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ReturnableFulfillment and a cursor during pagination. */
export interface ShopifyReturnableFulfillmentEdge {
  __typename?: "ReturnableFulfillmentEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ReturnableFulfillmentEdge. */
  node: ShopifyReturnableFulfillment
}

/** A returnable fulfillment line item. */
export interface ShopifyReturnableFulfillmentLineItem {
  __typename?: "ReturnableFulfillmentLineItem"
  /** The fulfillment line item that can be returned. */
  fulfillmentLineItem: ShopifyFulfillmentLineItem
  /** The quantity available to be returned. */
  quantity: Scalars["Int"]["output"]
}

/** An auto-generated type for paginating through multiple ReturnableFulfillmentLineItems. */
export interface ShopifyReturnableFulfillmentLineItemConnection {
  __typename?: "ReturnableFulfillmentLineItemConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyReturnableFulfillmentLineItemEdge>
  /** A list of nodes that are contained in ReturnableFulfillmentLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyReturnableFulfillmentLineItem>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ReturnableFulfillmentLineItem and a cursor during pagination. */
export interface ShopifyReturnableFulfillmentLineItemEdge {
  __typename?: "ReturnableFulfillmentLineItemEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ReturnableFulfillmentLineItemEdge. */
  node: ShopifyReturnableFulfillmentLineItem
}

/**
 * A reverse delivery is a post-fulfillment object that represents a buyer sending a package to a merchant.
 * For example, a buyer requests a return, and a merchant sends the buyer a shipping label.
 * The reverse delivery contains the context of the items sent back, how they're being sent back
 * (for example, a shipping label), and the current state of the delivery (tracking information).
 */
export interface ShopifyReverseDelivery extends ShopifyNode {
  __typename?: "ReverseDelivery"
  /** The deliverable associated with the reverse delivery. */
  deliverable?: Maybe<ShopifyReverseDeliveryDeliverable>
  /** The ID of the reverse delivery. */
  id: Scalars["ID"]["output"]
  /** The reverse delivery line items attached to the reverse delivery. */
  reverseDeliveryLineItems: ShopifyReverseDeliveryLineItemConnection
  /** The `ReverseFulfillmentOrder` associated with the reverse delivery. */
  reverseFulfillmentOrder: ShopifyReverseFulfillmentOrder
}

/**
 * A reverse delivery is a post-fulfillment object that represents a buyer sending a package to a merchant.
 * For example, a buyer requests a return, and a merchant sends the buyer a shipping label.
 * The reverse delivery contains the context of the items sent back, how they're being sent back
 * (for example, a shipping label), and the current state of the delivery (tracking information).
 */
export interface ShopifyReverseDeliveryReverseDeliveryLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple ReverseDeliveries. */
export interface ShopifyReverseDeliveryConnection {
  __typename?: "ReverseDeliveryConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyReverseDeliveryEdge>
  /** A list of nodes that are contained in ReverseDeliveryEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyReverseDelivery>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `reverseDeliveryCreateWithShipping` mutation. */
export interface ShopifyReverseDeliveryCreateWithShippingPayload {
  __typename?: "ReverseDeliveryCreateWithShippingPayload"
  /** The created reverse delivery. */
  reverseDelivery?: Maybe<ShopifyReverseDelivery>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyReturnUserError>
}

/** The delivery method and artifacts associated with a reverse delivery. */
export type ShopifyReverseDeliveryDeliverable =
  ShopifyReverseDeliveryShippingDeliverable

/** An auto-generated type which holds one ReverseDelivery and a cursor during pagination. */
export interface ShopifyReverseDeliveryEdge {
  __typename?: "ReverseDeliveryEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ReverseDeliveryEdge. */
  node: ShopifyReverseDelivery
}

/** The input fields for a reverse label. */
export interface ShopifyReverseDeliveryLabelInput {
  /** The URL of the label file. If a label file was uploaded to be attached to the delivery, then provide the temporary staged URL. */
  fileUrl: Scalars["URL"]["input"]
}

/** The return label file information for a reverse delivery. */
export interface ShopifyReverseDeliveryLabelV2 {
  __typename?: "ReverseDeliveryLabelV2"
  /** The date and time when the reverse delivery label was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** A public link that can be used to download the label image. */
  publicFileUrl?: Maybe<Scalars["URL"]["output"]>
  /** The date and time when the reverse delivery label was updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** The details about a reverse delivery line item. */
export interface ShopifyReverseDeliveryLineItem extends ShopifyNode {
  __typename?: "ReverseDeliveryLineItem"
  /** The dispositions of the item. */
  dispositions: Array<ShopifyReverseFulfillmentOrderDisposition>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The expected number of units. */
  quantity: Scalars["Int"]["output"]
  /** The corresponding reverse fulfillment order line item. */
  reverseFulfillmentOrderLineItem: ShopifyReverseFulfillmentOrderLineItem
}

/** An auto-generated type for paginating through multiple ReverseDeliveryLineItems. */
export interface ShopifyReverseDeliveryLineItemConnection {
  __typename?: "ReverseDeliveryLineItemConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyReverseDeliveryLineItemEdge>
  /** A list of nodes that are contained in ReverseDeliveryLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyReverseDeliveryLineItem>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ReverseDeliveryLineItem and a cursor during pagination. */
export interface ShopifyReverseDeliveryLineItemEdge {
  __typename?: "ReverseDeliveryLineItemEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ReverseDeliveryLineItemEdge. */
  node: ShopifyReverseDeliveryLineItem
}

/** The input fields for a reverse delivery line item. */
export interface ShopifyReverseDeliveryLineItemInput {
  /** The quantity of the item to be included in the delivery. */
  quantity: Scalars["Int"]["input"]
  /** The ID of the related reverse fulfillment order line item. */
  reverseFulfillmentOrderLineItemId: Scalars["ID"]["input"]
}

/** A reverse shipping deliverable that may include a label and tracking information. */
export interface ShopifyReverseDeliveryShippingDeliverable {
  __typename?: "ReverseDeliveryShippingDeliverable"
  /** The return label attached to the reverse delivery. */
  label?: Maybe<ShopifyReverseDeliveryLabelV2>
  /** The information to track the reverse delivery. */
  tracking?: Maybe<ShopifyReverseDeliveryTrackingV2>
}

/** Return type for `reverseDeliveryShippingUpdate` mutation. */
export interface ShopifyReverseDeliveryShippingUpdatePayload {
  __typename?: "ReverseDeliveryShippingUpdatePayload"
  /** The updated reverse delivery. */
  reverseDelivery?: Maybe<ShopifyReverseDelivery>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyReturnUserError>
}

/** The input fields for tracking information about a return delivery. */
export interface ShopifyReverseDeliveryTrackingInput {
  /** The tracking number for the label. */
  number?: InputMaybe<Scalars["String"]["input"]>
  /** The tracking URL for the carrier. If the carrier isn't supported by Shopify, then provide the tracking URL of the delivery. */
  url?: InputMaybe<Scalars["URL"]["input"]>
}

/** Represents the information used to track a reverse delivery. */
export interface ShopifyReverseDeliveryTrackingV2 {
  __typename?: "ReverseDeliveryTrackingV2"
  /** The provider of the tracking information, in a human-readable format for display purposes. */
  carrierName?: Maybe<Scalars["String"]["output"]>
  /** The identifier used by the courier to identify the shipment. */
  number?: Maybe<Scalars["String"]["output"]>
  /** The URL to track a shipment. */
  url?: Maybe<Scalars["URL"]["output"]>
}

/**
 * A group of one or more items in a return that will be processed at a fulfillment service.
 * There can be more than one reverse fulfillment order for a return at a given location.
 */
export interface ShopifyReverseFulfillmentOrder extends ShopifyNode {
  __typename?: "ReverseFulfillmentOrder"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The list of reverse fulfillment order line items for the reverse fulfillment order. */
  lineItems: ShopifyReverseFulfillmentOrderLineItemConnection
  /** The order associated with the reverse fulfillment order. */
  order?: Maybe<ShopifyOrder>
  /** The list of reverse deliveries for the reverse fulfillment order. */
  reverseDeliveries: ShopifyReverseDeliveryConnection
  /** The status of the reverse fulfillment order. */
  status: ShopifyReverseFulfillmentOrderStatus
  /**
   * The current confirmation for the reverse fulfillment order from a third-party logistics service.
   * If no third-party service is involved, then this value is `nil`.
   */
  thirdPartyConfirmation?: Maybe<ShopifyReverseFulfillmentOrderThirdPartyConfirmation>
}

/**
 * A group of one or more items in a return that will be processed at a fulfillment service.
 * There can be more than one reverse fulfillment order for a return at a given location.
 */
export interface ShopifyReverseFulfillmentOrderLineItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * A group of one or more items in a return that will be processed at a fulfillment service.
 * There can be more than one reverse fulfillment order for a return at a given location.
 */
export interface ShopifyReverseFulfillmentOrderReverseDeliveriesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple ReverseFulfillmentOrders. */
export interface ShopifyReverseFulfillmentOrderConnection {
  __typename?: "ReverseFulfillmentOrderConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyReverseFulfillmentOrderEdge>
  /** A list of nodes that are contained in ReverseFulfillmentOrderEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyReverseFulfillmentOrder>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields to dispose a reverse fulfillment order line item. */
export interface ShopifyReverseFulfillmentOrderDisposeInput {
  /** The final arrangement for the reverse fulfillment order line item. */
  dispositionType: ShopifyReverseFulfillmentOrderDispositionType
  /**
   * The ID of the location where the reverse fulfillment order line item is to be disposed.
   *         This is required when the disposition type is RESTOCKED.
   */
  locationId?: InputMaybe<Scalars["ID"]["input"]>
  /** The quantity of the reverse fulfillment order line item to dispose. */
  quantity: Scalars["Int"]["input"]
  /** The ID of the reverse fulfillment order line item. */
  reverseFulfillmentOrderLineItemId: Scalars["ID"]["input"]
}

/** Return type for `reverseFulfillmentOrderDispose` mutation. */
export interface ShopifyReverseFulfillmentOrderDisposePayload {
  __typename?: "ReverseFulfillmentOrderDisposePayload"
  /** The disposed reverse fulfillment order line items. */
  reverseFulfillmentOrderLineItems?: Maybe<
    Array<ShopifyReverseFulfillmentOrderLineItem>
  >
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyReturnUserError>
}

/** The details of the arrangement of an item. */
export interface ShopifyReverseFulfillmentOrderDisposition extends ShopifyNode {
  __typename?: "ReverseFulfillmentOrderDisposition"
  /** The date and time when the disposition was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The location where the disposition occurred. */
  location?: Maybe<ShopifyLocation>
  /** The number of disposed units. */
  quantity: Scalars["Int"]["output"]
  /** The final arrangement of an item. */
  type: ShopifyReverseFulfillmentOrderDispositionType
}

/** The final arrangement of an item from a reverse fulfillment order. */
export type ShopifyReverseFulfillmentOrderDispositionType =
  /** An item that was expected but absent. */
  | "MISSING"
  /** An item that wasn't restocked. */
  | "NOT_RESTOCKED"
  /** An item that requires further processing before being restocked or discarded. */
  | "PROCESSING_REQUIRED"
  /** An item that was restocked. */
  | "RESTOCKED"
  | "%future added value"

/** An auto-generated type which holds one ReverseFulfillmentOrder and a cursor during pagination. */
export interface ShopifyReverseFulfillmentOrderEdge {
  __typename?: "ReverseFulfillmentOrderEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ReverseFulfillmentOrderEdge. */
  node: ShopifyReverseFulfillmentOrder
}

/** The details about a reverse fulfillment order line item. */
export interface ShopifyReverseFulfillmentOrderLineItem extends ShopifyNode {
  __typename?: "ReverseFulfillmentOrderLineItem"
  /** The dispositions of the item. */
  dispositions: Array<ShopifyReverseFulfillmentOrderDisposition>
  /** The corresponding fulfillment line item for a reverse fulfillment order line item. */
  fulfillmentLineItem?: Maybe<ShopifyFulfillmentLineItem>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The total number of units to be processed. */
  totalQuantity: Scalars["Int"]["output"]
}

/** An auto-generated type for paginating through multiple ReverseFulfillmentOrderLineItems. */
export interface ShopifyReverseFulfillmentOrderLineItemConnection {
  __typename?: "ReverseFulfillmentOrderLineItemConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyReverseFulfillmentOrderLineItemEdge>
  /** A list of nodes that are contained in ReverseFulfillmentOrderLineItemEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyReverseFulfillmentOrderLineItem>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ReverseFulfillmentOrderLineItem and a cursor during pagination. */
export interface ShopifyReverseFulfillmentOrderLineItemEdge {
  __typename?: "ReverseFulfillmentOrderLineItemEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ReverseFulfillmentOrderLineItemEdge. */
  node: ShopifyReverseFulfillmentOrderLineItem
}

/** The status of a reverse fulfillment order. */
export type ShopifyReverseFulfillmentOrderStatus =
  /** The reverse fulfillment order has been canceled. */
  | "CANCELED"
  /** The reverse fulfillment order has been completed. */
  | "CLOSED"
  /** The reverse fulfillment order is in progress. */
  | "OPEN"
  | "%future added value"

/** The third-party confirmation of a reverse fulfillment order. */
export interface ShopifyReverseFulfillmentOrderThirdPartyConfirmation {
  __typename?: "ReverseFulfillmentOrderThirdPartyConfirmation"
  /** The status of the reverse fulfillment order third-party confirmation. */
  status: ShopifyReverseFulfillmentOrderThirdPartyConfirmationStatus
}

/** The status of a reverse fulfillment order third-party confirmation. */
export type ShopifyReverseFulfillmentOrderThirdPartyConfirmationStatus =
  /** The reverse fulfillment order was accepted by the fulfillment service. */
  | "ACCEPTED"
  /** The reverse fulfillment order cancelation was accepted by the fulfillment service. */
  | "CANCEL_ACCEPTED"
  /** The reverse fulfillment order cancelation was rejected by the fulfillment service. */
  | "CANCEL_REJECTED"
  /** The reverse fulfillment order is awaiting acceptance by the fulfillment service. */
  | "PENDING_ACCEPTANCE"
  /** The reverse fulfillment order is awaiting cancelation by the fulfillment service. */
  | "PENDING_CANCELATION"
  /** The reverse fulfillment order was rejected by the fulfillment service. */
  | "REJECTED"
  | "%future added value"

/** List of possible values for a RiskAssessment result. */
export type ShopifyRiskAssessmentResult =
  /** Indicates a high likelihood that the order is fraudulent. */
  | "HIGH"
  /** Indicates a low likelihood that the order is fraudulent. */
  | "LOW"
  /** Indicates a medium likelihood that the order is fraudulent. */
  | "MEDIUM"
  /** Indicates that the risk assessment will not provide a recommendation for the order. */
  | "NONE"
  /** Indicates that the risk assessment is still pending. */
  | "PENDING"
  | "%future added value"

/** A risk fact belongs to a single risk assessment and serves to provide additional context for an assessment. Risk facts are not necessarily tied to the result of the recommendation. */
export interface ShopifyRiskFact {
  __typename?: "RiskFact"
  /** A description of the fact. */
  description: Scalars["String"]["output"]
  /** Indicates whether the fact is a negative, neutral or positive contributor with regards to risk. */
  sentiment: ShopifyRiskFactSentiment
}

/** List of possible values for a RiskFact sentiment. */
export type ShopifyRiskFactSentiment =
  /** A negative contributor that increases the risk. */
  | "NEGATIVE"
  /** A neutral contributor with regards to risk. */
  | "NEUTRAL"
  /** A positive contributor that lowers the risk. */
  | "POSITIVE"
  | "%future added value"

/** A row count represents rows on background operation. */
export interface ShopifyRowCount {
  __typename?: "RowCount"
  /** Estimated number of rows contained within this background operation. */
  count: Scalars["Int"]["output"]
  /** Whether the operation exceeds max number of reportable rows. */
  exceedsMax: Scalars["Boolean"]["output"]
}

/** SEO information. */
export interface ShopifySeo {
  __typename?: "SEO"
  /** SEO Description. */
  description?: Maybe<Scalars["String"]["output"]>
  /** SEO Title. */
  title?: Maybe<Scalars["String"]["output"]>
}

/** The input fields for SEO information. */
export interface ShopifySeoInput {
  /** SEO description of the product. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /** SEO title of the product. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** An individual sale record associated with a sales agreement. Every money value in an order's sales data is represented in the currency's smallest unit. When amounts are divided across multiple line items, such as taxes or order discounts, the amounts might not divide evenly across all of the line items on the order. To address this, the remaining currency units that couldn't be divided evenly are allocated one at a time, starting with the first line item, until they are all accounted for. In aggregate, the values sum up correctly. In isolation, one line item might have a different tax or discount amount than another line item of the same price, before taxes and discounts. This is because the amount could not be divided evenly across the items. The allocation of currency units across line items is immutable. After they are allocated, currency units are never reallocated or redistributed among the line items. */
export interface ShopifySale {
  /** The type of order action that the sale represents. */
  actionType: ShopifySaleActionType
  /** The unique ID for the sale. */
  id: Scalars["ID"]["output"]
  /** The line type assocated with the sale. */
  lineType: ShopifySaleLineType
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars["Int"]["output"]>
  /** All individual taxes associated with the sale. */
  taxes: Array<ShopifySaleTax>
  /** The total sale amount after taxes and discounts. */
  totalAmount: ShopifyMoneyBag
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: ShopifyMoneyBag
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: ShopifyMoneyBag
  /** The total amount of taxes for the sale. */
  totalTaxAmount: ShopifyMoneyBag
}

/** The possible order action types for a sale. */
export type ShopifySaleActionType =
  /** A purchase or charge. */
  | "ORDER"
  /** A removal or return. */
  | "RETURN"
  /** An unknown order action. Represents new actions that may be added in future versions. */
  | "UNKNOWN"
  /** A change to the price, taxes, or discounts for a prior purchase. */
  | "UPDATE"
  | "%future added value"

/** The additional fee details for a line item. */
export interface ShopifySaleAdditionalFee extends ShopifyNode {
  __typename?: "SaleAdditionalFee"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The name of the additional fee. */
  name: Scalars["String"]["output"]
  /** The price of the additional fee. */
  price: ShopifyMoneyBag
  /** A list of taxes charged on the additional fee. */
  taxLines: Array<ShopifyTaxLine>
}

/** An auto-generated type for paginating through multiple Sales. */
export interface ShopifySaleConnection {
  __typename?: "SaleConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySaleEdge>
  /** A list of nodes that are contained in SaleEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifySale>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one Sale and a cursor during pagination. */
export interface ShopifySaleEdge {
  __typename?: "SaleEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SaleEdge. */
  node: ShopifySale
}

/** The possible line types for a sale record. One of the possible order line types for a sale is an adjustment. Sales adjustments occur when a refund is issued for a line item that is either more or less than the total value of the line item. Examples are restocking fees and goodwill payments. When this happens, Shopify produces a sales agreement with sale records for each line item that is returned or refunded and an additional sale record for the adjustment (for example, a restocking fee). The sales records for the returned or refunded items represent the reversal of the original line item sale value. The additional adjustment sale record represents the difference between the original total value of all line items that were refunded, and the actual amount refunded. */
export type ShopifySaleLineType =
  /** An additional fee. */
  | "ADDITIONAL_FEE"
  /** A sale adjustment. */
  | "ADJUSTMENT"
  /** A duty charge. */
  | "DUTY"
  /** A fee charge. */
  | "FEE"
  /** A gift card. */
  | "GIFT_CARD"
  /** A product purchased, returned or exchanged. */
  | "PRODUCT"
  /** A shipping cost. */
  | "SHIPPING"
  /** A tip added by the customer. */
  | "TIP"
  /** An unknown sale line. Represents new types that may be added in future versions. */
  | "UNKNOWN"
  | "%future added value"

/** The tax allocated to a sale from a single tax line. */
export interface ShopifySaleTax {
  __typename?: "SaleTax"
  /** The portion of the total tax amount on the related sale that comes from the associated tax line. */
  amount: ShopifyMoneyBag
  /** The unique ID for the sale tax. */
  id: Scalars["ID"]["output"]
  /** The tax line associated with the sale. */
  taxLine: ShopifyTaxLine
}

/** A contract between a merchant and a customer to do business. Shopify creates a sales agreement whenever an order is placed, edited, or refunded. A sales agreement has one or more sales records, which provide itemized details about the initial agreement or subsequent changes made to the order. For example, when a customer places an order, Shopify creates the order, generates a sales agreement, and records a sale for each line item purchased in the order. A sale record is specific to a type of order line. Order lines can represent different things such as a purchased product, a tip added by a customer, shipping costs collected at checkout, and more. */
export interface ShopifySalesAgreement {
  /** The application that created the agreement. */
  app?: Maybe<ShopifyApp>
  /** The date and time at which the agreement occured. */
  happenedAt: Scalars["DateTime"]["output"]
  /** The unique ID for the agreement. */
  id: Scalars["ID"]["output"]
  /** The reason the agremeent was created. */
  reason: ShopifyOrderActionType
  /** The sales associated with the agreement. */
  sales: ShopifySaleConnection
  /** The staff member associated with the agreement. */
  user?: Maybe<ShopifyStaffMember>
}

/** A contract between a merchant and a customer to do business. Shopify creates a sales agreement whenever an order is placed, edited, or refunded. A sales agreement has one or more sales records, which provide itemized details about the initial agreement or subsequent changes made to the order. For example, when a customer places an order, Shopify creates the order, generates a sales agreement, and records a sale for each line item purchased in the order. A sale record is specific to a type of order line. Order lines can represent different things such as a purchased product, a tip added by a customer, shipping costs collected at checkout, and more. */
export interface ShopifySalesAgreementSalesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple SalesAgreements. */
export interface ShopifySalesAgreementConnection {
  __typename?: "SalesAgreementConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySalesAgreementEdge>
  /** A list of nodes that are contained in SalesAgreementEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifySalesAgreement>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one SalesAgreement and a cursor during pagination. */
export interface ShopifySalesAgreementEdge {
  __typename?: "SalesAgreementEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SalesAgreementEdge. */
  node: ShopifySalesAgreement
}

/** A saved search is a representation of a search query saved in the admin. */
export interface ShopifySavedSearch
  extends ShopifyLegacyInteroperability,
    ShopifyNode {
  __typename?: "SavedSearch"
  /** The filters of a saved search. */
  filters: Array<ShopifySearchFilter>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** The name of a saved search. */
  name: Scalars["String"]["output"]
  /** The query string of a saved search. This includes search terms and filters. */
  query: Scalars["String"]["output"]
  /** The type of resource this saved search is searching in. */
  resourceType: ShopifySearchResultType
  /** The search terms of a saved search. */
  searchTerms: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple SavedSearches. */
export interface ShopifySavedSearchConnection {
  __typename?: "SavedSearchConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySavedSearchEdge>
  /** A list of nodes that are contained in SavedSearchEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifySavedSearch>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields to create a saved search. */
export interface ShopifySavedSearchCreateInput {
  /** A descriptive name of the saved search. */
  name: Scalars["String"]["input"]
  /** The query string of a saved search. This includes search terms and filters. */
  query: Scalars["String"]["input"]
  /** The type of resource this saved search is searching in. */
  resourceType: ShopifySearchResultType
}

/** Return type for `savedSearchCreate` mutation. */
export interface ShopifySavedSearchCreatePayload {
  __typename?: "SavedSearchCreatePayload"
  /** The saved search that was created. */
  savedSearch?: Maybe<ShopifySavedSearch>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields to delete a saved search. */
export interface ShopifySavedSearchDeleteInput {
  /** ID of the saved search to delete. */
  id: Scalars["ID"]["input"]
}

/** Return type for `savedSearchDelete` mutation. */
export interface ShopifySavedSearchDeletePayload {
  __typename?: "SavedSearchDeletePayload"
  /** The ID of the saved search that was deleted. */
  deletedSavedSearchId?: Maybe<Scalars["ID"]["output"]>
  /** The shop of the saved search that was deleted. */
  shop: ShopifyShop
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type which holds one SavedSearch and a cursor during pagination. */
export interface ShopifySavedSearchEdge {
  __typename?: "SavedSearchEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SavedSearchEdge. */
  node: ShopifySavedSearch
}

/** The input fields to update a saved search. */
export interface ShopifySavedSearchUpdateInput {
  /** ID of the saved search to update. */
  id: Scalars["ID"]["input"]
  /** A descriptive name of the saved search. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** The query string of a saved search. This included search terms and filters. */
  query?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `savedSearchUpdate` mutation. */
export interface ShopifySavedSearchUpdatePayload {
  __typename?: "SavedSearchUpdatePayload"
  /** The saved search that was updated. */
  savedSearch?: Maybe<ShopifySavedSearch>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The set of valid sort keys for the ScheduledChange query. */
export type ShopifyScheduledChangeSortKeys =
  /** Sort by the `expected_at` value. */
  | "EXPECTED_AT"
  /** Sort by the `id` value. */
  | "ID"
  | "%future added value"

/**
 * Script discount applications capture the intentions of a discount that
 * was created by a Shopify Script for an order's line item or shipping line.
 *
 * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
 */
export interface ShopifyScriptDiscountApplication
  extends ShopifyDiscountApplication {
  __typename?: "ScriptDiscountApplication"
  /** The method by which the discount's value is applied to its entitled items. */
  allocationMethod: ShopifyDiscountApplicationAllocationMethod
  /**
   * The description of the application as defined by the Script.
   * @deprecated Use `title` instead.
   */
  description: Scalars["String"]["output"]
  /**
   * An ordered index that can be used to identify the discount application and indicate the precedence
   * of the discount application for calculations.
   */
  index: Scalars["Int"]["output"]
  /** How the discount amount is distributed on the discounted lines. */
  targetSelection: ShopifyDiscountApplicationTargetSelection
  /** Whether the discount is applied on line items or shipping lines. */
  targetType: ShopifyDiscountApplicationTargetType
  /** The title of the application as defined by the Script. */
  title: Scalars["String"]["output"]
  /** The value of the discount application. */
  value: ShopifyPricingValue
}

/**
 * <div class="note"><h4>Theme app extensions</h4>
 *   <p>If your app integrates with a Shopify theme and you plan to submit it to the Shopify App Store, you must use theme app extensions instead of Script tags. Script tags can only be used with vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
 *
 * <div class="note"><h4>Script tag deprecation</h4>
 *   <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
 *
 *
 * A script tag represents remote JavaScript code that is loaded into the pages of a shop's storefront or the **Order status** page of checkout.
 */
export interface ShopifyScriptTag
  extends ShopifyLegacyInteroperability,
    ShopifyNode {
  __typename?: "ScriptTag"
  /**
   * Whether the Shopify CDN can cache and serve the script tag.
   * If `true`, then the script will be cached and served by the CDN.
   * The cache expires 15 minutes after the script tag is successfully returned.
   * If `false`, then the script will be served as is.
   */
  cache: Scalars["Boolean"]["output"]
  /** The date and time when the script tag was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The page or pages on the online store that the script should be included. */
  displayScope: ShopifyScriptTagDisplayScope
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** The URL to the remote script. */
  src: Scalars["URL"]["output"]
  /** The date and time when the script tag was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** An auto-generated type for paginating through multiple ScriptTags. */
export interface ShopifyScriptTagConnection {
  __typename?: "ScriptTagConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyScriptTagEdge>
  /** A list of nodes that are contained in ScriptTagEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyScriptTag>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `scriptTagCreate` mutation. */
export interface ShopifyScriptTagCreatePayload {
  __typename?: "ScriptTagCreatePayload"
  /** The script tag that was created. */
  scriptTag?: Maybe<ShopifyScriptTag>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `scriptTagDelete` mutation. */
export interface ShopifyScriptTagDeletePayload {
  __typename?: "ScriptTagDeletePayload"
  /** The ID of the deleted script tag. */
  deletedScriptTagId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The page or pages on the online store where the script should be included. */
export type ShopifyScriptTagDisplayScope =
  /** Include the script on both the web storefront and the <b>Order status</b> page. */
  | "ALL"
  /** Include the script only on the web storefront. */
  | "ONLINE_STORE"
  /** Include the script only on the <b>Order status</b> page. */
  | "ORDER_STATUS"
  | "%future added value"

/** An auto-generated type which holds one ScriptTag and a cursor during pagination. */
export interface ShopifyScriptTagEdge {
  __typename?: "ScriptTagEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ScriptTagEdge. */
  node: ShopifyScriptTag
}

/**
 * The input fields for a script tag. This input object is used when creating or updating
 * a script tag to specify its URL, where it should be included, and how it will be cached.
 */
export interface ShopifyScriptTagInput {
  /**
   * Whether the Shopify CDN can cache and serve the script tag.
   * If `true`, then the script will be cached and served by the CDN.
   * The cache expires 15 minutes after the script tag is successfully returned.
   * If `false`, then the script is served as is.
   * The default value is `false`.
   */
  cache?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The page or pages on the online store where the script should be included. */
  displayScope?: InputMaybe<ShopifyScriptTagDisplayScope>
  /** The URL of the remote script. For example: `https://example.com/path/to/script.js`. */
  src?: InputMaybe<Scalars["URL"]["input"]>
}

/** Return type for `scriptTagUpdate` mutation. */
export interface ShopifyScriptTagUpdatePayload {
  __typename?: "ScriptTagUpdatePayload"
  /** The script tag that was updated. */
  scriptTag?: Maybe<ShopifyScriptTag>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** A filter in a search query represented by a key value pair. */
export interface ShopifySearchFilter {
  __typename?: "SearchFilter"
  /** The key of the search filter. */
  key: Scalars["String"]["output"]
  /** The value of the search filter. */
  value: Scalars["String"]["output"]
}

/** A list of search filters along with their specific options in value and label pair for filtering. */
export interface ShopifySearchFilterOptions {
  __typename?: "SearchFilterOptions"
  /** A list of options that can be use to filter product availability. */
  productAvailability: Array<ShopifyFilterOption>
}

/** Represents an individual result returned from a search. */
export interface ShopifySearchResult {
  __typename?: "SearchResult"
  /** Returns the search result description text. */
  description?: Maybe<Scalars["String"]["output"]>
  /** Returns the Image resource presented to accompany a search result. */
  image?: Maybe<ShopifyImage>
  /** Returns the resource represented by the search result. */
  reference: ShopifyNode
  /** Returns the resource title. */
  title: Scalars["String"]["output"]
  /** Returns the absolute URL to the resource in the search result. */
  url: Scalars["URL"]["output"]
}

/** The connection type for SearchResult. */
export interface ShopifySearchResultConnection {
  __typename?: "SearchResultConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySearchResultEdge>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
  /**
   * An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page.
   * @deprecated The provided information is not accurate.
   */
  resultsAfterCount: Scalars["Int"]["output"]
}

/** An auto-generated type which holds one SearchResult and a cursor during pagination. */
export interface ShopifySearchResultEdge {
  __typename?: "SearchResultEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SearchResultEdge. */
  node: ShopifySearchResult
}

/** Specifies the type of resources to be returned from a search. */
export type ShopifySearchResultType =
  /** An article. */
  | "ARTICLE"
  /** A balance transaction. */
  | "BALANCE_TRANSACTION"
  /** A blog. */
  | "BLOG"
  | "COLLECTION"
  | "CUSTOMER"
  /** A code discount redeem code. */
  | "DISCOUNT_REDEEM_CODE"
  | "DRAFT_ORDER"
  /** A file. */
  | "FILE"
  | "ORDER"
  /** A page. */
  | "PAGE"
  | "PRICE_RULE"
  | "PRODUCT"
  /** A URL redirect. */
  | "URL_REDIRECT"
  | "%future added value"

/** A dynamic collection of customers based on specific criteria. */
export interface ShopifySegment extends ShopifyNode {
  __typename?: "Segment"
  /** The date and time when the segment was added to the store. */
  creationDate: Scalars["DateTime"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The date and time when the segment was last updated. */
  lastEditDate: Scalars["DateTime"]["output"]
  /** The name of the segment. */
  name: Scalars["String"]["output"]
  /** A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers. */
  query: Scalars["String"]["output"]
}

/** A filter that takes a value that's associated with an object. For example, the `tags` field is associated with the [`Customer`](/api/admin-graphql/latest/objects/Customer) object. */
export interface ShopifySegmentAssociationFilter extends ShopifySegmentFilter {
  __typename?: "SegmentAssociationFilter"
  /** The localized name of the filter. */
  localizedName: Scalars["String"]["output"]
  /** Whether a file can have multiple values for a single customer. */
  multiValue: Scalars["Boolean"]["output"]
  /** The query name of the filter. */
  queryName: Scalars["String"]["output"]
}

/** The statistics of a given attribute. */
export interface ShopifySegmentAttributeStatistics {
  __typename?: "SegmentAttributeStatistics"
  /** The average of a given attribute. */
  average: Scalars["Float"]["output"]
  /** The sum of a given attribute. */
  sum: Scalars["Float"]["output"]
}

/** A filter with a Boolean value that's been added to a segment query. */
export interface ShopifySegmentBooleanFilter extends ShopifySegmentFilter {
  __typename?: "SegmentBooleanFilter"
  /** The localized name of the filter. */
  localizedName: Scalars["String"]["output"]
  /** Whether a file can have multiple values for a single customer. */
  multiValue: Scalars["Boolean"]["output"]
  /** The query name of the filter. */
  queryName: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple Segments. */
export interface ShopifySegmentConnection {
  __typename?: "SegmentConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySegmentEdge>
  /** A list of nodes that are contained in SegmentEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifySegment>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `segmentCreate` mutation. */
export interface ShopifySegmentCreatePayload {
  __typename?: "SegmentCreatePayload"
  /** The newly created segment. */
  segment?: Maybe<ShopifySegment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** A filter with a date value that's been added to a segment query. */
export interface ShopifySegmentDateFilter extends ShopifySegmentFilter {
  __typename?: "SegmentDateFilter"
  /** The localized name of the filter. */
  localizedName: Scalars["String"]["output"]
  /** Whether a file can have multiple values for a single customer. */
  multiValue: Scalars["Boolean"]["output"]
  /** The query name of the filter. */
  queryName: Scalars["String"]["output"]
}

/** Return type for `segmentDelete` mutation. */
export interface ShopifySegmentDeletePayload {
  __typename?: "SegmentDeletePayload"
  /** ID of the deleted segment. */
  deletedSegmentId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type which holds one Segment and a cursor during pagination. */
export interface ShopifySegmentEdge {
  __typename?: "SegmentEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SegmentEdge. */
  node: ShopifySegment
}

/** A filter with a set of possible values that's been added to a segment query. */
export interface ShopifySegmentEnumFilter extends ShopifySegmentFilter {
  __typename?: "SegmentEnumFilter"
  /** The localized name of the filter. */
  localizedName: Scalars["String"]["output"]
  /** Whether a file can have multiple values for a single customer. */
  multiValue: Scalars["Boolean"]["output"]
  /** The query name of the filter. */
  queryName: Scalars["String"]["output"]
}

/** A filter that's used to segment customers based on the date that an event occured. For example, the `product_bought` event filter allows you to segment customers based on what products they've bought. */
export interface ShopifySegmentEventFilter extends ShopifySegmentFilter {
  __typename?: "SegmentEventFilter"
  /** The localized name of the filter. */
  localizedName: Scalars["String"]["output"]
  /** Whether a file can have multiple values for a single customer. */
  multiValue: Scalars["Boolean"]["output"]
  /** The parameters for an event segment filter. */
  parameters: Array<ShopifySegmentEventFilterParameter>
  /** The query name of the filter. */
  queryName: Scalars["String"]["output"]
  /** The return value type for an event segment filter. */
  returnValueType: Scalars["String"]["output"]
}

/** The parameters for an event segment filter. */
export interface ShopifySegmentEventFilterParameter {
  __typename?: "SegmentEventFilterParameter"
  /** Whether the parameter accepts a list of values. */
  acceptsMultipleValues: Scalars["Boolean"]["output"]
  /** The localized description of the parameter. */
  localizedDescription: Scalars["String"]["output"]
  /** The localized name of the parameter. */
  localizedName: Scalars["String"]["output"]
  /** The parameter maximum value range. */
  maxRange?: Maybe<Scalars["Float"]["output"]>
  /** The parameter minimum value range. */
  minRange?: Maybe<Scalars["Float"]["output"]>
  /** Whether the parameter is optional. */
  optional: Scalars["Boolean"]["output"]
  /** The type of the parameter. */
  parameterType: Scalars["String"]["output"]
  /** The query name of the parameter. */
  queryName: Scalars["String"]["output"]
}

/** The filters used in segment queries associated with a shop. */
export interface ShopifySegmentFilter {
  /** The localized name of the filter. */
  localizedName: Scalars["String"]["output"]
  /** Whether a file can have multiple values for a single customer. */
  multiValue: Scalars["Boolean"]["output"]
  /** The query name of the filter. */
  queryName: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple SegmentFilters. */
export interface ShopifySegmentFilterConnection {
  __typename?: "SegmentFilterConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySegmentFilterEdge>
  /** A list of nodes that are contained in SegmentFilterEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifySegmentFilter>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one SegmentFilter and a cursor during pagination. */
export interface ShopifySegmentFilterEdge {
  __typename?: "SegmentFilterEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SegmentFilterEdge. */
  node: ShopifySegmentFilter
}

/** A filter with a double-precision, floating-point value that's been added to a segment query. */
export interface ShopifySegmentFloatFilter extends ShopifySegmentFilter {
  __typename?: "SegmentFloatFilter"
  /** The localized name of the filter. */
  localizedName: Scalars["String"]["output"]
  /** The maximum range a filter can have. */
  maxRange?: Maybe<Scalars["Float"]["output"]>
  /** The minimum range a filter can have. */
  minRange?: Maybe<Scalars["Float"]["output"]>
  /** Whether a file can have multiple values for a single customer. */
  multiValue: Scalars["Boolean"]["output"]
  /** The query name of the filter. */
  queryName: Scalars["String"]["output"]
}

/** A filter with an integer that's been added to a segment query. */
export interface ShopifySegmentIntegerFilter extends ShopifySegmentFilter {
  __typename?: "SegmentIntegerFilter"
  /** The localized name of the filter. */
  localizedName: Scalars["String"]["output"]
  /** The maximum range a filter can have. */
  maxRange?: Maybe<Scalars["Float"]["output"]>
  /** The minimum range a filter can have. */
  minRange?: Maybe<Scalars["Float"]["output"]>
  /** Whether a file can have multiple values for a single customer. */
  multiValue: Scalars["Boolean"]["output"]
  /** The query name of the filter. */
  queryName: Scalars["String"]["output"]
}

/** The response type for the `segmentMembership` object. */
export interface ShopifySegmentMembership {
  __typename?: "SegmentMembership"
  /** A Boolean that indicates whether or not the customer in the query is a member of the segment, which is identified using the `segmentId`. */
  isMember: Scalars["Boolean"]["output"]
  /** A `segmentId` that's used for testing membership. */
  segmentId: Scalars["ID"]["output"]
}

/** A list of maps that contain `segmentId` IDs and `isMember` Booleans. The maps represent segment memberships. */
export interface ShopifySegmentMembershipResponse {
  __typename?: "SegmentMembershipResponse"
  /** The membership status for the given list of segments. */
  memberships: Array<ShopifySegmentMembership>
}

/**
 * A segment and its corresponding saved search.
 * For example, you can use `SegmentMigration` to retrieve the segment ID that corresponds to a saved search ID.
 */
export interface ShopifySegmentMigration {
  __typename?: "SegmentMigration"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The ID of the saved search. */
  savedSearchId: Scalars["ID"]["output"]
  /** The ID of the segment. */
  segmentId?: Maybe<Scalars["ID"]["output"]>
}

/** An auto-generated type for paginating through multiple SegmentMigrations. */
export interface ShopifySegmentMigrationConnection {
  __typename?: "SegmentMigrationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySegmentMigrationEdge>
  /** A list of nodes that are contained in SegmentMigrationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifySegmentMigration>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one SegmentMigration and a cursor during pagination. */
export interface ShopifySegmentMigrationEdge {
  __typename?: "SegmentMigrationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SegmentMigrationEdge. */
  node: ShopifySegmentMigration
}

/** The set of valid sort keys for the Segment query. */
export type ShopifySegmentSortKeys =
  /** Sort by the `creation_date` value. */
  | "CREATION_DATE"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `last_edit_date` value. */
  | "LAST_EDIT_DATE"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  | "%future added value"

/** The statistics of a given segment. */
export interface ShopifySegmentStatistics {
  __typename?: "SegmentStatistics"
  /** The statistics of a given attribute. */
  attributeStatistics: ShopifySegmentAttributeStatistics
}

/** The statistics of a given segment. */
export interface ShopifySegmentStatisticsAttributeStatisticsArgs {
  attributeName: Scalars["String"]["input"]
}

/** A filter with a string that's been added to a segment query. */
export interface ShopifySegmentStringFilter extends ShopifySegmentFilter {
  __typename?: "SegmentStringFilter"
  /** The localized name of the filter. */
  localizedName: Scalars["String"]["output"]
  /** Whether a file can have multiple values for a single customer. */
  multiValue: Scalars["Boolean"]["output"]
  /** The query name of the filter. */
  queryName: Scalars["String"]["output"]
}

/** Return type for `segmentUpdate` mutation. */
export interface ShopifySegmentUpdatePayload {
  __typename?: "SegmentUpdatePayload"
  /** The updated segment. */
  segment?: Maybe<ShopifySegment>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/**
 * A list of suggested values associated with an individual segment. A
 * segment is a group of members, such as customers, that meet specific
 * criteria.
 */
export interface ShopifySegmentValue {
  __typename?: "SegmentValue"
  /** The localized version of the value's name. This name is displayed to the merchant. */
  localizedValue: Scalars["String"]["output"]
  /** The name of the query associated with the suggestion. */
  queryName: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple SegmentValues. */
export interface ShopifySegmentValueConnection {
  __typename?: "SegmentValueConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySegmentValueEdge>
  /** A list of nodes that are contained in SegmentValueEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifySegmentValue>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one SegmentValue and a cursor during pagination. */
export interface ShopifySegmentValueEdge {
  __typename?: "SegmentValueEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SegmentValueEdge. */
  node: ShopifySegmentValue
}

/**
 * Properties used by customers to select a product variant.
 * Products can have multiple options, like different sizes or colors.
 */
export interface ShopifySelectedOption {
  __typename?: "SelectedOption"
  /** The product option’s name. */
  name: Scalars["String"]["output"]
  /** The product option’s value object. */
  optionValue: ShopifyProductOptionValue
  /** The product option’s value. */
  value: Scalars["String"]["output"]
}

/** The input fields for the selected variant option of the combined listing. */
export interface ShopifySelectedVariantOptionInput {
  /** The metaobject value of the linked metafield. */
  linkedMetafieldValue?: InputMaybe<Scalars["String"]["input"]>
  /** The name of the parent product's option. */
  name: Scalars["String"]["input"]
  /** The selected option value of the parent product's option. */
  value: Scalars["String"]["input"]
}

/**
 * Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
 * and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
 * up these records if you need to restore them later.
 *
 * For more information on selling plans, refer to
 * [*Creating and managing selling plans*](https://shopify.dev/docs/apps/selling-strategies/subscriptions/selling-plans).
 */
export interface ShopifySellingPlan
  extends ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyHasPublishedTranslations,
    ShopifyNode {
  __typename?: "SellingPlan"
  /** A selling plan policy which describes the recurring billing details. */
  billingPolicy: ShopifySellingPlanBillingPolicy
  /** The category used to classify the selling plan for reporting purposes. */
  category?: Maybe<ShopifySellingPlanCategory>
  /** The date and time when the selling plan was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** A selling plan policy which describes the delivery details. */
  deliveryPolicy: ShopifySellingPlanDeliveryPolicy
  /** Buyer facing string which describes the selling plan commitment. */
  description?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** When to reserve inventory for a selling plan. */
  inventoryPolicy?: Maybe<ShopifySellingPlanInventoryPolicy>
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /**
   * A customer-facing description of the selling plan.
   *
   * If your store supports multiple currencies, then don't include country-specific pricing content, such as "Buy monthly, get 10$ CAD off". This field won't be converted to reflect different currencies.
   */
  name: Scalars["String"]["output"]
  /** The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they're created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values. */
  options: Array<Scalars["String"]["output"]>
  /** Relative position of the selling plan for display. A lower position will be displayed before a higher position. */
  position?: Maybe<Scalars["Int"]["output"]>
  /** Selling plan pricing details. */
  pricingPolicies: Array<ShopifySellingPlanPricingPolicy>
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
}

/**
 * Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
 * and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
 * up these records if you need to restore them later.
 *
 * For more information on selling plans, refer to
 * [*Creating and managing selling plans*](https://shopify.dev/docs/apps/selling-strategies/subscriptions/selling-plans).
 */
export interface ShopifySellingPlanMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/**
 * Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
 * and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
 * up these records if you need to restore them later.
 *
 * For more information on selling plans, refer to
 * [*Creating and managing selling plans*](https://shopify.dev/docs/apps/selling-strategies/subscriptions/selling-plans).
 */
export interface ShopifySellingPlanMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/**
 * Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
 * and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
 * up these records if you need to restore them later.
 *
 * For more information on selling plans, refer to
 * [*Creating and managing selling plans*](https://shopify.dev/docs/apps/selling-strategies/subscriptions/selling-plans).
 */
export interface ShopifySellingPlanMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
 * and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
 * up these records if you need to restore them later.
 *
 * For more information on selling plans, refer to
 * [*Creating and managing selling plans*](https://shopify.dev/docs/apps/selling-strategies/subscriptions/selling-plans).
 */
export interface ShopifySellingPlanTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/**
 * Specifies the date when delivery or fulfillment is completed by a merchant for a given time cycle. You can also
 * define a cutoff for which customers are eligible to enter this cycle and the desired behavior for customers who
 * start their subscription inside the cutoff period.
 *
 * Some example scenarios where anchors can be useful to implement advanced delivery behavior:
 * - A merchant starts fulfillment on a specific date every month.
 * - A merchant wants to bill the 1st of every quarter.
 * - A customer expects their delivery every Tuesday.
 *
 * For more details, see [About Selling Plans](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/selling-plans#anchors).
 */
export interface ShopifySellingPlanAnchor {
  __typename?: "SellingPlanAnchor"
  /**
   * The cutoff day for the anchor. Specifies a buffer period before the anchor date for orders to be included in a
   * delivery or fulfillment cycle.
   *
   * If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
   * the days of the week according to ISO 8601, where 1 is Monday.
   *
   * If `type` is MONTHDAY, then the value must be between 1-31.
   *
   * If `type` is YEARDAY, then the value must be `null`.
   */
  cutoffDay?: Maybe<Scalars["Int"]["output"]>
  /**
   * The day of the anchor.
   *
   * If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
   * the days of the week according to ISO 8601, where 1 is Monday.
   *
   * If `type` isn't WEEKDAY, then the value must be between 1-31.
   */
  day: Scalars["Int"]["output"]
  /**
   * The month of the anchor. If type is different than YEARDAY, then the value must
   * be `null` or between 1-12.
   */
  month?: Maybe<Scalars["Int"]["output"]>
  /** Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY. */
  type: ShopifySellingPlanAnchorType
}

/** The input fields required to create or update a selling plan anchor. */
export interface ShopifySellingPlanAnchorInput {
  /**
   * The cutoff day of the anchor.
   *
   * If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
   * the days of the week according to ISO 8601, where 1 is Monday.
   *
   * If `type` is MONTHDAY, then the value must be between 1-31.
   *
   * If `type` is YEARDAY, then the value must be `null`.
   *
   * This field should only be set if the cutoff field for the delivery policy is `null`.
   */
  cutoffDay?: InputMaybe<Scalars["Int"]["input"]>
  /**
   * The day of the anchor.
   *
   * If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
   * the days of the week according to ISO 8601, where 1 is Monday.
   *
   * If `type` isn't WEEKDAY, then the value must be between 1-31.
   */
  day?: InputMaybe<Scalars["Int"]["input"]>
  /**
   * The month of the anchor. If type is different than YEARDAY, then the value must
   * be `null` or between 1-12.
   */
  month?: InputMaybe<Scalars["Int"]["input"]>
  /** Represents the anchor type, must be one of WEEKDAY, MONTHDAY, YEARDAY. */
  type?: InputMaybe<ShopifySellingPlanAnchorType>
}

/** Represents the anchor type. */
export type ShopifySellingPlanAnchorType =
  /** Which day of the month, between 1-31. */
  | "MONTHDAY"
  /** Which day of the week, between 1-7. */
  | "WEEKDAY"
  /** Which days of the month and year, month between 1-12, and day between 1-31. */
  | "YEARDAY"
  | "%future added value"

/**
 * Represents the billing frequency associated to the selling plan (for example, bill every week, or bill every
 * three months). The selling plan billing policy and associated records (selling plan groups, selling plans, pricing
 * policies, and delivery policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
 * We recommend backing up these records if you need to restore them later.
 */
export type ShopifySellingPlanBillingPolicy =
  | ShopifySellingPlanFixedBillingPolicy
  | ShopifySellingPlanRecurringBillingPolicy

/** The input fields that are required to create or update a billing policy type. */
export interface ShopifySellingPlanBillingPolicyInput {
  /** The fixed billing policy details. */
  fixed?: InputMaybe<ShopifySellingPlanFixedBillingPolicyInput>
  /** The recurring billing policy details. */
  recurring?: InputMaybe<ShopifySellingPlanRecurringBillingPolicyInput>
}

/**
 * The category of the selling plan. For the `OTHER` category,
 *          you must fill out our [request form](https://docs.google.com/forms/d/e/1FAIpQLSeU18Xmw0Q61V8wdH-dfGafFqIBfRchQKUO8WAF3yJTvgyyZQ/viewform),
 *          where we'll review your request for a new purchase option.
 */
export type ShopifySellingPlanCategory =
  /** The selling plan is for anything not in one of the other categories. */
  | "OTHER"
  /** The selling plan is for pre-orders. */
  | "PRE_ORDER"
  /** The selling plan is for subscriptions. */
  | "SUBSCRIPTION"
  /** The selling plan is for try before you buy purchases. */
  | "TRY_BEFORE_YOU_BUY"
  | "%future added value"

/** The amount charged at checkout when the full amount isn't charged at checkout. */
export interface ShopifySellingPlanCheckoutCharge {
  __typename?: "SellingPlanCheckoutCharge"
  /** The charge type for the checkout charge. */
  type: ShopifySellingPlanCheckoutChargeType
  /** The charge value for the checkout charge. */
  value: ShopifySellingPlanCheckoutChargeValue
}

/** The input fields that are required to create or update a checkout charge. */
export interface ShopifySellingPlanCheckoutChargeInput {
  /** The checkout charge type defined by the policy. */
  type?: InputMaybe<ShopifySellingPlanCheckoutChargeType>
  /** The checkout charge value defined by the policy. */
  value?: InputMaybe<ShopifySellingPlanCheckoutChargeValueInput>
}

/** The percentage value of the price used for checkout charge. */
export interface ShopifySellingPlanCheckoutChargePercentageValue {
  __typename?: "SellingPlanCheckoutChargePercentageValue"
  /** The percentage value of the price used for checkout charge. */
  percentage: Scalars["Float"]["output"]
}

/** The checkout charge when the full amount isn't charged at checkout. */
export type ShopifySellingPlanCheckoutChargeType =
  /** The checkout charge is a percentage of the product or variant price. */
  | "PERCENTAGE"
  /** The checkout charge is a fixed price amount. */
  | "PRICE"
  | "%future added value"

/** The portion of the price to be charged at checkout. */
export type ShopifySellingPlanCheckoutChargeValue =
  | ShopifyMoneyV2
  | ShopifySellingPlanCheckoutChargePercentageValue

/** The input fields required to create or update an checkout charge value. */
export interface ShopifySellingPlanCheckoutChargeValueInput {
  /** The fixed value for an checkout charge. */
  fixedValue?: InputMaybe<Scalars["Decimal"]["input"]>
  /** The percentage value. */
  percentage?: InputMaybe<Scalars["Float"]["input"]>
}

/** An auto-generated type for paginating through multiple SellingPlans. */
export interface ShopifySellingPlanConnection {
  __typename?: "SellingPlanConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySellingPlanEdge>
  /** A list of nodes that are contained in SellingPlanEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifySellingPlan>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/**
 * Represents the delivery frequency associated to the selling plan (for example, deliver every month, or deliver
 * every other week). The selling plan delivery policy and associated records (selling plan groups, selling plans,
 * pricing policies, and billing policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
 * We recommend backing up these records if you need to restore them later.
 */
export type ShopifySellingPlanDeliveryPolicy =
  | ShopifySellingPlanFixedDeliveryPolicy
  | ShopifySellingPlanRecurringDeliveryPolicy

/** The input fields that are required to create or update a delivery policy. */
export interface ShopifySellingPlanDeliveryPolicyInput {
  /** The fixed delivery policy details. */
  fixed?: InputMaybe<ShopifySellingPlanFixedDeliveryPolicyInput>
  /** The recurring delivery policy details. */
  recurring?: InputMaybe<ShopifySellingPlanRecurringDeliveryPolicyInput>
}

/** An auto-generated type which holds one SellingPlan and a cursor during pagination. */
export interface ShopifySellingPlanEdge {
  __typename?: "SellingPlanEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SellingPlanEdge. */
  node: ShopifySellingPlan
}

/**
 * The fixed selling plan billing policy defines how much of the price of the product will be billed to customer
 * at checkout. If there is an outstanding balance, it determines when it will be paid.
 */
export interface ShopifySellingPlanFixedBillingPolicy {
  __typename?: "SellingPlanFixedBillingPolicy"
  /** The checkout charge when the full amount isn't charged at checkout. */
  checkoutCharge: ShopifySellingPlanCheckoutCharge
  /** The exact time when to capture the full payment. */
  remainingBalanceChargeExactTime?: Maybe<Scalars["DateTime"]["output"]>
  /** The period after remaining_balance_charge_trigger, before capturing the full payment. Expressed as an ISO8601 duration. */
  remainingBalanceChargeTimeAfterCheckout?: Maybe<Scalars["String"]["output"]>
  /** When to capture payment for amount due. */
  remainingBalanceChargeTrigger: ShopifySellingPlanRemainingBalanceChargeTrigger
}

/** The input fields required to create or update a fixed billing policy. */
export interface ShopifySellingPlanFixedBillingPolicyInput {
  /** The checkout charge policy for the selling plan. */
  checkoutCharge?: InputMaybe<ShopifySellingPlanCheckoutChargeInput>
  /** The date and time to capture the full payment. */
  remainingBalanceChargeExactTime?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The period after capturing the payment for the amount due (`remainingBalanceChargeTrigger`), and before capturing the full payment. Expressed as an ISO8601 duration. */
  remainingBalanceChargeTimeAfterCheckout?: InputMaybe<
    Scalars["String"]["input"]
  >
  /** When to capture the payment for the amount due. */
  remainingBalanceChargeTrigger?: InputMaybe<ShopifySellingPlanRemainingBalanceChargeTrigger>
}

/** Represents a fixed selling plan delivery policy. */
export interface ShopifySellingPlanFixedDeliveryPolicy {
  __typename?: "SellingPlanFixedDeliveryPolicy"
  /** The specific anchor dates upon which the delivery interval calculations should be made. */
  anchors: Array<ShopifySellingPlanAnchor>
  /** A buffer period for orders to be included in next fulfillment anchor. */
  cutoff?: Maybe<Scalars["Int"]["output"]>
  /** The date and time when the fulfillment should trigger. */
  fulfillmentExactTime?: Maybe<Scalars["DateTime"]["output"]>
  /** What triggers the fulfillment. The value must be one of ANCHOR, ASAP, EXACT_TIME, or UNKNOWN. */
  fulfillmentTrigger: ShopifySellingPlanFulfillmentTrigger
  /**
   * Whether the delivery policy is merchant or buyer-centric.
   * Buyer-centric delivery policies state the time when the buyer will receive the goods.
   * Merchant-centric delivery policies state the time when the fulfillment should be started.
   * Currently, only merchant-centric delivery policies are supported.
   */
  intent: ShopifySellingPlanFixedDeliveryPolicyIntent
  /** The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`. */
  preAnchorBehavior: ShopifySellingPlanFixedDeliveryPolicyPreAnchorBehavior
}

/** The input fields required to create or update a fixed delivery policy. */
export interface ShopifySellingPlanFixedDeliveryPolicyInput {
  /** The specific anchor dates upon which the delivery interval calculations should be made. */
  anchors?: InputMaybe<Array<ShopifySellingPlanAnchorInput>>
  /** A buffer period for orders to be included in a cycle. */
  cutoff?: InputMaybe<Scalars["Int"]["input"]>
  /** The date and time when the fulfillment should trigger. */
  fulfillmentExactTime?: InputMaybe<Scalars["DateTime"]["input"]>
  /** What triggers the fulfillment. */
  fulfillmentTrigger?: InputMaybe<ShopifySellingPlanFulfillmentTrigger>
  /** Whether the delivery policy is merchant or buyer-centric. */
  intent?: InputMaybe<ShopifySellingPlanFixedDeliveryPolicyIntent>
  /** The pre-anchor behavior. */
  preAnchorBehavior?: InputMaybe<ShopifySellingPlanFixedDeliveryPolicyPreAnchorBehavior>
}

/** Possible intentions of a Delivery Policy. */
export type ShopifySellingPlanFixedDeliveryPolicyIntent =
  /** A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment. */
  "FULFILLMENT_BEGIN" | "%future added value"

/** The fulfillment or delivery behavior of the first fulfillment when the orderis placed before the anchor. */
export type ShopifySellingPlanFixedDeliveryPolicyPreAnchorBehavior =
  /** Orders placed can be fulfilled / delivered immediately. Orders placed inside a cutoff can be fulfilled / delivered at the next anchor. */
  | "ASAP"
  /**
   * Orders placed can be fulfilled / delivered at the next anchor date.
   * Orders placed inside a cutoff will skip the next anchor and can be fulfilled /
   * delivered at the following anchor.
   */
  | "NEXT"
  | "%future added value"

/**
 * Represents the pricing policy of a subscription or deferred purchase option selling plan.
 * The selling plan fixed pricing policy works with the billing and delivery policy
 * to determine the final price. Discounts are divided among fulfillments.
 * For example, a subscription with a $10 discount and two deliveries will have a $5
 * discount applied to each delivery.
 */
export interface ShopifySellingPlanFixedPricingPolicy
  extends ShopifySellingPlanPricingPolicyBase {
  __typename?: "SellingPlanFixedPricingPolicy"
  /** The price adjustment type. */
  adjustmentType: ShopifySellingPlanPricingPolicyAdjustmentType
  /** The price adjustment value. */
  adjustmentValue: ShopifySellingPlanPricingPolicyAdjustmentValue
  /** The date and time when the fixed selling plan pricing policy was created. */
  createdAt: Scalars["DateTime"]["output"]
}

/** The input fields required to create or update a fixed selling plan pricing policy. */
export interface ShopifySellingPlanFixedPricingPolicyInput {
  /** Price adjustment type defined by the policy. */
  adjustmentType?: InputMaybe<ShopifySellingPlanPricingPolicyAdjustmentType>
  /** Price adjustment value defined by the policy. */
  adjustmentValue?: InputMaybe<ShopifySellingPlanPricingPolicyValueInput>
  /** ID of the pricing policy. */
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** Describes what triggers fulfillment. */
export type ShopifySellingPlanFulfillmentTrigger =
  /** Use the anchor values to calculate fulfillment date. */
  | "ANCHOR"
  /** As soon as possible. */
  | "ASAP"
  /** At an exact time defined by the fulfillment_exact_time field. */
  | "EXACT_TIME"
  /** Unknown. Usually to be determined in the future. */
  | "UNKNOWN"
  | "%future added value"

/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export interface ShopifySellingPlanGroup
  extends ShopifyHasPublishedTranslations,
    ShopifyNode {
  __typename?: "SellingPlanGroup"
  /** The ID for app, exposed in Liquid and product JSON. */
  appId?: Maybe<Scalars["String"]["output"]>
  /** Whether the given product is directly associated to the selling plan group. */
  appliesToProduct: Scalars["Boolean"]["output"]
  /** Whether the given product variant is directly associated to the selling plan group. */
  appliesToProductVariant: Scalars["Boolean"]["output"]
  /** Whether any of the product variants of the given product are associated to the selling plan group. */
  appliesToProductVariants: Scalars["Boolean"]["output"]
  /** The date and time when the selling plan group was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The merchant-facing description of the selling plan group. */
  description?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The merchant-facing label of the selling plan group. */
  merchantCode: Scalars["String"]["output"]
  /** The buyer-facing label of the selling plan group. */
  name: Scalars["String"]["output"]
  /** The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they're created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values. */
  options: Array<Scalars["String"]["output"]>
  /** The relative position of the selling plan group for display. */
  position?: Maybe<Scalars["Int"]["output"]>
  /** Product variants associated to the selling plan group. */
  productVariants: ShopifyProductVariantConnection
  /** A count of product variants associated to the selling plan group. */
  productVariantsCount?: Maybe<ShopifyCount>
  /** Products associated to the selling plan group. */
  products: ShopifyProductConnection
  /** A count of products associated to the selling plan group. */
  productsCount?: Maybe<ShopifyCount>
  /** Selling plans associated to the selling plan group. */
  sellingPlans: ShopifySellingPlanConnection
  /** A summary of the policies associated to the selling plan group. */
  summary?: Maybe<Scalars["String"]["output"]>
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
}

/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export interface ShopifySellingPlanGroupAppliesToProductArgs {
  productId: Scalars["ID"]["input"]
}

/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export interface ShopifySellingPlanGroupAppliesToProductVariantArgs {
  productVariantId: Scalars["ID"]["input"]
}

/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export interface ShopifySellingPlanGroupAppliesToProductVariantsArgs {
  productId: Scalars["ID"]["input"]
}

/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export interface ShopifySellingPlanGroupProductVariantsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  productId?: InputMaybe<Scalars["ID"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export interface ShopifySellingPlanGroupProductVariantsCountArgs {
  productId?: InputMaybe<Scalars["ID"]["input"]>
}

/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export interface ShopifySellingPlanGroupProductsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export interface ShopifySellingPlanGroupSellingPlansArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 */
export interface ShopifySellingPlanGroupTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/** Return type for `sellingPlanGroupAddProductVariants` mutation. */
export interface ShopifySellingPlanGroupAddProductVariantsPayload {
  __typename?: "SellingPlanGroupAddProductVariantsPayload"
  /** The updated selling plan group. */
  sellingPlanGroup?: Maybe<ShopifySellingPlanGroup>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySellingPlanGroupUserError>
}

/** Return type for `sellingPlanGroupAddProducts` mutation. */
export interface ShopifySellingPlanGroupAddProductsPayload {
  __typename?: "SellingPlanGroupAddProductsPayload"
  /** The updated selling plan group. */
  sellingPlanGroup?: Maybe<ShopifySellingPlanGroup>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySellingPlanGroupUserError>
}

/** An auto-generated type for paginating through multiple SellingPlanGroups. */
export interface ShopifySellingPlanGroupConnection {
  __typename?: "SellingPlanGroupConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySellingPlanGroupEdge>
  /** A list of nodes that are contained in SellingPlanGroupEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifySellingPlanGroup>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `sellingPlanGroupCreate` mutation. */
export interface ShopifySellingPlanGroupCreatePayload {
  __typename?: "SellingPlanGroupCreatePayload"
  /** The created selling plan group object. */
  sellingPlanGroup?: Maybe<ShopifySellingPlanGroup>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySellingPlanGroupUserError>
}

/** Return type for `sellingPlanGroupDelete` mutation. */
export interface ShopifySellingPlanGroupDeletePayload {
  __typename?: "SellingPlanGroupDeletePayload"
  /** The ID of the deleted selling plan group object. */
  deletedSellingPlanGroupId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySellingPlanGroupUserError>
}

/** An auto-generated type which holds one SellingPlanGroup and a cursor during pagination. */
export interface ShopifySellingPlanGroupEdge {
  __typename?: "SellingPlanGroupEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SellingPlanGroupEdge. */
  node: ShopifySellingPlanGroup
}

/** The input fields required to create or update a selling plan group. */
export interface ShopifySellingPlanGroupInput {
  /** ID for app, exposed in Liquid and product JSON. */
  appId?: InputMaybe<Scalars["String"]["input"]>
  /** Merchant facing description of the selling plan group. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /** Merchant facing label of the selling plan group. */
  merchantCode?: InputMaybe<Scalars["String"]["input"]>
  /** Buyer facing label of the selling plan group. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they're created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values. */
  options?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** Relative value for display purposes of the selling plan group. A lower position will be displayed before a higher one. */
  position?: InputMaybe<Scalars["Int"]["input"]>
  /** List of selling plans to create. */
  sellingPlansToCreate?: InputMaybe<Array<ShopifySellingPlanInput>>
  /** List of selling plans ids to delete. */
  sellingPlansToDelete?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** List of selling plans to update. */
  sellingPlansToUpdate?: InputMaybe<Array<ShopifySellingPlanInput>>
}

/** Return type for `sellingPlanGroupRemoveProductVariants` mutation. */
export interface ShopifySellingPlanGroupRemoveProductVariantsPayload {
  __typename?: "SellingPlanGroupRemoveProductVariantsPayload"
  /** The removed product variant ids. */
  removedProductVariantIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySellingPlanGroupUserError>
}

/** Return type for `sellingPlanGroupRemoveProducts` mutation. */
export interface ShopifySellingPlanGroupRemoveProductsPayload {
  __typename?: "SellingPlanGroupRemoveProductsPayload"
  /** The removed product ids. */
  removedProductIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySellingPlanGroupUserError>
}

/** The input fields for resource association with a Selling Plan Group. */
export interface ShopifySellingPlanGroupResourceInput {
  /** The IDs of the Products to add to the Selling Plan Group. */
  productIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The IDs of the Variants to add to the Selling Plan Group. */
  productVariantIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** The set of valid sort keys for the SellingPlanGroup query. */
export type ShopifySellingPlanGroupSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `name` value. */
  | "NAME"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** Return type for `sellingPlanGroupUpdate` mutation. */
export interface ShopifySellingPlanGroupUpdatePayload {
  __typename?: "SellingPlanGroupUpdatePayload"
  /** The IDs of the deleted Subscription Plans. */
  deletedSellingPlanIds?: Maybe<Array<Scalars["ID"]["output"]>>
  /** The updated Selling Plan Group. */
  sellingPlanGroup?: Maybe<ShopifySellingPlanGroup>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySellingPlanGroupUserError>
}

/** Represents a selling plan group custom error. */
export interface ShopifySellingPlanGroupUserError
  extends ShopifyDisplayableError {
  __typename?: "SellingPlanGroupUserError"
  /** The error code. */
  code?: Maybe<ShopifySellingPlanGroupUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `SellingPlanGroupUserError`. */
export type ShopifySellingPlanGroupUserErrorCode =
  /** Billing and delivery policy types must be the same. */
  | "BILLING_AND_DELIVERY_POLICY_TYPES_MUST_BE_THE_SAME"
  /** Billing policy's interval is too large. */
  | "BILLING_POLICY_INTERVAL_TOO_LARGE"
  /** The input value is blank. */
  | "BLANK"
  /** A fixed billing policy's checkout charge value and type must match. */
  | "CHECKOUT_CHARGE_VALUE_AND_TYPE_MUST_MATCH"
  /** Delivery policy's interval is too large. */
  | "DELIVERY_POLICY_INTERVAL_TOO_LARGE"
  /** The input value should be equal to the value allowed. */
  | "EQUAL_TO"
  /** Could not add the resource to the selling plan group. */
  | "ERROR_ADDING_RESOURCE_TO_GROUP"
  /** A fixed billing policy's fulfillment_exact_time must not be present when the fulfillment_trigger isn't EXACT_TIME. */
  | "FULFILLMENT_EXACT_TIME_NOT_ALLOWED"
  /** A fixed billing policy's fulfillment_exact_time can't be blank when the fulfillment_trigger is EXACT_TIME. */
  | "FULFILLMENT_EXACT_TIME_REQUIRED"
  /** The input value should be greater than the minimum allowed value. */
  | "GREATER_THAN"
  /** The input value should be greater than or equal to the minimum value allowed. */
  | "GREATER_THAN_OR_EQUAL_TO"
  /** Selling plan group could not be deleted. */
  | "GROUP_COULD_NOT_BE_DELETED"
  /** Selling plan group does not exist. */
  | "GROUP_DOES_NOT_EXIST"
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** The input value is invalid. */
  | "INVALID"
  /** The input submitted is invalid. */
  | "INVALID_INPUT"
  /** The input value should be less than the maximum value allowed. */
  | "LESS_THAN"
  /** The input value should be less than or equal to the maximum value allowed. */
  | "LESS_THAN_OR_EQUAL_TO"
  /** The input value is not a number. */
  | "NOT_A_NUMBER"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** Only one billing policy type can be defined. */
  | "ONLY_NEED_ONE_BILLING_POLICY_TYPE"
  /** A fixed billing policy's checkout charge can have at most one value. */
  | "ONLY_NEED_ONE_CHECKOUT_CHARGE_VALUE"
  /** Only one delivery policy type can be defined. */
  | "ONLY_NEED_ONE_DELIVERY_POLICY_TYPE"
  /** Only one pricing policy type can be defined. */
  | "ONLY_NEED_ONE_PRICING_POLICY_TYPE"
  /** Only one pricing policy adjustment value type can be defined. */
  | "ONLY_NEED_ONE_PRICING_POLICY_VALUE"
  /** A selling plan can't have both fixed and recurring billing policies. */
  | "ONLY_ONE_OF_FIXED_OR_RECURRING_BILLING"
  /** A selling plan can't have both fixed and recurring delivery policies. */
  | "ONLY_ONE_OF_FIXED_OR_RECURRING_DELIVERY"
  /** Selling plan does not exist. */
  | "PLAN_DOES_NOT_EXIST"
  /** Selling plan ID must be specified to update. */
  | "PLAN_ID_MUST_BE_SPECIFIED_TO_UPDATE"
  /** The input value needs to be blank. */
  | "PRESENT"
  /** Pricing policy's adjustment value and adjustment type must match. */
  | "PRICING_POLICY_ADJUSTMENT_VALUE_AND_TYPE_MUST_MATCH"
  /** Product does not exist. */
  | "PRODUCT_DOES_NOT_EXIST"
  /** Product variant does not exist. */
  | "PRODUCT_VARIANT_DOES_NOT_EXIST"
  /** A fixed billing policy's remaining_balance_charge_exact_time must not be present when the remaining_balance_charge_trigger isn't EXACT_TIME. */
  | "REMAINING_BALANCE_CHARGE_EXACT_TIME_NOT_ALLOWED"
  /** A fixed billing policy's remaining_balance_charge_exact_time can't be blank when the remaining_balance_charge_trigger is EXACT_TIME. */
  | "REMAINING_BALANCE_CHARGE_EXACT_TIME_REQUIRED"
  /** A fixed billing policy's remaining_balance_charge_time_after_checkout must be present and greater than zero when the remaining_balance_charge_trigger is TIME_AFTER_CHECKOUT. */
  | "REMAINING_BALANCE_CHARGE_TIME_AFTER_CHECKOUT_MUST_BE_GREATER_THAN_ZERO"
  /** A fixed billing policy's remaining_balance_charge_trigger can't be NO_REMAINING_BALANCE when the checkout_charge_type is PERCENTAGE and checkout_charge_value is less than 100. */
  | "REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PARTIAL_PERCENTAGE_CHECKOUT_CHARGE"
  /** A fixed billing policy's remaining_balance_charge_trigger can't be NO_REMAINING_BALANCE when the checkout_charge_type is PRICE. */
  | "REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PRICE_CHECKOUT_CHARGE"
  /** A fixed billing policy's remaining_balance_charge_trigger must be NO_REMAINING_BALANCE when the checkout_charge_type is PERCENTAGE and checkout_charge_value is 100. */
  | "REMAINING_BALANCE_CHARGE_TRIGGER_ON_FULL_CHECKOUT"
  /** The selling plan list provided contains 1 or more invalid IDs. */
  | "RESOURCE_LIST_CONTAINS_INVALID_IDS"
  /** A fixed delivery policy's anchors must not be present when the fulfillment_trigger isn't ANCHOR. */
  | "SELLING_PLAN_ANCHORS_NOT_ALLOWED"
  /** A fixed delivery policy's anchors must be present when the fulfillment_trigger is ANCHOR. */
  | "SELLING_PLAN_ANCHORS_REQUIRED"
  /** Selling plan's billing and delivery policies anchors must be equal. */
  | "SELLING_PLAN_BILLING_AND_DELIVERY_POLICY_ANCHORS_MUST_BE_EQUAL"
  /** Selling plan's billing cycle must be a multiple of delivery cycle. */
  | "SELLING_PLAN_BILLING_CYCLE_MUST_BE_A_MULTIPLE_OF_DELIVERY_CYCLE"
  /** Missing billing policy. */
  | "SELLING_PLAN_BILLING_POLICY_MISSING"
  /** Must include at least one selling plan. */
  | "SELLING_PLAN_COUNT_LOWER_BOUND"
  /** Exceeded the selling plan limit (31). */
  | "SELLING_PLAN_COUNT_UPPER_BOUND"
  /** Missing delivery policy. */
  | "SELLING_PLAN_DELIVERY_POLICY_MISSING"
  /** Cannot have multiple selling plans with the same name. */
  | "SELLING_PLAN_DUPLICATE_NAME"
  /** Cannot have multiple selling plans with the same options. */
  | "SELLING_PLAN_DUPLICATE_OPTIONS"
  /** A fixed selling plan can have at most one pricing policy. */
  | "SELLING_PLAN_FIXED_PRICING_POLICIES_LIMIT"
  /** Selling plan's billing policy max cycles must be greater than min cycles. */
  | "SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES"
  /** Cannot define option2 on this selling plan as there's no label on the parent selling plan group. */
  | "SELLING_PLAN_MISSING_OPTION2_LABEL_ON_PARENT_GROUP"
  /** Cannot define option3 on this selling plan as there's no label on the parent selling plan group. */
  | "SELLING_PLAN_MISSING_OPTION3_LABEL_ON_PARENT_GROUP"
  /** Selling plan's option2 is required because option2 exists. */
  | "SELLING_PLAN_OPTION2_REQUIRED_AS_DEFINED_ON_PARENT_GROUP"
  /** Selling plan's option3 is required because option3 exists. */
  | "SELLING_PLAN_OPTION3_REQUIRED_AS_DEFINED_ON_PARENT_GROUP"
  /** Selling plans can't have more than 2 pricing policies. */
  | "SELLING_PLAN_PRICING_POLICIES_LIMIT"
  /** Selling plan's pricing policies must contain one fixed pricing policy. */
  | "SELLING_PLAN_PRICING_POLICIES_MUST_CONTAIN_A_FIXED_PRICING_POLICY"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too big. */
  | "TOO_BIG"
  /** The input value is too long. */
  | "TOO_LONG"
  /** The input value is too short. */
  | "TOO_SHORT"
  /** The input value is the wrong length. */
  | "WRONG_LENGTH"
  | "%future added value"

/** The input fields to create or update a selling plan. */
export interface ShopifySellingPlanInput {
  /** Selling plan policy which describes the billing details. */
  billingPolicy?: InputMaybe<ShopifySellingPlanBillingPolicyInput>
  /** The category used to classify this selling plan for reporting purposes. */
  category?: InputMaybe<ShopifySellingPlanCategory>
  /** A selling plan policy which describes the delivery details. */
  deliveryPolicy?: InputMaybe<ShopifySellingPlanDeliveryPolicyInput>
  /** Buyer facing string which describes the selling plan commitment. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /** ID of the selling plan. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** A selling plan policy which describes the inventory details. */
  inventoryPolicy?: InputMaybe<ShopifySellingPlanInventoryPolicyInput>
  /** Additional customizable information to associate with the SellingPlan. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** Buyer facing string which describes the selling plan content. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they're created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values. */
  options?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** Relative value for display purposes of this plan. A lower position will be displayed before a higher one. */
  position?: InputMaybe<Scalars["Int"]["input"]>
  /**
   * The pricing policies which describe the pricing details. Each selling plan
   * can only contain a maximum of 2 pricing policies.
   */
  pricingPolicies?: InputMaybe<Array<ShopifySellingPlanPricingPolicyInput>>
}

/** Represents valid selling plan interval. */
export type ShopifySellingPlanInterval =
  /** Day interval. */
  | "DAY"
  /** Month interval. */
  | "MONTH"
  /** Week interval. */
  | "WEEK"
  /** Year interval. */
  | "YEAR"
  | "%future added value"

/** The selling plan inventory policy. */
export interface ShopifySellingPlanInventoryPolicy {
  __typename?: "SellingPlanInventoryPolicy"
  /** When to reserve inventory for the order. */
  reserve: ShopifySellingPlanReserve
}

/** The input fields required to create or update an inventory policy. */
export interface ShopifySellingPlanInventoryPolicyInput {
  /** When to reserve inventory for the order. The value must be ON_FULFILLMENT or ON_SALE. */
  reserve?: InputMaybe<ShopifySellingPlanReserve>
}

/**
 * Represents the type of pricing associated to the selling plan (for example, a $10 or 20% discount that is set
 * for a limited period or that is fixed for the duration of the subscription). Selling plan pricing policies and
 * associated records (selling plan groups, selling plans, billing policy, and delivery policy) are deleted 48
 * hours after a merchant uninstalls their subscriptions app. We recommend backing up these records if you need
 * to restore them later.
 */
export type ShopifySellingPlanPricingPolicy =
  | ShopifySellingPlanFixedPricingPolicy
  | ShopifySellingPlanRecurringPricingPolicy

/** Represents a selling plan pricing policy adjustment type. */
export type ShopifySellingPlanPricingPolicyAdjustmentType =
  /** Fixed amount off adjustment. */
  | "FIXED_AMOUNT"
  /** Percentage off adjustment. */
  | "PERCENTAGE"
  /** Price of the policy. */
  | "PRICE"
  | "%future added value"

/** Represents a selling plan pricing policy adjustment value type. */
export type ShopifySellingPlanPricingPolicyAdjustmentValue =
  | ShopifyMoneyV2
  | ShopifySellingPlanPricingPolicyPercentageValue

/** Represents selling plan pricing policy common fields. */
export interface ShopifySellingPlanPricingPolicyBase {
  /** The price adjustment type. */
  adjustmentType: ShopifySellingPlanPricingPolicyAdjustmentType
  /** The price adjustment value. */
  adjustmentValue: ShopifySellingPlanPricingPolicyAdjustmentValue
}

/** The input fields required to create or update a selling plan pricing policy. */
export interface ShopifySellingPlanPricingPolicyInput {
  /** Fixed pricing policy details. */
  fixed?: InputMaybe<ShopifySellingPlanFixedPricingPolicyInput>
  /** Recurring pricing policy details. */
  recurring?: InputMaybe<ShopifySellingPlanRecurringPricingPolicyInput>
}

/** The percentage value of a selling plan pricing policy percentage type. */
export interface ShopifySellingPlanPricingPolicyPercentageValue {
  __typename?: "SellingPlanPricingPolicyPercentageValue"
  /** The percentage value. */
  percentage: Scalars["Float"]["output"]
}

/** The input fields required to create or update a pricing policy adjustment value. */
export interface ShopifySellingPlanPricingPolicyValueInput {
  /** The fixed value for an fixed amount off or a new policy price. */
  fixedValue?: InputMaybe<Scalars["Decimal"]["input"]>
  /** The percentage value. */
  percentage?: InputMaybe<Scalars["Float"]["input"]>
}

/** Represents a recurring selling plan billing policy. */
export interface ShopifySellingPlanRecurringBillingPolicy {
  __typename?: "SellingPlanRecurringBillingPolicy"
  /** Specific anchor dates upon which the billing interval calculations should be made. */
  anchors: Array<ShopifySellingPlanAnchor>
  /** The date and time when the selling plan billing policy was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The billing frequency, it can be either: day, week, month or year. */
  interval: ShopifySellingPlanInterval
  /** The number of intervals between billings. */
  intervalCount: Scalars["Int"]["output"]
  /** Maximum number of billing iterations. */
  maxCycles?: Maybe<Scalars["Int"]["output"]>
  /** Minimum number of billing iterations. */
  minCycles?: Maybe<Scalars["Int"]["output"]>
}

/** The input fields required to create or update a recurring billing policy. */
export interface ShopifySellingPlanRecurringBillingPolicyInput {
  /** Specific anchor dates upon which the billing interval calculations should be made. */
  anchors?: InputMaybe<Array<ShopifySellingPlanAnchorInput>>
  /** The billing frequency, it can be either: day, week, month or year. */
  interval?: InputMaybe<ShopifySellingPlanInterval>
  /** The number of intervals between billings. */
  intervalCount?: InputMaybe<Scalars["Int"]["input"]>
  /** Maximum number of billing iterations. */
  maxCycles?: InputMaybe<Scalars["Int"]["input"]>
  /** Minimum number of billing iterations. */
  minCycles?: InputMaybe<Scalars["Int"]["input"]>
}

/** Represents a recurring selling plan delivery policy. */
export interface ShopifySellingPlanRecurringDeliveryPolicy {
  __typename?: "SellingPlanRecurringDeliveryPolicy"
  /** The specific anchor dates upon which the delivery interval calculations should be made. */
  anchors: Array<ShopifySellingPlanAnchor>
  /** The date and time when the selling plan delivery policy was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** Number of days which represent a buffer period for orders to be included in a cycle. */
  cutoff?: Maybe<Scalars["Int"]["output"]>
  /**
   * Whether the delivery policy is merchant or buyer-centric.
   * Buyer-centric delivery policies state the time when the buyer will receive the goods.
   * Merchant-centric delivery policies state the time when the fulfillment should be started.
   * Currently, only merchant-centric delivery policies are supported.
   */
  intent: ShopifySellingPlanRecurringDeliveryPolicyIntent
  /** The delivery frequency, it can be either: day, week, month or year. */
  interval: ShopifySellingPlanInterval
  /** The number of intervals between deliveries. */
  intervalCount: Scalars["Int"]["output"]
  /** The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`. */
  preAnchorBehavior: ShopifySellingPlanRecurringDeliveryPolicyPreAnchorBehavior
}

/** The input fields to create or update a recurring delivery policy. */
export interface ShopifySellingPlanRecurringDeliveryPolicyInput {
  /** The specific anchor dates upon which the delivery interval calculations should be made. */
  anchors?: InputMaybe<Array<ShopifySellingPlanAnchorInput>>
  /** A buffer period for orders to be included in a cycle. */
  cutoff?: InputMaybe<Scalars["Int"]["input"]>
  /** Intention of this delivery policy, it can be either: delivery or fulfillment. */
  intent?: InputMaybe<ShopifySellingPlanRecurringDeliveryPolicyIntent>
  /** The delivery frequency, it can be either: day, week, month or year. */
  interval?: InputMaybe<ShopifySellingPlanInterval>
  /** The number of intervals between deliveries. */
  intervalCount?: InputMaybe<Scalars["Int"]["input"]>
  /** The pre-anchor behavior. It can be either: asap or next. */
  preAnchorBehavior?: InputMaybe<ShopifySellingPlanRecurringDeliveryPolicyPreAnchorBehavior>
}

/** Whether the delivery policy is merchant or buyer-centric. */
export type ShopifySellingPlanRecurringDeliveryPolicyIntent =
  /** A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment. */
  "FULFILLMENT_BEGIN" | "%future added value"

/** The fulfillment or delivery behaviors of the first fulfillment when the orderis placed before the anchor. */
export type ShopifySellingPlanRecurringDeliveryPolicyPreAnchorBehavior =
  /** The orders placed can be fulfilled or delivered immediately. The orders placed inside a cutoff can be fulfilled or delivered at the next anchor. */
  | "ASAP"
  /**
   * The orders placed can be fulfilled or delivered at the next anchor date.
   * The orders placed inside a cutoff will skip the next anchor and can be fulfilled or
   * delivered at the following anchor.
   */
  | "NEXT"
  | "%future added value"

/** Represents a recurring selling plan pricing policy. It applies after the fixed pricing policy. By using the afterCycle parameter, you can specify the cycle when the recurring pricing policy comes into effect. Recurring pricing policies are not available for deferred purchase options. */
export interface ShopifySellingPlanRecurringPricingPolicy
  extends ShopifySellingPlanPricingPolicyBase {
  __typename?: "SellingPlanRecurringPricingPolicy"
  /** The price adjustment type. */
  adjustmentType: ShopifySellingPlanPricingPolicyAdjustmentType
  /** The price adjustment value. */
  adjustmentValue: ShopifySellingPlanPricingPolicyAdjustmentValue
  /** Cycle after which this pricing policy applies. */
  afterCycle?: Maybe<Scalars["Int"]["output"]>
  /** The date and time when the recurring selling plan pricing policy was created. */
  createdAt: Scalars["DateTime"]["output"]
}

/** The input fields required to create or update a recurring selling plan pricing policy. */
export interface ShopifySellingPlanRecurringPricingPolicyInput {
  /** Price adjustment type defined by the policy. */
  adjustmentType?: InputMaybe<ShopifySellingPlanPricingPolicyAdjustmentType>
  /** Price adjustment value defined by the policy. */
  adjustmentValue?: InputMaybe<ShopifySellingPlanPricingPolicyValueInput>
  /** Cycle after which the pricing policy applies. */
  afterCycle: Scalars["Int"]["input"]
  /** ID of the pricing policy. */
  id?: InputMaybe<Scalars["ID"]["input"]>
}

/** When to capture the payment for the remaining amount due. */
export type ShopifySellingPlanRemainingBalanceChargeTrigger =
  /** At an exact time defined by the remaining_balance_charge_exact_time field. */
  | "EXACT_TIME"
  /** When there's no remaining balance to be charged after checkout. */
  | "NO_REMAINING_BALANCE"
  /** After the duration defined by the remaining_balance_charge_time_after_checkout field. */
  | "TIME_AFTER_CHECKOUT"
  | "%future added value"

/** When to reserve inventory for a selling plan. */
export type ShopifySellingPlanReserve =
  /** Reserve inventory when order is fulfilled. */
  | "ON_FULFILLMENT"
  /** Reserve inventory at time of sale. */
  | "ON_SALE"
  | "%future added value"

/** A server pixel stores configuration for streaming customer interactions to an EventBridge or PubSub endpoint. */
export interface ShopifyServerPixel extends ShopifyNode {
  __typename?: "ServerPixel"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The current state of this server pixel. */
  status?: Maybe<ShopifyServerPixelStatus>
  /** Address of the EventBridge or PubSub endpoint. */
  webhookEndpointAddress?: Maybe<Scalars["String"]["output"]>
}

/** Return type for `serverPixelCreate` mutation. */
export interface ShopifyServerPixelCreatePayload {
  __typename?: "ServerPixelCreatePayload"
  /** The new server pixel. */
  serverPixel?: Maybe<ShopifyServerPixel>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyErrorsServerPixelUserError>
}

/** Return type for `serverPixelDelete` mutation. */
export interface ShopifyServerPixelDeletePayload {
  __typename?: "ServerPixelDeletePayload"
  /** The ID of the server pixel that was deleted, if one was deleted. */
  deletedServerPixelId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyErrorsServerPixelUserError>
}

/** The current state of a server pixel. */
export type ShopifyServerPixelStatus =
  /** This server pixel is connected: it will stream customer events to the endpoint if it is configured properly. */
  | "CONNECTED"
  /** This server pixel is disconnected: it does not stream events to the endpoint and an endpoint address has been added to the server pixel. */
  | "DISCONNECTED_CONFIGURED"
  /** This server pixel is disconnected and unconfigured: it does not stream events to the endpoint and no endpoint address had been added to the server pixel. */
  | "DISCONNECTED_UNCONFIGURED"
  | "%future added value"

/** The set of valid sort keys for the ShipmentLineItem query. */
export type ShopifyShipmentLineItemSortKeys =
  /** Sort by the `id` value. */
  "ID" | "%future added value"

/**
 * The [discount class](https://help.shopify.com/manual/discounts/combining-discounts/discount-combinations)
 * that's used to control how discounts can be combined.
 */
export type ShopifyShippingDiscountClass =
  /** Combined as a shipping discount. */
  "SHIPPING" | "%future added value"

/** Represents the shipping details that the customer chose for their order. */
export interface ShopifyShippingLine {
  __typename?: "ShippingLine"
  /**
   * A reference to the carrier service that provided the rate.
   * Present when the rate was computed by a third-party carrier service.
   */
  carrierIdentifier?: Maybe<Scalars["String"]["output"]>
  /** A reference to the shipping method. */
  code?: Maybe<Scalars["String"]["output"]>
  /** The current shipping price after applying refunds, after applying discounts. If the parent `order.taxesIncluded`` field is true, then this price includes taxes. Otherwise, this field is the pre-tax price. */
  currentDiscountedPriceSet: ShopifyMoneyBag
  /** Whether the shipping line is custom or not. */
  custom: Scalars["Boolean"]["output"]
  /** The general classification of the delivery method. */
  deliveryCategory?: Maybe<Scalars["String"]["output"]>
  /** The discounts that have been allocated to the shipping line. */
  discountAllocations: Array<ShopifyDiscountAllocation>
  /**
   * The pre-tax shipping price with discounts applied.
   * As of API version 2024-07, this will be calculated including cart level discounts, such as the free shipping discount.
   * @deprecated Use `discountedPriceSet` instead.
   */
  discountedPrice: ShopifyMoneyV2
  /**
   * The shipping price after applying discounts. If the parent order.taxesIncluded field is true, then this price includes taxes. If not, it's the pre-tax price.
   * As of API version 2024-07, this will be calculated including cart level discounts, such as the free shipping discount.
   */
  discountedPriceSet: ShopifyMoneyBag
  /** A globally-unique ID. */
  id?: Maybe<Scalars["ID"]["output"]>
  /** Whether the shipping line has been removed. */
  isRemoved: Scalars["Boolean"]["output"]
  /**
   * The pre-tax shipping price without any discounts applied.
   * @deprecated Use `originalPriceSet` instead.
   */
  originalPrice: ShopifyMoneyV2
  /** The pre-tax shipping price without any discounts applied. */
  originalPriceSet: ShopifyMoneyBag
  /** The phone number at the shipping address. */
  phone?: Maybe<Scalars["String"]["output"]>
  /**
   * Returns the price of the shipping line.
   * @deprecated Use `originalPriceSet` instead.
   */
  price: Scalars["Money"]["output"]
  /**
   * The fulfillment service requested for the shipping method.
   * Present if the shipping method requires processing by a third party fulfillment service.
   * @deprecated requestedFulfillmentService is no longer in use. Order routing does not use the requestedFulfillmentService during order and fulfillment order creation.
   */
  requestedFulfillmentService?: Maybe<ShopifyFulfillmentService>
  /** A unique identifier for the shipping rate. The format can change without notice and isn't meant to be shown to users. */
  shippingRateHandle?: Maybe<Scalars["String"]["output"]>
  /** Returns the rate source for the shipping line. */
  source?: Maybe<Scalars["String"]["output"]>
  /** The TaxLine objects connected to this shipping line. */
  taxLines: Array<ShopifyTaxLine>
  /** Returns the title of the shipping line. */
  title: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple ShippingLines. */
export interface ShopifyShippingLineConnection {
  __typename?: "ShippingLineConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyShippingLineEdge>
  /** A list of nodes that are contained in ShippingLineEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyShippingLine>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ShippingLine and a cursor during pagination. */
export interface ShopifyShippingLineEdge {
  __typename?: "ShippingLineEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ShippingLineEdge. */
  node: ShopifyShippingLine
}

/**
 * The input fields for specifying the shipping details for the draft order.
 *
 * > Note:
 * > A custom shipping line includes a title and price with `shippingRateHandle` set to `nil`. A shipping line with a carrier-provided shipping rate (currently set via the Shopify admin) includes the shipping rate handle.
 */
export interface ShopifyShippingLineInput {
  /** Price of the shipping rate with currency. If provided, `price` will be ignored. */
  priceWithCurrency?: InputMaybe<ShopifyMoneyInput>
  /** A unique identifier for the shipping rate. */
  shippingRateHandle?: InputMaybe<Scalars["String"]["input"]>
  /** Title of the shipping rate. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** A sale associated with a shipping charge. */
export interface ShopifyShippingLineSale extends ShopifySale {
  __typename?: "ShippingLineSale"
  /** The type of order action that the sale represents. */
  actionType: ShopifySaleActionType
  /** The unique ID for the sale. */
  id: Scalars["ID"]["output"]
  /** The line type assocated with the sale. */
  lineType: ShopifySaleLineType
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars["Int"]["output"]>
  /** The shipping line item for the associated sale. `shippingLine` is not available if the `SaleActionType` is a return. */
  shippingLine?: Maybe<ShopifyShippingLine>
  /** All individual taxes associated with the sale. */
  taxes: Array<ShopifySaleTax>
  /** The total sale amount after taxes and discounts. */
  totalAmount: ShopifyMoneyBag
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: ShopifyMoneyBag
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: ShopifyMoneyBag
  /** The total amount of taxes for the sale. */
  totalTaxAmount: ShopifyMoneyBag
}

/** Return type for `shippingPackageDelete` mutation. */
export interface ShopifyShippingPackageDeletePayload {
  __typename?: "ShippingPackageDeletePayload"
  /** The ID of the deleted shipping package. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `shippingPackageMakeDefault` mutation. */
export interface ShopifyShippingPackageMakeDefaultPayload {
  __typename?: "ShippingPackageMakeDefaultPayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Type of a shipping package. */
export type ShopifyShippingPackageType =
  /** A shipping box. */
  | "BOX"
  /** An envelope. */
  | "ENVELOPE"
  /** A flat rate packaging supplied by a carrier. */
  | "FLAT_RATE"
  /** A soft-pack, bubble-wrap or vinyl envelope. */
  | "SOFT_PACK"
  | "%future added value"

/** Return type for `shippingPackageUpdate` mutation. */
export interface ShopifyShippingPackageUpdatePayload {
  __typename?: "ShippingPackageUpdatePayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** A shipping rate is an additional cost added to the cost of the products that were ordered. */
export interface ShopifyShippingRate {
  __typename?: "ShippingRate"
  /** Human-readable unique identifier for this shipping rate. */
  handle: Scalars["String"]["output"]
  /** The cost associated with the shipping rate. */
  price: ShopifyMoneyV2
  /** The name of the shipping rate. */
  title: Scalars["String"]["output"]
}

/** Represents the shipping costs refunded on the Refund. */
export interface ShopifyShippingRefund {
  __typename?: "ShippingRefund"
  /**
   * The monetary value of the shipping fees to be refunded.
   * @deprecated Use `amountSet` instead.
   */
  amount: Scalars["Money"]["output"]
  /** The monetary value of the shipping fees to be refunded in shop and presentment currencies. */
  amountSet: ShopifyMoneyBag
  /**
   * The maximum amount of shipping fees currently refundable.
   * @deprecated Use `maximumRefundableSet` instead.
   */
  maximumRefundable: Scalars["Money"]["output"]
  /** The maximum amount of shipping fees currently refundable in shop and presentment currencies. */
  maximumRefundableSet: ShopifyMoneyBag
  /**
   * The monetary value of the tax allocated to shipping fees to be refunded.
   * @deprecated Use `taxSet` instead.
   */
  tax: Scalars["Money"]["output"]
  /** The monetary value of the tax allocated to shipping fees to be refunded in shop and presentment currencies. */
  taxSet: ShopifyMoneyBag
}

/** The input fields that are required to reimburse shipping costs. */
export interface ShopifyShippingRefundInput {
  /** The monetary value of the shipping fees to be reimbursed. */
  amount?: InputMaybe<Scalars["Money"]["input"]>
  /** Whether a full refund is provided. */
  fullRefund?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShop
  extends ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyHasPublishedTranslations,
    ShopifyNode {
  __typename?: "Shop"
  /** Account owner information. */
  accountOwner: ShopifyStaffMember
  /** A list of the shop's active alert messages that appear in the Shopify admin. */
  alerts: Array<ShopifyShopAlert>
  /**
   * A list of the shop's product categories. Limit: 1000 product categories.
   * @deprecated Use `allProductCategoriesList` instead.
   */
  allProductCategories: Array<ShopifyProductCategory>
  /** A list of the shop's product categories. Limit: 1000 product categories. */
  allProductCategoriesList: Array<ShopifyTaxonomyCategory>
  /**
   * The token required to query the shop's reports or dashboards.
   * @deprecated Not supported anymore.
   */
  analyticsToken: Scalars["String"]["output"]
  /**
   * The paginated list of fulfillment orders assigned to the shop locations owned by the app.
   *
   * Assigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations
   * managed by
   * [fulfillment services](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
   * that are registered by the app.
   * One app (api_client) can host multiple fulfillment services on a shop.
   * Each fulfillment service manages a dedicated location on a shop.
   * Assigned fulfillment orders can have associated
   * [fulfillment requests](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus),
   * or might currently not be requested to be fulfilled.
   *
   * The app must have `read_assigned_fulfillment_orders`
   * [access scope](https://shopify.dev/docs/api/usage/access-scopes)
   * to be able to retrieve fulfillment orders assigned to its locations.
   *
   * All assigned fulfillment orders (except those with the `CLOSED` status) will be returned by default.
   * Perform filtering with the `assignmentStatus` argument
   * to receive only fulfillment orders that have been requested to be fulfilled.
   * @deprecated Use `QueryRoot.assignedFulfillmentOrders` instead. Details: https://shopify.dev/changelog/moving-the-shop-assignedfulfillmentorders-connection-to-queryroot
   */
  assignedFulfillmentOrders: ShopifyFulfillmentOrderConnection
  /** The list of sales channels not currently installed on the shop. */
  availableChannelApps: ShopifyAppConnection
  /** The shop's billing address information. */
  billingAddress: ShopifyShopAddress
  /** List of all channel definitions associated with a shop. */
  channelDefinitionsForInstalledChannels: Array<ShopifyAvailableChannelDefinitionsByChannel>
  /**
   * List of the shop's active sales channels.
   * @deprecated Use `QueryRoot.channels` instead.
   */
  channels: ShopifyChannelConnection
  /** Specifies whether the shop supports checkouts via Checkout API. */
  checkoutApiSupported: Scalars["Boolean"]["output"]
  /**
   * List of the shop's collections.
   * @deprecated Use `QueryRoot.collections` instead.
   */
  collections: ShopifyCollectionConnection
  /**
   * The public-facing contact email address for the shop.
   * Customers will use this email to communicate with the shop owner.
   */
  contactEmail: Scalars["String"]["output"]
  /** Countries that have been defined in shipping zones for the shop. */
  countriesInShippingZones: ShopifyCountriesInShippingZones
  /** The date and time when the shop was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The three letter code for the currency that the shop sells in. */
  currencyCode: ShopifyCurrencyCode
  /** How currencies are displayed on your store. */
  currencyFormats: ShopifyCurrencyFormats
  /** The presentment currency settings for the shop excluding the shop's own currency. */
  currencySettings: ShopifyCurrencySettingConnection
  /** Whether customer accounts are required, optional, or disabled for the shop. */
  customerAccounts: ShopifyShopCustomerAccountsSetting
  /** Information about the shop's customer accounts. */
  customerAccountsV2: ShopifyCustomerAccountsV2
  /** A list of tags that have been added to customer accounts. */
  customerTags: ShopifyStringConnection
  /**
   * Customer accounts associated to the shop.
   * @deprecated Use `QueryRoot.customers` instead.
   */
  customers: ShopifyCustomerConnection
  /** The shop's meta description used in search engine results. */
  description?: Maybe<Scalars["String"]["output"]>
  /**
   * The domains configured for the shop.
   * @deprecated Use `domainsPaginated` instead.
   */
  domains: Array<ShopifyDomain>
  /** A list of tags that have been added to draft orders. */
  draftOrderTags: ShopifyStringConnection
  /**
   * List of saved draft orders on the shop.
   * @deprecated Use `QueryRoot.draftOrders` instead.
   */
  draftOrders: ShopifyDraftOrderConnection
  /**
   * The shop owner's email address.
   * Shopify will use this email address to communicate with the shop owner.
   */
  email: Scalars["String"]["output"]
  /** The presentment currencies enabled for the shop. */
  enabledPresentmentCurrencies: Array<ShopifyCurrencyCode>
  /** The entitlements for a shop. */
  entitlements: ShopifyEntitlementsType
  /** The set of features enabled for the shop. */
  features: ShopifyShopFeatures
  /**
   * The paginated list of merchant-managed and third-party fulfillment orders.
   * @deprecated Use `QueryRoot.fulfillmentOrders` instead.
   */
  fulfillmentOrders: ShopifyFulfillmentOrderConnection
  /** List of the shop's installed fulfillment services. */
  fulfillmentServices: Array<ShopifyFulfillmentService>
  /** The shop's time zone as defined by the IANA. */
  ianaTimezone: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * List of the shop's inventory items.
   * @deprecated Use `QueryRoot.inventoryItems` instead.
   */
  inventoryItems: ShopifyInventoryItemConnection
  /**
   * The number of pendings orders on the shop.
   * Limited to a maximum of 10000.
   * @deprecated Use `QueryRoot.pendingOrdersCount` instead.
   */
  limitedPendingOrderCount: ShopifyLimitedPendingOrderCount
  /**
   * List of active locations of the shop.
   * @deprecated Use `QueryRoot.locations` instead.
   */
  locations: ShopifyLocationConnection
  /** Whether SMS marketing has been enabled on the shop's checkout configuration settings. */
  marketingSmsConsentEnabledAtCheckout: Scalars["Boolean"]["output"]
  /** The approval signals for a shop to support onboarding to channel apps. */
  merchantApprovalSignals?: Maybe<ShopifyMerchantApprovalSignals>
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** The shop's .myshopify.com domain name. */
  myshopifyDomain: Scalars["String"]["output"]
  /** The shop's name. */
  name: Scalars["String"]["output"]
  /** The shop's settings related to navigation. */
  navigationSettings: Array<ShopifyNavigationItem>
  /** The prefix that appears before order numbers. */
  orderNumberFormatPrefix: Scalars["String"]["output"]
  /** The suffix that appears after order numbers. */
  orderNumberFormatSuffix: Scalars["String"]["output"]
  /** A list of tags that have been added to orders. */
  orderTags: ShopifyStringConnection
  /**
   * A list of the shop's orders.
   * @deprecated Use `QueryRoot.orders` instead.
   */
  orders: ShopifyOrderConnection
  /** The shop's settings related to payments. */
  paymentSettings: ShopifyPaymentSettings
  /** The shop's billing plan. */
  plan: ShopifyShopPlan
  /** The primary domain of the shop's online store. */
  primaryDomain: ShopifyDomain
  /**
   * The list of all images of all products for the shop.
   * @deprecated Use `files` instead. See [filesQuery](https://shopify.dev/docs/api/admin-graphql/latest/queries/files) and its [query](https://shopify.dev/docs/api/admin-graphql/latest/queries/files#argument-query) argument for more information.
   */
  productImages: ShopifyImageConnection
  /**
   * A list of tags that have been added to products.
   * @deprecated Use `QueryRoot.productTags` instead.
   */
  productTags: ShopifyStringConnection
  /**
   * The list of types added to products.
   * @deprecated Use `QueryRoot.productTypes` instead.
   */
  productTypes: ShopifyStringConnection
  /**
   * List of the shop's product variants.
   * @deprecated Use `QueryRoot.productVariants` instead.
   */
  productVariants: ShopifyProductVariantConnection
  /**
   * The list of vendors added to products.
   * @deprecated Use `QueryRoot.productVendors` instead.
   */
  productVendors: ShopifyStringConnection
  /**
   * List of the shop's products.
   * @deprecated Use `QueryRoot.products`.
   */
  products: ShopifyProductConnection
  /**
   * The number of publications for the shop.
   * @deprecated Use `QueryRoot.publicationsCount` instead.
   */
  publicationCount: Scalars["Int"]["output"]
  /** The shop's limits for specific resources. For example, the maximum number ofvariants allowed per product, or the maximum number of locations allowed. */
  resourceLimits: ShopifyShopResourceLimits
  /** The URL of the rich text editor that can be used for mobile devices. */
  richTextEditorUrl: Scalars["URL"]["output"]
  /** Fetches a list of admin search results by a specified query. */
  search: ShopifySearchResultConnection
  /** The list of search filter options for the shop. These can be used to filter productvisibility for the shop. */
  searchFilters: ShopifySearchFilterOptions
  /** Whether the shop has outstanding setup steps. */
  setupRequired: Scalars["Boolean"]["output"]
  /** The list of countries that the shop ships to. */
  shipsToCountries: Array<ShopifyCountryCode>
  /** The name of the shop owner. */
  shopOwnerName: Scalars["String"]["output"]
  /** The list of all legal policies associated with a shop. */
  shopPolicies: Array<ShopifyShopPolicy>
  /**
   * The paginated list of the shop's staff members.
   * @deprecated Use `QueryRoot.staffMembers` instead.
   */
  staffMembers: ShopifyStaffMemberConnection
  /** The storefront access token of a private application. These are scoped per-application. */
  storefrontAccessTokens: ShopifyStorefrontAccessTokenConnection
  /**
   * The URL of the shop's storefront.
   * @deprecated Use `url` instead.
   */
  storefrontUrl: Scalars["URL"]["output"]
  /** Whether the shop charges taxes for shipping. */
  taxShipping: Scalars["Boolean"]["output"]
  /** Whether applicable taxes are included in the shop's product prices. */
  taxesIncluded: Scalars["Boolean"]["output"]
  /** The shop's time zone abbreviation. */
  timezoneAbbreviation: Scalars["String"]["output"]
  /** The shop's time zone offset. */
  timezoneOffset: Scalars["String"]["output"]
  /** The shop's time zone offset expressed as a number of minutes. */
  timezoneOffsetMinutes: Scalars["Int"]["output"]
  /** Whether transactional SMS sent by Shopify have been disabled for a shop. */
  transactionalSmsDisabled: Scalars["Boolean"]["output"]
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
  /** The shop's unit system for weights and measures. */
  unitSystem: ShopifyUnitSystem
  /** The date and time when the shop was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
  /** The URL of the shop's online store. */
  url: Scalars["URL"]["output"]
  /** The shop's primary unit of weight for products and shipping. */
  weightUnit: ShopifyWeightUnit
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopAssignedFulfillmentOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  assignmentStatus?: InputMaybe<ShopifyFulfillmentOrderAssignmentStatus>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  locationIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyFulfillmentOrderSortKeys>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopAvailableChannelAppsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopChannelsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopCollectionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyCollectionSortKeys>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopCurrencySettingsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopCustomerTagsArgs {
  first: Scalars["Int"]["input"]
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopCustomersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyCustomerSortKeys>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopDraftOrderTagsArgs {
  first: Scalars["Int"]["input"]
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopDraftOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyDraftOrderSortKeys>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopFulfillmentOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  includeClosed?: InputMaybe<Scalars["Boolean"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyFulfillmentOrderSortKeys>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopInventoryItemsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopLocationsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  includeInactive?: InputMaybe<Scalars["Boolean"]["input"]>
  includeLegacy?: InputMaybe<Scalars["Boolean"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyLocationSortKeys>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopOrderTagsArgs {
  first: Scalars["Int"]["input"]
  sort?: InputMaybe<ShopifyShopTagSort>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyOrderSortKeys>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopProductImagesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyProductImageSortKeys>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopProductTagsArgs {
  first: Scalars["Int"]["input"]
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopProductTypesArgs {
  first: Scalars["Int"]["input"]
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopProductVariantsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyProductVariantSortKeys>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopProductVendorsArgs {
  first: Scalars["Int"]["input"]
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopProductsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyProductSortKeys>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopSearchArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  first: Scalars["Int"]["input"]
  query: Scalars["String"]["input"]
  types?: InputMaybe<Array<ShopifySearchResultType>>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopStaffMembersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopStorefrontAccessTokensArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents a collection of general settings and information about the shop. */
export interface ShopifyShopTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/** An address for a shop. */
export interface ShopifyShopAddress extends ShopifyNode {
  __typename?: "ShopAddress"
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars["String"]["output"]>
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: Maybe<Scalars["String"]["output"]>
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars["String"]["output"]>
  /** The name of the company or organization. */
  company?: Maybe<Scalars["String"]["output"]>
  /** Whether the address coordinates are valid. */
  coordinatesValidated: Scalars["Boolean"]["output"]
  /** The name of the country. */
  country?: Maybe<Scalars["String"]["output"]>
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   * @deprecated Use `countryCodeV2` instead.
   */
  countryCode?: Maybe<Scalars["String"]["output"]>
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   */
  countryCodeV2?: Maybe<ShopifyCountryCode>
  /**
   * The first name.
   * @deprecated Always null in this context.
   */
  firstName?: Maybe<Scalars["String"]["output"]>
  /** A formatted version of the address, customized by the provided arguments. */
  formatted: Array<Scalars["String"]["output"]>
  /** A comma-separated list of the values for city, province, and country. */
  formattedArea?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * The last name.
   * @deprecated Always null in this context.
   */
  lastName?: Maybe<Scalars["String"]["output"]>
  /** The latitude coordinate of the address. */
  latitude?: Maybe<Scalars["Float"]["output"]>
  /** The longitude coordinate of the address. */
  longitude?: Maybe<Scalars["Float"]["output"]>
  /**
   * The full name, based on firstName and lastName.
   * @deprecated Always null in this context.
   */
  name?: Maybe<Scalars["String"]["output"]>
  /**
   * A phone number associated with the address.
   *
   * Formatted using E.164 standard. For example, _+16135551111_.
   */
  phone?: Maybe<Scalars["String"]["output"]>
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars["String"]["output"]>
  /**
   * The alphanumeric code for the region.
   *
   * For example, ON.
   */
  provinceCode?: Maybe<Scalars["String"]["output"]>
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars["String"]["output"]>
}

/** An address for a shop. */
export interface ShopifyShopAddressFormattedArgs {
  withCompany?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An alert message that appears in the Shopify admin about a problem with a store setting, with an action to take. For example, you could show an alert to ask the merchant to enter their billing information to activate Shopify Plus. */
export interface ShopifyShopAlert {
  __typename?: "ShopAlert"
  /** The text for the button in the alert that links to related information. For example, _Add credit card_. */
  action: ShopifyShopAlertAction
  /** A description of the alert and further information, such as whether the merchant will be charged. */
  description: Scalars["String"]["output"]
}

/** An action associated to a shop alert, such as adding a credit card. */
export interface ShopifyShopAlertAction {
  __typename?: "ShopAlertAction"
  /** The text for the button in the alert. For example, _Add credit card_. */
  title: Scalars["String"]["output"]
  /** The target URL that the button links to. */
  url: Scalars["URL"]["output"]
}

/** Billing preferences for the shop. */
export interface ShopifyShopBillingPreferences {
  __typename?: "ShopBillingPreferences"
  /** The currency the shop uses to pay for apps and services. */
  currency: ShopifyCurrencyCode
}

/**
 * Possible branding of a shop.
 * Branding can be used to define the look of a shop including its styling and logo in the Shopify Admin.
 */
export type ShopifyShopBranding =
  /** Shop has Rogers branding. */
  | "ROGERS"
  /** Shop has Shopify branding. */
  | "SHOPIFY"
  /** Shop has Shopify Gold branding. */
  | "SHOPIFY_GOLD"
  /** Shop has Shopify Plus branding. */
  | "SHOPIFY_PLUS"
  | "%future added value"

/** Represents the shop's customer account requirement preference. */
export type ShopifyShopCustomerAccountsSetting =
  | "DISABLED"
  | "OPTIONAL"
  | "REQUIRED"
  | "%future added value"

/**
 * Represents the feature set available to the shop.
 * Most fields specify whether a feature is enabled for a shop, and some fields return information
 * related to specific features.
 */
export interface ShopifyShopFeatures {
  __typename?: "ShopFeatures"
  /** Whether a shop has access to Avalara AvaTax. */
  avalaraAvatax: Scalars["Boolean"]["output"]
  /** The branding of the shop, which influences its look and feel in the Shopify admin. */
  branding: ShopifyShopBranding
  /** Represents the Bundles feature configuration for the shop. */
  bundles: ShopifyBundlesFeature
  /** Whether a shop's online store can have CAPTCHA protection. */
  captcha: Scalars["Boolean"]["output"]
  /**
   * Whether a shop's online store can have CAPTCHA protection for domains not managed by Shopify.
   * @deprecated No longer required for external domains
   */
  captchaExternalDomains: Scalars["Boolean"]["output"]
  /** Represents the cart transform feature configuration for the shop. */
  cartTransform: ShopifyCartTransformFeature
  /**
   * Whether the delivery profiles functionality is enabled for this shop.
   * @deprecated Delivery profiles are now 100% enabled across Shopify.
   */
  deliveryProfiles: Scalars["Boolean"]["output"]
  /** Whether a shop has access to the Google Analytics dynamic remarketing feature. */
  dynamicRemarketing: Scalars["Boolean"]["output"]
  /** Whether a shop can be migrated to use Shopify subscriptions. */
  eligibleForSubscriptionMigration: Scalars["Boolean"]["output"]
  /** Whether a shop is configured properly to sell subscriptions. */
  eligibleForSubscriptions: Scalars["Boolean"]["output"]
  /** Whether a shop can create gift cards. */
  giftCards: Scalars["Boolean"]["output"]
  /**
   * Whether a shop displays Harmonized System codes on products. This is used for customs when shipping
   * internationally.
   */
  harmonizedSystemCode: Scalars["Boolean"]["output"]
  /**
   * Whether a shop can enable international domains.
   * @deprecated All shops have international domains through Shopify Markets.
   */
  internationalDomains: Scalars["Boolean"]["output"]
  /**
   * Whether a shop can enable international price overrides.
   * @deprecated Use the `markets` field on `EntitlementsType`.
   * Each market entitlement has a `catalogs` field that indicates
   * whether the shop's markets have access to catalogs and price overrides.
   *
   */
  internationalPriceOverrides: Scalars["Boolean"]["output"]
  /**
   * Whether a shop can enable international price rules.
   * @deprecated Use the `markets` field on `EntitlementsType`.
   * Each market entitlement has a `catalogs` field that indicates
   * whether the shop's markets have access to catalogs and price overrides.
   *
   */
  internationalPriceRules: Scalars["Boolean"]["output"]
  /** Whether a shop has enabled a legacy subscription gateway to handle older subscriptions. */
  legacySubscriptionGatewayEnabled: Scalars["Boolean"]["output"]
  /**
   * Whether to show the Live View metrics in the Shopify admin. Live view is hidden from merchants that are on a trial
   * or don't have a storefront.
   */
  liveView: Scalars["Boolean"]["output"]
  /**
   * Whether a shop has access to the onboarding visual.
   * @deprecated No longer supported.
   */
  onboardingVisual: Scalars["Boolean"]["output"]
  /** Whether a shop is configured to sell subscriptions with PayPal Express. */
  paypalExpressSubscriptionGatewayStatus: ShopifyPaypalExpressSubscriptionsGatewayStatus
  /** Whether a shop has access to all reporting features. */
  reports: Scalars["Boolean"]["output"]
  /** Whether a shop has ever had subscription products. */
  sellsSubscriptions: Scalars["Boolean"]["output"]
  /**
   * Whether the shop has a Shopify Plus subscription.
   * @deprecated Use Shop.plan.shopifyPlus instead.
   */
  shopifyPlus: Scalars["Boolean"]["output"]
  /** Whether to show metrics in the Shopify admin. Metrics are hidden for new merchants until they become meaningful. */
  showMetrics: Scalars["Boolean"]["output"]
  /** Whether a shop has an online store. */
  storefront: Scalars["Boolean"]["output"]
  /** Whether a shop is eligible for Unified Markets. */
  unifiedMarkets: Scalars["Boolean"]["output"]
  /** Whether a shop is using Shopify Balance. */
  usingShopifyBalance: Scalars["Boolean"]["output"]
}

/** A locale that's been enabled on a shop. */
export interface ShopifyShopLocale {
  __typename?: "ShopLocale"
  /** The locale ISO code. */
  locale: Scalars["String"]["output"]
  /** The market web presences that use the locale. */
  marketWebPresences: Array<ShopifyMarketWebPresence>
  /** The human-readable locale name. */
  name: Scalars["String"]["output"]
  /** Whether the locale is the default locale for the shop. */
  primary: Scalars["Boolean"]["output"]
  /** Whether the locale is visible to buyers. */
  published: Scalars["Boolean"]["output"]
}

/** Return type for `shopLocaleDisable` mutation. */
export interface ShopifyShopLocaleDisablePayload {
  __typename?: "ShopLocaleDisablePayload"
  /** ISO code of the locale that was deleted. */
  locale?: Maybe<Scalars["String"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `shopLocaleEnable` mutation. */
export interface ShopifyShopLocaleEnablePayload {
  __typename?: "ShopLocaleEnablePayload"
  /** ISO code of the locale that was enabled. */
  shopLocale?: Maybe<ShopifyShopLocale>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields for a shop locale. */
export interface ShopifyShopLocaleInput {
  /** The market web presences on which the locale should be enabled. Pass in an empty array to remove the locale across all market web presences. */
  marketWebPresenceIds?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** Whether the locale is published. Only published locales are visible to the buyer. */
  published?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `shopLocaleUpdate` mutation. */
export interface ShopifyShopLocaleUpdatePayload {
  __typename?: "ShopLocaleUpdatePayload"
  /** The locale that was updated. */
  shopLocale?: Maybe<ShopifyShopLocale>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Shop Pay Installments payment details related to a transaction. */
export interface ShopifyShopPayInstallmentsPaymentDetails
  extends ShopifyBasePaymentDetails {
  __typename?: "ShopPayInstallmentsPaymentDetails"
  /** The name of payment method used by the buyer. */
  paymentMethodName?: Maybe<Scalars["String"]["output"]>
}

/** Represents a Shop Pay payment request. */
export interface ShopifyShopPayPaymentRequest {
  __typename?: "ShopPayPaymentRequest"
  /** The discounts for the payment request order. */
  discounts?: Maybe<Array<ShopifyShopPayPaymentRequestDiscount>>
  /** The line items for the payment request. */
  lineItems: Array<ShopifyShopPayPaymentRequestLineItem>
  /** The presentment currency for the payment request. */
  presentmentCurrency: ShopifyCurrencyCode
  /** The delivery method type for the payment request. */
  selectedDeliveryMethodType: ShopifyShopPayPaymentRequestDeliveryMethodType
  /** The shipping address for the payment request. */
  shippingAddress?: Maybe<ShopifyShopPayPaymentRequestContactField>
  /** The shipping lines for the payment request. */
  shippingLines: Array<ShopifyShopPayPaymentRequestShippingLine>
  /** The subtotal amount for the payment request. */
  subtotal: ShopifyMoneyV2
  /** The total amount for the payment request. */
  total: ShopifyMoneyV2
  /** The total shipping price for the payment request. */
  totalShippingPrice?: Maybe<ShopifyShopPayPaymentRequestTotalShippingPrice>
  /** The total tax for the payment request. */
  totalTax?: Maybe<ShopifyMoneyV2>
}

/** Represents a contact field for a Shop Pay payment request. */
export interface ShopifyShopPayPaymentRequestContactField {
  __typename?: "ShopPayPaymentRequestContactField"
  /** The first address line of the contact field. */
  address1: Scalars["String"]["output"]
  /** The second address line of the contact field. */
  address2?: Maybe<Scalars["String"]["output"]>
  /** The city of the contact field. */
  city: Scalars["String"]["output"]
  /** The company name of the contact field. */
  companyName?: Maybe<Scalars["String"]["output"]>
  /** The country of the contact field. */
  countryCode: Scalars["String"]["output"]
  /** The email of the contact field. */
  email?: Maybe<Scalars["String"]["output"]>
  /** The first name of the contact field. */
  firstName: Scalars["String"]["output"]
  /** The last name of the contact field. */
  lastName: Scalars["String"]["output"]
  /** The phone number of the contact field. */
  phone?: Maybe<Scalars["String"]["output"]>
  /** The postal code of the contact field. */
  postalCode?: Maybe<Scalars["String"]["output"]>
  /** The province of the contact field. */
  provinceCode?: Maybe<Scalars["String"]["output"]>
}

/** Represents the delivery method type for a Shop Pay payment request. */
export type ShopifyShopPayPaymentRequestDeliveryMethodType =
  /** The delivery method type is pickup. */
  | "PICKUP"
  /** The delivery method type is shipping. */
  | "SHIPPING"
  | "%future added value"

/** Represents a discount for a Shop Pay payment request. */
export interface ShopifyShopPayPaymentRequestDiscount {
  __typename?: "ShopPayPaymentRequestDiscount"
  /** The amount of the discount. */
  amount: ShopifyMoneyV2
  /** The label of the discount. */
  label: Scalars["String"]["output"]
}

/** Represents an image for a Shop Pay payment request line item. */
export interface ShopifyShopPayPaymentRequestImage {
  __typename?: "ShopPayPaymentRequestImage"
  /** The alt text of the image. */
  alt?: Maybe<Scalars["String"]["output"]>
  /** The source URL of the image. */
  url: Scalars["String"]["output"]
}

/** Represents a line item for a Shop Pay payment request. */
export interface ShopifyShopPayPaymentRequestLineItem {
  __typename?: "ShopPayPaymentRequestLineItem"
  /** The final item price for the line item. */
  finalItemPrice: ShopifyMoneyV2
  /** The final line price for the line item. */
  finalLinePrice: ShopifyMoneyV2
  /** The image of the line item. */
  image?: Maybe<ShopifyShopPayPaymentRequestImage>
  /** The item discounts for the line item. */
  itemDiscounts?: Maybe<Array<ShopifyShopPayPaymentRequestDiscount>>
  /** The label of the line item. */
  label: Scalars["String"]["output"]
  /** The line discounts for the line item. */
  lineDiscounts?: Maybe<Array<ShopifyShopPayPaymentRequestDiscount>>
  /** The original item price for the line item. */
  originalItemPrice?: Maybe<ShopifyMoneyV2>
  /** The original line price for the line item. */
  originalLinePrice?: Maybe<ShopifyMoneyV2>
  /** The quantity of the line item. */
  quantity: Scalars["Int"]["output"]
  /** Whether the line item requires shipping. */
  requiresShipping?: Maybe<Scalars["Boolean"]["output"]>
  /** The SKU of the line item. */
  sku?: Maybe<Scalars["String"]["output"]>
}

/** The receipt of Shop Pay payment request session submission. */
export interface ShopifyShopPayPaymentRequestReceipt {
  __typename?: "ShopPayPaymentRequestReceipt"
  /** The date and time when the payment request receipt was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The order that's associated with the payment request receipt. */
  order?: Maybe<ShopifyOrder>
  /** The shop pay payment request object. */
  paymentRequest: ShopifyShopPayPaymentRequest
  /** The status of the payment request session submission. */
  processingStatus: ShopifyShopPayPaymentRequestReceiptProcessingStatus
  /** The source identifier provided in the `ShopPayPaymentRequestSessionCreate` mutation. */
  sourceIdentifier: Scalars["String"]["output"]
  /** The token of the receipt, initially returned by an `ShopPayPaymentRequestSessionSubmit` mutation. */
  token: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple ShopPayPaymentRequestReceipts. */
export interface ShopifyShopPayPaymentRequestReceiptConnection {
  __typename?: "ShopPayPaymentRequestReceiptConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyShopPayPaymentRequestReceiptEdge>
  /** A list of nodes that are contained in ShopPayPaymentRequestReceiptEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyShopPayPaymentRequestReceipt>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ShopPayPaymentRequestReceipt and a cursor during pagination. */
export interface ShopifyShopPayPaymentRequestReceiptEdge {
  __typename?: "ShopPayPaymentRequestReceiptEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ShopPayPaymentRequestReceiptEdge. */
  node: ShopifyShopPayPaymentRequestReceipt
}

/**
 * The processing status of a Shop Pay payment request.
 * Represents the different states a payment request can be in during its lifecycle,
 * from initial creation through to completion or failure.
 */
export interface ShopifyShopPayPaymentRequestReceiptProcessingStatus {
  __typename?: "ShopPayPaymentRequestReceiptProcessingStatus"
  /** A standardized error code, independent of the payment provider. */
  errorCode?: Maybe<ShopifyShopPayPaymentRequestReceiptProcessingStatusErrorCode>
  /** The message of the payment request receipt. */
  message?: Maybe<Scalars["String"]["output"]>
  /** The state of the payment request receipt. */
  state: ShopifyShopPayPaymentRequestReceiptProcessingStatusState
}

/** A standardized error code, independent of the payment provider. */
export type ShopifyShopPayPaymentRequestReceiptProcessingStatusErrorCode =
  /** The amount is too small. */
  | "AMOUNT_TOO_SMALL"
  /** Call the card issuer. */
  | "CALL_ISSUER"
  /** The card was declined. */
  | "CARD_DECLINED"
  /** There is an error in the gateway or merchant configuration. */
  | "CONFIG_ERROR"
  /** The card is expired. */
  | "EXPIRED_CARD"
  /** The card issuer has flagged the transaction as potentially fraudulent. */
  | "FRAUD_SUSPECTED"
  /** There was an unknown error with processing the payment. */
  | "GENERIC_ERROR"
  /** The address does not match the card number. */
  | "INCORRECT_ADDRESS"
  /** The CVC does not match the card number. */
  | "INCORRECT_CVC"
  /** The card number is incorrect. */
  | "INCORRECT_NUMBER"
  /** The entered PIN is incorrect. */
  | "INCORRECT_PIN"
  /** The ZIP or postal code does not match the card number. */
  | "INCORRECT_ZIP"
  /** The amount is either too high or too low for the provider. */
  | "INVALID_AMOUNT"
  /** The payment method is not available in the customer's country. */
  | "INVALID_COUNTRY"
  /** The format of the CVC is incorrect. */
  | "INVALID_CVC"
  /** The format of the expiry date is incorrect. */
  | "INVALID_EXPIRY_DATE"
  /** The format of the card number is incorrect. */
  | "INVALID_NUMBER"
  /** The payment method is momentarily unavailable. */
  | "PAYMENT_METHOD_UNAVAILABLE"
  /** The card has been reported as lost or stolen, and the card issuer has requested that the merchant keep the card and call the number on the back. */
  | "PICK_UP_CARD"
  /** There was an error while processing the payment. */
  | "PROCESSING_ERROR"
  /** A real card was used but the gateway was in test mode. */
  | "TEST_MODE_LIVE_CARD"
  /** The 3D Secure check failed. */
  | "THREE_D_SECURE_FAILED"
  /** The gateway or merchant configuration doesn't support a feature, such as network tokenization. */
  | "UNSUPPORTED_FEATURE"
  | "%future added value"

/** The state of the payment request receipt. */
export type ShopifyShopPayPaymentRequestReceiptProcessingStatusState =
  /** The payment request requires action from the buyer. */
  | "ACTION_REQUIRED"
  /** The payment request processing completed successfully. */
  | "COMPLETED"
  /** The payment request processing failed. */
  | "FAILED"
  /** The payment request currently being processed. */
  | "PROCESSING"
  /** The payment request is ready and queued to be processed. */
  | "READY"
  | "%future added value"

/** The set of valid sort keys for the ShopPayPaymentRequestReceipts query. */
export type ShopifyShopPayPaymentRequestReceiptsSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  | "%future added value"

/** Represents a shipping line for a Shop Pay payment request. */
export interface ShopifyShopPayPaymentRequestShippingLine {
  __typename?: "ShopPayPaymentRequestShippingLine"
  /** The amount for the shipping line. */
  amount: ShopifyMoneyV2
  /** The code of the shipping line. */
  code: Scalars["String"]["output"]
  /** The label of the shipping line. */
  label: Scalars["String"]["output"]
}

/** Represents a shipping total for a Shop Pay payment request. */
export interface ShopifyShopPayPaymentRequestTotalShippingPrice {
  __typename?: "ShopPayPaymentRequestTotalShippingPrice"
  /** The discounts for the shipping total. */
  discounts: Array<ShopifyShopPayPaymentRequestDiscount>
  /** The final total for the shipping line. */
  finalTotal: ShopifyMoneyV2
  /** The original total for the shipping line. */
  originalTotal?: Maybe<ShopifyMoneyV2>
}

/** The billing plan of the shop. */
export interface ShopifyShopPlan {
  __typename?: "ShopPlan"
  /**
   * The name of the shop's billing plan.
   * @deprecated Use `publicDisplayName` instead.
   */
  displayName: Scalars["String"]["output"]
  /** Whether the shop is a partner development shop for testing purposes. */
  partnerDevelopment: Scalars["Boolean"]["output"]
  /** The public display name of the shop's billing plan. Possible values are: Advanced, Basic, Development, Grow, Inactive, Lite, Other, Paused, Plus, Plus Trial, Retail, Shop Component, Staff Business, Starter, and Trial. */
  publicDisplayName: Scalars["String"]["output"]
  /** Whether the shop has a Shopify Plus subscription. */
  shopifyPlus: Scalars["Boolean"]["output"]
}

/** Policy that a merchant has configured for their store, such as their refund or privacy policy. */
export interface ShopifyShopPolicy
  extends ShopifyHasPublishedTranslations,
    ShopifyNode {
  __typename?: "ShopPolicy"
  /** The text of the policy. The maximum size is 512kb. */
  body: Scalars["HTML"]["output"]
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the policy was created. */
  createdAt: Scalars["Date"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The translated title of the policy. For example, Refund Policy or Politique de remboursement. */
  title: Scalars["String"]["output"]
  /** The published translations associated with the resource. */
  translations: Array<ShopifyTranslation>
  /** The shop policy type. */
  type: ShopifyShopPolicyType
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the policy was last modified. */
  updatedAt: Scalars["Date"]["output"]
  /** The public URL of the policy. */
  url: Scalars["URL"]["output"]
}

/** Policy that a merchant has configured for their store, such as their refund or privacy policy. */
export interface ShopifyShopPolicyTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/** Possible error codes that can be returned by `ShopPolicyUserError`. */
export type ShopifyShopPolicyErrorCode =
  /** The input value is too big. */
  "TOO_BIG" | "%future added value"

/** The input fields required to update a policy. */
export interface ShopifyShopPolicyInput {
  /** Policy text, maximum size of 512kb. */
  body: Scalars["String"]["input"]
  /** The shop policy type. */
  type: ShopifyShopPolicyType
}

/** Available shop policy types. */
export type ShopifyShopPolicyType =
  /** The contact information. */
  | "CONTACT_INFORMATION"
  /** The legal notice. */
  | "LEGAL_NOTICE"
  /** The privacy policy. */
  | "PRIVACY_POLICY"
  /** The refund policy. */
  | "REFUND_POLICY"
  /** The shipping policy. */
  | "SHIPPING_POLICY"
  /** The cancellation policy. */
  | "SUBSCRIPTION_POLICY"
  /** The terms of sale. */
  | "TERMS_OF_SALE"
  /** The terms of service. */
  | "TERMS_OF_SERVICE"
  | "%future added value"

/** Return type for `shopPolicyUpdate` mutation. */
export interface ShopifyShopPolicyUpdatePayload {
  __typename?: "ShopPolicyUpdatePayload"
  /** The shop policy that has been updated. */
  shopPolicy?: Maybe<ShopifyShopPolicy>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyShopPolicyUserError>
}

/** An error that occurs during the execution of a shop policy mutation. */
export interface ShopifyShopPolicyUserError extends ShopifyDisplayableError {
  __typename?: "ShopPolicyUserError"
  /** The error code. */
  code?: Maybe<ShopifyShopPolicyErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Return type for `shopResourceFeedbackCreate` mutation. */
export interface ShopifyShopResourceFeedbackCreatePayload {
  __typename?: "ShopResourceFeedbackCreatePayload"
  /** The shop feedback that's created. */
  feedback?: Maybe<ShopifyAppFeedback>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyShopResourceFeedbackCreateUserError>
}

/** An error that occurs during the execution of `ShopResourceFeedbackCreate`. */
export interface ShopifyShopResourceFeedbackCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "ShopResourceFeedbackCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyShopResourceFeedbackCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ShopResourceFeedbackCreateUserError`. */
export type ShopifyShopResourceFeedbackCreateUserErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** The feedback date cannot be set in the future. */
  | "FEEDBACK_DATE_IN_FUTURE"
  /** The input value is invalid. */
  | "INVALID"
  /** The feedback for a later version of the resource was already accepted. */
  | "OUTDATED_FEEDBACK"
  /** The input value needs to be blank. */
  | "PRESENT"
  | "%future added value"

/** Resource limits of a shop. */
export interface ShopifyShopResourceLimits {
  __typename?: "ShopResourceLimits"
  /** Maximum number of locations allowed. */
  locationLimit: Scalars["Int"]["output"]
  /** Maximum number of product options allowed. */
  maxProductOptions: Scalars["Int"]["output"]
  /** The maximum number of variants allowed per product. */
  maxProductVariants: Scalars["Int"]["output"]
  /** Whether the shop has reached the limit of the number of URL redirects it can make for resources. */
  redirectLimitReached: Scalars["Boolean"]["output"]
}

/** Possible sort of tags. */
export type ShopifyShopTagSort =
  /** Alphabetical sort. */
  | "ALPHABETICAL"
  /** Popularity sort. */
  | "POPULAR"
  | "%future added value"

/** A Shopify Function. */
export interface ShopifyShopifyFunction {
  __typename?: "ShopifyFunction"
  /** The API type of the Shopify Function. */
  apiType: Scalars["String"]["output"]
  /** The API version of the Shopify Function. */
  apiVersion: Scalars["String"]["output"]
  /** The app that owns the Shopify Function. */
  app: ShopifyApp
  /** The App Bridge information for the Shopify Function. */
  appBridge: ShopifyFunctionsAppBridge
  /** The client ID of the app that owns the Shopify Function. */
  appKey: Scalars["String"]["output"]
  /** The description of the Shopify Function. */
  description?: Maybe<Scalars["String"]["output"]>
  /** The ID of the Shopify Function. */
  id: Scalars["String"]["output"]
  /** The input query of the Shopify Function. */
  inputQuery?: Maybe<Scalars["String"]["output"]>
  /** The title of the Shopify Function. */
  title: Scalars["String"]["output"]
  /** If the Shopify Function uses the creation UI in the Admin. */
  useCreationUi: Scalars["Boolean"]["output"]
}

/** An auto-generated type for paginating through multiple ShopifyFunctions. */
export interface ShopifyShopifyFunctionConnection {
  __typename?: "ShopifyFunctionConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyShopifyFunctionEdge>
  /** A list of nodes that are contained in ShopifyFunctionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyShopifyFunction>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ShopifyFunction and a cursor during pagination. */
export interface ShopifyShopifyFunctionEdge {
  __typename?: "ShopifyFunctionEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ShopifyFunctionEdge. */
  node: ShopifyShopifyFunction
}

/**
 * Balance and payout information for a
 * [Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
 * account. Balance includes all balances for the currencies supported by the shop.
 * You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
 */
export interface ShopifyShopifyPaymentsAccount extends ShopifyNode {
  __typename?: "ShopifyPaymentsAccount"
  /** The name of the account opener. */
  accountOpenerName?: Maybe<Scalars["String"]["output"]>
  /** Whether the Shopify Payments setup is completed. */
  activated: Scalars["Boolean"]["output"]
  /** Current balances in all currencies for the account. */
  balance: Array<ShopifyMoneyV2>
  /** A list of balance transactions associated with the shop. */
  balanceTransactions: ShopifyShopifyPaymentsBalanceTransactionConnection
  /** All bank accounts configured for the Shopify Payments account. */
  bankAccounts: ShopifyShopifyPaymentsBankAccountConnection
  /**
   * The statement descriptor used for charges.
   *
   * The statement descriptor appears on a customer's credit card or bank statement when they make a purchase.
   * @deprecated Use `chargeStatementDescriptors` instead.
   */
  chargeStatementDescriptor?: Maybe<Scalars["String"]["output"]>
  /**
   * The statement descriptors used for charges.
   *
   * These descriptors appear on a customer's credit card or bank statement when they make a purchase.
   */
  chargeStatementDescriptors?: Maybe<ShopifyShopifyPaymentsChargeStatementDescriptor>
  /** The Shopify Payments account country. */
  country: Scalars["String"]["output"]
  /** The default payout currency for the Shopify Payments account. */
  defaultCurrency: ShopifyCurrencyCode
  /** All disputes that originated from a transaction made with the Shopify Payments account. */
  disputes: ShopifyShopifyPaymentsDisputeConnection
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Whether the Shopify Payments account can be onboarded. */
  onboardable: Scalars["Boolean"]["output"]
  /** The payout schedule for the account. */
  payoutSchedule: ShopifyShopifyPaymentsPayoutSchedule
  /**
   * The descriptor used for payouts.
   *
   * The descriptor appears on a merchant's bank statement when they receive a payout.
   */
  payoutStatementDescriptor?: Maybe<Scalars["String"]["output"]>
  /** All current and previous payouts made between the account and the bank account. */
  payouts: ShopifyShopifyPaymentsPayoutConnection
}

/**
 * Balance and payout information for a
 * [Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
 * account. Balance includes all balances for the currencies supported by the shop.
 * You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
 */
export interface ShopifyShopifyPaymentsAccountBalanceTransactionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  hideTransfers?: InputMaybe<Scalars["Boolean"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyBalanceTransactionSortKeys>
}

/**
 * Balance and payout information for a
 * [Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
 * account. Balance includes all balances for the currencies supported by the shop.
 * You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
 */
export interface ShopifyShopifyPaymentsAccountBankAccountsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Balance and payout information for a
 * [Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
 * account. Balance includes all balances for the currencies supported by the shop.
 * You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
 */
export interface ShopifyShopifyPaymentsAccountDisputesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * Balance and payout information for a
 * [Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
 * account. Balance includes all balances for the currencies supported by the shop.
 * You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
 */
export interface ShopifyShopifyPaymentsAccountPayoutsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyPayoutSortKeys>
  transactionType?: InputMaybe<ShopifyShopifyPaymentsPayoutTransactionType>
}

/** A Shopify Payments address. */
export interface ShopifyShopifyPaymentsAddressBasic {
  __typename?: "ShopifyPaymentsAddressBasic"
  /** Line 1 of the address. */
  addressLine1?: Maybe<Scalars["String"]["output"]>
  /** Line 2 of the address. */
  addressLine2?: Maybe<Scalars["String"]["output"]>
  /** The address city. */
  city?: Maybe<Scalars["String"]["output"]>
  /** The address country. */
  country?: Maybe<Scalars["String"]["output"]>
  /** The address postal code. */
  postalCode?: Maybe<Scalars["String"]["output"]>
  /** The address state/province/zone. */
  zone?: Maybe<Scalars["String"]["output"]>
}

/** The adjustment order object. */
export interface ShopifyShopifyPaymentsAdjustmentOrder {
  __typename?: "ShopifyPaymentsAdjustmentOrder"
  /** The amount of the adjustment order. */
  amount: ShopifyMoneyV2
  /** The fee of the adjustment order. */
  fees: ShopifyMoneyV2
  /** The link to the adjustment order. */
  link: Scalars["URL"]["output"]
  /** The name of the adjustment order. */
  name: Scalars["String"]["output"]
  /** The net of the adjustment order. */
  net: ShopifyMoneyV2
  /** The ID of the order transaction. */
  orderTransactionId: Scalars["BigInt"]["output"]
}

/** The order associated to the balance transaction. */
export interface ShopifyShopifyPaymentsAssociatedOrder {
  __typename?: "ShopifyPaymentsAssociatedOrder"
  /** The ID of the associated order. */
  id: Scalars["ID"]["output"]
  /** The name of the associated order. */
  name: Scalars["String"]["output"]
}

/** A transaction that contributes to a Shopify Payments account balance. */
export interface ShopifyShopifyPaymentsBalanceTransaction extends ShopifyNode {
  __typename?: "ShopifyPaymentsBalanceTransaction"
  /**
   * The reason for the adjustment that's associated with the transaction.
   *             If the source_type isn't an adjustment, the value will be null.
   */
  adjustmentReason?: Maybe<Scalars["String"]["output"]>
  /** The adjustment orders associated to the transaction. */
  adjustmentsOrders: Array<ShopifyShopifyPaymentsAdjustmentOrder>
  /** The amount contributing to the balance transaction. */
  amount: ShopifyMoneyV2
  /** The associated order for the balance transaction. */
  associatedOrder?: Maybe<ShopifyShopifyPaymentsAssociatedOrder>
  /** Payout assoicated with the transaction. */
  associatedPayout: ShopifyShopifyPaymentsBalanceTransactionAssociatedPayout
  /** The fee amount contributing to the balance transaction. */
  fee: ShopifyMoneyV2
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The net amount contributing to the merchant's balance. */
  net: ShopifyMoneyV2
  /** The ID of the resource leading to the transaction. */
  sourceId?: Maybe<Scalars["BigInt"]["output"]>
  /**
   * The id of the
   *             [Order Transaction](https://shopify.dev/docs/admin-api/rest/reference/orders/transaction)
   *
   *             that resulted in this balance transaction.
   */
  sourceOrderTransactionId?: Maybe<Scalars["BigInt"]["output"]>
  /** The source type of the balance transaction. */
  sourceType?: Maybe<ShopifyShopifyPaymentsSourceType>
  /** Wether the tranaction was created in test mode. */
  test: Scalars["Boolean"]["output"]
  /** The date and time when the balance transaction was processed. */
  transactionDate: Scalars["DateTime"]["output"]
  /** The type of transaction. */
  type: ShopifyShopifyPaymentsTransactionType
}

/** The payout associated with a balance transaction. */
export interface ShopifyShopifyPaymentsBalanceTransactionAssociatedPayout {
  __typename?: "ShopifyPaymentsBalanceTransactionAssociatedPayout"
  /** The ID of the payout associated with the balance transaction. */
  id?: Maybe<Scalars["ID"]["output"]>
  /** The status of the payout associated with the balance transaction. */
  status?: Maybe<ShopifyShopifyPaymentsBalanceTransactionPayoutStatus>
}

/** An auto-generated type for paginating through multiple ShopifyPaymentsBalanceTransactions. */
export interface ShopifyShopifyPaymentsBalanceTransactionConnection {
  __typename?: "ShopifyPaymentsBalanceTransactionConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyShopifyPaymentsBalanceTransactionEdge>
  /** A list of nodes that are contained in ShopifyPaymentsBalanceTransactionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyShopifyPaymentsBalanceTransaction>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ShopifyPaymentsBalanceTransaction and a cursor during pagination. */
export interface ShopifyShopifyPaymentsBalanceTransactionEdge {
  __typename?: "ShopifyPaymentsBalanceTransactionEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ShopifyPaymentsBalanceTransactionEdge. */
  node: ShopifyShopifyPaymentsBalanceTransaction
}

/** The payout status of the balance transaction. */
export type ShopifyShopifyPaymentsBalanceTransactionPayoutStatus =
  /** The transaction requires action before it can be paid out. */
  | "ACTION_REQUIRED"
  /** The payout has been canceled by Shopify. */
  | "CANCELED"
  /** The payout has been declined by the bank. */
  | "FAILED"
  /** The payout has been submitted to the bank. */
  | "IN_TRANSIT"
  /** The payout has been successfully deposited into the bank. */
  | "PAID"
  /** The transaction has not been assigned a payout yet. */
  | "PENDING"
  /**
   * The payout has been created and had transactions assigned to it, but
   * it has not yet been submitted to the bank.
   */
  | "SCHEDULED"
  | "%future added value"

/** A bank account that can receive payouts. */
export interface ShopifyShopifyPaymentsBankAccount extends ShopifyNode {
  __typename?: "ShopifyPaymentsBankAccount"
  /** The last digits of the account number (the rest is redacted). */
  accountNumberLastDigits: Scalars["String"]["output"]
  /** The name of the bank. */
  bankName?: Maybe<Scalars["String"]["output"]>
  /** The country of the bank. */
  country: ShopifyCountryCode
  /** The date that the bank account was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The currency of the bank account. */
  currency: ShopifyCurrencyCode
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** All current and previous payouts made between the account and the bank account. */
  payouts: ShopifyShopifyPaymentsPayoutConnection
  /** The status of the bank account. */
  status: ShopifyShopifyPaymentsBankAccountStatus
}

/** A bank account that can receive payouts. */
export interface ShopifyShopifyPaymentsBankAccountPayoutsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  savedSearchId?: InputMaybe<Scalars["ID"]["input"]>
  sortKey?: InputMaybe<ShopifyPayoutSortKeys>
  transactionType?: InputMaybe<ShopifyShopifyPaymentsPayoutTransactionType>
}

/** An auto-generated type for paginating through multiple ShopifyPaymentsBankAccounts. */
export interface ShopifyShopifyPaymentsBankAccountConnection {
  __typename?: "ShopifyPaymentsBankAccountConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyShopifyPaymentsBankAccountEdge>
  /** A list of nodes that are contained in ShopifyPaymentsBankAccountEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyShopifyPaymentsBankAccount>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ShopifyPaymentsBankAccount and a cursor during pagination. */
export interface ShopifyShopifyPaymentsBankAccountEdge {
  __typename?: "ShopifyPaymentsBankAccountEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ShopifyPaymentsBankAccountEdge. */
  node: ShopifyShopifyPaymentsBankAccount
}

/** The bank account status. */
export type ShopifyShopifyPaymentsBankAccountStatus =
  /** A payout to the bank account failed. */
  | "ERRORED"
  /** A bank account that hasn't had any activity and that's not validated. */
  | "NEW"
  /** It was determined that the bank account exists. */
  | "VALIDATED"
  /** Bank account validation was successful. */
  | "VERIFIED"
  | "%future added value"

/** The business type of a Shopify Payments account. */
export type ShopifyShopifyPaymentsBusinessType =
  /** The business type is a corporation. */
  | "CORPORATION"
  /** The business type is a free zone establishment. */
  | "FREE_ZONE_ESTABLISHMENT"
  /** The business type is a free zone LLC. */
  | "FREE_ZONE_LLC"
  /** The business type is a government. */
  | "GOVERNMENT"
  /** The business type is an incorporated partnership. */
  | "INCORPORATED_PARTNERSHIP"
  /** The business is an individual. */
  | "INDIVIDUAL"
  /** The business type is a Limited Liability Company. */
  | "LLC"
  /** The business type is a non profit. */
  | "NON_PROFIT"
  /** The business type is a non profit (incorporated). */
  | "NON_PROFIT_INCORPORATED"
  /** The business type is a non profit (registered charity). */
  | "NON_PROFIT_REGISTERED_CHARITY"
  /** The business type is a non profit (unincorporated). */
  | "NON_PROFIT_UNINCORPORATED"
  /** The business type is a non profit (unincorporated_association). */
  | "NON_PROFIT_UNINCORPORATED_ASSOCIATION"
  /** The business type is not set. This is usually because onboarding is incomplete. */
  | "NOT_SET"
  /** The business type is a partnership. */
  | "PARTNERSHIP"
  /** The business type is a private corporation. */
  | "PRIVATE_CORPORATION"
  /** The business type is a private multi member LLC. */
  | "PRIVATE_MULTI_MEMBER_LLC"
  /** The business type is a private partnership. */
  | "PRIVATE_PARTNERSHIP"
  /** The business type is a private single member LLC. */
  | "PRIVATE_SINGLE_MEMBER_LLC"
  /** The business type is a private unincorporated association. */
  | "PRIVATE_UNINCORPORATED_ASSOCIATION"
  /** The business type is a public company. */
  | "PUBLIC_COMPANY"
  /** The business type is a public corporation. */
  | "PUBLIC_CORPORATION"
  /** The business type is a public partnership. */
  | "PUBLIC_PARTNERSHIP"
  /** The business type is a sole establishment. */
  | "SOLE_ESTABLISHMENT"
  /** The business type is a sole proprietorship. */
  | "SOLE_PROP"
  /** The business type is an unincorporated partnership. */
  | "UNINCORPORATED_PARTNERSHIP"
  | "%future added value"

/** The charge descriptors for a payments account. */
export interface ShopifyShopifyPaymentsChargeStatementDescriptor {
  /** The default charge statement descriptor. */
  default?: Maybe<Scalars["String"]["output"]>
  /** The prefix of the statement descriptor. */
  prefix: Scalars["String"]["output"]
}

/** The charge descriptors for a payments account. */
export interface ShopifyShopifyPaymentsDefaultChargeStatementDescriptor
  extends ShopifyShopifyPaymentsChargeStatementDescriptor {
  __typename?: "ShopifyPaymentsDefaultChargeStatementDescriptor"
  /** The default charge statement descriptor. */
  default?: Maybe<Scalars["String"]["output"]>
  /** The prefix of the statement descriptor. */
  prefix: Scalars["String"]["output"]
}

/** A dispute occurs when a buyer questions the legitimacy of a charge with their financial institution. */
export interface ShopifyShopifyPaymentsDispute
  extends ShopifyLegacyInteroperability,
    ShopifyNode {
  __typename?: "ShopifyPaymentsDispute"
  /** The total amount disputed by the cardholder. */
  amount: ShopifyMoneyV2
  /** The deadline for evidence submission. */
  evidenceDueBy?: Maybe<Scalars["Date"]["output"]>
  /** The date when evidence was sent. Returns null if evidence hasn't yet been sent. */
  evidenceSentOn?: Maybe<Scalars["Date"]["output"]>
  /** The date when this dispute was resolved. Returns null if the dispute isn't yet resolved. */
  finalizedOn?: Maybe<Scalars["Date"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The date when this dispute was initiated. */
  initiatedAt: Scalars["DateTime"]["output"]
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** The order that contains the charge that's under dispute. */
  order?: Maybe<ShopifyOrder>
  /** The reason of the dispute. */
  reasonDetails: ShopifyShopifyPaymentsDisputeReasonDetails
  /** The current state of the dispute. */
  status: ShopifyDisputeStatus
  /** Indicates if this dispute is still in the inquiry phase or has turned into a chargeback. */
  type: ShopifyDisputeType
}

/** An auto-generated type for paginating through multiple ShopifyPaymentsDisputes. */
export interface ShopifyShopifyPaymentsDisputeConnection {
  __typename?: "ShopifyPaymentsDisputeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyShopifyPaymentsDisputeEdge>
  /** A list of nodes that are contained in ShopifyPaymentsDisputeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyShopifyPaymentsDispute>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ShopifyPaymentsDispute and a cursor during pagination. */
export interface ShopifyShopifyPaymentsDisputeEdge {
  __typename?: "ShopifyPaymentsDisputeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ShopifyPaymentsDisputeEdge. */
  node: ShopifyShopifyPaymentsDispute
}

/** The evidence associated with the dispute. */
export interface ShopifyShopifyPaymentsDisputeEvidence extends ShopifyNode {
  __typename?: "ShopifyPaymentsDisputeEvidence"
  /** The activity logs associated with the dispute evidence. */
  accessActivityLog?: Maybe<Scalars["String"]["output"]>
  /** The billing address that's provided by the customer. */
  billingAddress?: Maybe<ShopifyMailingAddress>
  /** The cancellation policy disclosure associated with the dispute evidence. */
  cancellationPolicyDisclosure?: Maybe<Scalars["String"]["output"]>
  /** The cancellation policy file associated with the dispute evidence. */
  cancellationPolicyFile?: Maybe<ShopifyShopifyPaymentsDisputeFileUpload>
  /** The cancellation rebuttal associated with the dispute evidence. */
  cancellationRebuttal?: Maybe<Scalars["String"]["output"]>
  /** The customer communication file associated with the dispute evidence. */
  customerCommunicationFile?: Maybe<ShopifyShopifyPaymentsDisputeFileUpload>
  /** The customer's email address. */
  customerEmailAddress?: Maybe<Scalars["String"]["output"]>
  /** The customer's first name. */
  customerFirstName?: Maybe<Scalars["String"]["output"]>
  /** The customer's last name. */
  customerLastName?: Maybe<Scalars["String"]["output"]>
  /** The customer purchase ip for this dispute evidence. */
  customerPurchaseIp?: Maybe<Scalars["String"]["output"]>
  /** The dispute associated with the evidence. */
  dispute: ShopifyShopifyPaymentsDispute
  /** The file uploads associated with the dispute evidence. */
  disputeFileUploads: Array<ShopifyShopifyPaymentsDisputeFileUpload>
  /** The fulfillments associated with the dispute evidence. */
  fulfillments: Array<ShopifyShopifyPaymentsDisputeFulfillment>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The product description for this dispute evidence. */
  productDescription?: Maybe<Scalars["String"]["output"]>
  /** The refund policy disclosure associated with the dispute evidence. */
  refundPolicyDisclosure?: Maybe<Scalars["String"]["output"]>
  /** The refund policy file associated with the dispute evidence. */
  refundPolicyFile?: Maybe<ShopifyShopifyPaymentsDisputeFileUpload>
  /** The refund refusal explanation associated with dispute evidence. */
  refundRefusalExplanation?: Maybe<Scalars["String"]["output"]>
  /** The service documentation file associated with the dispute evidence. */
  serviceDocumentationFile?: Maybe<ShopifyShopifyPaymentsDisputeFileUpload>
  /** The mailing address for shipping that's provided by the customer. */
  shippingAddress?: Maybe<ShopifyMailingAddress>
  /** The shipping documentation file associated with the dispute evidence. */
  shippingDocumentationFile?: Maybe<ShopifyShopifyPaymentsDisputeFileUpload>
  /** Whether the dispute evidence is submitted. */
  submitted: Scalars["Boolean"]["output"]
  /** The uncategorized file associated with the dispute evidence. */
  uncategorizedFile?: Maybe<ShopifyShopifyPaymentsDisputeFileUpload>
  /** The uncategorized text for the dispute evidence. */
  uncategorizedText?: Maybe<Scalars["String"]["output"]>
}

/** The possible dispute evidence file types. */
export type ShopifyShopifyPaymentsDisputeEvidenceFileType =
  /** Cancellation Policy File. */
  | "CANCELLATION_POLICY_FILE"
  /** Customer Communication File. */
  | "CUSTOMER_COMMUNICATION_FILE"
  /** Refund Policy File. */
  | "REFUND_POLICY_FILE"
  /** Service Documentation File. */
  | "SERVICE_DOCUMENTATION_FILE"
  /** Shipping Documentation File. */
  | "SHIPPING_DOCUMENTATION_FILE"
  /** Uncategorized File. */
  | "UNCATEGORIZED_FILE"
  | "%future added value"

/** The input fields required to update a dispute evidence object. */
export interface ShopifyShopifyPaymentsDisputeEvidenceUpdateInput {
  /** Activity logs. */
  accessActivityLog?: InputMaybe<Scalars["String"]["input"]>
  /** Cancellation policy disclosure. */
  cancellationPolicyDisclosure?: InputMaybe<Scalars["String"]["input"]>
  /** Cancellation policy file. */
  cancellationPolicyFile?: InputMaybe<ShopifyShopifyPaymentsDisputeFileUploadUpdateInput>
  /** Cancellation rebuttal. */
  cancellationRebuttal?: InputMaybe<Scalars["String"]["input"]>
  /** Customer communication file. */
  customerCommunicationFile?: InputMaybe<ShopifyShopifyPaymentsDisputeFileUploadUpdateInput>
  /** Customer email address. */
  customerEmailAddress?: InputMaybe<Scalars["String"]["input"]>
  /** Customer first name. */
  customerFirstName?: InputMaybe<Scalars["String"]["input"]>
  /** Customer last name. */
  customerLastName?: InputMaybe<Scalars["String"]["input"]>
  /** Refund policy disclosure. */
  refundPolicyDisclosure?: InputMaybe<Scalars["String"]["input"]>
  /** Refund policy file. */
  refundPolicyFile?: InputMaybe<ShopifyShopifyPaymentsDisputeFileUploadUpdateInput>
  /** Refund refusal explanation. */
  refundRefusalExplanation?: InputMaybe<Scalars["String"]["input"]>
  /** Service documentation file. */
  serviceDocumentationFile?: InputMaybe<ShopifyShopifyPaymentsDisputeFileUploadUpdateInput>
  /** The shipping address associated with the dispute evidence. */
  shippingAddress?: InputMaybe<ShopifyMailingAddressInput>
  /** Shipping documentation file. */
  shippingDocumentationFile?: InputMaybe<ShopifyShopifyPaymentsDisputeFileUploadUpdateInput>
  /** Whether to submit the evidence. */
  submitEvidence?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Uncategorized file. */
  uncategorizedFile?: InputMaybe<ShopifyShopifyPaymentsDisputeFileUploadUpdateInput>
  /** Uncategorized text. */
  uncategorizedText?: InputMaybe<Scalars["String"]["input"]>
}

/** The file upload associated with the dispute evidence. */
export interface ShopifyShopifyPaymentsDisputeFileUpload extends ShopifyNode {
  __typename?: "ShopifyPaymentsDisputeFileUpload"
  /** The type of the file for the dispute evidence. */
  disputeEvidenceType?: Maybe<ShopifyShopifyPaymentsDisputeEvidenceFileType>
  /** The file size. */
  fileSize: Scalars["Int"]["output"]
  /** The file type. */
  fileType: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The original file name. */
  originalFileName?: Maybe<Scalars["String"]["output"]>
  /** The URL for accessing the file. */
  url: Scalars["URL"]["output"]
}

/** The input fields required to update a dispute file upload object. */
export interface ShopifyShopifyPaymentsDisputeFileUploadUpdateInput {
  /** Whether to delete this file upload. */
  destroy?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The ID of the file upload to be updated. */
  id: Scalars["ID"]["input"]
}

/** The fulfillment associated with dispute evidence. */
export interface ShopifyShopifyPaymentsDisputeFulfillment extends ShopifyNode {
  __typename?: "ShopifyPaymentsDisputeFulfillment"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The shipping carrier for this fulfillment. */
  shippingCarrier?: Maybe<Scalars["String"]["output"]>
  /** The shipping date for this fulfillment. */
  shippingDate?: Maybe<Scalars["Date"]["output"]>
  /** The shipping tracking number for this fulfillment. */
  shippingTrackingNumber?: Maybe<Scalars["String"]["output"]>
}

/** The reason for the dispute provided by the cardholder's bank. */
export type ShopifyShopifyPaymentsDisputeReason =
  /** The customer's bank can't process the charge. */
  | "BANK_CANNOT_PROCESS"
  /** The customer claims that the purchased product was returned or the transaction was otherwise canceled, but you haven't yet provided a refund or credit. */
  | "CREDIT_NOT_PROCESSED"
  /** The customer initiated the dispute. Contact the customer for additional details on why the payment was disputed. */
  | "CUSTOMER_INITIATED"
  /** The customer's bank can't proceed with the debit since it hasn't been authorized. */
  | "DEBIT_NOT_AUTHORIZED"
  /** The customer claims they were charged multiple times for the same product or service. */
  | "DUPLICATE"
  /** The cardholder claims that they didn’t authorize the payment. */
  | "FRAUDULENT"
  /** The dispute is uncategorized, so you should contact the customer for additional details to find out why the payment was disputed. */
  | "GENERAL"
  /** The customer account associated with the purchase is incorrect. */
  | "INCORRECT_ACCOUNT_DETAILS"
  /** The customer's bank account has insufficient funds. */
  | "INSUFFICIENT_FUNDS"
  /** The card issuer believes the disputed transaction doesn't conform to the network rules. These disputes occur when transactions don't meet card network requirements and may incur additional network fees if escalated for resolution. */
  | "NONCOMPLIANT"
  /** The customer claims they did not receive the products or services purchased. */
  | "PRODUCT_NOT_RECEIVED"
  /** The product or service was received but was defective, damaged, or not as described. */
  | "PRODUCT_UNACCEPTABLE"
  /** The customer claims that you continued to charge them after a subscription was canceled. */
  | "SUBSCRIPTION_CANCELLED"
  /** The customer doesn’t recognize the payment appearing on their card statement. */
  | "UNRECOGNIZED"
  | "%future added value"

/** Details regarding a dispute reason. */
export interface ShopifyShopifyPaymentsDisputeReasonDetails {
  __typename?: "ShopifyPaymentsDisputeReasonDetails"
  /** The raw code provided by the payment network. */
  networkReasonCode?: Maybe<Scalars["String"]["output"]>
  /** The reason for the dispute provided by the cardholder's banks. */
  reason: ShopifyShopifyPaymentsDisputeReason
}

/** Presents all Shopify Payments information related to an extended authorization. */
export interface ShopifyShopifyPaymentsExtendedAuthorization {
  __typename?: "ShopifyPaymentsExtendedAuthorization"
  /** The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment. */
  extendedAuthorizationExpiresAt: Scalars["DateTime"]["output"]
  /** The time after which capture will incur an additional fee. */
  standardAuthorizationExpiresAt: Scalars["DateTime"]["output"]
}

/** The charge descriptors for a Japanese payments account. */
export interface ShopifyShopifyPaymentsJpChargeStatementDescriptor
  extends ShopifyShopifyPaymentsChargeStatementDescriptor {
  __typename?: "ShopifyPaymentsJpChargeStatementDescriptor"
  /** The default charge statement descriptor. */
  default?: Maybe<Scalars["String"]["output"]>
  /** The charge statement descriptor in kana. */
  kana?: Maybe<Scalars["String"]["output"]>
  /** The charge statement descriptor in kanji. */
  kanji?: Maybe<Scalars["String"]["output"]>
  /** The prefix of the statement descriptor. */
  prefix: Scalars["String"]["output"]
}

/** A MerchantCategoryCode (MCC) is a four-digit number listed in ISO 18245 for retail financial services and used to classify the business by the type of goods or services it provides. */
export interface ShopifyShopifyPaymentsMerchantCategoryCode {
  __typename?: "ShopifyPaymentsMerchantCategoryCode"
  /** The category of the MCC. */
  category: Scalars["String"]["output"]
  /** The category label of the MCC. */
  categoryLabel: Scalars["String"]["output"]
  /** A four-digit number listed in ISO 18245. */
  code: Scalars["Int"]["output"]
  /** The ID of the MCC. */
  id: Scalars["Int"]["output"]
  /** The subcategory label of the MCC. */
  subcategoryLabel: Scalars["String"]["output"]
}

/**
 * Payouts represent the movement of money between a merchant's Shopify
 * Payments balance and their bank account.
 */
export interface ShopifyShopifyPaymentsPayout
  extends ShopifyLegacyInteroperability,
    ShopifyNode {
  __typename?: "ShopifyPaymentsPayout"
  /**
   * The bank account for the payout.
   * @deprecated Use `destinationAccount` instead.
   */
  bankAccount?: Maybe<ShopifyShopifyPaymentsBankAccount>
  /** The business entity associated with the payout. */
  businessEntity: ShopifyBusinessEntity
  /**
   * The total amount and currency of the payout.
   * @deprecated Use `net` instead.
   */
  gross: ShopifyMoneyV2
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * The exact time when the payout was issued. The payout only contains
   * balance transactions that were available at this time.
   */
  issuedAt: Scalars["DateTime"]["output"]
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** The total amount and currency of the payout. */
  net: ShopifyMoneyV2
  /** The transfer status of the payout. */
  status: ShopifyShopifyPaymentsPayoutStatus
  /** The summary of the payout. */
  summary: ShopifyShopifyPaymentsPayoutSummary
  /** The direction of the payout. */
  transactionType: ShopifyShopifyPaymentsPayoutTransactionType
}

/** Return type for `shopifyPaymentsPayoutAlternateCurrencyCreate` mutation. */
export interface ShopifyShopifyPaymentsPayoutAlternateCurrencyCreatePayload {
  __typename?: "ShopifyPaymentsPayoutAlternateCurrencyCreatePayload"
  /** The resulting alternate currency payout created. */
  payout?: Maybe<ShopifyShopifyPaymentsToolingProviderPayout>
  /** Whether the alternate currency payout was created successfully. */
  success?: Maybe<Scalars["Boolean"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyShopifyPaymentsPayoutAlternateCurrencyCreateUserError>
}

/** An error that occurs during the execution of `ShopifyPaymentsPayoutAlternateCurrencyCreate`. */
export interface ShopifyShopifyPaymentsPayoutAlternateCurrencyCreateUserError
  extends ShopifyDisplayableError {
  __typename?: "ShopifyPaymentsPayoutAlternateCurrencyCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyShopifyPaymentsPayoutAlternateCurrencyCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ShopifyPaymentsPayoutAlternateCurrencyCreateUserError`. */
export type ShopifyShopifyPaymentsPayoutAlternateCurrencyCreateUserErrorCode =
  /** Failed to create payout, there is no eligible balance in this currency. */
  | "ALTERNATE_CURRENCY_PAYOUT_FAILED_NO_ELIGIBLE_BALANCE"
  /** Failed to create payout due to an error from Stripe. */
  | "ALTERNATE_CURRENCY_PAYOUT_FAILED_STRIPE_ERROR"
  /** No Stripe provider account was found. */
  | "MISSING_PROVIDER_ACCOUNT"
  /** Failed to create payout due to an error from Shopify Core. */
  | "UNKNOWN_CORE_ERROR"
  | "%future added value"

/** An auto-generated type for paginating through multiple ShopifyPaymentsPayouts. */
export interface ShopifyShopifyPaymentsPayoutConnection {
  __typename?: "ShopifyPaymentsPayoutConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyShopifyPaymentsPayoutEdge>
  /** A list of nodes that are contained in ShopifyPaymentsPayoutEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyShopifyPaymentsPayout>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one ShopifyPaymentsPayout and a cursor during pagination. */
export interface ShopifyShopifyPaymentsPayoutEdge {
  __typename?: "ShopifyPaymentsPayoutEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ShopifyPaymentsPayoutEdge. */
  node: ShopifyShopifyPaymentsPayout
}

/** The interval at which payouts are sent to the connected bank account. */
export type ShopifyShopifyPaymentsPayoutInterval =
  /** Each business day. */
  | "DAILY"
  /** Payouts will not be automatically made. */
  | "MANUAL"
  /** Each month, on the day of month specified by monthlyAnchor. */
  | "MONTHLY"
  /** Each week, on the day of week specified by weeklyAnchor. */
  | "WEEKLY"
  | "%future added value"

/** The payment schedule for a payments account. */
export interface ShopifyShopifyPaymentsPayoutSchedule {
  __typename?: "ShopifyPaymentsPayoutSchedule"
  /** The interval at which payouts are sent to the connected bank account. */
  interval: ShopifyShopifyPaymentsPayoutInterval
  /**
   * The day of the month funds will be paid out.
   *
   * The value can be any day of the month from the 1st to the 31st.
   * If the payment interval is set to monthly, this value will be used.
   * Payouts scheduled between 29-31st of the month are sent on the last day of shorter months.
   */
  monthlyAnchor?: Maybe<Scalars["Int"]["output"]>
  /**
   * The day of the week funds will be paid out.
   *
   * The value can be any weekday from Monday to Friday.
   * If the payment interval is set to weekly, this value will be used.
   */
  weeklyAnchor?: Maybe<ShopifyDayOfTheWeek>
}

/** The transfer status of the payout. */
export type ShopifyShopifyPaymentsPayoutStatus =
  /** The payout has been canceled by Shopify. */
  | "CANCELED"
  /** The payout has been declined by the bank. */
  | "FAILED"
  /** The payout has been submitted to the bank. */
  | "IN_TRANSIT"
  /** The payout has been successfully deposited into the bank. */
  | "PAID"
  /**
   * The payout has been created and had transactions assigned to it, but
   * it has not yet been submitted to the bank.
   */
  | "SCHEDULED"
  | "%future added value"

/**
 * Breakdown of the total fees and gross of each of the different types of transactions associated
 * with the payout.
 */
export interface ShopifyShopifyPaymentsPayoutSummary {
  __typename?: "ShopifyPaymentsPayoutSummary"
  /** Total fees for all adjustments including disputes. */
  adjustmentsFee: ShopifyMoneyV2
  /** Total gross amount for all adjustments including disputes. */
  adjustmentsGross: ShopifyMoneyV2
  /** Total fees for all advances. */
  advanceFees: ShopifyMoneyV2
  /** Total gross amount for all advances. */
  advanceGross: ShopifyMoneyV2
  /** Total fees for all charges. */
  chargesFee: ShopifyMoneyV2
  /** Total gross amount for all charges. */
  chargesGross: ShopifyMoneyV2
  /** Total fees for all refunds. */
  refundsFee: ShopifyMoneyV2
  /** Total gross amount for all refunds. */
  refundsFeeGross: ShopifyMoneyV2
  /** Total fees for all reserved funds. */
  reservedFundsFee: ShopifyMoneyV2
  /** Total gross amount for all reserved funds. */
  reservedFundsGross: ShopifyMoneyV2
  /** Total fees for all retried payouts. */
  retriedPayoutsFee: ShopifyMoneyV2
  /** Total gross amount for all retried payouts. */
  retriedPayoutsGross: ShopifyMoneyV2
}

/** The possible transaction types for a payout. */
export type ShopifyShopifyPaymentsPayoutTransactionType =
  /** The payout is a deposit. */
  | "DEPOSIT"
  /** The payout is a withdrawal. */
  | "WITHDRAWAL"
  | "%future added value"

/** Presents all Shopify Payments specific information related to an order refund. */
export interface ShopifyShopifyPaymentsRefundSet {
  __typename?: "ShopifyPaymentsRefundSet"
  /** The acquirer reference number (ARN) code generated for Visa/Mastercard transactions. */
  acquirerReferenceNumber?: Maybe<Scalars["String"]["output"]>
}

/** The possible source types for a balance transaction. */
export type ShopifyShopifyPaymentsSourceType =
  /** The adjustment source type. */
  | "ADJUSTMENT"
  /** The adjustment_reversal source type. */
  | "ADJUSTMENT_REVERSAL"
  /** The charge source type. */
  | "CHARGE"
  /** The dispute source type. */
  | "DISPUTE"
  /** The refund source type. */
  | "REFUND"
  /** The system_adjustment source type. */
  | "SYSTEM_ADJUSTMENT"
  /** The transfer source type. */
  | "TRANSFER"
  | "%future added value"

/** A typed identifier that represents an individual within a tax jurisdiction. */
export interface ShopifyShopifyPaymentsTaxIdentification {
  __typename?: "ShopifyPaymentsTaxIdentification"
  /** The type of the identification. */
  taxIdentificationType: ShopifyShopifyPaymentsTaxIdentificationType
  /** The value of the identification. */
  value: Scalars["String"]["output"]
}

/** The type of tax identification field. */
export type ShopifyShopifyPaymentsTaxIdentificationType =
  /** Business EIN. */
  | "EIN"
  /** Full SSN. */
  | "FULL_SSN"
  /** The last 4 digits of the SSN. */
  | "SSN_LAST4_DIGITS"
  | "%future added value"

/** Relevant reference information for an alternate currency payout. */
export interface ShopifyShopifyPaymentsToolingProviderPayout {
  __typename?: "ShopifyPaymentsToolingProviderPayout"
  /** The balance amount the alternate currency payout was created for. */
  amount: ShopifyMoneyV2
  /** A timestamp for the arrival of the alternate currency payout. */
  arrivalDate?: Maybe<Scalars["DateTime"]["output"]>
  /** A timestamp for the creation of the alternate currency payout. */
  createdAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The currency alternate currency payout was created in. */
  currency: Scalars["String"]["output"]
  /** The remote ID for the alternate currency payout. */
  remoteId: Scalars["String"]["output"]
}

/** Presents all Shopify Payments specific information related to an order transaction. */
export interface ShopifyShopifyPaymentsTransactionSet {
  __typename?: "ShopifyPaymentsTransactionSet"
  /** Contains all fields related to an extended authorization. */
  extendedAuthorizationSet?: Maybe<ShopifyShopifyPaymentsExtendedAuthorization>
  /** Contains all fields related to a refund. */
  refundSet?: Maybe<ShopifyShopifyPaymentsRefundSet>
}

/** The possible types of transactions. */
export type ShopifyShopifyPaymentsTransactionType =
  /** The adjustment transaction type. */
  | "ADJUSTMENT"
  /** The advance transaction type. */
  | "ADVANCE"
  /** The advance funding transaction type. */
  | "ADVANCE_FUNDING"
  /** The anomaly_credit transaction type. */
  | "ANOMALY_CREDIT"
  /** The anomaly_credit_reversal transaction type. */
  | "ANOMALY_CREDIT_REVERSAL"
  /** The anomaly_debit transaction type. */
  | "ANOMALY_DEBIT"
  /** The anomaly_debit_reversal transaction type. */
  | "ANOMALY_DEBIT_REVERSAL"
  /** The application_fee_refund transaction type. */
  | "APPLICATION_FEE_REFUND"
  /** The balance_transfer_inbound transaction type. */
  | "BALANCE_TRANSFER_INBOUND"
  /** The billing_debit transaction type. */
  | "BILLING_DEBIT"
  /** The billing_debit_reversal transaction type. */
  | "BILLING_DEBIT_REVERSAL"
  /** The channel_credit transaction type. */
  | "CHANNEL_CREDIT"
  /** The channel_credit_reversal transaction type. */
  | "CHANNEL_CREDIT_REVERSAL"
  /** The channel_promotion_credit transaction type. */
  | "CHANNEL_PROMOTION_CREDIT"
  /** The channel_promotion_credit_reversal transaction type. */
  | "CHANNEL_PROMOTION_CREDIT_REVERSAL"
  /** The channel_transfer_credit transaction type. */
  | "CHANNEL_TRANSFER_CREDIT"
  /** The channel_transfer_credit_reversal transaction type. */
  | "CHANNEL_TRANSFER_CREDIT_REVERSAL"
  /** The channel_transfer_debit transaction type. */
  | "CHANNEL_TRANSFER_DEBIT"
  /** The channel_transfer_debit_reversal transaction type. */
  | "CHANNEL_TRANSFER_DEBIT_REVERSAL"
  /** The charge transaction type. */
  | "CHARGE"
  /** The chargeback_fee transaction type. */
  | "CHARGEBACK_FEE"
  /** The chargeback_fee_refund transaction type. */
  | "CHARGEBACK_FEE_REFUND"
  /** The chargeback_hold transaction type. */
  | "CHARGEBACK_HOLD"
  /** The chargeback_hold_release transaction type. */
  | "CHARGEBACK_HOLD_RELEASE"
  /** The chargeback_protection_credit transaction type. */
  | "CHARGEBACK_PROTECTION_CREDIT"
  /** The chargeback_protection_credit_reversal transaction type. */
  | "CHARGEBACK_PROTECTION_CREDIT_REVERSAL"
  /** The chargeback_protection_debit transaction type. */
  | "CHARGEBACK_PROTECTION_DEBIT"
  /** The chargeback_protection_debit_reversal transaction type. */
  | "CHARGEBACK_PROTECTION_DEBIT_REVERSAL"
  /** The charge_adjustment transaction type. */
  | "CHARGE_ADJUSTMENT"
  /** The collections_credit transaction type. */
  | "COLLECTIONS_CREDIT"
  /** The collections_credit_reversal transaction type. */
  | "COLLECTIONS_CREDIT_REVERSAL"
  /** The customs_duty transaction type. */
  | "CUSTOMS_DUTY"
  /** The customs_duty_adjustment transaction type. */
  | "CUSTOMS_DUTY_ADJUSTMENT"
  /** The dispute_reversal transaction type. */
  | "DISPUTE_REVERSAL"
  /** The dispute_withdrawal transaction type. */
  | "DISPUTE_WITHDRAWAL"
  /** The import_tax transaction type. */
  | "IMPORT_TAX"
  /** The import_tax_adjustment transaction type. */
  | "IMPORT_TAX_ADJUSTMENT"
  /** The tax refund transaction type. */
  | "IMPORT_TAX_REFUND"
  /** The lending_capital_refund transaction type. */
  | "LENDING_CAPITAL_REFUND"
  /** The lending_capital_refund_reversal transaction type. */
  | "LENDING_CAPITAL_REFUND_REVERSAL"
  /** The lending_capital_remittance transaction type. */
  | "LENDING_CAPITAL_REMITTANCE"
  /** The lending_capital_remittance_reversal transaction type. */
  | "LENDING_CAPITAL_REMITTANCE_REVERSAL"
  /** The lending_credit transaction type. */
  | "LENDING_CREDIT"
  /** The lending_credit_refund transaction type. */
  | "LENDING_CREDIT_REFUND"
  /** The lending_credit_refund_reversal transaction type. */
  | "LENDING_CREDIT_REFUND_REVERSAL"
  /** The lending_credit_remittance transaction type. */
  | "LENDING_CREDIT_REMITTANCE"
  /** The lending_credit_remittance_reversal transaction type. */
  | "LENDING_CREDIT_REMITTANCE_REVERSAL"
  /** The lending_credit_reversal transaction type. */
  | "LENDING_CREDIT_REVERSAL"
  /** The lending_debit transaction type. */
  | "LENDING_DEBIT"
  /** The lending_debit_reversal transaction type. */
  | "LENDING_DEBIT_REVERSAL"
  /** The marketplace_fee_credit transaction type. */
  | "MARKETPLACE_FEE_CREDIT"
  /** The marketplace_fee_credit_reversal transaction type. */
  | "MARKETPLACE_FEE_CREDIT_REVERSAL"
  /** The markets_pro_credit transaction type. */
  | "MARKETS_PRO_CREDIT"
  /** The merchant_goodwill_credit transaction type. */
  | "MERCHANT_GOODWILL_CREDIT"
  /** The merchant_goodwill_credit_reversal transaction type. */
  | "MERCHANT_GOODWILL_CREDIT_REVERSAL"
  /** The merchant_to_merchant_credit transaction type. */
  | "MERCHANT_TO_MERCHANT_CREDIT"
  /** The merchant_to_merchant_credit_reversal transaction type. */
  | "MERCHANT_TO_MERCHANT_CREDIT_REVERSAL"
  /** The merchant_to_merchant_debit transaction type. */
  | "MERCHANT_TO_MERCHANT_DEBIT"
  /** The merchant_to_merchant_debit_reversal transaction type. */
  | "MERCHANT_TO_MERCHANT_DEBIT_REVERSAL"
  /** The promotion_credit transaction type. */
  | "PROMOTION_CREDIT"
  /** The promotion_credit_reversal transaction type. */
  | "PROMOTION_CREDIT_REVERSAL"
  /** The refund transaction type. */
  | "REFUND"
  /** The refund_adjustment transaction type. */
  | "REFUND_ADJUSTMENT"
  /** The refund_failure transaction type. */
  | "REFUND_FAILURE"
  /** The reserved_funds transaction type. */
  | "RESERVED_FUNDS"
  /** The reserved_funds_reversal transaction type. */
  | "RESERVED_FUNDS_REVERSAL"
  /** The reserved_funds_withdrawal transaction type. */
  | "RESERVED_FUNDS_WITHDRAWAL"
  /** The risk_reversal transaction type. */
  | "RISK_REVERSAL"
  /** The risk_withdrawal transaction type. */
  | "RISK_WITHDRAWAL"
  /** The seller_protection_credit transaction type. */
  | "SELLER_PROTECTION_CREDIT"
  /** The seller_protection_credit_reversal transaction type. */
  | "SELLER_PROTECTION_CREDIT_REVERSAL"
  /** The shipping_label transaction type. */
  | "SHIPPING_LABEL"
  /** The shipping_label_adjustment transaction type. */
  | "SHIPPING_LABEL_ADJUSTMENT"
  /** The shipping_label_adjustment_base transaction type. */
  | "SHIPPING_LABEL_ADJUSTMENT_BASE"
  /** The shipping_label_adjustment_surcharge transaction type. */
  | "SHIPPING_LABEL_ADJUSTMENT_SURCHARGE"
  /** The shipping_other_carrier_charge_adjustment transaction type. */
  | "SHIPPING_OTHER_CARRIER_CHARGE_ADJUSTMENT"
  /** The shipping_return_to_origin_adjustment transaction type. */
  | "SHIPPING_RETURN_TO_ORIGIN_ADJUSTMENT"
  /** The shopify_collective_credit transaction type. */
  | "SHOPIFY_COLLECTIVE_CREDIT"
  /** The shopify_collective_credit_reversal transaction type. */
  | "SHOPIFY_COLLECTIVE_CREDIT_REVERSAL"
  /** The shopify_collective_debit transaction type. */
  | "SHOPIFY_COLLECTIVE_DEBIT"
  /** The shopify_collective_debit_reversal transaction type. */
  | "SHOPIFY_COLLECTIVE_DEBIT_REVERSAL"
  /** The shopify_source_credit transaction type. */
  | "SHOPIFY_SOURCE_CREDIT"
  /** The shopify_source_credit_reversal transaction type. */
  | "SHOPIFY_SOURCE_CREDIT_REVERSAL"
  /** The shopify_source_debit transaction type. */
  | "SHOPIFY_SOURCE_DEBIT"
  /** The shopify_source_debit_reversal transaction type. */
  | "SHOPIFY_SOURCE_DEBIT_REVERSAL"
  /** The shop_cash_billing_debit transaction type. */
  | "SHOP_CASH_BILLING_DEBIT"
  /** The shop_cash_billing_debit_reversal transaction type. */
  | "SHOP_CASH_BILLING_DEBIT_REVERSAL"
  /** The shop_cash_campaign_billing_credit transaction type. */
  | "SHOP_CASH_CAMPAIGN_BILLING_CREDIT"
  /** The shop_cash_campaign_billing_credit_reversal transaction type. */
  | "SHOP_CASH_CAMPAIGN_BILLING_CREDIT_REVERSAL"
  /** The shop_cash_campaign_billing_debit transaction type. */
  | "SHOP_CASH_CAMPAIGN_BILLING_DEBIT"
  /** The shop_cash_campaign_billing_debit_reversal transaction type. */
  | "SHOP_CASH_CAMPAIGN_BILLING_DEBIT_REVERSAL"
  /** The shop_cash_credit transaction type. */
  | "SHOP_CASH_CREDIT"
  /** The shop_cash_credit_reversal transaction type. */
  | "SHOP_CASH_CREDIT_REVERSAL"
  /** The shop_cash_refund_debit transaction type. */
  | "SHOP_CASH_REFUND_DEBIT"
  /** The shop_cash_refund_debit_reversal transaction type. */
  | "SHOP_CASH_REFUND_DEBIT_REVERSAL"
  /** The stripe_fee transaction type. */
  | "STRIPE_FEE"
  /** The tax_adjustment_credit transaction type. */
  | "TAX_ADJUSTMENT_CREDIT"
  /** The tax_adjustment_credit_reversal transaction type. */
  | "TAX_ADJUSTMENT_CREDIT_REVERSAL"
  /** The tax_adjustment_debit transaction type. */
  | "TAX_ADJUSTMENT_DEBIT"
  /** The tax_adjustment_debit_reversal transaction type. */
  | "TAX_ADJUSTMENT_DEBIT_REVERSAL"
  /** The transfer transaction type. */
  | "TRANSFER"
  /** The transfer_cancel transaction type. */
  | "TRANSFER_CANCEL"
  /** The transfer_failure transaction type. */
  | "TRANSFER_FAILURE"
  /** The transfer_refund transaction type. */
  | "TRANSFER_REFUND"
  /** The vat_refund_credit transaction type. */
  | "VAT_REFUND_CREDIT"
  /** The vat_refund_credit_reversal transaction type. */
  | "VAT_REFUND_CREDIT_REVERSAL"
  | "%future added value"

/** The status of an order's eligibility for protection against fraudulent chargebacks by Shopify Protect. */
export type ShopifyShopifyProtectEligibilityStatus =
  /**
   * The order is eligible for protection against fraudulent chargebacks.
   * If an order is updated, the order's eligibility may change and protection could be removed.
   */
  | "ELIGIBLE"
  /** The order isn't eligible for protection against fraudulent chargebacks. */
  | "NOT_ELIGIBLE"
  /** The eligibility of the order is pending and has not yet been determined. */
  | "PENDING"
  | "%future added value"

/** The eligibility details of an order's protection against fraudulent chargebacks by Shopify Protect. */
export interface ShopifyShopifyProtectOrderEligibility {
  __typename?: "ShopifyProtectOrderEligibility"
  /** The status of whether an order is eligible for protection against fraudulent chargebacks. */
  status: ShopifyShopifyProtectEligibilityStatus
}

/** A summary of Shopify Protect details for an order. */
export interface ShopifyShopifyProtectOrderSummary {
  __typename?: "ShopifyProtectOrderSummary"
  /** The eligibility details of an order's protection against fraudulent chargebacks. */
  eligibility: ShopifyShopifyProtectOrderEligibility
  /** The status of the order's protection against fraudulent chargebacks. */
  status: ShopifyShopifyProtectStatus
}

/** The status of an order's protection with Shopify Protect. */
export type ShopifyShopifyProtectStatus =
  /**
   * The protection for the order is active and eligible for reimbursement against fraudulent chargebacks.
   * If an order is updated, the order's eligibility may change and protection could become inactive.
   */
  | "ACTIVE"
  /** The protection for an order isn't active because the order didn't meet eligibility requirements. */
  | "INACTIVE"
  /** The order received a chargeback but the order wasn't protected because it didn't meet coverage requirements. */
  | "NOT_PROTECTED"
  /** The protection for the order is pending and has not yet been determined. */
  | "PENDING"
  /** The order received a fraudulent chargeback and it was protected. */
  | "PROTECTED"
  | "%future added value"

/** Represents the data about a staff member's Shopify account. Merchants can use staff member data to get more information about the staff members in their store. */
export interface ShopifyStaffMember extends ShopifyNode {
  __typename?: "StaffMember"
  /** The type of account the staff member has. */
  accountType?: Maybe<ShopifyAccountType>
  /** Whether the staff member is active. */
  active: Scalars["Boolean"]["output"]
  /** The image used as the staff member's avatar in the Shopify admin. */
  avatar: ShopifyImage
  /** The staff member's email address. */
  email: Scalars["String"]["output"]
  /** Whether the staff member's account exists. */
  exists: Scalars["Boolean"]["output"]
  /** The staff member's first name. */
  firstName?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The staff member's initials, if available. */
  initials?: Maybe<Array<Scalars["String"]["output"]>>
  /** Whether the staff member is the shop owner. */
  isShopOwner: Scalars["Boolean"]["output"]
  /** The staff member's last name. */
  lastName?: Maybe<Scalars["String"]["output"]>
  /** The staff member's preferred locale. Locale values use the format `language` or `language-COUNTRY`, where `language` is a two-letter language code, and `COUNTRY` is a two-letter country code. For example: `en` or `en-US` */
  locale: Scalars["String"]["output"]
  /** The staff member's full name. */
  name: Scalars["String"]["output"]
  /** The staff member's phone number. */
  phone?: Maybe<Scalars["String"]["output"]>
  /** The data used to customize the Shopify admin experience for the staff member. */
  privateData: ShopifyStaffMemberPrivateData
}

/** Represents the data about a staff member's Shopify account. Merchants can use staff member data to get more information about the staff members in their store. */
export interface ShopifyStaffMemberAvatarArgs {
  fallback?: InputMaybe<ShopifyStaffMemberDefaultImage>
}

/** An auto-generated type for paginating through multiple StaffMembers. */
export interface ShopifyStaffMemberConnection {
  __typename?: "StaffMemberConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyStaffMemberEdge>
  /** A list of nodes that are contained in StaffMemberEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyStaffMember>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Represents the fallback avatar image for a staff member. This is used only if the staff member has no avatar image. */
export type ShopifyStaffMemberDefaultImage =
  /** Returns a default avatar image for the staff member. */
  | "DEFAULT"
  /** Returns a URL that returns a 404 error if the image is not present. */
  | "NOT_FOUND"
  /** Returns a transparent avatar image for the staff member. */
  | "TRANSPARENT"
  | "%future added value"

/** An auto-generated type which holds one StaffMember and a cursor during pagination. */
export interface ShopifyStaffMemberEdge {
  __typename?: "StaffMemberEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of StaffMemberEdge. */
  node: ShopifyStaffMember
}

/** Represents access permissions for a staff member. */
export type ShopifyStaffMemberPermission =
  /** The staff member can manage and install apps and channels. */
  | "APPLICATIONS"
  /** The staff member can manage and install sales channels. */
  | "CHANNELS"
  /** The staff member can create and edit customers. */
  | "CREATE_AND_EDIT_CUSTOMERS"
  /** The staff member can create and edit gift cards. */
  | "CREATE_AND_EDIT_GIFT_CARDS"
  /** The staff member can create and edit markets. */
  | "CREATE_AND_EDIT_MARKETS"
  /** The staff member can view customers. */
  | "CUSTOMERS"
  /** The staff member can view the Shopify Home page, which includes sales information and other shop data. */
  | "DASHBOARD"
  /** The staff member can deactivate gift cards. */
  | "DEACTIVATE_GIFT_CARDS"
  /** The staff member can delete customers. */
  | "DELETE_CUSTOMERS"
  /** The staff member can delete markets. */
  | "DELETE_MARKETS"
  /** The staff member can view, buy, and manage domains. */
  | "DOMAINS"
  /** The staff member can create, update, and delete draft orders. */
  | "DRAFT_ORDERS"
  /** The staff member can update orders. */
  | "EDIT_ORDERS"
  /** The staff member can erase customer private data. */
  | "ERASE_CUSTOMER_DATA"
  /** The staff member can export customers. */
  | "EXPORT_CUSTOMERS"
  /** The staff member can export gift cards. */
  | "EXPORT_GIFT_CARDS"
  /** The staff has the same permissions as the [store owner](https://shopify.dev/en/manual/your-account/staff-accounts/staff-permissions#store-owner-permissions) with some exceptions, such as modifying the account billing or deleting staff accounts. */
  | "FULL"
  /** The staff member can view, create, issue, and export gift cards to a CSV file. */
  | "GIFT_CARDS"
  /** The staff member can view and modify links and navigation menus. */
  | "LINKS"
  /** The staff member can create, update, and delete locations where inventory is stocked or managed. */
  | "LOCATIONS"
  /** The staff member can view and create discount codes and automatic discounts, and export discounts to a CSV file. */
  | "MARKETING"
  /** The staff member can view, create, and automate marketing campaigns. */
  | "MARKETING_SECTION"
  /** The staff member can merge customers. */
  | "MERGE_CUSTOMERS"
  /** The staff member can view, create, update, delete, and cancel orders, and receive order notifications. The staff member can still create draft orders without this permission. */
  | "ORDERS"
  /** The staff member can view the Overview and Live view pages, which include sales information, and other shop and sales channels data. */
  | "OVERVIEWS"
  /** The staff member can view, create, update, publish, and delete blog posts and pages. */
  | "PAGES"
  /** The staff member can pay for an order by using a vaulted card. */
  | "PAY_ORDERS_BY_VAULTED_CARD"
  /** The staff member can view the preferences and configuration of a shop. */
  | "PREFERENCES"
  /** The staff member can view, create, import, and update products, collections, and inventory. */
  | "PRODUCTS"
  /** The staff member can view and create all reports, which includes sales information and other shop data. */
  | "REPORTS"
  /** The staff member can request customer private data. */
  | "REQUEST_CUSTOMER_DATA"
  /** The staff member can view, update, and publish themes. */
  | "THEMES"
  /** The staff member can view and create translations. */
  | "TRANSLATIONS"
  /** The staff member can view markets. */
  | "VIEW_MARKETS"
  | "%future added value"

/** Represents the data used to customize the Shopify admin experience for a logged-in staff member. */
export interface ShopifyStaffMemberPrivateData {
  __typename?: "StaffMemberPrivateData"
  /** The URL to the staff member's account settings page. */
  accountSettingsUrl: Scalars["URL"]["output"]
  /** The date and time when the staff member was created. */
  createdAt: Scalars["DateTime"]["output"]
  /**
   * Access permissions for the staff member.
   * @deprecated There's no alternative field to use instead.
   */
  permissions: Array<ShopifyStaffMemberPermission>
}

/** The set of valid sort keys for the StaffMembers query. */
export type ShopifyStaffMembersSortKeys =
  /** Sort by the `email` value. */
  | "EMAIL"
  /** Sort by the `first_name` value. */
  | "FIRST_NAME"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `last_name` value. */
  | "LAST_NAME"
  | "%future added value"

/**
 * An image to be uploaded.
 *
 * Deprecated in favor of
 * [StagedUploadInput](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadInput),
 * which is used by the
 * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
 */
export interface ShopifyStageImageInput {
  /** The image filename. */
  filename: Scalars["String"]["input"]
  /** HTTP method to be used by the staged upload. */
  httpMethod?: InputMaybe<ShopifyStagedUploadHttpMethodType>
  /** The image MIME type. */
  mimeType: Scalars["String"]["input"]
  /** The image resource. */
  resource: ShopifyStagedUploadTargetGenerateUploadResource
}

/**
 * Information about a staged upload target, which should be used to send a request to upload
 * the file.
 *
 * For more information on the upload process, refer to
 * [Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
 */
export interface ShopifyStagedMediaUploadTarget {
  __typename?: "StagedMediaUploadTarget"
  /** Parameters needed to authenticate a request to upload the file. */
  parameters: Array<ShopifyStagedUploadParameter>
  /**
   * The URL to be passed as `originalSource` in
   * [CreateMediaInput](https://shopify.dev/api/admin-graphql/latest/input-objects/CreateMediaInput)
   * and [FileCreateInput](https://shopify.dev/api/admin-graphql/2022-04/input-objects/FileCreateInput)
   * for the [productCreateMedia](https://shopify.dev/api/admin-graphql/2022-04/mutations/productCreateMedia)
   * and [fileCreate](https://shopify.dev/api/admin-graphql/2022-04/mutations/fileCreate)
   * mutations.
   */
  resourceUrl?: Maybe<Scalars["URL"]["output"]>
  /**
   * The URL to use when sending an request to upload the file. Should be used in conjunction with
   * the parameters field.
   */
  url?: Maybe<Scalars["URL"]["output"]>
}

/**
 * The possible HTTP methods that can be used when sending a request to upload a file using information from a
 * [StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget).
 */
export type ShopifyStagedUploadHttpMethodType =
  /** The POST HTTP method. */
  | "POST"
  /** The PUT HTTP method. */
  | "PUT"
  | "%future added value"

/** The input fields for generating staged upload targets. */
export interface ShopifyStagedUploadInput {
  /**
   * The size of the file to upload, in bytes. This is required when the request's resource property is set to
   * [VIDEO](https://shopify.dev/api/admin-graphql/latest/enums/StagedUploadTargetGenerateUploadResource#value-video)
   * or [MODEL_3D](https://shopify.dev/api/admin-graphql/latest/enums/StagedUploadTargetGenerateUploadResource#value-model3d).
   */
  fileSize?: InputMaybe<Scalars["UnsignedInt64"]["input"]>
  /** The file's name and extension. */
  filename: Scalars["String"]["input"]
  /**
   * The HTTP method to be used when sending a request to upload the file using the returned staged
   * upload target.
   */
  httpMethod?: InputMaybe<ShopifyStagedUploadHttpMethodType>
  /** The file's MIME type. */
  mimeType: Scalars["String"]["input"]
  /** The file's intended Shopify resource type. */
  resource: ShopifyStagedUploadTargetGenerateUploadResource
}

/**
 * The parameters required to authenticate a file upload request using a
 * [StagedMediaUploadTarget's url field](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget#field-stagedmediauploadtarget-url).
 *
 * For more information on the upload process, refer to
 * [Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
 */
export interface ShopifyStagedUploadParameter {
  __typename?: "StagedUploadParameter"
  /** The parameter's name. */
  name: Scalars["String"]["output"]
  /** The parameter's value. */
  value: Scalars["String"]["output"]
}

/**
 * Information about the staged target.
 *
 * Deprecated in favor of
 * [StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget),
 * which is returned by the
 * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
 */
export interface ShopifyStagedUploadTarget {
  __typename?: "StagedUploadTarget"
  /** The parameters of an image to be uploaded. */
  parameters: Array<ShopifyImageUploadParameter>
  /** The image URL. */
  url: Scalars["String"]["output"]
}

/**
 * The required fields and parameters to generate the URL upload an"
 * asset to Shopify.
 *
 * Deprecated in favor of
 * [StagedUploadInput](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadInput),
 * which is used by the
 * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
 */
export interface ShopifyStagedUploadTargetGenerateInput {
  /** The size of the file to upload, in bytes. */
  fileSize?: InputMaybe<Scalars["UnsignedInt64"]["input"]>
  /** The filename of the asset being uploaded. */
  filename: Scalars["String"]["input"]
  /** The HTTP method to be used by the staged upload. */
  httpMethod?: InputMaybe<ShopifyStagedUploadHttpMethodType>
  /** The MIME type of the asset being uploaded. */
  mimeType: Scalars["String"]["input"]
  /** The resource type being uploaded. */
  resource: ShopifyStagedUploadTargetGenerateUploadResource
}

/** Return type for `stagedUploadTargetGenerate` mutation. */
export interface ShopifyStagedUploadTargetGeneratePayload {
  __typename?: "StagedUploadTargetGeneratePayload"
  /** The signed parameters that can be used to upload the asset. */
  parameters: Array<ShopifyMutationsStagedUploadTargetGenerateUploadParameter>
  /** The signed URL where the asset can be uploaded. */
  url: Scalars["String"]["output"]
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The resource type to receive. */
export type ShopifyStagedUploadTargetGenerateUploadResource =
  /**
   * Represents bulk mutation variables.
   *
   * For example, bulk mutation variables can be used for bulk operations using the
   * [bulkOperationRunMutation mutation](https://shopify.dev/api/admin-graphql/latest/mutations/bulkOperationRunMutation).
   */
  | "BULK_MUTATION_VARIABLES"
  /**
   * An image associated with a collection.
   *
   * For example, after uploading an image, you can use the
   * [collectionUpdate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/collectionUpdate)
   * to add the image to a collection.
   */
  | "COLLECTION_IMAGE"
  /**
   * Represents any file other than HTML.
   *
   * For example, after uploading the file, you can add the file to the
   * [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
   * [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
   */
  | "FILE"
  /**
   * An image.
   *
   * For example, after uploading an image, you can add the image to a product using the
   * [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia)
   * or to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
   * [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
   */
  | "IMAGE"
  /**
   * A Shopify hosted 3d model.
   *
   * For example, after uploading the 3d model, you can add the 3d model to a product using the
   * [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia).
   */
  | "MODEL_3D"
  /**
   * An image that's associated with a product.
   *
   * For example, after uploading the image, you can add the image to a product using the
   * [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia).
   */
  | "PRODUCT_IMAGE"
  /**
   * Represents a label associated with a return.
   *
   * For example, once uploaded, this resource can be used to [create a
   * ReverseDelivery](https://shopify.dev/api/admin-graphql/unstable/mutations/reverseDeliveryCreateWithShipping).
   */
  | "RETURN_LABEL"
  /**
   * An image.
   *
   * For example, after uploading the image, you can add the image to the
   * [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
   * [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
   */
  | "SHOP_IMAGE"
  /**
   * Represents a redirect CSV file.
   *
   * Example usage: This resource can be used for creating a
   * [UrlRedirectImport](https://shopify.dev/api/admin-graphql/2022-04/objects/UrlRedirectImport)
   * object for use in the
   * [urlRedirectImportCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportCreate).
   */
  | "URL_REDIRECT_IMPORT"
  /**
   * A Shopify-hosted video.
   *
   * For example, after uploading the video, you can add the video to a product using the
   * [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia)
   * or to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
   * [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
   */
  | "VIDEO"
  | "%future added value"

/** Return type for `stagedUploadTargetsGenerate` mutation. */
export interface ShopifyStagedUploadTargetsGeneratePayload {
  __typename?: "StagedUploadTargetsGeneratePayload"
  /** The staged upload targets that were generated. */
  urls?: Maybe<Array<ShopifyStagedUploadTarget>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `stagedUploadsCreate` mutation. */
export interface ShopifyStagedUploadsCreatePayload {
  __typename?: "StagedUploadsCreatePayload"
  /** The staged upload targets that were generated. */
  stagedTargets?: Maybe<Array<ShopifyStagedMediaUploadTarget>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields for the access settings for the metafields under the standard definition. */
export interface ShopifyStandardMetafieldDefinitionAccessInput {
  /** The Admin API access setting to use for the metafields under this definition. */
  admin?: InputMaybe<ShopifyMetafieldAdminAccessInput>
  /** The Customer Account API access setting to use for the metafields under this definition. */
  customerAccount?: InputMaybe<ShopifyMetafieldCustomerAccountAccessInput>
  /** The Storefront API access setting to use for the metafields under this definition. */
  storefront?: InputMaybe<ShopifyMetafieldStorefrontAccessInput>
}

/** Return type for `standardMetafieldDefinitionEnable` mutation. */
export interface ShopifyStandardMetafieldDefinitionEnablePayload {
  __typename?: "StandardMetafieldDefinitionEnablePayload"
  /** The metafield definition that was created. */
  createdDefinition?: Maybe<ShopifyMetafieldDefinition>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyStandardMetafieldDefinitionEnableUserError>
}

/** An error that occurs during the execution of `StandardMetafieldDefinitionEnable`. */
export interface ShopifyStandardMetafieldDefinitionEnableUserError
  extends ShopifyDisplayableError {
  __typename?: "StandardMetafieldDefinitionEnableUserError"
  /** The error code. */
  code?: Maybe<ShopifyStandardMetafieldDefinitionEnableUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `StandardMetafieldDefinitionEnableUserError`. */
export type ShopifyStandardMetafieldDefinitionEnableUserErrorCode =
  /** Admin access can only be specified for app-owned metafield definitions. */
  | "ADMIN_ACCESS_INPUT_NOT_ALLOWED"
  /** The metafield definition capability cannot be disabled. */
  | "CAPABILITY_CANNOT_BE_DISABLED"
  /** The input value is invalid. */
  | "INVALID"
  /** The metafield definition capability is invalid. */
  | "INVALID_CAPABILITY"
  /** The input combination is invalid. */
  | "INVALID_INPUT_COMBINATION"
  /** The maximum number of definitions per owner type has been exceeded. */
  | "LIMIT_EXCEEDED"
  /** The input value is already taken. */
  | "TAKEN"
  /** The standard metafield definition template was not found. */
  | "TEMPLATE_NOT_FOUND"
  /** The definition type is not eligible to be used as collection condition. */
  | "TYPE_NOT_ALLOWED_FOR_CONDITIONS"
  /** The namespace and key is already in use for a set of your metafields. */
  | "UNSTRUCTURED_ALREADY_EXISTS"
  /** The metafield definition does not support pinning. */
  | "UNSUPPORTED_PINNING"
  | "%future added value"

/**
 * Standard metafield definition templates provide preset configurations to create metafield definitions.
 * Each template has a specific namespace and key that we've reserved to have specific meanings for common use cases.
 *
 * Refer to the [list of standard metafield definitions](https://shopify.dev/apps/metafields/definitions/standard-definitions).
 */
export interface ShopifyStandardMetafieldDefinitionTemplate
  extends ShopifyNode {
  __typename?: "StandardMetafieldDefinitionTemplate"
  /** The description of the standard metafield definition. */
  description?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The key owned by the definition after the definition has been activated. */
  key: Scalars["String"]["output"]
  /** The human-readable name for the standard metafield definition. */
  name: Scalars["String"]["output"]
  /** The namespace owned by the definition after the definition has been activated. */
  namespace: Scalars["String"]["output"]
  /** The list of resource types that the standard metafield definition can be applied to. */
  ownerTypes: Array<ShopifyMetafieldOwnerType>
  /** The associated [metafield definition type](https://shopify.dev/apps/metafields/definitions/types) that the metafield stores. */
  type: ShopifyMetafieldDefinitionType
  /** The configured validations for the standard metafield definition. */
  validations: Array<ShopifyMetafieldDefinitionValidation>
  /** Whether metafields for the definition are by default visible using the Storefront API. */
  visibleToStorefrontApi: Scalars["Boolean"]["output"]
}

/** An auto-generated type for paginating through multiple StandardMetafieldDefinitionTemplates. */
export interface ShopifyStandardMetafieldDefinitionTemplateConnection {
  __typename?: "StandardMetafieldDefinitionTemplateConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyStandardMetafieldDefinitionTemplateEdge>
  /** A list of nodes that are contained in StandardMetafieldDefinitionTemplateEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyStandardMetafieldDefinitionTemplate>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one StandardMetafieldDefinitionTemplate and a cursor during pagination. */
export interface ShopifyStandardMetafieldDefinitionTemplateEdge {
  __typename?: "StandardMetafieldDefinitionTemplateEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of StandardMetafieldDefinitionTemplateEdge. */
  node: ShopifyStandardMetafieldDefinitionTemplate
}

/** Describes a capability that is enabled on a Metaobject Definition. */
export interface ShopifyStandardMetaobjectCapabilityTemplate {
  __typename?: "StandardMetaobjectCapabilityTemplate"
  /** The type of capability that's enabled for the metaobject definition. */
  capabilityType: ShopifyMetaobjectCapabilityType
}

/** Return type for `standardMetaobjectDefinitionEnable` mutation. */
export interface ShopifyStandardMetaobjectDefinitionEnablePayload {
  __typename?: "StandardMetaobjectDefinitionEnablePayload"
  /** The metaobject definition that was enabled using the standard template. */
  metaobjectDefinition?: Maybe<ShopifyMetaobjectDefinition>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMetaobjectUserError>
}

/** A preset field definition on a standard metaobject definition template. */
export interface ShopifyStandardMetaobjectDefinitionFieldTemplate {
  __typename?: "StandardMetaobjectDefinitionFieldTemplate"
  /** The administrative description. */
  description?: Maybe<Scalars["String"]["output"]>
  /** The key owned by the definition after the definition has been enabled. */
  key: Scalars["String"]["output"]
  /** The human-readable name. */
  name: Scalars["String"]["output"]
  /** The required status of the field within the object composition. */
  required: Scalars["Boolean"]["output"]
  /** The associated [metafield definition type](https://shopify.dev/apps/metafields/definitions/types) that the metafield stores. */
  type: ShopifyMetafieldDefinitionType
  /** The configured validations for the standard metafield definition. */
  validations: Array<ShopifyMetafieldDefinitionValidation>
  /** Whether metafields for the definition are by default visible using the Storefront API. */
  visibleToStorefrontApi: Scalars["Boolean"]["output"]
}

/** Standard metaobject definition templates provide preset configurations to create metaobject definitions. */
export interface ShopifyStandardMetaobjectDefinitionTemplate {
  __typename?: "StandardMetaobjectDefinitionTemplate"
  /** The administrative description. */
  description?: Maybe<Scalars["String"]["output"]>
  /** The key of a field to reference as the display name for each object. */
  displayNameKey?: Maybe<Scalars["String"]["output"]>
  /** The capabilities of the metaobject definition. */
  enabledCapabilities: Array<ShopifyStandardMetaobjectCapabilityTemplate>
  /** Templates for the associated field definitions. */
  fieldDefinitions: Array<ShopifyStandardMetaobjectDefinitionFieldTemplate>
  /** The human-readable name. */
  name: Scalars["String"]["output"]
  /** The namespace owned by the definition after the definition has been enabled. */
  type: Scalars["String"]["output"]
}

/** Represents the details of a specific type of product within the [Shopify product taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17). */
export interface ShopifyStandardizedProductType {
  __typename?: "StandardizedProductType"
  /** The product taxonomy node associated with the standardized product type. */
  productTaxonomyNode?: Maybe<ShopifyProductTaxonomyNode>
}

/**
 * A store credit account contains a monetary balance that can be redeemed at checkout for purchases in the shop.
 * The account is held in the specified currency and has an owner that cannot be transferred.
 *
 * The account balance is redeemable at checkout only when the owner is authenticated via [new customer accounts authentication](https://shopify.dev/docs/api/customer).
 */
export interface ShopifyStoreCreditAccount extends ShopifyNode {
  __typename?: "StoreCreditAccount"
  /** The current balance of the store credit account. */
  balance: ShopifyMoneyV2
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The owner of the store credit account. */
  owner: ShopifyHasStoreCreditAccounts
  /** The transaction history of the store credit account. */
  transactions: ShopifyStoreCreditAccountTransactionConnection
}

/**
 * A store credit account contains a monetary balance that can be redeemed at checkout for purchases in the shop.
 * The account is held in the specified currency and has an owner that cannot be transferred.
 *
 * The account balance is redeemable at checkout only when the owner is authenticated via [new customer accounts authentication](https://shopify.dev/docs/api/customer).
 */
export interface ShopifyStoreCreditAccountTransactionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyTransactionSortKeys>
}

/** An auto-generated type for paginating through multiple StoreCreditAccounts. */
export interface ShopifyStoreCreditAccountConnection {
  __typename?: "StoreCreditAccountConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyStoreCreditAccountEdge>
  /** A list of nodes that are contained in StoreCreditAccountEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyStoreCreditAccount>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields for a store credit account credit transaction. */
export interface ShopifyStoreCreditAccountCreditInput {
  /** The amount to credit the store credit account. */
  creditAmount: ShopifyMoneyInput
  /** The date and time when the credit expires. */
  expiresAt?: InputMaybe<Scalars["DateTime"]["input"]>
}

/** Return type for `storeCreditAccountCredit` mutation. */
export interface ShopifyStoreCreditAccountCreditPayload {
  __typename?: "StoreCreditAccountCreditPayload"
  /** The store credit account transaction that was created. */
  storeCreditAccountTransaction?: Maybe<ShopifyStoreCreditAccountCreditTransaction>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyStoreCreditAccountCreditUserError>
}

/** A credit transaction which increases the store credit account balance. */
export interface ShopifyStoreCreditAccountCreditTransaction
  extends ShopifyNode,
    ShopifyStoreCreditAccountTransaction {
  __typename?: "StoreCreditAccountCreditTransaction"
  /** The store credit account that the transaction belongs to. */
  account: ShopifyStoreCreditAccount
  /** The amount of the transaction. */
  amount: ShopifyMoneyV2
  /** The balance of the account after the transaction. */
  balanceAfterTransaction: ShopifyMoneyV2
  /** The date and time when the transaction was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The event that caused the store credit account transaction. */
  event: ShopifyStoreCreditSystemEvent
  /**
   * The time at which the transaction expires.
   * Debit transactions will always spend the soonest expiring credit first.
   */
  expiresAt?: Maybe<Scalars["DateTime"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The origin of the store credit account transaction. */
  origin?: Maybe<ShopifyStoreCreditAccountTransactionOrigin>
  /**
   * The remaining amount of the credit.
   * The remaining amount will decrease when a debit spends this credit. It may also increase if that debit is subsequently reverted.
   * In the event that the credit expires, the remaining amount will represent the amount that remained as the expiry ocurred.
   */
  remainingAmount: ShopifyMoneyV2
}

/** An error that occurs during the execution of `StoreCreditAccountCredit`. */
export interface ShopifyStoreCreditAccountCreditUserError
  extends ShopifyDisplayableError {
  __typename?: "StoreCreditAccountCreditUserError"
  /** The error code. */
  code?: Maybe<ShopifyStoreCreditAccountCreditUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `StoreCreditAccountCreditUserError`. */
export type ShopifyStoreCreditAccountCreditUserErrorCode =
  /** The store credit account could not be found. */
  | "ACCOUNT_NOT_FOUND"
  /** The operation would cause the account's credit limit to be exceeded. */
  | "CREDIT_LIMIT_EXCEEDED"
  /** The expiry date must be in the future. */
  | "EXPIRES_AT_IN_PAST"
  /** The currency provided does not match the currency of the store credit account. */
  | "MISMATCHING_CURRENCY"
  /** A positive amount must be used to credit a store credit account. */
  | "NEGATIVE_OR_ZERO_AMOUNT"
  /** Owner does not exist. */
  | "OWNER_NOT_FOUND"
  /** The currency provided is not currently supported. */
  | "UNSUPPORTED_CURRENCY"
  | "%future added value"

/** The input fields for a store credit account debit transaction. */
export interface ShopifyStoreCreditAccountDebitInput {
  /** The amount to debit the store credit account. */
  debitAmount: ShopifyMoneyInput
}

/** Return type for `storeCreditAccountDebit` mutation. */
export interface ShopifyStoreCreditAccountDebitPayload {
  __typename?: "StoreCreditAccountDebitPayload"
  /** The store credit account transaction that was created. */
  storeCreditAccountTransaction?: Maybe<ShopifyStoreCreditAccountDebitTransaction>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyStoreCreditAccountDebitUserError>
}

/**
 * A debit revert transaction which increases the store credit account balance.
 * Debit revert transactions are created automatically when a [store credit account debit transaction](https://shopify.dev/api/admin-graphql/latest/objects/StoreCreditAccountDebitTransaction) is reverted.
 *
 * Store credit account debit transactions are reverted when an order is cancelled, refunded or in the event of a payment failure at checkout.
 * The amount added to the balance is equal to the amount reverted on the original credit.
 */
export interface ShopifyStoreCreditAccountDebitRevertTransaction
  extends ShopifyNode,
    ShopifyStoreCreditAccountTransaction {
  __typename?: "StoreCreditAccountDebitRevertTransaction"
  /** The store credit account that the transaction belongs to. */
  account: ShopifyStoreCreditAccount
  /** The amount of the transaction. */
  amount: ShopifyMoneyV2
  /** The balance of the account after the transaction. */
  balanceAfterTransaction: ShopifyMoneyV2
  /** The date and time when the transaction was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The reverted debit transaction. */
  debitTransaction: ShopifyStoreCreditAccountDebitTransaction
  /** The event that caused the store credit account transaction. */
  event: ShopifyStoreCreditSystemEvent
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The origin of the store credit account transaction. */
  origin?: Maybe<ShopifyStoreCreditAccountTransactionOrigin>
}

/** A debit transaction which decreases the store credit account balance. */
export interface ShopifyStoreCreditAccountDebitTransaction
  extends ShopifyNode,
    ShopifyStoreCreditAccountTransaction {
  __typename?: "StoreCreditAccountDebitTransaction"
  /** The store credit account that the transaction belongs to. */
  account: ShopifyStoreCreditAccount
  /** The amount of the transaction. */
  amount: ShopifyMoneyV2
  /** The balance of the account after the transaction. */
  balanceAfterTransaction: ShopifyMoneyV2
  /** The date and time when the transaction was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The event that caused the store credit account transaction. */
  event: ShopifyStoreCreditSystemEvent
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The origin of the store credit account transaction. */
  origin?: Maybe<ShopifyStoreCreditAccountTransactionOrigin>
}

/** An error that occurs during the execution of `StoreCreditAccountDebit`. */
export interface ShopifyStoreCreditAccountDebitUserError
  extends ShopifyDisplayableError {
  __typename?: "StoreCreditAccountDebitUserError"
  /** The error code. */
  code?: Maybe<ShopifyStoreCreditAccountDebitUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `StoreCreditAccountDebitUserError`. */
export type ShopifyStoreCreditAccountDebitUserErrorCode =
  /** The store credit account could not be found. */
  | "ACCOUNT_NOT_FOUND"
  /** The store credit account does not have sufficient funds to satisfy the request. */
  | "INSUFFICIENT_FUNDS"
  /** The currency provided does not match the currency of the store credit account. */
  | "MISMATCHING_CURRENCY"
  /** A positive amount must be used to debit a store credit account. */
  | "NEGATIVE_OR_ZERO_AMOUNT"
  | "%future added value"

/** An auto-generated type which holds one StoreCreditAccount and a cursor during pagination. */
export interface ShopifyStoreCreditAccountEdge {
  __typename?: "StoreCreditAccountEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of StoreCreditAccountEdge. */
  node: ShopifyStoreCreditAccount
}

/**
 * An expiration transaction which decreases the store credit account balance.
 * Expiration transactions are created automatically when a [store credit account credit transaction](https://shopify.dev/api/admin-graphql/latest/objects/StoreCreditAccountCreditTransaction) expires.
 *
 * The amount subtracted from the balance is equal to the remaining amount of the credit transaction.
 */
export interface ShopifyStoreCreditAccountExpirationTransaction
  extends ShopifyStoreCreditAccountTransaction {
  __typename?: "StoreCreditAccountExpirationTransaction"
  /** The store credit account that the transaction belongs to. */
  account: ShopifyStoreCreditAccount
  /** The amount of the transaction. */
  amount: ShopifyMoneyV2
  /** The balance of the account after the transaction. */
  balanceAfterTransaction: ShopifyMoneyV2
  /** The date and time when the transaction was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The credit transaction which expired. */
  creditTransaction: ShopifyStoreCreditAccountCreditTransaction
  /** The event that caused the store credit account transaction. */
  event: ShopifyStoreCreditSystemEvent
  /** The origin of the store credit account transaction. */
  origin?: Maybe<ShopifyStoreCreditAccountTransactionOrigin>
}

/** Interface for a store credit account transaction. */
export interface ShopifyStoreCreditAccountTransaction {
  /** The store credit account that the transaction belongs to. */
  account: ShopifyStoreCreditAccount
  /** The amount of the transaction. */
  amount: ShopifyMoneyV2
  /** The balance of the account after the transaction. */
  balanceAfterTransaction: ShopifyMoneyV2
  /** The date and time when the transaction was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The event that caused the store credit account transaction. */
  event: ShopifyStoreCreditSystemEvent
  /** The origin of the store credit account transaction. */
  origin?: Maybe<ShopifyStoreCreditAccountTransactionOrigin>
}

/** An auto-generated type for paginating through multiple StoreCreditAccountTransactions. */
export interface ShopifyStoreCreditAccountTransactionConnection {
  __typename?: "StoreCreditAccountTransactionConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyStoreCreditAccountTransactionEdge>
  /** A list of nodes that are contained in StoreCreditAccountTransactionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyStoreCreditAccountTransaction>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one StoreCreditAccountTransaction and a cursor during pagination. */
export interface ShopifyStoreCreditAccountTransactionEdge {
  __typename?: "StoreCreditAccountTransactionEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of StoreCreditAccountTransactionEdge. */
  node: ShopifyStoreCreditAccountTransaction
}

/** The origin of a store credit account transaction. */
export type ShopifyStoreCreditAccountTransactionOrigin = ShopifyOrderTransaction

/** The input fields to process a refund to store credit. */
export interface ShopifyStoreCreditRefundInput {
  /** The amount to be issued as store credit. */
  amount: ShopifyMoneyInput
  /** An optional expiration date for the store credit being issued. */
  expiresAt?: InputMaybe<Scalars["DateTime"]["input"]>
}

/** The event that caused the store credit account transaction. */
export type ShopifyStoreCreditSystemEvent =
  /** An adjustment was made to the store credit account. */
  | "ADJUSTMENT"
  /** Store credit was returned when an authorized payment was voided. */
  | "ORDER_CANCELLATION"
  /** Store credit was used as payment for an order. */
  | "ORDER_PAYMENT"
  /** Store credit was refunded from an order. */
  | "ORDER_REFUND"
  /** A store credit payment was reverted due to another payment method failing. */
  | "PAYMENT_FAILURE"
  /** A smaller amount of store credit was captured than was originally authorized. */
  | "PAYMENT_RETURNED"
  /** Tax finalization affected the store credit payment. */
  | "TAX_FINALIZATION"
  | "%future added value"

/**
 * A token that's used to delegate unauthenticated access scopes to clients that need to access
 * the unauthenticated [Storefront API](https://shopify.dev/docs/api/storefront).
 *
 * An app can have a maximum of 100 active storefront access
 * tokens for each shop.
 *
 * [Get started with the Storefront API](https://shopify.dev/docs/storefronts/headless/building-with-the-storefront-api/getting-started).
 */
export interface ShopifyStorefrontAccessToken extends ShopifyNode {
  __typename?: "StorefrontAccessToken"
  /** List of permissions associated with the token. */
  accessScopes: Array<ShopifyAccessScope>
  /** The issued public access token. */
  accessToken: Scalars["String"]["output"]
  /** The date and time when the public access token was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** An arbitrary title for each token determined by the developer, used for reference         purposes. */
  title: Scalars["String"]["output"]
  /** The date and time when the storefront access token was updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** An auto-generated type for paginating through multiple StorefrontAccessTokens. */
export interface ShopifyStorefrontAccessTokenConnection {
  __typename?: "StorefrontAccessTokenConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyStorefrontAccessTokenEdge>
  /** A list of nodes that are contained in StorefrontAccessTokenEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyStorefrontAccessToken>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `storefrontAccessTokenCreate` mutation. */
export interface ShopifyStorefrontAccessTokenCreatePayload {
  __typename?: "StorefrontAccessTokenCreatePayload"
  /** The user's shop. */
  shop: ShopifyShop
  /** The storefront access token. */
  storefrontAccessToken?: Maybe<ShopifyStorefrontAccessToken>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** The input fields to delete a storefront access token. */
export interface ShopifyStorefrontAccessTokenDeleteInput {
  /** The ID of the storefront access token to delete. */
  id: Scalars["ID"]["input"]
}

/** Return type for `storefrontAccessTokenDelete` mutation. */
export interface ShopifyStorefrontAccessTokenDeletePayload {
  __typename?: "StorefrontAccessTokenDeletePayload"
  /** The ID of the deleted storefront access token. */
  deletedStorefrontAccessTokenId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination. */
export interface ShopifyStorefrontAccessTokenEdge {
  __typename?: "StorefrontAccessTokenEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of StorefrontAccessTokenEdge. */
  node: ShopifyStorefrontAccessToken
}

/** The input fields for a storefront access token. */
export interface ShopifyStorefrontAccessTokenInput {
  /** A title for the storefront access token. */
  title: Scalars["String"]["input"]
}

/** An auto-generated type for paginating through multiple Strings. */
export interface ShopifyStringConnection {
  __typename?: "StringConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyStringEdge>
  /** A list of nodes that are contained in StringEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<Scalars["String"]["output"]>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one String and a cursor during pagination. */
export interface ShopifyStringEdge {
  __typename?: "StringEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of StringEdge. */
  node: Scalars["String"]["output"]
}

/** Represents an applied code discount. */
export interface ShopifySubscriptionAppliedCodeDiscount {
  __typename?: "SubscriptionAppliedCodeDiscount"
  /** The unique ID. */
  id: Scalars["ID"]["output"]
  /** The redeem code of the discount that applies on the subscription. */
  redeemCode: Scalars["String"]["output"]
  /** The reason that the discount on the subscription draft is rejected. */
  rejectionReason?: Maybe<ShopifySubscriptionDiscountRejectionReason>
}

/** The input fields for mapping a subscription line to a discount. */
export interface ShopifySubscriptionAtomicLineInput {
  /** The discount to be added to the subscription line. */
  discounts?: InputMaybe<Array<ShopifySubscriptionAtomicManualDiscountInput>>
  /** The new subscription line. */
  line: ShopifySubscriptionLineInput
}

/** The input fields for mapping a subscription line to a discount. */
export interface ShopifySubscriptionAtomicManualDiscountInput {
  /** The maximum number of times the subscription discount will be applied on orders. */
  recurringCycleLimit?: InputMaybe<Scalars["Int"]["input"]>
  /** The title associated with the subscription discount. */
  title?: InputMaybe<Scalars["String"]["input"]>
  /** Percentage or fixed amount value of the discount. */
  value?: InputMaybe<ShopifySubscriptionManualDiscountValueInput>
}

/**
 * A record of an execution of the subscription billing process. Billing attempts use
 * idempotency keys to avoid duplicate order creation. A successful billing attempt
 * will create an order.
 */
export interface ShopifySubscriptionBillingAttempt extends ShopifyNode {
  __typename?: "SubscriptionBillingAttempt"
  /** The date and time when the billing attempt was completed. */
  completedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The date and time when the billing attempt was created. */
  createdAt: Scalars["DateTime"]["output"]
  /**
   * A code corresponding to a payment error during processing.
   * @deprecated Use `processingError.code` instead to get the errorCode
   */
  errorCode?: Maybe<ShopifySubscriptionBillingAttemptErrorCode>
  /**
   * A message describing a payment error during processing.
   * @deprecated Use `processingError.message` instead to get the errorMessage
   */
  errorMessage?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** A unique key generated by the client to avoid duplicate payments. */
  idempotencyKey: Scalars["String"]["output"]
  /** The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow. */
  nextActionUrl?: Maybe<Scalars["URL"]["output"]>
  /** The result of this billing attempt if completed successfully. */
  order?: Maybe<ShopifyOrder>
  /**
   * The date and time used to calculate fulfillment intervals for a billing attempt that
   * successfully completed after the current anchor date. To prevent fulfillment from being
   * pushed to the next anchor date, this field can override the billing attempt date.
   */
  originTime?: Maybe<Scalars["DateTime"]["output"]>
  /** The reference shared between retried payment attempts. */
  paymentGroupId?: Maybe<Scalars["String"]["output"]>
  /** The reference shared between payment attempts with similar payment details. */
  paymentSessionId?: Maybe<Scalars["String"]["output"]>
  /** Error information from processing the billing attempt. */
  processingError?: Maybe<ShopifySubscriptionBillingAttemptProcessingError>
  /** Whether the billing attempt is still processing. */
  ready: Scalars["Boolean"]["output"]
  /** Whether the billing attempt respects the merchant's inventory policy. */
  respectInventoryPolicy: Scalars["Boolean"]["output"]
  /** The subscription contract. */
  subscriptionContract: ShopifySubscriptionContract
  /** The transactions created by the billing attempt. */
  transactions: ShopifyOrderTransactionConnection
}

/**
 * A record of an execution of the subscription billing process. Billing attempts use
 * idempotency keys to avoid duplicate order creation. A successful billing attempt
 * will create an order.
 */
export interface ShopifySubscriptionBillingAttemptTransactionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple SubscriptionBillingAttempts. */
export interface ShopifySubscriptionBillingAttemptConnection {
  __typename?: "SubscriptionBillingAttemptConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySubscriptionBillingAttemptEdge>
  /** A list of nodes that are contained in SubscriptionBillingAttemptEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifySubscriptionBillingAttempt>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `subscriptionBillingAttemptCreate` mutation. */
export interface ShopifySubscriptionBillingAttemptCreatePayload {
  __typename?: "SubscriptionBillingAttemptCreatePayload"
  /** The subscription billing attempt. */
  subscriptionBillingAttempt?: Maybe<ShopifySubscriptionBillingAttempt>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBillingAttemptUserError>
}

/** An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination. */
export interface ShopifySubscriptionBillingAttemptEdge {
  __typename?: "SubscriptionBillingAttemptEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SubscriptionBillingAttemptEdge. */
  node: ShopifySubscriptionBillingAttempt
}

/**
 * The possible error codes associated with making billing attempts. The error codes supplement the
 * `error_message` to provide consistent results and help with dunning management.
 */
export type ShopifySubscriptionBillingAttemptErrorCode =
  /** The amount is too small. */
  | "AMOUNT_TOO_SMALL"
  /** There was an error during the authentication. */
  | "AUTHENTICATION_ERROR"
  /** Payment method was canceled by buyer. */
  | "BUYER_CANCELED_PAYMENT_METHOD"
  /** Card number was incorrect. */
  | "CARD_NUMBER_INCORRECT"
  /** Customer is invalid. */
  | "CUSTOMER_INVALID"
  /** Customer was not found. */
  | "CUSTOMER_NOT_FOUND"
  /** Payment method is expired. */
  | "EXPIRED_PAYMENT_METHOD"
  /** Fraud was suspected. */
  | "FRAUD_SUSPECTED"
  /** Gift cards must have a price greater than zero. */
  | "FREE_GIFT_CARD_NOT_ALLOWED"
  /** Insufficient funds. */
  | "INSUFFICIENT_FUNDS"
  /** Not enough inventory found. */
  | "INSUFFICIENT_INVENTORY"
  /** The billing agreement ID or the transaction ID for the customer's payment method is invalid. */
  | "INVALID_CUSTOMER_BILLING_AGREEMENT"
  /** Payment method is invalid. Please update or create a new payment method. */
  | "INVALID_PAYMENT_METHOD"
  /** The shipping address is either missing or invalid. */
  | "INVALID_SHIPPING_ADDRESS"
  /** No inventory location found or enabled. */
  | "INVENTORY_ALLOCATIONS_NOT_FOUND"
  /** A payment has already been made for this invoice. */
  | "INVOICE_ALREADY_PAID"
  /** Non-test order limit reached. Use a test payment gateway to place another order. */
  | "NON_TEST_ORDER_LIMIT_REACHED"
  /** Payment method was declined by processor. */
  | "PAYMENT_METHOD_DECLINED"
  /** Payment method cannot be used with the current payment gateway test mode configuration. */
  | "PAYMENT_METHOD_INCOMPATIBLE_WITH_GATEWAY_CONFIG"
  /** Payment method was not found. */
  | "PAYMENT_METHOD_NOT_FOUND"
  /** Payment provider is not enabled. */
  | "PAYMENT_PROVIDER_IS_NOT_ENABLED"
  /** Paypal Error General. */
  | "PAYPAL_ERROR_GENERAL"
  /** Purchase Type is not supported. */
  | "PURCHASE_TYPE_NOT_SUPPORTED"
  /** Gateway is in test mode and attempted to bill a live payment method. */
  | "TEST_MODE"
  /** Transient error, try again later. */
  | "TRANSIENT_ERROR"
  /** There was an unexpected error during the billing attempt. */
  | "UNEXPECTED_ERROR"
  | "%future added value"

/** A base error type that applies to all uncategorized error classes. */
export interface ShopifySubscriptionBillingAttemptGenericError
  extends ShopifySubscriptionBillingAttemptProcessingError {
  __typename?: "SubscriptionBillingAttemptGenericError"
  /** The code for the error. */
  code: ShopifySubscriptionBillingAttemptErrorCode
  /** An explanation of the error. */
  message: Scalars["String"]["output"]
}

/** The input fields required to complete a subscription billing attempt. */
export interface ShopifySubscriptionBillingAttemptInput {
  /**
   * Select the specific billing cycle to be billed.
   * Default to bill the current billing cycle if not specified.
   */
  billingCycleSelector?: InputMaybe<ShopifySubscriptionBillingCycleSelector>
  /** A unique key generated by the client to avoid duplicate payments. For more information, refer to [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests). */
  idempotencyKey: Scalars["String"]["input"]
  /**
   * The behaviour to follow when creating an order for a product variant
   *       when it's out of stock.
   */
  inventoryPolicy?: InputMaybe<ShopifySubscriptionBillingAttemptInventoryPolicy>
  /**
   * The date and time used to calculate fulfillment intervals for a billing attempt that
   * successfully completed after the current anchor date. To prevent fulfillment from being
   * pushed to the next anchor date, this field can override the billing attempt date.
   */
  originTime?: InputMaybe<Scalars["DateTime"]["input"]>
}

/** An inventory error caused by an issue with one or more of the contract merchandise lines. */
export interface ShopifySubscriptionBillingAttemptInsufficientStockProductVariantsError
  extends ShopifySubscriptionBillingAttemptProcessingError {
  __typename?: "SubscriptionBillingAttemptInsufficientStockProductVariantsError"
  /** The code for the error. */
  code: ShopifySubscriptionBillingAttemptErrorCode
  /** A list of product variants that caused the insufficient inventory error. */
  insufficientStockProductVariants: ShopifyProductVariantConnection
  /** An explanation of the error. */
  message: Scalars["String"]["output"]
}

/** An inventory error caused by an issue with one or more of the contract merchandise lines. */
export interface ShopifySubscriptionBillingAttemptInsufficientStockProductVariantsErrorInsufficientStockProductVariantsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The inventory policy for a billing attempt. */
export type ShopifySubscriptionBillingAttemptInventoryPolicy =
  /**
   * Override the merchant's product variant
   *          inventory policy and allow overselling for this billing attempt.
   */
  | "ALLOW_OVERSELLING"
  /**
   * Respect the merchant's product variant
   *         inventory policy for this billing attempt.
   */
  | "PRODUCT_VARIANT_INVENTORY_POLICY"
  | "%future added value"

/** An inventory error caused by an issue with one or more of the contract merchandise lines. */
export interface ShopifySubscriptionBillingAttemptOutOfStockProductVariantsError
  extends ShopifySubscriptionBillingAttemptProcessingError {
  __typename?: "SubscriptionBillingAttemptOutOfStockProductVariantsError"
  /** The code for the error. */
  code: ShopifySubscriptionBillingAttemptErrorCode
  /** An explanation of the error. */
  message: Scalars["String"]["output"]
  /**
   * A list of responsible product variants.
   * @deprecated Use `subscriptionBillingAttemptInsufficientStockProductVariantsError` type instead.
   */
  outOfStockProductVariants: ShopifyProductVariantConnection
}

/** An inventory error caused by an issue with one or more of the contract merchandise lines. */
export interface ShopifySubscriptionBillingAttemptOutOfStockProductVariantsErrorOutOfStockProductVariantsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An error that prevented a billing attempt. */
export interface ShopifySubscriptionBillingAttemptProcessingError {
  /** The code for the error. */
  code: ShopifySubscriptionBillingAttemptErrorCode
  /** An explanation of the error. */
  message: Scalars["String"]["output"]
}

/** The set of valid sort keys for the SubscriptionBillingAttempts query. */
export type ShopifySubscriptionBillingAttemptsSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  | "%future added value"

/** A subscription billing cycle. */
export interface ShopifySubscriptionBillingCycle {
  __typename?: "SubscriptionBillingCycle"
  /** The date on which the billing attempt is expected to be made. */
  billingAttemptExpectedDate: Scalars["DateTime"]["output"]
  /** The list of billing attempts associated with the billing cycle. */
  billingAttempts: ShopifySubscriptionBillingAttemptConnection
  /** The end date of the billing cycle. */
  cycleEndAt: Scalars["DateTime"]["output"]
  /** The index of the billing cycle. */
  cycleIndex: Scalars["Int"]["output"]
  /** The start date of the billing cycle. */
  cycleStartAt: Scalars["DateTime"]["output"]
  /** Whether this billing cycle was edited. */
  edited: Scalars["Boolean"]["output"]
  /** The active edited contract for the billing cycle. */
  editedContract?: Maybe<ShopifySubscriptionBillingCycleEditedContract>
  /** Whether this billing cycle was skipped. */
  skipped: Scalars["Boolean"]["output"]
  /** The subscription contract that the billing cycle belongs to. */
  sourceContract: ShopifySubscriptionContract
  /** The status of the billing cycle. */
  status: ShopifySubscriptionBillingCycleBillingCycleStatus
}

/** A subscription billing cycle. */
export interface ShopifySubscriptionBillingCycleBillingAttemptsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The presence of billing attempts on Billing Cycles. */
export type ShopifySubscriptionBillingCycleBillingAttemptStatus =
  /** Billing cycle has any number of billing attempts. */
  | "ANY"
  /** Billing cycle has at least one billing attempt. */
  | "HAS_ATTEMPT"
  /** Billing cycle has no billing attempts. */
  | "NO_ATTEMPT"
  | "%future added value"

/** The possible status values of a subscription billing cycle. */
export type ShopifySubscriptionBillingCycleBillingCycleStatus =
  /** The billing cycle is billed. */
  | "BILLED"
  /** The billing cycle hasn't been billed. */
  | "UNBILLED"
  | "%future added value"

/** Return type for `subscriptionBillingCycleBulkCharge` mutation. */
export interface ShopifySubscriptionBillingCycleBulkChargePayload {
  __typename?: "SubscriptionBillingCycleBulkChargePayload"
  /** The asynchronous job that performs the action on the targeted billing cycles. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionBillingCycleBulkUserError>
}

/** The input fields for filtering subscription billing cycles in bulk actions. */
export interface ShopifySubscriptionBillingCycleBulkFilters {
  /** Filters the billing cycles based on the presence of billing attempts. */
  billingAttemptStatus?: InputMaybe<ShopifySubscriptionBillingCycleBillingAttemptStatus>
  /** Filters the billing cycles based on their status. */
  billingCycleStatus?: InputMaybe<
    Array<ShopifySubscriptionBillingCycleBillingCycleStatus>
  >
  /** Filters the billing cycles based on the status of their associated subscription contracts. */
  contractStatus?: InputMaybe<
    Array<ShopifySubscriptionContractSubscriptionStatus>
  >
}

/** Return type for `subscriptionBillingCycleBulkSearch` mutation. */
export interface ShopifySubscriptionBillingCycleBulkSearchPayload {
  __typename?: "SubscriptionBillingCycleBulkSearchPayload"
  /** The asynchronous job that performs the action on the targeted billing cycles. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionBillingCycleBulkUserError>
}

/** Represents an error that happens during the execution of subscriptionBillingCycles mutations. */
export interface ShopifySubscriptionBillingCycleBulkUserError
  extends ShopifyDisplayableError {
  __typename?: "SubscriptionBillingCycleBulkUserError"
  /** The error code. */
  code?: Maybe<ShopifySubscriptionBillingCycleBulkUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `SubscriptionBillingCycleBulkUserError`. */
export type ShopifySubscriptionBillingCycleBulkUserErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** End date can't be more than 24 hours in the future. */
  | "END_DATE_IN_THE_FUTURE"
  /** The input value is invalid. */
  | "INVALID"
  /** The range between start date and end date shouldn't be more than 1 week. */
  | "INVALID_DATE_RANGE"
  /** Start date should be before end date. */
  | "START_DATE_BEFORE_END_DATE"
  | "%future added value"

/** Return type for `subscriptionBillingCycleCharge` mutation. */
export interface ShopifySubscriptionBillingCycleChargePayload {
  __typename?: "SubscriptionBillingCycleChargePayload"
  /** The subscription billing attempt. */
  subscriptionBillingAttempt?: Maybe<ShopifySubscriptionBillingAttempt>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyBillingAttemptUserError>
}

/** An auto-generated type for paginating through multiple SubscriptionBillingCycles. */
export interface ShopifySubscriptionBillingCycleConnection {
  __typename?: "SubscriptionBillingCycleConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySubscriptionBillingCycleEdge>
  /** A list of nodes that are contained in SubscriptionBillingCycleEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifySubscriptionBillingCycle>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `subscriptionBillingCycleContractDraftCommit` mutation. */
export interface ShopifySubscriptionBillingCycleContractDraftCommitPayload {
  __typename?: "SubscriptionBillingCycleContractDraftCommitPayload"
  /** The committed Subscription Billing Cycle Edited Contract object. */
  contract?: Maybe<ShopifySubscriptionBillingCycleEditedContract>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** Return type for `subscriptionBillingCycleContractDraftConcatenate` mutation. */
export interface ShopifySubscriptionBillingCycleContractDraftConcatenatePayload {
  __typename?: "SubscriptionBillingCycleContractDraftConcatenatePayload"
  /** The Subscription Draft object. */
  draft?: Maybe<ShopifySubscriptionDraft>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** Return type for `subscriptionBillingCycleContractEdit` mutation. */
export interface ShopifySubscriptionBillingCycleContractEditPayload {
  __typename?: "SubscriptionBillingCycleContractEditPayload"
  /** The draft subscription contract object. */
  draft?: Maybe<ShopifySubscriptionDraft>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** An auto-generated type which holds one SubscriptionBillingCycle and a cursor during pagination. */
export interface ShopifySubscriptionBillingCycleEdge {
  __typename?: "SubscriptionBillingCycleEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SubscriptionBillingCycleEdge. */
  node: ShopifySubscriptionBillingCycle
}

/** Return type for `subscriptionBillingCycleEditDelete` mutation. */
export interface ShopifySubscriptionBillingCycleEditDeletePayload {
  __typename?: "SubscriptionBillingCycleEditDeletePayload"
  /** The list of updated billing cycles. */
  billingCycles?: Maybe<Array<ShopifySubscriptionBillingCycle>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionBillingCycleUserError>
}

/** Represents a subscription contract with billing cycles. */
export interface ShopifySubscriptionBillingCycleEditedContract
  extends ShopifySubscriptionContractBase {
  __typename?: "SubscriptionBillingCycleEditedContract"
  /** The subscription app that the subscription contract is registered to. */
  app?: Maybe<ShopifyApp>
  /** The URL of the subscription contract page on the subscription app. */
  appAdminUrl?: Maybe<Scalars["URL"]["output"]>
  /** The billing cycles that the edited contract belongs to. */
  billingCycles: ShopifySubscriptionBillingCycleConnection
  /** The date and time when the subscription contract was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The currency that's used for the subscription contract. */
  currencyCode: ShopifyCurrencyCode
  /** A list of the custom attributes to be added to the generated orders. */
  customAttributes: Array<ShopifyAttribute>
  /** The customer to whom the subscription contract belongs. */
  customer?: Maybe<ShopifyCustomer>
  /** The customer payment method that's used for the subscription contract. */
  customerPaymentMethod?: Maybe<ShopifyCustomerPaymentMethod>
  /** The delivery method for each billing of the subscription contract. */
  deliveryMethod?: Maybe<ShopifySubscriptionDeliveryMethod>
  /** The delivery price for each billing of the subscription contract. */
  deliveryPrice: ShopifyMoneyV2
  /** The list of subscription discounts associated with the subscription contract. */
  discounts: ShopifySubscriptionManualDiscountConnection
  /**
   * The number of lines associated with the subscription contract.
   * @deprecated Use `linesCount` instead.
   */
  lineCount: Scalars["Int"]["output"]
  /** The list of subscription lines associated with the subscription contract. */
  lines: ShopifySubscriptionLineConnection
  /** The number of lines associated with the subscription contract. */
  linesCount?: Maybe<ShopifyCount>
  /** The note field that will be applied to the generated orders. */
  note?: Maybe<Scalars["String"]["output"]>
  /** A list of the subscription contract's orders. */
  orders: ShopifyOrderConnection
  /** The date and time when the subscription contract was updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** Represents a subscription contract with billing cycles. */
export interface ShopifySubscriptionBillingCycleEditedContractBillingCyclesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifySubscriptionBillingCyclesSortKeys>
}

/** Represents a subscription contract with billing cycles. */
export interface ShopifySubscriptionBillingCycleEditedContractCustomerPaymentMethodArgs {
  showRevoked?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents a subscription contract with billing cycles. */
export interface ShopifySubscriptionBillingCycleEditedContractDiscountsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents a subscription contract with billing cycles. */
export interface ShopifySubscriptionBillingCycleEditedContractLinesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents a subscription contract with billing cycles. */
export interface ShopifySubscriptionBillingCycleEditedContractOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `subscriptionBillingCycleEditsDelete` mutation. */
export interface ShopifySubscriptionBillingCycleEditsDeletePayload {
  __typename?: "SubscriptionBillingCycleEditsDeletePayload"
  /** The list of updated billing cycles. */
  billingCycles?: Maybe<Array<ShopifySubscriptionBillingCycle>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionBillingCycleUserError>
}

/** Possible error codes that can be returned by `SubscriptionBillingCycleUserError`. */
export type ShopifySubscriptionBillingCycleErrorCode =
  /** Billing date cannot be set on skipped billing cycle. */
  | "BILLING_DATE_SET_ON_SKIPPED"
  /** Billing cycle selector cannot select billing cycle outside of index range. */
  | "CYCLE_INDEX_OUT_OF_RANGE"
  /** Can't find the billing cycle. */
  | "CYCLE_NOT_FOUND"
  /** Billing cycle selector cannot select billing cycle outside of start date range. */
  | "CYCLE_START_DATE_OUT_OF_RANGE"
  /** Billing cycle schedule edit input provided is empty. Must take in parameters to modify schedule. */
  | "EMPTY_BILLING_CYCLE_EDIT_SCHEDULE_INPUT"
  /** Billing cycle has incomplete billing attempts in progress. */
  | "INCOMPLETE_BILLING_ATTEMPTS"
  /** The input value is invalid. */
  | "INVALID"
  /** The index selector is invalid. */
  | "INVALID_CYCLE_INDEX"
  /** The date selector is invalid. */
  | "INVALID_DATE"
  /** There's no contract or schedule edit associated with the targeted billing cycle(s). */
  | "NO_CYCLE_EDITS"
  /** Billing date of a cycle cannot be set to a value outside of its billing date range. */
  | "OUT_OF_BOUNDS"
  /** Billing cycle selector cannot select upcoming billing cycle past limit. */
  | "UPCOMING_CYCLE_LIMIT_EXCEEDED"
  | "%future added value"

/** The input fields for specifying the subscription contract and selecting the associated billing cycle. */
export interface ShopifySubscriptionBillingCycleInput {
  /** The ID of the subscription contract associated with the billing cycle. */
  contractId: Scalars["ID"]["input"]
  /** Selects the billing cycle by date or index. */
  selector: ShopifySubscriptionBillingCycleSelector
}

/** The input fields for parameters to modify the schedule of a specific billing cycle. */
export interface ShopifySubscriptionBillingCycleScheduleEditInput {
  /** Sets the expected billing date for the billing cycle. */
  billingDate?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The reason for editing. */
  reason: ShopifySubscriptionBillingCycleScheduleEditInputScheduleEditReason
  /** Sets the skip status for the billing cycle. */
  skip?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The input fields for possible reasons for editing the billing cycle's schedule. */
export type ShopifySubscriptionBillingCycleScheduleEditInputScheduleEditReason =
  /** Buyer initiated the schedule edit. */
  | "BUYER_INITIATED"
  /** Developer initiated the schedule edit. */
  | "DEV_INITIATED"
  /** Merchant initiated the schedule edit. */
  | "MERCHANT_INITIATED"
  | "%future added value"

/** Return type for `subscriptionBillingCycleScheduleEdit` mutation. */
export interface ShopifySubscriptionBillingCycleScheduleEditPayload {
  __typename?: "SubscriptionBillingCycleScheduleEditPayload"
  /** The updated billing cycle. */
  billingCycle?: Maybe<ShopifySubscriptionBillingCycle>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionBillingCycleUserError>
}

/** The input fields to select SubscriptionBillingCycle by either date or index. Both past and future billing cycles can be selected. */
export interface ShopifySubscriptionBillingCycleSelector {
  /** Returns a billing cycle by date. */
  date?: InputMaybe<Scalars["DateTime"]["input"]>
  /** Returns a billing cycle by index. */
  index?: InputMaybe<Scalars["Int"]["input"]>
}

/** Return type for `subscriptionBillingCycleSkip` mutation. */
export interface ShopifySubscriptionBillingCycleSkipPayload {
  __typename?: "SubscriptionBillingCycleSkipPayload"
  /** The updated billing cycle. */
  billingCycle?: Maybe<ShopifySubscriptionBillingCycle>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionBillingCycleSkipUserError>
}

/** An error that occurs during the execution of `SubscriptionBillingCycleSkip`. */
export interface ShopifySubscriptionBillingCycleSkipUserError
  extends ShopifyDisplayableError {
  __typename?: "SubscriptionBillingCycleSkipUserError"
  /** The error code. */
  code?: Maybe<ShopifySubscriptionBillingCycleSkipUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `SubscriptionBillingCycleSkipUserError`. */
export type ShopifySubscriptionBillingCycleSkipUserErrorCode =
  /** The input value is invalid. */
  "INVALID" | "%future added value"

/** Return type for `subscriptionBillingCycleUnskip` mutation. */
export interface ShopifySubscriptionBillingCycleUnskipPayload {
  __typename?: "SubscriptionBillingCycleUnskipPayload"
  /** The updated billing cycle. */
  billingCycle?: Maybe<ShopifySubscriptionBillingCycle>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionBillingCycleUnskipUserError>
}

/** An error that occurs during the execution of `SubscriptionBillingCycleUnskip`. */
export interface ShopifySubscriptionBillingCycleUnskipUserError
  extends ShopifyDisplayableError {
  __typename?: "SubscriptionBillingCycleUnskipUserError"
  /** The error code. */
  code?: Maybe<ShopifySubscriptionBillingCycleUnskipUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `SubscriptionBillingCycleUnskipUserError`. */
export type ShopifySubscriptionBillingCycleUnskipUserErrorCode =
  /** The input value is invalid. */
  "INVALID" | "%future added value"

/** The possible errors for a subscription billing cycle. */
export interface ShopifySubscriptionBillingCycleUserError
  extends ShopifyDisplayableError {
  __typename?: "SubscriptionBillingCycleUserError"
  /** The error code. */
  code?: Maybe<ShopifySubscriptionBillingCycleErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** The input fields to select a subset of subscription billing cycles within a date range. */
export interface ShopifySubscriptionBillingCyclesDateRangeSelector {
  /** The end date and time for the range. */
  endDate: Scalars["DateTime"]["input"]
  /** The start date and time for the range. */
  startDate: Scalars["DateTime"]["input"]
}

/** The input fields to select a subset of subscription billing cycles within an index range. */
export interface ShopifySubscriptionBillingCyclesIndexRangeSelector {
  /** The end index for the range. */
  endIndex: Scalars["Int"]["input"]
  /** The start index for the range. */
  startIndex: Scalars["Int"]["input"]
}

/** The set of valid sort keys for the SubscriptionBillingCycles query. */
export type ShopifySubscriptionBillingCyclesSortKeys =
  /** Sort by the `cycle_index` value. */
  | "CYCLE_INDEX"
  /** Sort by the `id` value. */
  | "ID"
  | "%future added value"

/** Select subscription billing cycles to be targeted. */
export type ShopifySubscriptionBillingCyclesTargetSelection =
  /** Target all current and upcoming subscription billing cycles. */
  "ALL" | "%future added value"

/** Represents a Subscription Billing Policy. */
export interface ShopifySubscriptionBillingPolicy {
  __typename?: "SubscriptionBillingPolicy"
  /** Specific anchor dates upon which the billing interval calculations should be made. */
  anchors: Array<ShopifySellingPlanAnchor>
  /** The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc). */
  interval: ShopifySellingPlanInterval
  /** The number of billing intervals between invoices. */
  intervalCount: Scalars["Int"]["output"]
  /** Maximum amount of cycles after which the subscription ends. */
  maxCycles?: Maybe<Scalars["Int"]["output"]>
  /** Minimum amount of cycles required in the subscription. */
  minCycles?: Maybe<Scalars["Int"]["output"]>
}

/** The input fields for a Subscription Billing Policy. */
export interface ShopifySubscriptionBillingPolicyInput {
  /** Specific anchor dates upon which the billing interval calculations should be made. */
  anchors?: InputMaybe<Array<ShopifySellingPlanAnchorInput>>
  /** The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc). */
  interval: ShopifySellingPlanInterval
  /** The number of billing intervals between invoices. */
  intervalCount: Scalars["Int"]["input"]
  /** Maximum amount of cycles required in the subscription. */
  maxCycles?: InputMaybe<Scalars["Int"]["input"]>
  /** Minimum amount of cycles required in the subscription. */
  minCycles?: InputMaybe<Scalars["Int"]["input"]>
}

/** Represents a Subscription Contract. */
export interface ShopifySubscriptionContract
  extends ShopifyNode,
    ShopifySubscriptionContractBase {
  __typename?: "SubscriptionContract"
  /** The subscription app that the subscription contract is registered to. */
  app?: Maybe<ShopifyApp>
  /** The URL of the subscription contract page on the subscription app. */
  appAdminUrl?: Maybe<Scalars["URL"]["output"]>
  /** The list of billing attempts associated with the subscription contract. */
  billingAttempts: ShopifySubscriptionBillingAttemptConnection
  /** The billing policy associated with the subscription contract. */
  billingPolicy: ShopifySubscriptionBillingPolicy
  /** The date and time when the subscription contract was created. */
  createdAt: Scalars["DateTime"]["output"]
  /** The currency that's used for the subscription contract. */
  currencyCode: ShopifyCurrencyCode
  /** A list of the custom attributes to be added to the generated orders. */
  customAttributes: Array<ShopifyAttribute>
  /** The customer to whom the subscription contract belongs. */
  customer?: Maybe<ShopifyCustomer>
  /** The customer payment method that's used for the subscription contract. */
  customerPaymentMethod?: Maybe<ShopifyCustomerPaymentMethod>
  /** The delivery method for each billing of the subscription contract. */
  deliveryMethod?: Maybe<ShopifySubscriptionDeliveryMethod>
  /** The delivery policy associated with the subscription contract. */
  deliveryPolicy: ShopifySubscriptionDeliveryPolicy
  /** The delivery price for each billing of the subscription contract. */
  deliveryPrice: ShopifyMoneyV2
  /** The list of subscription discounts associated with the subscription contract. */
  discounts: ShopifySubscriptionManualDiscountConnection
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The last billing error type of the contract. */
  lastBillingAttemptErrorType?: Maybe<ShopifySubscriptionContractLastBillingErrorType>
  /** The current status of the last payment. */
  lastPaymentStatus?: Maybe<ShopifySubscriptionContractLastPaymentStatus>
  /**
   * The number of lines associated with the subscription contract.
   * @deprecated Use `linesCount` instead.
   */
  lineCount: Scalars["Int"]["output"]
  /** The list of subscription lines associated with the subscription contract. */
  lines: ShopifySubscriptionLineConnection
  /** The number of lines associated with the subscription contract. */
  linesCount?: Maybe<ShopifyCount>
  /**
   * The next billing date for the subscription contract. This field is managed by the apps.
   *         Alternatively you can utilize our
   *         [Billing Cycles APIs](https://shopify.dev/docs/apps/selling-strategies/subscriptions/billing-cycles),
   *         which provide auto-computed billing dates and additional functionalities.
   */
  nextBillingDate?: Maybe<Scalars["DateTime"]["output"]>
  /** The note field that will be applied to the generated orders. */
  note?: Maybe<Scalars["String"]["output"]>
  /** A list of the subscription contract's orders. */
  orders: ShopifyOrderConnection
  /** The order from which this contract originated. */
  originOrder?: Maybe<ShopifyOrder>
  /** The revision id of the contract. */
  revisionId: Scalars["UnsignedInt64"]["output"]
  /** The current status of the subscription contract. */
  status: ShopifySubscriptionContractSubscriptionStatus
  /** The date and time when the subscription contract was updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** Represents a Subscription Contract. */
export interface ShopifySubscriptionContractBillingAttemptsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents a Subscription Contract. */
export interface ShopifySubscriptionContractCustomerPaymentMethodArgs {
  showRevoked?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents a Subscription Contract. */
export interface ShopifySubscriptionContractDiscountsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents a Subscription Contract. */
export interface ShopifySubscriptionContractLinesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents a Subscription Contract. */
export interface ShopifySubscriptionContractOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `subscriptionContractActivate` mutation. */
export interface ShopifySubscriptionContractActivatePayload {
  __typename?: "SubscriptionContractActivatePayload"
  /** The new Subscription Contract object. */
  contract?: Maybe<ShopifySubscriptionContract>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionContractStatusUpdateUserError>
}

/** The input fields required to create a Subscription Contract. */
export interface ShopifySubscriptionContractAtomicCreateInput {
  /** The attributes used as input for the Subscription Draft. */
  contract: ShopifySubscriptionDraftInput
  /** The currency used for the subscription contract. */
  currencyCode: ShopifyCurrencyCode
  /** The ID of the customer to associate with the subscription contract. */
  customerId: Scalars["ID"]["input"]
  /** A list of discount redeem codes to apply to the subscription contract. */
  discountCodes?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** A list of new Subscription Lines. */
  lines: Array<ShopifySubscriptionAtomicLineInput>
  /** The next billing date for the subscription contract.This field is independent of billing cycles.It stores metadata set by the apps, and thus not managed by Shopify.It can be queried from subscriptionContract.nextBillingDate. */
  nextBillingDate: Scalars["DateTime"]["input"]
}

/** Return type for `subscriptionContractAtomicCreate` mutation. */
export interface ShopifySubscriptionContractAtomicCreatePayload {
  __typename?: "SubscriptionContractAtomicCreatePayload"
  /** The new Subscription Contract object. */
  contract?: Maybe<ShopifySubscriptionContract>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** Represents subscription contract common fields. */
export interface ShopifySubscriptionContractBase {
  /** The subscription app that the subscription contract is registered to. */
  app?: Maybe<ShopifyApp>
  /** The URL of the subscription contract page on the subscription app. */
  appAdminUrl?: Maybe<Scalars["URL"]["output"]>
  /** The currency that's used for the subscription contract. */
  currencyCode: ShopifyCurrencyCode
  /** A list of the custom attributes to be added to the generated orders. */
  customAttributes: Array<ShopifyAttribute>
  /** The customer to whom the subscription contract belongs. */
  customer?: Maybe<ShopifyCustomer>
  /** The customer payment method that's used for the subscription contract. */
  customerPaymentMethod?: Maybe<ShopifyCustomerPaymentMethod>
  /** The delivery method for each billing of the subscription contract. */
  deliveryMethod?: Maybe<ShopifySubscriptionDeliveryMethod>
  /** The delivery price for each billing of the subscription contract. */
  deliveryPrice: ShopifyMoneyV2
  /** The list of subscription discounts associated with the subscription contract. */
  discounts: ShopifySubscriptionManualDiscountConnection
  /**
   * The number of lines associated with the subscription contract.
   * @deprecated Use `linesCount` instead.
   */
  lineCount: Scalars["Int"]["output"]
  /** The list of subscription lines associated with the subscription contract. */
  lines: ShopifySubscriptionLineConnection
  /** The number of lines associated with the subscription contract. */
  linesCount?: Maybe<ShopifyCount>
  /** The note field that will be applied to the generated orders. */
  note?: Maybe<Scalars["String"]["output"]>
  /** A list of the subscription contract's orders. */
  orders: ShopifyOrderConnection
  /** The date and time when the subscription contract was updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** Represents subscription contract common fields. */
export interface ShopifySubscriptionContractBaseCustomerPaymentMethodArgs {
  showRevoked?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents subscription contract common fields. */
export interface ShopifySubscriptionContractBaseDiscountsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents subscription contract common fields. */
export interface ShopifySubscriptionContractBaseLinesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Represents subscription contract common fields. */
export interface ShopifySubscriptionContractBaseOrdersArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** Return type for `subscriptionContractCancel` mutation. */
export interface ShopifySubscriptionContractCancelPayload {
  __typename?: "SubscriptionContractCancelPayload"
  /** The new Subscription Contract object. */
  contract?: Maybe<ShopifySubscriptionContract>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionContractStatusUpdateUserError>
}

/** An auto-generated type for paginating through multiple SubscriptionContracts. */
export interface ShopifySubscriptionContractConnection {
  __typename?: "SubscriptionContractConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySubscriptionContractEdge>
  /** A list of nodes that are contained in SubscriptionContractEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifySubscriptionContract>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields required to create a Subscription Contract. */
export interface ShopifySubscriptionContractCreateInput {
  /** The attributes used as input for the Subscription Draft. */
  contract: ShopifySubscriptionDraftInput
  /** The currency used for the subscription contract. */
  currencyCode: ShopifyCurrencyCode
  /** The ID of the customer to associate with the subscription contract. */
  customerId: Scalars["ID"]["input"]
  /** The next billing date for the subscription contract. */
  nextBillingDate: Scalars["DateTime"]["input"]
}

/** Return type for `subscriptionContractCreate` mutation. */
export interface ShopifySubscriptionContractCreatePayload {
  __typename?: "SubscriptionContractCreatePayload"
  /** The Subscription Contract object. */
  draft?: Maybe<ShopifySubscriptionDraft>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** An auto-generated type which holds one SubscriptionContract and a cursor during pagination. */
export interface ShopifySubscriptionContractEdge {
  __typename?: "SubscriptionContractEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SubscriptionContractEdge. */
  node: ShopifySubscriptionContract
}

/** Possible error codes that can be returned by `SubscriptionContractUserError`. */
export type ShopifySubscriptionContractErrorCode =
  /** The input value is invalid. */
  "INVALID" | "%future added value"

/** Return type for `subscriptionContractExpire` mutation. */
export interface ShopifySubscriptionContractExpirePayload {
  __typename?: "SubscriptionContractExpirePayload"
  /** The new Subscription Contract object. */
  contract?: Maybe<ShopifySubscriptionContract>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionContractStatusUpdateUserError>
}

/** Return type for `subscriptionContractFail` mutation. */
export interface ShopifySubscriptionContractFailPayload {
  __typename?: "SubscriptionContractFailPayload"
  /** The new Subscription Contract object. */
  contract?: Maybe<ShopifySubscriptionContract>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionContractStatusUpdateUserError>
}

/** The possible values of the last billing error on a subscription contract. */
export type ShopifySubscriptionContractLastBillingErrorType =
  /** Subscription billing attempt error due to customer error. */
  | "CUSTOMER_ERROR"
  /** Subscription billing attempt error due to inventory error. */
  | "INVENTORY_ERROR"
  /** All other billing attempt errors. */
  | "OTHER"
  /** Subscription billing attempt error due to payment error. */
  | "PAYMENT_ERROR"
  | "%future added value"

/** The possible status values of the last payment on a subscription contract. */
export type ShopifySubscriptionContractLastPaymentStatus =
  /** Failed subscription billing attempt. */
  | "FAILED"
  /** Successful subscription billing attempt. */
  | "SUCCEEDED"
  | "%future added value"

/** Return type for `subscriptionContractPause` mutation. */
export interface ShopifySubscriptionContractPausePayload {
  __typename?: "SubscriptionContractPausePayload"
  /** The new Subscription Contract object. */
  contract?: Maybe<ShopifySubscriptionContract>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionContractStatusUpdateUserError>
}

/** The input fields required to create a Subscription Contract. */
export interface ShopifySubscriptionContractProductChangeInput {
  /** The price of the product. */
  currentPrice?: InputMaybe<Scalars["Decimal"]["input"]>
  /** The ID of the product variant the subscription line refers to. */
  productVariantId?: InputMaybe<Scalars["ID"]["input"]>
}

/** Return type for `subscriptionContractProductChange` mutation. */
export interface ShopifySubscriptionContractProductChangePayload {
  __typename?: "SubscriptionContractProductChangePayload"
  /** The new Subscription Contract object. */
  contract?: Maybe<ShopifySubscriptionContract>
  /** The updated Subscription Line. */
  lineUpdated?: Maybe<ShopifySubscriptionLine>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** Return type for `subscriptionContractSetNextBillingDate` mutation. */
export interface ShopifySubscriptionContractSetNextBillingDatePayload {
  __typename?: "SubscriptionContractSetNextBillingDatePayload"
  /** The updated Subscription Contract object. */
  contract?: Maybe<ShopifySubscriptionContract>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionContractUserError>
}

/** Possible error codes that can be returned by `SubscriptionContractStatusUpdateUserError`. */
export type ShopifySubscriptionContractStatusUpdateErrorCode =
  /** Subscription contract status cannot be changed once terminated. */
  | "CONTRACT_TERMINATED"
  /** The input value is invalid. */
  | "INVALID"
  | "%future added value"

/** Represents a subscription contract status update error. */
export interface ShopifySubscriptionContractStatusUpdateUserError
  extends ShopifyDisplayableError {
  __typename?: "SubscriptionContractStatusUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifySubscriptionContractStatusUpdateErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** The possible status values of a subscription. */
export type ShopifySubscriptionContractSubscriptionStatus =
  /** The contract is active and continuing per its policies. */
  | "ACTIVE"
  /** The contract was ended by an unplanned customer action. */
  | "CANCELLED"
  /** The contract has ended per the expected circumstances. All billing and deliverycycles of the subscriptions were executed. */
  | "EXPIRED"
  /** The contract ended because billing failed and no further billing attempts are expected. */
  | "FAILED"
  /** The contract is temporarily paused and is expected to resume in the future. */
  | "PAUSED"
  | "%future added value"

/** Return type for `subscriptionContractUpdate` mutation. */
export interface ShopifySubscriptionContractUpdatePayload {
  __typename?: "SubscriptionContractUpdatePayload"
  /** The Subscription Contract object. */
  draft?: Maybe<ShopifySubscriptionDraft>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** Represents a Subscription Contract error. */
export interface ShopifySubscriptionContractUserError
  extends ShopifyDisplayableError {
  __typename?: "SubscriptionContractUserError"
  /** The error code. */
  code?: Maybe<ShopifySubscriptionContractErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** The set of valid sort keys for the SubscriptionContracts query. */
export type ShopifySubscriptionContractsSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `status` value. */
  | "STATUS"
  /** Sort by the `updated_at` value. */
  | "UPDATED_AT"
  | "%future added value"

/** Represents a Subscription Line Pricing Cycle Adjustment. */
export interface ShopifySubscriptionCyclePriceAdjustment {
  __typename?: "SubscriptionCyclePriceAdjustment"
  /** Price adjustment type. */
  adjustmentType: ShopifySellingPlanPricingPolicyAdjustmentType
  /** Price adjustment value. */
  adjustmentValue: ShopifySellingPlanPricingPolicyAdjustmentValue
  /** The number of cycles required before this pricing policy applies. */
  afterCycle: Scalars["Int"]["output"]
  /** The computed price after the adjustments applied. */
  computedPrice: ShopifyMoneyV2
}

/** Describes the delivery method to use to get the physical goods to the customer. */
export type ShopifySubscriptionDeliveryMethod =
  | ShopifySubscriptionDeliveryMethodLocalDelivery
  | ShopifySubscriptionDeliveryMethodPickup
  | ShopifySubscriptionDeliveryMethodShipping

/**
 * Specifies delivery method fields for a subscription draft.
 * This is an input union: one, and only one, field can be provided.
 * The field provided will determine which delivery method is to be used.
 */
export interface ShopifySubscriptionDeliveryMethodInput {
  /** The input fields for the local delivery method. */
  localDelivery?: InputMaybe<ShopifySubscriptionDeliveryMethodLocalDeliveryInput>
  /** The input fields for the pickup delivery method. */
  pickup?: InputMaybe<ShopifySubscriptionDeliveryMethodPickupInput>
  /** The input fields for the shipping delivery method. */
  shipping?: InputMaybe<ShopifySubscriptionDeliveryMethodShippingInput>
}

/**
 * A subscription delivery method for local delivery.
 * The other subscription delivery methods can be found in the `SubscriptionDeliveryMethod` union type.
 */
export interface ShopifySubscriptionDeliveryMethodLocalDelivery {
  __typename?: "SubscriptionDeliveryMethodLocalDelivery"
  /** The address to deliver to. */
  address: ShopifyMailingAddress
  /** The details of the local delivery method to use. */
  localDeliveryOption: ShopifySubscriptionDeliveryMethodLocalDeliveryOption
}

/**
 * The input fields for a local delivery method.
 *
 * This input accepts partial input. When a field is not provided,
 * its prior value is left unchanged.
 */
export interface ShopifySubscriptionDeliveryMethodLocalDeliveryInput {
  /** The address to deliver to. */
  address?: InputMaybe<ShopifyMailingAddressInput>
  /** The details of the local delivery method to use. */
  localDeliveryOption?: InputMaybe<ShopifySubscriptionDeliveryMethodLocalDeliveryOptionInput>
}

/** The selected delivery option on a subscription contract. */
export interface ShopifySubscriptionDeliveryMethodLocalDeliveryOption {
  __typename?: "SubscriptionDeliveryMethodLocalDeliveryOption"
  /** A custom reference to the delivery method for use with automations. */
  code?: Maybe<Scalars["String"]["output"]>
  /** The details displayed to the customer to describe the local delivery option. */
  description?: Maybe<Scalars["String"]["output"]>
  /** The delivery instructions that the customer can provide to the merchant. */
  instructions?: Maybe<Scalars["String"]["output"]>
  /**
   * The phone number that the customer provided to the merchant.
   * Formatted using E.164 standard. For example, `+16135551111`.
   */
  phone: Scalars["String"]["output"]
  /** The presentment title of the local delivery option. */
  presentmentTitle?: Maybe<Scalars["String"]["output"]>
  /** The title of the local delivery option. */
  title?: Maybe<Scalars["String"]["output"]>
}

/** The input fields for local delivery option. */
export interface ShopifySubscriptionDeliveryMethodLocalDeliveryOptionInput {
  /** A custom reference to the delivery method for use with automations. */
  code?: InputMaybe<Scalars["String"]["input"]>
  /** The details displayed to the customer to describe the local delivery option. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /** The delivery instructions that the customer can provide to the merchant. */
  instructions?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The phone number that the customer must provide to the merchant.
   * Formatted using E.164 standard. For example, `+16135551111`.
   */
  phone: Scalars["String"]["input"]
  /** The presentment title of the local delivery option. */
  presentmentTitle?: InputMaybe<Scalars["String"]["input"]>
  /** The title of the local delivery option. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** A delivery method with a pickup option. */
export interface ShopifySubscriptionDeliveryMethodPickup {
  __typename?: "SubscriptionDeliveryMethodPickup"
  /** The details of the pickup delivery method to use. */
  pickupOption: ShopifySubscriptionDeliveryMethodPickupOption
}

/**
 * The input fields for a pickup delivery method.
 *
 * This input accepts partial input. When a field is not provided,
 * its prior value is left unchanged.
 */
export interface ShopifySubscriptionDeliveryMethodPickupInput {
  /** The details of the pickup method to use. */
  pickupOption?: InputMaybe<ShopifySubscriptionDeliveryMethodPickupOptionInput>
}

/** Represents the selected pickup option on a subscription contract. */
export interface ShopifySubscriptionDeliveryMethodPickupOption {
  __typename?: "SubscriptionDeliveryMethodPickupOption"
  /** A custom reference to the delivery method for use with automations. */
  code?: Maybe<Scalars["String"]["output"]>
  /** The details displayed to the customer to describe the pickup option. */
  description?: Maybe<Scalars["String"]["output"]>
  /** The location where the customer will pick up the merchandise. */
  location: ShopifyLocation
  /** The presentment title of the pickup option. */
  presentmentTitle?: Maybe<Scalars["String"]["output"]>
  /** The title of the pickup option. */
  title?: Maybe<Scalars["String"]["output"]>
}

/** The input fields for pickup option. */
export interface ShopifySubscriptionDeliveryMethodPickupOptionInput {
  /** A custom reference to the delivery method for use with automations. */
  code?: InputMaybe<Scalars["String"]["input"]>
  /** The details displayed to the customer to describe the pickup option. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of the pickup location. */
  locationId: Scalars["ID"]["input"]
  /** The presentment title of the pickup option. */
  presentmentTitle?: InputMaybe<Scalars["String"]["input"]>
  /** The title of the pickup option. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Represents a shipping delivery method: a mailing address and a shipping option. */
export interface ShopifySubscriptionDeliveryMethodShipping {
  __typename?: "SubscriptionDeliveryMethodShipping"
  /** The address to ship to. */
  address: ShopifyMailingAddress
  /** The details of the shipping method to use. */
  shippingOption: ShopifySubscriptionDeliveryMethodShippingOption
}

/**
 * Specifies shipping delivery method fields.
 *
 * This input accepts partial input. When a field is not provided,
 * its prior value is left unchanged.
 */
export interface ShopifySubscriptionDeliveryMethodShippingInput {
  /** The address to ship to. */
  address?: InputMaybe<ShopifyMailingAddressInput>
  /** The details of the shipping method to use. */
  shippingOption?: InputMaybe<ShopifySubscriptionDeliveryMethodShippingOptionInput>
}

/** Represents the selected shipping option on a subscription contract. */
export interface ShopifySubscriptionDeliveryMethodShippingOption {
  __typename?: "SubscriptionDeliveryMethodShippingOption"
  /**
   * The carrier service that's providing this shipping option.
   * This field isn't currently supported and returns null.
   * @deprecated This field has never been implemented.
   */
  carrierService?: Maybe<ShopifyDeliveryCarrierService>
  /** The code of the shipping option. */
  code?: Maybe<Scalars["String"]["output"]>
  /** The description of the shipping option. */
  description?: Maybe<Scalars["String"]["output"]>
  /** The presentment title of the shipping option. */
  presentmentTitle?: Maybe<Scalars["String"]["output"]>
  /** The title of the shipping option. */
  title?: Maybe<Scalars["String"]["output"]>
}

/** The input fields for shipping option. */
export interface ShopifySubscriptionDeliveryMethodShippingOptionInput {
  /** The carrier service ID of the shipping option. */
  carrierServiceId?: InputMaybe<Scalars["ID"]["input"]>
  /** The code of the shipping option. */
  code?: InputMaybe<Scalars["String"]["input"]>
  /** The description of the shipping option. */
  description?: InputMaybe<Scalars["String"]["input"]>
  /** The presentment title of the shipping option. */
  presentmentTitle?: InputMaybe<Scalars["String"]["input"]>
  /** The title of the shipping option. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** The delivery option for a subscription contract. */
export type ShopifySubscriptionDeliveryOption =
  | ShopifySubscriptionLocalDeliveryOption
  | ShopifySubscriptionPickupOption
  | ShopifySubscriptionShippingOption

/** The result of the query to fetch delivery options for the subscription contract. */
export type ShopifySubscriptionDeliveryOptionResult =
  | ShopifySubscriptionDeliveryOptionResultFailure
  | ShopifySubscriptionDeliveryOptionResultSuccess

/** A failure to find the available delivery options for a subscription contract. */
export interface ShopifySubscriptionDeliveryOptionResultFailure {
  __typename?: "SubscriptionDeliveryOptionResultFailure"
  /** The reason for the failure. */
  message?: Maybe<Scalars["String"]["output"]>
}

/** The delivery option for a subscription contract. */
export interface ShopifySubscriptionDeliveryOptionResultSuccess {
  __typename?: "SubscriptionDeliveryOptionResultSuccess"
  /** The available delivery options. */
  deliveryOptions: Array<ShopifySubscriptionDeliveryOption>
}

/** Represents a Subscription Delivery Policy. */
export interface ShopifySubscriptionDeliveryPolicy {
  __typename?: "SubscriptionDeliveryPolicy"
  /** The specific anchor dates upon which the delivery interval calculations should be made. */
  anchors: Array<ShopifySellingPlanAnchor>
  /** The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc). */
  interval: ShopifySellingPlanInterval
  /** The number of delivery intervals between deliveries. */
  intervalCount: Scalars["Int"]["output"]
}

/** The input fields for a Subscription Delivery Policy. */
export interface ShopifySubscriptionDeliveryPolicyInput {
  /** The specific anchor dates upon which the delivery interval calculations should be made. */
  anchors?: InputMaybe<Array<ShopifySellingPlanAnchorInput>>
  /** The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc). */
  interval: ShopifySellingPlanInterval
  /** The number of billing intervals between invoices. */
  intervalCount: Scalars["Int"]["input"]
}

/** Subscription draft discount types. */
export type ShopifySubscriptionDiscount =
  | ShopifySubscriptionAppliedCodeDiscount
  | ShopifySubscriptionManualDiscount

/** Represents what a particular discount reduces from a line price. */
export interface ShopifySubscriptionDiscountAllocation {
  __typename?: "SubscriptionDiscountAllocation"
  /** Allocation amount. */
  amount: ShopifyMoneyV2
  /** Discount that created the allocation. */
  discount: ShopifySubscriptionDiscount
}

/** An auto-generated type for paginating through multiple SubscriptionDiscounts. */
export interface ShopifySubscriptionDiscountConnection {
  __typename?: "SubscriptionDiscountConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySubscriptionDiscountEdge>
  /** A list of nodes that are contained in SubscriptionDiscountEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifySubscriptionDiscount>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one SubscriptionDiscount and a cursor during pagination. */
export interface ShopifySubscriptionDiscountEdge {
  __typename?: "SubscriptionDiscountEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SubscriptionDiscountEdge. */
  node: ShopifySubscriptionDiscount
}

/** Represents the subscription lines the discount applies on. */
export interface ShopifySubscriptionDiscountEntitledLines {
  __typename?: "SubscriptionDiscountEntitledLines"
  /** Specify whether the subscription discount will apply on all subscription lines. */
  all: Scalars["Boolean"]["output"]
  /** The list of subscription lines associated with the subscription discount. */
  lines: ShopifySubscriptionLineConnection
}

/** Represents the subscription lines the discount applies on. */
export interface ShopifySubscriptionDiscountEntitledLinesLinesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The value of the discount and how it will be applied. */
export interface ShopifySubscriptionDiscountFixedAmountValue {
  __typename?: "SubscriptionDiscountFixedAmountValue"
  /** The fixed amount value of the discount. */
  amount: ShopifyMoneyV2
  /** Whether the amount is applied per item. */
  appliesOnEachItem: Scalars["Boolean"]["output"]
}

/** The percentage value of the discount. */
export interface ShopifySubscriptionDiscountPercentageValue {
  __typename?: "SubscriptionDiscountPercentageValue"
  /** The percentage value of the discount. */
  percentage: Scalars["Int"]["output"]
}

/** The reason a discount on a subscription draft was rejected. */
export type ShopifySubscriptionDiscountRejectionReason =
  /** Discount is inactive. */
  | "CURRENTLY_INACTIVE"
  /** Given customer does not qualify for the discount. */
  | "CUSTOMER_NOT_ELIGIBLE"
  /** Customer usage limit has been reached. */
  | "CUSTOMER_USAGE_LIMIT_REACHED"
  /** Purchase type does not qualify for the discount. */
  | "INCOMPATIBLE_PURCHASE_TYPE"
  /** Internal error during discount code validation. */
  | "INTERNAL_ERROR"
  /** Discount code is not found. */
  | "NOT_FOUND"
  /** Discount does not apply to any of the given line items. */
  | "NO_ENTITLED_LINE_ITEMS"
  /** No applicable shipping lines. */
  | "NO_ENTITLED_SHIPPING_LINES"
  /** Purchase amount of items does not qualify for the discount. */
  | "PURCHASE_NOT_IN_RANGE"
  /** Quantity of items does not qualify for the discount. */
  | "QUANTITY_NOT_IN_RANGE"
  /** Discount usage limit has been reached. */
  | "USAGE_LIMIT_REACHED"
  | "%future added value"

/** The value of the discount and how it will be applied. */
export type ShopifySubscriptionDiscountValue =
  | ShopifySubscriptionDiscountFixedAmountValue
  | ShopifySubscriptionDiscountPercentageValue

/**
 * The `SubscriptionDraft` object represents a draft version of a
 * [subscription contract](https://shopify.dev/docs/api/admin-graphql/latest/objects/SubscriptionContract)
 * before it's committed. It serves as a staging area for making changes to an existing subscription or creating
 * a new one. The draft allows you to preview and modify various aspects of a subscription before applying the changes.
 *
 * Use the `SubscriptionDraft` object to:
 *
 * - Add, remove, or modify subscription lines and their quantities
 * - Manage discounts (add, remove, or update manual and code-based discounts)
 * - Configure delivery options and shipping methods
 * - Set up billing and delivery policies
 * - Manage customer payment methods
 * - Add custom attributes and notes to generated orders
 * - Configure billing cycles and next billing dates
 * - Preview the projected state of the subscription
 *
 * Each `SubscriptionDraft` object maintains a projected state that shows how the subscription will look after the changes
 * are committed. This allows you to preview the impact of your modifications before applying them. The draft can be
 * associated with an existing subscription contract (for modifications) or used to create a new subscription.
 *
 * The draft remains in a draft state until it's committed, at which point the changes are applied to the subscription
 * contract and the draft is no longer accessible.
 *
 * Learn more about
 * [how subscription contracts work](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts)
 * and how to [build](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/build-a-subscription-contract),
 * [update](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/update-a-subscription-contract), and
 * [combine](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/combine-subscription-contracts) subscription contracts.
 */
export interface ShopifySubscriptionDraft extends ShopifyNode {
  __typename?: "SubscriptionDraft"
  /** The billing cycle that the subscription contract will be associated with. */
  billingCycle?: Maybe<ShopifySubscriptionBillingCycle>
  /** The billing policy for the subscription contract. */
  billingPolicy: ShopifySubscriptionBillingPolicy
  /** The billing cycles of the contracts that will be concatenated to the subscription contract. */
  concatenatedBillingCycles: ShopifySubscriptionBillingCycleConnection
  /** The currency used for the subscription contract. */
  currencyCode: ShopifyCurrencyCode
  /** A list of the custom attributes to be added to the generated orders. */
  customAttributes: Array<ShopifyAttribute>
  /** The customer to whom the subscription contract belongs. */
  customer: ShopifyCustomer
  /** The customer payment method used for the subscription contract. */
  customerPaymentMethod?: Maybe<ShopifyCustomerPaymentMethod>
  /** The delivery method for each billing of the subscription contract. */
  deliveryMethod?: Maybe<ShopifySubscriptionDeliveryMethod>
  /** The available delivery options for a given delivery address. Returns `null` for pending requests. */
  deliveryOptions?: Maybe<ShopifySubscriptionDeliveryOptionResult>
  /** The delivery policy for the subscription contract. */
  deliveryPolicy: ShopifySubscriptionDeliveryPolicy
  /** The delivery price for each billing the subscription contract. */
  deliveryPrice?: Maybe<ShopifyMoneyV2>
  /** The list of subscription discounts which will be associated with the subscription contract. */
  discounts: ShopifySubscriptionDiscountConnection
  /** The list of subscription discounts to be added to the subscription contract. */
  discountsAdded: ShopifySubscriptionDiscountConnection
  /** The list of subscription discounts to be removed from the subscription contract. */
  discountsRemoved: ShopifySubscriptionDiscountConnection
  /** The list of subscription discounts to be updated on the subscription contract. */
  discountsUpdated: ShopifySubscriptionDiscountConnection
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The list of subscription lines which will be associated with the subscription contract. */
  lines: ShopifySubscriptionLineConnection
  /** The list of subscription lines to be added to the subscription contract. */
  linesAdded: ShopifySubscriptionLineConnection
  /** The list of subscription lines to be removed from the subscription contract. */
  linesRemoved: ShopifySubscriptionLineConnection
  /** The next billing date for the subscription contract. */
  nextBillingDate?: Maybe<Scalars["DateTime"]["output"]>
  /** The note field that will be applied to the generated orders. */
  note?: Maybe<Scalars["String"]["output"]>
  /** The original subscription contract. */
  originalContract?: Maybe<ShopifySubscriptionContract>
  /**
   * Available Shipping Options for a given delivery address. Returns NULL for pending requests.
   * @deprecated Use `deliveryOptions` instead.
   */
  shippingOptions?: Maybe<ShopifySubscriptionShippingOptionResult>
  /** The current status of the subscription contract. */
  status?: Maybe<ShopifySubscriptionContractSubscriptionStatus>
}

/**
 * The `SubscriptionDraft` object represents a draft version of a
 * [subscription contract](https://shopify.dev/docs/api/admin-graphql/latest/objects/SubscriptionContract)
 * before it's committed. It serves as a staging area for making changes to an existing subscription or creating
 * a new one. The draft allows you to preview and modify various aspects of a subscription before applying the changes.
 *
 * Use the `SubscriptionDraft` object to:
 *
 * - Add, remove, or modify subscription lines and their quantities
 * - Manage discounts (add, remove, or update manual and code-based discounts)
 * - Configure delivery options and shipping methods
 * - Set up billing and delivery policies
 * - Manage customer payment methods
 * - Add custom attributes and notes to generated orders
 * - Configure billing cycles and next billing dates
 * - Preview the projected state of the subscription
 *
 * Each `SubscriptionDraft` object maintains a projected state that shows how the subscription will look after the changes
 * are committed. This allows you to preview the impact of your modifications before applying them. The draft can be
 * associated with an existing subscription contract (for modifications) or used to create a new subscription.
 *
 * The draft remains in a draft state until it's committed, at which point the changes are applied to the subscription
 * contract and the draft is no longer accessible.
 *
 * Learn more about
 * [how subscription contracts work](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts)
 * and how to [build](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/build-a-subscription-contract),
 * [update](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/update-a-subscription-contract), and
 * [combine](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/combine-subscription-contracts) subscription contracts.
 */
export interface ShopifySubscriptionDraftConcatenatedBillingCyclesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifySubscriptionBillingCyclesSortKeys>
}

/**
 * The `SubscriptionDraft` object represents a draft version of a
 * [subscription contract](https://shopify.dev/docs/api/admin-graphql/latest/objects/SubscriptionContract)
 * before it's committed. It serves as a staging area for making changes to an existing subscription or creating
 * a new one. The draft allows you to preview and modify various aspects of a subscription before applying the changes.
 *
 * Use the `SubscriptionDraft` object to:
 *
 * - Add, remove, or modify subscription lines and their quantities
 * - Manage discounts (add, remove, or update manual and code-based discounts)
 * - Configure delivery options and shipping methods
 * - Set up billing and delivery policies
 * - Manage customer payment methods
 * - Add custom attributes and notes to generated orders
 * - Configure billing cycles and next billing dates
 * - Preview the projected state of the subscription
 *
 * Each `SubscriptionDraft` object maintains a projected state that shows how the subscription will look after the changes
 * are committed. This allows you to preview the impact of your modifications before applying them. The draft can be
 * associated with an existing subscription contract (for modifications) or used to create a new subscription.
 *
 * The draft remains in a draft state until it's committed, at which point the changes are applied to the subscription
 * contract and the draft is no longer accessible.
 *
 * Learn more about
 * [how subscription contracts work](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts)
 * and how to [build](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/build-a-subscription-contract),
 * [update](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/update-a-subscription-contract), and
 * [combine](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/combine-subscription-contracts) subscription contracts.
 */
export interface ShopifySubscriptionDraftCustomerPaymentMethodArgs {
  showRevoked?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `SubscriptionDraft` object represents a draft version of a
 * [subscription contract](https://shopify.dev/docs/api/admin-graphql/latest/objects/SubscriptionContract)
 * before it's committed. It serves as a staging area for making changes to an existing subscription or creating
 * a new one. The draft allows you to preview and modify various aspects of a subscription before applying the changes.
 *
 * Use the `SubscriptionDraft` object to:
 *
 * - Add, remove, or modify subscription lines and their quantities
 * - Manage discounts (add, remove, or update manual and code-based discounts)
 * - Configure delivery options and shipping methods
 * - Set up billing and delivery policies
 * - Manage customer payment methods
 * - Add custom attributes and notes to generated orders
 * - Configure billing cycles and next billing dates
 * - Preview the projected state of the subscription
 *
 * Each `SubscriptionDraft` object maintains a projected state that shows how the subscription will look after the changes
 * are committed. This allows you to preview the impact of your modifications before applying them. The draft can be
 * associated with an existing subscription contract (for modifications) or used to create a new subscription.
 *
 * The draft remains in a draft state until it's committed, at which point the changes are applied to the subscription
 * contract and the draft is no longer accessible.
 *
 * Learn more about
 * [how subscription contracts work](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts)
 * and how to [build](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/build-a-subscription-contract),
 * [update](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/update-a-subscription-contract), and
 * [combine](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/combine-subscription-contracts) subscription contracts.
 */
export interface ShopifySubscriptionDraftDeliveryOptionsArgs {
  deliveryAddress?: InputMaybe<ShopifyMailingAddressInput>
}

/**
 * The `SubscriptionDraft` object represents a draft version of a
 * [subscription contract](https://shopify.dev/docs/api/admin-graphql/latest/objects/SubscriptionContract)
 * before it's committed. It serves as a staging area for making changes to an existing subscription or creating
 * a new one. The draft allows you to preview and modify various aspects of a subscription before applying the changes.
 *
 * Use the `SubscriptionDraft` object to:
 *
 * - Add, remove, or modify subscription lines and their quantities
 * - Manage discounts (add, remove, or update manual and code-based discounts)
 * - Configure delivery options and shipping methods
 * - Set up billing and delivery policies
 * - Manage customer payment methods
 * - Add custom attributes and notes to generated orders
 * - Configure billing cycles and next billing dates
 * - Preview the projected state of the subscription
 *
 * Each `SubscriptionDraft` object maintains a projected state that shows how the subscription will look after the changes
 * are committed. This allows you to preview the impact of your modifications before applying them. The draft can be
 * associated with an existing subscription contract (for modifications) or used to create a new subscription.
 *
 * The draft remains in a draft state until it's committed, at which point the changes are applied to the subscription
 * contract and the draft is no longer accessible.
 *
 * Learn more about
 * [how subscription contracts work](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts)
 * and how to [build](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/build-a-subscription-contract),
 * [update](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/update-a-subscription-contract), and
 * [combine](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/combine-subscription-contracts) subscription contracts.
 */
export interface ShopifySubscriptionDraftDiscountsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `SubscriptionDraft` object represents a draft version of a
 * [subscription contract](https://shopify.dev/docs/api/admin-graphql/latest/objects/SubscriptionContract)
 * before it's committed. It serves as a staging area for making changes to an existing subscription or creating
 * a new one. The draft allows you to preview and modify various aspects of a subscription before applying the changes.
 *
 * Use the `SubscriptionDraft` object to:
 *
 * - Add, remove, or modify subscription lines and their quantities
 * - Manage discounts (add, remove, or update manual and code-based discounts)
 * - Configure delivery options and shipping methods
 * - Set up billing and delivery policies
 * - Manage customer payment methods
 * - Add custom attributes and notes to generated orders
 * - Configure billing cycles and next billing dates
 * - Preview the projected state of the subscription
 *
 * Each `SubscriptionDraft` object maintains a projected state that shows how the subscription will look after the changes
 * are committed. This allows you to preview the impact of your modifications before applying them. The draft can be
 * associated with an existing subscription contract (for modifications) or used to create a new subscription.
 *
 * The draft remains in a draft state until it's committed, at which point the changes are applied to the subscription
 * contract and the draft is no longer accessible.
 *
 * Learn more about
 * [how subscription contracts work](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts)
 * and how to [build](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/build-a-subscription-contract),
 * [update](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/update-a-subscription-contract), and
 * [combine](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/combine-subscription-contracts) subscription contracts.
 */
export interface ShopifySubscriptionDraftDiscountsAddedArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `SubscriptionDraft` object represents a draft version of a
 * [subscription contract](https://shopify.dev/docs/api/admin-graphql/latest/objects/SubscriptionContract)
 * before it's committed. It serves as a staging area for making changes to an existing subscription or creating
 * a new one. The draft allows you to preview and modify various aspects of a subscription before applying the changes.
 *
 * Use the `SubscriptionDraft` object to:
 *
 * - Add, remove, or modify subscription lines and their quantities
 * - Manage discounts (add, remove, or update manual and code-based discounts)
 * - Configure delivery options and shipping methods
 * - Set up billing and delivery policies
 * - Manage customer payment methods
 * - Add custom attributes and notes to generated orders
 * - Configure billing cycles and next billing dates
 * - Preview the projected state of the subscription
 *
 * Each `SubscriptionDraft` object maintains a projected state that shows how the subscription will look after the changes
 * are committed. This allows you to preview the impact of your modifications before applying them. The draft can be
 * associated with an existing subscription contract (for modifications) or used to create a new subscription.
 *
 * The draft remains in a draft state until it's committed, at which point the changes are applied to the subscription
 * contract and the draft is no longer accessible.
 *
 * Learn more about
 * [how subscription contracts work](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts)
 * and how to [build](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/build-a-subscription-contract),
 * [update](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/update-a-subscription-contract), and
 * [combine](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/combine-subscription-contracts) subscription contracts.
 */
export interface ShopifySubscriptionDraftDiscountsRemovedArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `SubscriptionDraft` object represents a draft version of a
 * [subscription contract](https://shopify.dev/docs/api/admin-graphql/latest/objects/SubscriptionContract)
 * before it's committed. It serves as a staging area for making changes to an existing subscription or creating
 * a new one. The draft allows you to preview and modify various aspects of a subscription before applying the changes.
 *
 * Use the `SubscriptionDraft` object to:
 *
 * - Add, remove, or modify subscription lines and their quantities
 * - Manage discounts (add, remove, or update manual and code-based discounts)
 * - Configure delivery options and shipping methods
 * - Set up billing and delivery policies
 * - Manage customer payment methods
 * - Add custom attributes and notes to generated orders
 * - Configure billing cycles and next billing dates
 * - Preview the projected state of the subscription
 *
 * Each `SubscriptionDraft` object maintains a projected state that shows how the subscription will look after the changes
 * are committed. This allows you to preview the impact of your modifications before applying them. The draft can be
 * associated with an existing subscription contract (for modifications) or used to create a new subscription.
 *
 * The draft remains in a draft state until it's committed, at which point the changes are applied to the subscription
 * contract and the draft is no longer accessible.
 *
 * Learn more about
 * [how subscription contracts work](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts)
 * and how to [build](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/build-a-subscription-contract),
 * [update](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/update-a-subscription-contract), and
 * [combine](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/combine-subscription-contracts) subscription contracts.
 */
export interface ShopifySubscriptionDraftDiscountsUpdatedArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `SubscriptionDraft` object represents a draft version of a
 * [subscription contract](https://shopify.dev/docs/api/admin-graphql/latest/objects/SubscriptionContract)
 * before it's committed. It serves as a staging area for making changes to an existing subscription or creating
 * a new one. The draft allows you to preview and modify various aspects of a subscription before applying the changes.
 *
 * Use the `SubscriptionDraft` object to:
 *
 * - Add, remove, or modify subscription lines and their quantities
 * - Manage discounts (add, remove, or update manual and code-based discounts)
 * - Configure delivery options and shipping methods
 * - Set up billing and delivery policies
 * - Manage customer payment methods
 * - Add custom attributes and notes to generated orders
 * - Configure billing cycles and next billing dates
 * - Preview the projected state of the subscription
 *
 * Each `SubscriptionDraft` object maintains a projected state that shows how the subscription will look after the changes
 * are committed. This allows you to preview the impact of your modifications before applying them. The draft can be
 * associated with an existing subscription contract (for modifications) or used to create a new subscription.
 *
 * The draft remains in a draft state until it's committed, at which point the changes are applied to the subscription
 * contract and the draft is no longer accessible.
 *
 * Learn more about
 * [how subscription contracts work](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts)
 * and how to [build](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/build-a-subscription-contract),
 * [update](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/update-a-subscription-contract), and
 * [combine](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/combine-subscription-contracts) subscription contracts.
 */
export interface ShopifySubscriptionDraftLinesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `SubscriptionDraft` object represents a draft version of a
 * [subscription contract](https://shopify.dev/docs/api/admin-graphql/latest/objects/SubscriptionContract)
 * before it's committed. It serves as a staging area for making changes to an existing subscription or creating
 * a new one. The draft allows you to preview and modify various aspects of a subscription before applying the changes.
 *
 * Use the `SubscriptionDraft` object to:
 *
 * - Add, remove, or modify subscription lines and their quantities
 * - Manage discounts (add, remove, or update manual and code-based discounts)
 * - Configure delivery options and shipping methods
 * - Set up billing and delivery policies
 * - Manage customer payment methods
 * - Add custom attributes and notes to generated orders
 * - Configure billing cycles and next billing dates
 * - Preview the projected state of the subscription
 *
 * Each `SubscriptionDraft` object maintains a projected state that shows how the subscription will look after the changes
 * are committed. This allows you to preview the impact of your modifications before applying them. The draft can be
 * associated with an existing subscription contract (for modifications) or used to create a new subscription.
 *
 * The draft remains in a draft state until it's committed, at which point the changes are applied to the subscription
 * contract and the draft is no longer accessible.
 *
 * Learn more about
 * [how subscription contracts work](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts)
 * and how to [build](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/build-a-subscription-contract),
 * [update](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/update-a-subscription-contract), and
 * [combine](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/combine-subscription-contracts) subscription contracts.
 */
export interface ShopifySubscriptionDraftLinesAddedArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `SubscriptionDraft` object represents a draft version of a
 * [subscription contract](https://shopify.dev/docs/api/admin-graphql/latest/objects/SubscriptionContract)
 * before it's committed. It serves as a staging area for making changes to an existing subscription or creating
 * a new one. The draft allows you to preview and modify various aspects of a subscription before applying the changes.
 *
 * Use the `SubscriptionDraft` object to:
 *
 * - Add, remove, or modify subscription lines and their quantities
 * - Manage discounts (add, remove, or update manual and code-based discounts)
 * - Configure delivery options and shipping methods
 * - Set up billing and delivery policies
 * - Manage customer payment methods
 * - Add custom attributes and notes to generated orders
 * - Configure billing cycles and next billing dates
 * - Preview the projected state of the subscription
 *
 * Each `SubscriptionDraft` object maintains a projected state that shows how the subscription will look after the changes
 * are committed. This allows you to preview the impact of your modifications before applying them. The draft can be
 * associated with an existing subscription contract (for modifications) or used to create a new subscription.
 *
 * The draft remains in a draft state until it's committed, at which point the changes are applied to the subscription
 * contract and the draft is no longer accessible.
 *
 * Learn more about
 * [how subscription contracts work](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts)
 * and how to [build](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/build-a-subscription-contract),
 * [update](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/update-a-subscription-contract), and
 * [combine](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/combine-subscription-contracts) subscription contracts.
 */
export interface ShopifySubscriptionDraftLinesRemovedArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/**
 * The `SubscriptionDraft` object represents a draft version of a
 * [subscription contract](https://shopify.dev/docs/api/admin-graphql/latest/objects/SubscriptionContract)
 * before it's committed. It serves as a staging area for making changes to an existing subscription or creating
 * a new one. The draft allows you to preview and modify various aspects of a subscription before applying the changes.
 *
 * Use the `SubscriptionDraft` object to:
 *
 * - Add, remove, or modify subscription lines and their quantities
 * - Manage discounts (add, remove, or update manual and code-based discounts)
 * - Configure delivery options and shipping methods
 * - Set up billing and delivery policies
 * - Manage customer payment methods
 * - Add custom attributes and notes to generated orders
 * - Configure billing cycles and next billing dates
 * - Preview the projected state of the subscription
 *
 * Each `SubscriptionDraft` object maintains a projected state that shows how the subscription will look after the changes
 * are committed. This allows you to preview the impact of your modifications before applying them. The draft can be
 * associated with an existing subscription contract (for modifications) or used to create a new subscription.
 *
 * The draft remains in a draft state until it's committed, at which point the changes are applied to the subscription
 * contract and the draft is no longer accessible.
 *
 * Learn more about
 * [how subscription contracts work](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts)
 * and how to [build](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/build-a-subscription-contract),
 * [update](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/update-a-subscription-contract), and
 * [combine](https://shopify.dev/docs/apps/build/purchase-options/subscriptions/contracts/combine-subscription-contracts) subscription contracts.
 */
export interface ShopifySubscriptionDraftShippingOptionsArgs {
  deliveryAddress?: InputMaybe<ShopifyMailingAddressInput>
}

/** Return type for `subscriptionDraftCommit` mutation. */
export interface ShopifySubscriptionDraftCommitPayload {
  __typename?: "SubscriptionDraftCommitPayload"
  /** The updated Subscription Contract object. */
  contract?: Maybe<ShopifySubscriptionContract>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** Return type for `subscriptionDraftDiscountAdd` mutation. */
export interface ShopifySubscriptionDraftDiscountAddPayload {
  __typename?: "SubscriptionDraftDiscountAddPayload"
  /** The added Subscription Discount. */
  discountAdded?: Maybe<ShopifySubscriptionManualDiscount>
  /** The Subscription Contract draft object. */
  draft?: Maybe<ShopifySubscriptionDraft>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** Return type for `subscriptionDraftDiscountCodeApply` mutation. */
export interface ShopifySubscriptionDraftDiscountCodeApplyPayload {
  __typename?: "SubscriptionDraftDiscountCodeApplyPayload"
  /** The added subscription discount. */
  appliedDiscount?: Maybe<ShopifySubscriptionAppliedCodeDiscount>
  /** The subscription contract draft object. */
  draft?: Maybe<ShopifySubscriptionDraft>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** Return type for `subscriptionDraftDiscountRemove` mutation. */
export interface ShopifySubscriptionDraftDiscountRemovePayload {
  __typename?: "SubscriptionDraftDiscountRemovePayload"
  /** The removed subscription draft discount. */
  discountRemoved?: Maybe<ShopifySubscriptionDiscount>
  /** The subscription contract draft object. */
  draft?: Maybe<ShopifySubscriptionDraft>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** Return type for `subscriptionDraftDiscountUpdate` mutation. */
export interface ShopifySubscriptionDraftDiscountUpdatePayload {
  __typename?: "SubscriptionDraftDiscountUpdatePayload"
  /** The updated Subscription Discount. */
  discountUpdated?: Maybe<ShopifySubscriptionManualDiscount>
  /** The Subscription Contract draft object. */
  draft?: Maybe<ShopifySubscriptionDraft>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** Possible error codes that can be returned by `SubscriptionDraftUserError`. */
export type ShopifySubscriptionDraftErrorCode =
  /** This line has already been removed. */
  | "ALREADY_REMOVED"
  /** Cannot commit a contract draft with this mutation. Please use SubscriptionDraftCommit. */
  | "BILLING_CYCLE_ABSENT"
  /** Billing policy cannot be updated for billing cycle contract drafts. */
  | "BILLING_CYCLE_CONTRACT_DRAFT_BILLING_POLICY_INVALID"
  /** Delivery policy cannot be updated for billing cycle contract drafts. */
  | "BILLING_CYCLE_CONTRACT_DRAFT_DELIVERY_POLICY_INVALID"
  /** Cannot commit a billing cycle contract draft with this mutation. Please use SubscriptionBillingCycleContractDraftCommit. */
  | "BILLING_CYCLE_PRESENT"
  /** The input value is blank. */
  | "BLANK"
  /** Subscription draft has been already committed. */
  | "COMMITTED"
  /** Contract draft must be a billing cycle contract draft for contract concatenation. */
  | "CONCATENATION_BILLING_CYCLE_CONTRACT_DRAFT_REQUIRED"
  /** Cannot concatenate a contract draft from subscriptionContractCreate mutation. */
  | "CONCATENATION_UNCOMMITTED_CONTRACT_DRAFT"
  /** Currency is not enabled. */
  | "CURRENCY_NOT_ENABLED"
  /** The customer doesn't exist. */
  | "CUSTOMER_DOES_NOT_EXIST"
  /** The payment method customer must be the same as the contract customer. */
  | "CUSTOMER_MISMATCH"
  /** Customer is scheduled for redaction or has been redacted. */
  | "CUSTOMER_REDACTED"
  /** The after cycle attribute must be unique between cycle discounts. */
  | "CYCLE_DISCOUNTS_UNIQUE_AFTER_CYCLE"
  /** Billing cycle selector cannot select billing cycle outside of index range. */
  | "CYCLE_INDEX_OUT_OF_RANGE"
  /** Billing cycle selector requires exactly one of index or date to be provided. */
  | "CYCLE_SELECTOR_VALIDATE_ONE_OF"
  /** Billing cycle selector cannot select billing cycle outside of start date range. */
  | "CYCLE_START_DATE_OUT_OF_RANGE"
  /** The delivery method can't be blank if any lines require shipping. */
  | "DELIVERY_METHOD_REQUIRED"
  /** The delivery policy interval must be a multiple of the billing policy interval. */
  | "DELIVERY_MUST_BE_MULTIPLE_OF_BILLING"
  /** Concatenated contracts cannot contain duplicate subscription contracts. */
  | "DUPLICATE_CONCATENATED_CONTRACTS"
  /** Maximum number of concatenated contracts on a billing cycle contract draft exceeded. */
  | "EXCEEDED_MAX_CONCATENATED_CONTRACTS"
  /** The input value should be greater than the minimum allowed value. */
  | "GREATER_THAN"
  /** The input value should be greater than or equal to the minimum value allowed. */
  | "GREATER_THAN_OR_EQUAL_TO"
  /** Cannot update a subscription contract with a current or upcoming billing cycle contract edit. */
  | "HAS_FUTURE_EDITS"
  /** The input value is invalid. */
  | "INVALID"
  /** The adjustment value must the same type as the adjustment type. */
  | "INVALID_ADJUSTMENT_TYPE"
  /** The adjustment value must be either fixed_value or percentage. */
  | "INVALID_ADJUSTMENT_VALUE"
  /** Next billing date is invalid. */
  | "INVALID_BILLING_DATE"
  /** Must have at least one line. */
  | "INVALID_LINES"
  /** Note length is too long. */
  | "INVALID_NOTE_LENGTH"
  /** The input value should be less than the maximum value allowed. */
  | "LESS_THAN"
  /** The input value should be less than or equal to the maximum value allowed. */
  | "LESS_THAN_OR_EQUAL_TO"
  /** Customer payment method is required. */
  | "MISSING_CUSTOMER_PAYMENT_METHOD"
  /** The local delivery options must be set for local delivery. */
  | "MISSING_LOCAL_DELIVERY_OPTIONS"
  /** The value is not an integer. */
  | "NOT_AN_INTEGER"
  /** Value is not in range. */
  | "NOT_IN_RANGE"
  /** Discount must have at least one entitled line. */
  | "NO_ENTITLED_LINES"
  /** Input value is not present. */
  | "PRESENCE"
  /** The maximum number of cycles must be greater than the minimum. */
  | "SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES"
  /** Another operation updated the contract concurrently as the commit was in progress. */
  | "STALE_CONTRACT"
  /** The input value is too long. */
  | "TOO_LONG"
  /** The input value is too short. */
  | "TOO_SHORT"
  /** Billing cycle selector cannot select upcoming billing cycle past limit. */
  | "UPCOMING_CYCLE_LIMIT_EXCEEDED"
  | "%future added value"

/** Return type for `subscriptionDraftFreeShippingDiscountAdd` mutation. */
export interface ShopifySubscriptionDraftFreeShippingDiscountAddPayload {
  __typename?: "SubscriptionDraftFreeShippingDiscountAddPayload"
  /** The added subscription free shipping discount. */
  discountAdded?: Maybe<ShopifySubscriptionManualDiscount>
  /** The subscription contract draft object. */
  draft?: Maybe<ShopifySubscriptionDraft>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** Return type for `subscriptionDraftFreeShippingDiscountUpdate` mutation. */
export interface ShopifySubscriptionDraftFreeShippingDiscountUpdatePayload {
  __typename?: "SubscriptionDraftFreeShippingDiscountUpdatePayload"
  /** The updated Subscription Discount. */
  discountUpdated?: Maybe<ShopifySubscriptionManualDiscount>
  /** The Subscription Contract draft object. */
  draft?: Maybe<ShopifySubscriptionDraft>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** The input fields required to create a Subscription Draft. */
export interface ShopifySubscriptionDraftInput {
  /** The billing policy for the subscription contract. */
  billingPolicy?: InputMaybe<ShopifySubscriptionBillingPolicyInput>
  /** A list of the custom attributes added to the subscription contract. */
  customAttributes?: InputMaybe<Array<ShopifyAttributeInput>>
  /** The delivery method for the subscription contract. */
  deliveryMethod?: InputMaybe<ShopifySubscriptionDeliveryMethodInput>
  /** The delivery policy for the subscription contract. */
  deliveryPolicy?: InputMaybe<ShopifySubscriptionDeliveryPolicyInput>
  /** The shipping price for each renewal the subscription contract. */
  deliveryPrice?: InputMaybe<Scalars["Decimal"]["input"]>
  /** The next billing date for the subscription contract. */
  nextBillingDate?: InputMaybe<Scalars["DateTime"]["input"]>
  /** The note field that will be applied to the generated orders. */
  note?: InputMaybe<Scalars["String"]["input"]>
  /** The ID of the payment method to be used for the subscription contract. */
  paymentMethodId?: InputMaybe<Scalars["ID"]["input"]>
  /** The current status of the subscription contract. */
  status?: InputMaybe<ShopifySubscriptionContractSubscriptionStatus>
}

/** Return type for `subscriptionDraftLineAdd` mutation. */
export interface ShopifySubscriptionDraftLineAddPayload {
  __typename?: "SubscriptionDraftLineAddPayload"
  /** The Subscription Contract draft object. */
  draft?: Maybe<ShopifySubscriptionDraft>
  /** The added Subscription Line. */
  lineAdded?: Maybe<ShopifySubscriptionLine>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** Return type for `subscriptionDraftLineRemove` mutation. */
export interface ShopifySubscriptionDraftLineRemovePayload {
  __typename?: "SubscriptionDraftLineRemovePayload"
  /** The list of updated subscription discounts impacted by the removed line. */
  discountsUpdated?: Maybe<Array<ShopifySubscriptionManualDiscount>>
  /** The Subscription Contract draft object. */
  draft?: Maybe<ShopifySubscriptionDraft>
  /** The removed Subscription Line. */
  lineRemoved?: Maybe<ShopifySubscriptionLine>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** Return type for `subscriptionDraftLineUpdate` mutation. */
export interface ShopifySubscriptionDraftLineUpdatePayload {
  __typename?: "SubscriptionDraftLineUpdatePayload"
  /** The Subscription Contract draft object. */
  draft?: Maybe<ShopifySubscriptionDraft>
  /** The updated Subscription Line. */
  lineUpdated?: Maybe<ShopifySubscriptionLine>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** Return type for `subscriptionDraftUpdate` mutation. */
export interface ShopifySubscriptionDraftUpdatePayload {
  __typename?: "SubscriptionDraftUpdatePayload"
  /** The Subscription Draft object. */
  draft?: Maybe<ShopifySubscriptionDraft>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifySubscriptionDraftUserError>
}

/** Represents a Subscription Draft error. */
export interface ShopifySubscriptionDraftUserError
  extends ShopifyDisplayableError {
  __typename?: "SubscriptionDraftUserError"
  /** The error code. */
  code?: Maybe<ShopifySubscriptionDraftErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** The input fields for a subscription free shipping discount on a contract. */
export interface ShopifySubscriptionFreeShippingDiscountInput {
  /** The maximum number of times the subscription free shipping discount will be applied on orders. */
  recurringCycleLimit?: InputMaybe<Scalars["Int"]["input"]>
  /** The title associated with the subscription free shipping discount. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Represents a Subscription Line. */
export interface ShopifySubscriptionLine {
  __typename?: "SubscriptionLine"
  /** The origin contract of the line if it was concatenated from another contract. */
  concatenatedOriginContract?: Maybe<ShopifySubscriptionContract>
  /** The price per unit for the subscription line in the contract's currency. */
  currentPrice: ShopifyMoneyV2
  /** List of custom attributes associated to the line item. */
  customAttributes: Array<ShopifyAttribute>
  /** Discount allocations. */
  discountAllocations: Array<ShopifySubscriptionDiscountAllocation>
  /** The unique ID. */
  id: Scalars["ID"]["output"]
  /** Total line price including all discounts. */
  lineDiscountedPrice: ShopifyMoneyV2
  /** Describe the price changes of the line over time. */
  pricingPolicy?: Maybe<ShopifySubscriptionPricingPolicy>
  /** The product ID associated with the subscription line. */
  productId?: Maybe<Scalars["ID"]["output"]>
  /** The quantity of the unit selected for the subscription line. */
  quantity: Scalars["Int"]["output"]
  /** Whether physical shipping is required for the variant. */
  requiresShipping: Scalars["Boolean"]["output"]
  /**
   * The selling plan ID associated to the line.
   *
   * Indicates which selling plan was used to create this
   * contract line initially. The selling plan ID is also used to
   * find the associated delivery profile.
   *
   * The subscription contract, subscription line, or selling plan might have
   * changed. As a result, the selling plan's attributes might not
   * match the information on the contract.
   */
  sellingPlanId?: Maybe<Scalars["ID"]["output"]>
  /**
   * The selling plan name associated to the line. This name describes
   * the order line items created from this subscription line
   * for both merchants and customers.
   *
   * The value can be different from the selling plan's name, because both
   * the selling plan's name and the subscription line's selling_plan_name
   * attribute can be updated independently.
   */
  sellingPlanName?: Maybe<Scalars["String"]["output"]>
  /** Variant SKU number of the item associated with the subscription line. */
  sku?: Maybe<Scalars["String"]["output"]>
  /** Whether the variant is taxable. */
  taxable: Scalars["Boolean"]["output"]
  /** Product title of the item associated with the subscription line. */
  title: Scalars["String"]["output"]
  /** The product variant ID associated with the subscription line. */
  variantId?: Maybe<Scalars["ID"]["output"]>
  /** The image associated with the line item's variant or product. */
  variantImage?: Maybe<ShopifyImage>
  /** Product variant title of the item associated with the subscription line. */
  variantTitle?: Maybe<Scalars["String"]["output"]>
}

/** An auto-generated type for paginating through multiple SubscriptionLines. */
export interface ShopifySubscriptionLineConnection {
  __typename?: "SubscriptionLineConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySubscriptionLineEdge>
  /** A list of nodes that are contained in SubscriptionLineEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifySubscriptionLine>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one SubscriptionLine and a cursor during pagination. */
export interface ShopifySubscriptionLineEdge {
  __typename?: "SubscriptionLineEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SubscriptionLineEdge. */
  node: ShopifySubscriptionLine
}

/** The input fields required to add a new subscription line to a contract. */
export interface ShopifySubscriptionLineInput {
  /** The price of the product. */
  currentPrice: Scalars["Decimal"]["input"]
  /** The custom attributes for this subscription line. */
  customAttributes?: InputMaybe<Array<ShopifyAttributeInput>>
  /** Describes expected price changes of the subscription line over time. */
  pricingPolicy?: InputMaybe<ShopifySubscriptionPricingPolicyInput>
  /** The ID of the product variant the subscription line refers to. */
  productVariantId: Scalars["ID"]["input"]
  /** The quantity of the product. */
  quantity: Scalars["Int"]["input"]
  /** The selling plan for the subscription line. */
  sellingPlanId?: InputMaybe<Scalars["ID"]["input"]>
  /**
   * The selling plan name for the subscription line.
   *
   * Defaults to using the selling plan's current name when not specified.
   */
  sellingPlanName?: InputMaybe<Scalars["String"]["input"]>
}

/** The input fields required to update a subscription line on a contract. */
export interface ShopifySubscriptionLineUpdateInput {
  /** The price of the product. */
  currentPrice?: InputMaybe<Scalars["Decimal"]["input"]>
  /** The custom attributes for this subscription line. */
  customAttributes?: InputMaybe<Array<ShopifyAttributeInput>>
  /** Describes expected price changes of the subscription line over time. */
  pricingPolicy?: InputMaybe<ShopifySubscriptionPricingPolicyInput>
  /** The ID of the product variant the subscription line refers to. */
  productVariantId?: InputMaybe<Scalars["ID"]["input"]>
  /** The quantity of the product. */
  quantity?: InputMaybe<Scalars["Int"]["input"]>
  /** The selling plan for the subscription line. */
  sellingPlanId?: InputMaybe<Scalars["ID"]["input"]>
  /** The selling plan name for the subscription line. */
  sellingPlanName?: InputMaybe<Scalars["String"]["input"]>
}

/** A local delivery option for a subscription contract. */
export interface ShopifySubscriptionLocalDeliveryOption {
  __typename?: "SubscriptionLocalDeliveryOption"
  /** The code of the local delivery option. */
  code: Scalars["String"]["output"]
  /** The description of the local delivery option. */
  description?: Maybe<Scalars["String"]["output"]>
  /** Whether a phone number is required for the local delivery option. */
  phoneRequired: Scalars["Boolean"]["output"]
  /** The presentment title of the local delivery option. */
  presentmentTitle?: Maybe<Scalars["String"]["output"]>
  /** The price of the local delivery option. */
  price?: Maybe<ShopifyMoneyV2>
  /** The title of the local delivery option. */
  title: Scalars["String"]["output"]
}

/** Custom subscription discount. */
export interface ShopifySubscriptionManualDiscount {
  __typename?: "SubscriptionManualDiscount"
  /** Entitled line items used to apply the subscription discount on. */
  entitledLines: ShopifySubscriptionDiscountEntitledLines
  /** The unique ID. */
  id: Scalars["ID"]["output"]
  /** The maximum number of times the subscription discount will be applied on orders. */
  recurringCycleLimit?: Maybe<Scalars["Int"]["output"]>
  /** The reason that the discount on the subscription draft is rejected. */
  rejectionReason?: Maybe<ShopifySubscriptionDiscountRejectionReason>
  /** Type of line the discount applies on. */
  targetType: ShopifyDiscountTargetType
  /** The title associated with the subscription discount. */
  title?: Maybe<Scalars["String"]["output"]>
  /** The type of the subscription discount. */
  type: ShopifyDiscountType
  /** The number of times the discount was applied. */
  usageCount: Scalars["Int"]["output"]
  /** The value of the subscription discount. */
  value: ShopifySubscriptionDiscountValue
}

/** An auto-generated type for paginating through multiple SubscriptionManualDiscounts. */
export interface ShopifySubscriptionManualDiscountConnection {
  __typename?: "SubscriptionManualDiscountConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifySubscriptionManualDiscountEdge>
  /** A list of nodes that are contained in SubscriptionManualDiscountEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifySubscriptionManualDiscount>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination. */
export interface ShopifySubscriptionManualDiscountEdge {
  __typename?: "SubscriptionManualDiscountEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of SubscriptionManualDiscountEdge. */
  node: ShopifySubscriptionManualDiscount
}

/** The input fields for the subscription lines the discount applies on. */
export interface ShopifySubscriptionManualDiscountEntitledLinesInput {
  /** Specify whether the subscription discount will apply on all subscription lines. */
  all?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The ID of the lines to add to or remove from the subscription discount. */
  lines?: InputMaybe<ShopifySubscriptionManualDiscountLinesInput>
}

/** The input fields for the fixed amount value of the discount and distribution on the lines. */
export interface ShopifySubscriptionManualDiscountFixedAmountInput {
  /** Fixed amount value. */
  amount?: InputMaybe<Scalars["Float"]["input"]>
  /** Whether the amount is intended per line item or once per subscription. */
  appliesOnEachItem?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** The input fields for a subscription discount on a contract. */
export interface ShopifySubscriptionManualDiscountInput {
  /** Entitled line items used to apply the subscription discount on. */
  entitledLines?: InputMaybe<ShopifySubscriptionManualDiscountEntitledLinesInput>
  /** The maximum number of times the subscription discount will be applied on orders. */
  recurringCycleLimit?: InputMaybe<Scalars["Int"]["input"]>
  /** The title associated with the subscription discount. */
  title?: InputMaybe<Scalars["String"]["input"]>
  /** Percentage or fixed amount value of the discount. */
  value?: InputMaybe<ShopifySubscriptionManualDiscountValueInput>
}

/** The input fields for line items that the discount refers to. */
export interface ShopifySubscriptionManualDiscountLinesInput {
  /** The ID of the lines to add to the subscription discount. */
  add?: InputMaybe<Array<Scalars["ID"]["input"]>>
  /** The ID of the lines to remove from the subscription discount. */
  remove?: InputMaybe<Array<Scalars["ID"]["input"]>>
}

/** The input fields for the discount value and its distribution. */
export interface ShopifySubscriptionManualDiscountValueInput {
  /** Fixed amount input in the currency defined by the subscription. */
  fixedAmount?: InputMaybe<ShopifySubscriptionManualDiscountFixedAmountInput>
  /** The percentage value of the discount. Value must be between 0 - 100. */
  percentage?: InputMaybe<Scalars["Int"]["input"]>
}

/** A pickup option to deliver a subscription contract. */
export interface ShopifySubscriptionPickupOption {
  __typename?: "SubscriptionPickupOption"
  /** The code of the pickup option. */
  code: Scalars["String"]["output"]
  /** The description of the pickup option. */
  description?: Maybe<Scalars["String"]["output"]>
  /** The pickup location. */
  location: ShopifyLocation
  /** Whether a phone number is required for the pickup option. */
  phoneRequired: Scalars["Boolean"]["output"]
  /** The estimated amount of time it takes for the pickup to be ready. For example, "Usually ready in 24 hours".). */
  pickupTime: Scalars["String"]["output"]
  /** The presentment title of the pickup option. */
  presentmentTitle?: Maybe<Scalars["String"]["output"]>
  /** The price of the pickup option. */
  price?: Maybe<ShopifyMoneyV2>
  /** The title of the pickup option. */
  title: Scalars["String"]["output"]
}

/** Represents a Subscription Line Pricing Policy. */
export interface ShopifySubscriptionPricingPolicy {
  __typename?: "SubscriptionPricingPolicy"
  /** The base price per unit for the subscription line in the contract's currency. */
  basePrice: ShopifyMoneyV2
  /** The adjustments per cycle for the subscription line. */
  cycleDiscounts: Array<ShopifySubscriptionCyclePriceAdjustment>
}

/** The input fields for an array containing all pricing changes for each billing cycle. */
export interface ShopifySubscriptionPricingPolicyCycleDiscountsInput {
  /** The price adjustment type. */
  adjustmentType: ShopifySellingPlanPricingPolicyAdjustmentType
  /** The price adjustment value. */
  adjustmentValue: ShopifySellingPlanPricingPolicyValueInput
  /** The cycle after which the pricing policy applies. */
  afterCycle: Scalars["Int"]["input"]
  /** The computed price after the adjustments are applied. */
  computedPrice: Scalars["Decimal"]["input"]
}

/** The input fields for expected price changes of the subscription line over time. */
export interface ShopifySubscriptionPricingPolicyInput {
  /** The base price per unit for the subscription line in the contract's currency. */
  basePrice: Scalars["Decimal"]["input"]
  /** An array containing all pricing changes for each billing cycle. */
  cycleDiscounts: Array<ShopifySubscriptionPricingPolicyCycleDiscountsInput>
}

/** A shipping option to deliver a subscription contract. */
export interface ShopifySubscriptionShippingOption {
  __typename?: "SubscriptionShippingOption"
  /**
   * The carrier service that's providing this shipping option.
   * This field isn't currently supported and returns null.
   * @deprecated This field has never been implemented.
   */
  carrierService?: Maybe<ShopifyDeliveryCarrierService>
  /** The code of the shipping option. */
  code: Scalars["String"]["output"]
  /** The description of the shipping option. */
  description?: Maybe<Scalars["String"]["output"]>
  /** If a phone number is required for the shipping option. */
  phoneRequired?: Maybe<Scalars["Boolean"]["output"]>
  /** The presentment title of the shipping option. */
  presentmentTitle?: Maybe<Scalars["String"]["output"]>
  /** The price of the shipping option. */
  price?: Maybe<ShopifyMoneyV2>
  /** The title of the shipping option. */
  title: Scalars["String"]["output"]
}

/** The result of the query to fetch shipping options for the subscription contract. */
export type ShopifySubscriptionShippingOptionResult =
  | ShopifySubscriptionShippingOptionResultFailure
  | ShopifySubscriptionShippingOptionResultSuccess

/** Failure determining available shipping options for delivery of a subscription contract. */
export interface ShopifySubscriptionShippingOptionResultFailure {
  __typename?: "SubscriptionShippingOptionResultFailure"
  /** Failure reason. */
  message?: Maybe<Scalars["String"]["output"]>
}

/** A shipping option for delivery of a subscription contract. */
export interface ShopifySubscriptionShippingOptionResultSuccess {
  __typename?: "SubscriptionShippingOptionResultSuccess"
  /** Available shipping options. */
  shippingOptions: Array<ShopifySubscriptionShippingOption>
}

/**
 * A suggested transaction. Suggested transaction are usually used in the context of refunds
 * and exchanges.
 */
export interface ShopifySuggestedOrderTransaction {
  __typename?: "SuggestedOrderTransaction"
  /** The masked account number associated with the payment method. */
  accountNumber?: Maybe<Scalars["String"]["output"]>
  /**
   * The amount of the transaction.
   * @deprecated Use `amountSet` instead.
   */
  amount: Scalars["Money"]["output"]
  /** The amount and currency of the suggested order transaction in shop and presentment currencies. */
  amountSet: ShopifyMoneyBag
  /** The human-readable payment gateway name suggested to process the transaction. */
  formattedGateway?: Maybe<Scalars["String"]["output"]>
  /** The suggested payment gateway used to process the transaction. */
  gateway?: Maybe<Scalars["String"]["output"]>
  /** Specifies the kind of the suggested order transaction. */
  kind: ShopifySuggestedOrderTransactionKind
  /**
   * Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
   * @deprecated Use `maximumRefundableSet` instead.
   */
  maximumRefundable?: Maybe<Scalars["Money"]["output"]>
  /** Specifies the available amount to refund on the gateway in shop and presentment currencies. Only available within SuggestedRefund. */
  maximumRefundableSet?: Maybe<ShopifyMoneyBag>
  /** The associated parent transaction, for example the authorization of a capture. */
  parentTransaction?: Maybe<ShopifyOrderTransaction>
  /** The associated payment details related to the transaction. */
  paymentDetails?: Maybe<ShopifyPaymentDetails>
}

/** Specifies the kind of the suggested order transaction. */
export type ShopifySuggestedOrderTransactionKind =
  /** A suggested refund transaction for an order. */
  "SUGGESTED_REFUND" | "%future added value"

/** The input fields for an exchange line item. */
export interface ShopifySuggestedOutcomeExchangeLineItemInput {
  /** The ID of the exchange line item. */
  id: Scalars["ID"]["input"]
  /** The quantity of the exchange line item. */
  quantity: Scalars["Int"]["input"]
}

/** The input fields for a return line item. */
export interface ShopifySuggestedOutcomeReturnLineItemInput {
  /** The ID of the return line item. */
  id: Scalars["ID"]["input"]
  /** The quantity of the return line item. */
  quantity: Scalars["Int"]["input"]
}

/** Represents a refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund. */
export interface ShopifySuggestedRefund {
  __typename?: "SuggestedRefund"
  /**
   * The total monetary value to be refunded.
   * @deprecated Use `amountSet` instead.
   */
  amount: Scalars["Money"]["output"]
  /** The total monetary value to be refunded in shop and presentment currencies. */
  amountSet: ShopifyMoneyBag
  /** The sum of all the discounted prices of the line items being refunded. */
  discountedSubtotalSet: ShopifyMoneyBag
  /**
   * The total monetary value available to refund.
   * @deprecated Use `maximumRefundableSet` instead.
   */
  maximumRefundable: Scalars["Money"]["output"]
  /** The total monetary value available to refund in shop and presentment currencies. */
  maximumRefundableSet: ShopifyMoneyBag
  /** A list of duties to be refunded from the order. */
  refundDuties: Array<ShopifyRefundDuty>
  /** A list of line items to be refunded, along with restock instructions. */
  refundLineItems: Array<ShopifyRefundLineItem>
  /** The shipping costs to be refunded from the order. */
  shipping: ShopifyShippingRefund
  /**
   * The sum of all the prices of the line items being refunded.
   * @deprecated Use `subtotalSet` instead.
   */
  subtotal: Scalars["Money"]["output"]
  /** The sum of all the prices of the line items being refunded in shop and presentment currencies. */
  subtotalSet: ShopifyMoneyBag
  /** A list of suggested refund methods. */
  suggestedRefundMethods: Array<ShopifySuggestedRefundMethod>
  /** A list of suggested order transactions. */
  suggestedTransactions: Array<ShopifySuggestedOrderTransaction>
  /** The total cart discount amount that was applied to all line items in this refund. */
  totalCartDiscountAmountSet: ShopifyMoneyBag
  /** The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive. */
  totalDutiesSet: ShopifyMoneyBag
  /** The sum of the taxes being refunded from the order in shop and presentment currencies. The value must be positive. */
  totalTaxSet: ShopifyMoneyBag
  /**
   * The sum of the taxes being refunded from the order. The value must be positive.
   * @deprecated Use `totalTaxSet` instead.
   */
  totalTaxes: Scalars["Money"]["output"]
}

/** Generic attributes of a suggested refund method. */
export interface ShopifySuggestedRefundMethod {
  /** The suggested amount to refund in shop and presentment currencies. */
  amount: ShopifyMoneyBag
  /** The maximum available amount to refund in shop and presentment currencies. */
  maximumRefundable: ShopifyMoneyBag
}

/** Represents a return financial outcome suggested by Shopify based on the items being reimbursed. You can then use the suggested outcome object to generate an actual refund or invoice for the return. */
export interface ShopifySuggestedReturnFinancialOutcome {
  __typename?: "SuggestedReturnFinancialOutcome"
  /** The sum of all the discounted prices of the line items being refunded. */
  discountedSubtotal: ShopifyMoneyBag
  /** The financial transfer details for the return outcome. */
  financialTransfer?: Maybe<ShopifyReturnOutcomeFinancialTransfer>
  /** The total monetary value available to refund in shop and presentment currencies. */
  maximumRefundable: ShopifyMoneyBag
  /** A list of duties to be refunded from the order. */
  refundDuties: Array<ShopifyRefundDuty>
  /** The shipping costs to be refunded from the order. */
  shipping: ShopifyShippingRefund
  /** The sum of all the additional fees being refunded in shop and presentment currencies. The value must be positive. */
  totalAdditionalFees: ShopifyMoneyBag
  /** The total cart discount amount that was applied to all line items in this refund. */
  totalCartDiscountAmount: ShopifyMoneyBag
  /** The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive. */
  totalDuties: ShopifyMoneyBag
  /** The sum of the taxes being refunded in shop and presentment currencies. The value must be positive. */
  totalTax: ShopifyMoneyBag
}

/** Represents a return refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund for the return. */
export interface ShopifySuggestedReturnRefund {
  __typename?: "SuggestedReturnRefund"
  /** The total monetary value to be refunded in shop and presentment currencies. */
  amount: ShopifyMoneyBag
  /** The sum of all the discounted prices of the line items being refunded. */
  discountedSubtotal: ShopifyMoneyBag
  /** The total monetary value available to refund in shop and presentment currencies. */
  maximumRefundable: ShopifyMoneyBag
  /** A list of duties to be refunded from the order. */
  refundDuties: Array<ShopifyRefundDuty>
  /** The shipping costs to be refunded from the order. */
  shipping: ShopifyShippingRefund
  /** The sum of all the prices of the line items being refunded in shop and presentment currencies. */
  subtotal: ShopifyMoneyBag
  /** A list of suggested order transactions. */
  suggestedTransactions: Array<ShopifySuggestedOrderTransaction>
  /** The total cart discount amount that was applied to all line items in this refund. */
  totalCartDiscountAmount: ShopifyMoneyBag
  /** The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive. */
  totalDuties: ShopifyMoneyBag
  /** The sum of the taxes being refunded in shop and presentment currencies. The value must be positive. */
  totalTax: ShopifyMoneyBag
}

/** The suggested values for a refund to store credit. */
export interface ShopifySuggestedStoreCreditRefund
  extends ShopifySuggestedRefundMethod {
  __typename?: "SuggestedStoreCreditRefund"
  /** The suggested amount to refund in shop and presentment currencies. */
  amount: ShopifyMoneyBag
  /** The suggested expiration date for the store credit. */
  expiresAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The maximum available amount to refund in shop and presentment currencies. */
  maximumRefundable: ShopifyMoneyBag
}

/** Return type for `tagsAdd` mutation. */
export interface ShopifyTagsAddPayload {
  __typename?: "TagsAddPayload"
  /** The object that was updated. */
  node?: Maybe<ShopifyNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `tagsRemove` mutation. */
export interface ShopifyTagsRemovePayload {
  __typename?: "TagsRemovePayload"
  /** The object that was updated. */
  node?: Maybe<ShopifyNode>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Tax app configuration of a merchant. */
export interface ShopifyTaxAppConfiguration {
  __typename?: "TaxAppConfiguration"
  /** State of the tax app configuration. */
  state: ShopifyTaxPartnerState
}

/** Return type for `taxAppConfigure` mutation. */
export interface ShopifyTaxAppConfigurePayload {
  __typename?: "TaxAppConfigurePayload"
  /** The updated tax app configuration. */
  taxAppConfiguration?: Maybe<ShopifyTaxAppConfiguration>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyTaxAppConfigureUserError>
}

/** An error that occurs during the execution of `TaxAppConfigure`. */
export interface ShopifyTaxAppConfigureUserError
  extends ShopifyDisplayableError {
  __typename?: "TaxAppConfigureUserError"
  /** The error code. */
  code?: Maybe<ShopifyTaxAppConfigureUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `TaxAppConfigureUserError`. */
export type ShopifyTaxAppConfigureUserErrorCode =
  /** Unable to update already active tax partner. */
  | "TAX_PARTNER_ALREADY_ACTIVE"
  /** Unable to find the tax partner record. */
  | "TAX_PARTNER_NOT_FOUND"
  /** Unable to update tax partner state. */
  | "TAX_PARTNER_STATE_UPDATE_FAILED"
  | "%future added value"

/** Available customer tax exemptions. */
export type ShopifyTaxExemption =
  /** This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in British Columbia. */
  | "CA_BC_COMMERCIAL_FISHERY_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in British Columbia. */
  | "CA_BC_CONTRACTOR_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in British Columbia. */
  | "CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in British Columbia. */
  | "CA_BC_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in British Columbia. */
  | "CA_BC_SUB_CONTRACTOR_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid DIPLOMAT_EXEMPTION in Canada. */
  | "CA_DIPLOMAT_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Manitoba. */
  | "CA_MB_COMMERCIAL_FISHERY_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Manitoba. */
  | "CA_MB_FARMER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Manitoba. */
  | "CA_MB_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Nova Scotia. */
  | "CA_NS_COMMERCIAL_FISHERY_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Nova Scotia. */
  | "CA_NS_FARMER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid PURCHASE_EXEMPTION in Ontario. */
  | "CA_ON_PURCHASE_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Prince Edward Island. */
  | "CA_PE_COMMERCIAL_FISHERY_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Saskatchewan. */
  | "CA_SK_COMMERCIAL_FISHERY_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in Saskatchewan. */
  | "CA_SK_CONTRACTOR_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Saskatchewan. */
  | "CA_SK_FARMER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in Saskatchewan. */
  | "CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Saskatchewan. */
  | "CA_SK_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in Saskatchewan. */
  | "CA_SK_SUB_CONTRACTOR_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid STATUS_CARD_EXEMPTION in Canada. */
  | "CA_STATUS_CARD_EXEMPTION"
  /** This customer is exempt from VAT for purchases within the EU that is shipping from outside of customer's country, as well as purchases from the EU to the UK. */
  | "EU_REVERSE_CHARGE_EXEMPTION_RULE"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alaska. */
  | "US_AK_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alabama. */
  | "US_AL_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arkansas. */
  | "US_AR_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arizona. */
  | "US_AZ_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in California. */
  | "US_CA_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Colorado. */
  | "US_CO_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Connecticut. */
  | "US_CT_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington DC. */
  | "US_DC_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Delaware. */
  | "US_DE_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Florida. */
  | "US_FL_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Georgia. */
  | "US_GA_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Hawaii. */
  | "US_HI_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Iowa. */
  | "US_IA_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Idaho. */
  | "US_ID_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Illinois. */
  | "US_IL_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Indiana. */
  | "US_IN_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kansas. */
  | "US_KS_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kentucky. */
  | "US_KY_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Louisiana. */
  | "US_LA_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Massachusetts. */
  | "US_MA_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maryland. */
  | "US_MD_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maine. */
  | "US_ME_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Michigan. */
  | "US_MI_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Minnesota. */
  | "US_MN_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Missouri. */
  | "US_MO_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Mississippi. */
  | "US_MS_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Montana. */
  | "US_MT_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Carolina. */
  | "US_NC_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Dakota. */
  | "US_ND_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nebraska. */
  | "US_NE_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Hampshire. */
  | "US_NH_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Jersey. */
  | "US_NJ_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Mexico. */
  | "US_NM_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nevada. */
  | "US_NV_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New York. */
  | "US_NY_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Ohio. */
  | "US_OH_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oklahoma. */
  | "US_OK_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oregon. */
  | "US_OR_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Pennsylvania. */
  | "US_PA_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Rhode Island. */
  | "US_RI_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Carolina. */
  | "US_SC_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Dakota. */
  | "US_SD_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Tennessee. */
  | "US_TN_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Texas. */
  | "US_TX_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Utah. */
  | "US_UT_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Virginia. */
  | "US_VA_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Vermont. */
  | "US_VT_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington. */
  | "US_WA_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wisconsin. */
  | "US_WI_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in West Virginia. */
  | "US_WV_RESELLER_EXEMPTION"
  /** This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wyoming. */
  | "US_WY_RESELLER_EXEMPTION"
  | "%future added value"

/** Represents a single tax applied to the associated line item. */
export interface ShopifyTaxLine {
  __typename?: "TaxLine"
  /** Whether the channel that submitted the tax line is liable for remitting. A value of null indicates unknown liability for this tax line. */
  channelLiable?: Maybe<Scalars["Boolean"]["output"]>
  /**
   * The amount of tax, in shop currency, after discounts and before returns.
   * @deprecated Use `priceSet` instead.
   */
  price: Scalars["Money"]["output"]
  /** The amount of tax, in shop and presentment currencies, after discounts and before returns. */
  priceSet: ShopifyMoneyBag
  /** The proportion of the line item price that the tax represents as a decimal. */
  rate?: Maybe<Scalars["Float"]["output"]>
  /** The proportion of the line item price that the tax represents as a percentage. */
  ratePercentage?: Maybe<Scalars["Float"]["output"]>
  /** The source of the tax. */
  source?: Maybe<Scalars["String"]["output"]>
  /** The name of the tax. */
  title: Scalars["String"]["output"]
}

/** State of the tax app configuration. */
export type ShopifyTaxPartnerState =
  /** App is configured and to be used for tax calculations. */
  | "ACTIVE"
  /** App is not configured. */
  | "PENDING"
  /** App is configured, but not used for tax calculations. */
  | "READY"
  | "%future added value"

/** The Taxonomy resource lets you access the categories, attributes and values of a taxonomy tree. */
export interface ShopifyTaxonomy {
  __typename?: "Taxonomy"
  /**
   * Returns the categories of the product taxonomy based on the arguments provided.
   * If a `search` argument is provided, then all categories that match the search query globally are returned.
   * If a `children_of` argument is provided, then all children of the specified category are returned.
   * If a `siblings_of` argument is provided, then all siblings of the specified category are returned.
   * If a `decendents_of` argument is provided, then all descendents of the specified category are returned.
   * If no arguments are provided, then all the top-level categories of the taxonomy are returned.
   */
  categories: ShopifyTaxonomyCategoryConnection
}

/** The Taxonomy resource lets you access the categories, attributes and values of a taxonomy tree. */
export interface ShopifyTaxonomyCategoriesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  childrenOf?: InputMaybe<Scalars["ID"]["input"]>
  descendantsOf?: InputMaybe<Scalars["ID"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  search?: InputMaybe<Scalars["String"]["input"]>
  siblingsOf?: InputMaybe<Scalars["ID"]["input"]>
}

/** A Shopify product taxonomy attribute. */
export interface ShopifyTaxonomyAttribute extends ShopifyNode {
  __typename?: "TaxonomyAttribute"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
}

/** The details of a specific product category within the [Shopify product taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17). */
export interface ShopifyTaxonomyCategory extends ShopifyNode {
  __typename?: "TaxonomyCategory"
  /** The IDs of the category's ancestor categories. */
  ancestorIds: Array<Scalars["ID"]["output"]>
  /** The attributes of the taxonomy category. */
  attributes: ShopifyTaxonomyCategoryAttributeConnection
  /** The IDs of the category's child categories. */
  childrenIds: Array<Scalars["ID"]["output"]>
  /** The full name of the taxonomy category. For example, Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds. */
  fullName: Scalars["String"]["output"]
  /** The globally-unique ID of the TaxonomyCategory. */
  id: Scalars["ID"]["output"]
  /** Whether the category is archived. The default value is `false`. */
  isArchived: Scalars["Boolean"]["output"]
  /** Whether the category is a leaf category. A leaf category doesn't have any subcategories beneath it. For example, in Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Treadmills, Dog Treadmills is a leaf category. The value is `true` when there are no `childrenIds` specified. */
  isLeaf: Scalars["Boolean"]["output"]
  /** Whether the category is a root category. A root category is at the top level of the category hierarchy and doesn't have a parent category. For example, Animals & Pet Supplies. The value is `true` when there's no `parentId` specified. */
  isRoot: Scalars["Boolean"]["output"]
  /** The level of the category in the taxonomy tree. Levels indicate the depth of the category from the root. For example, in Animals & Pet Supplies > Pet Supplies > Dog Supplies, Animals & Pet Supplies is at level 1, Animals & Pet Supplies > Pet Supplies is at level 2, and Animals & Pet Supplies > Pet Supplies > Dog Supplies is at level 3. */
  level: Scalars["Int"]["output"]
  /** The name of the taxonomy category. For example, Dog Beds. */
  name: Scalars["String"]["output"]
  /** The ID of the category's parent category. */
  parentId?: Maybe<Scalars["ID"]["output"]>
}

/** The details of a specific product category within the [Shopify product taxonomy](https://shopify.github.io/product-taxonomy/releases/unstable/?categoryId=sg-4-17-2-17). */
export interface ShopifyTaxonomyCategoryAttributesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
}

/** A product taxonomy attribute interface. */
export type ShopifyTaxonomyCategoryAttribute =
  | ShopifyTaxonomyAttribute
  | ShopifyTaxonomyChoiceListAttribute
  | ShopifyTaxonomyMeasurementAttribute

/** An auto-generated type for paginating through multiple TaxonomyCategoryAttributes. */
export interface ShopifyTaxonomyCategoryAttributeConnection {
  __typename?: "TaxonomyCategoryAttributeConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyTaxonomyCategoryAttributeEdge>
  /** A list of nodes that are contained in TaxonomyCategoryAttributeEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyTaxonomyCategoryAttribute>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one TaxonomyCategoryAttribute and a cursor during pagination. */
export interface ShopifyTaxonomyCategoryAttributeEdge {
  __typename?: "TaxonomyCategoryAttributeEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of TaxonomyCategoryAttributeEdge. */
  node: ShopifyTaxonomyCategoryAttribute
}

/** An auto-generated type for paginating through multiple TaxonomyCategories. */
export interface ShopifyTaxonomyCategoryConnection {
  __typename?: "TaxonomyCategoryConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyTaxonomyCategoryEdge>
  /** A list of nodes that are contained in TaxonomyCategoryEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyTaxonomyCategory>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one TaxonomyCategory and a cursor during pagination. */
export interface ShopifyTaxonomyCategoryEdge {
  __typename?: "TaxonomyCategoryEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of TaxonomyCategoryEdge. */
  node: ShopifyTaxonomyCategory
}

/** A Shopify product taxonomy choice list attribute. */
export interface ShopifyTaxonomyChoiceListAttribute extends ShopifyNode {
  __typename?: "TaxonomyChoiceListAttribute"
  /** The unique ID of the TaxonomyAttribute. */
  id: Scalars["ID"]["output"]
  /** The name of the product taxonomy attribute. For example, Color. */
  name: Scalars["String"]["output"]
  /** A list of values on the choice list attribute. */
  values: ShopifyTaxonomyValueConnection
}

/** A Shopify product taxonomy choice list attribute. */
export interface ShopifyTaxonomyChoiceListAttributeValuesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
}

/** A Shopify product taxonomy measurement attribute. */
export interface ShopifyTaxonomyMeasurementAttribute extends ShopifyNode {
  __typename?: "TaxonomyMeasurementAttribute"
  /** The unique ID of the TaxonomyAttribute. */
  id: Scalars["ID"]["output"]
  /** The name of the product taxonomy attribute. For example, Color. */
  name: Scalars["String"]["output"]
  /** The product taxonomy attribute options. */
  options: Array<ShopifyAttribute>
}

/** Represents a Shopify product taxonomy value. */
export interface ShopifyTaxonomyValue extends ShopifyNode {
  __typename?: "TaxonomyValue"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The name of the product taxonomy value. For example, Red. */
  name: Scalars["String"]["output"]
}

/** An auto-generated type for paginating through multiple TaxonomyValues. */
export interface ShopifyTaxonomyValueConnection {
  __typename?: "TaxonomyValueConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyTaxonomyValueEdge>
  /** A list of nodes that are contained in TaxonomyValueEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyTaxonomyValue>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one TaxonomyValue and a cursor during pagination. */
export interface ShopifyTaxonomyValueEdge {
  __typename?: "TaxonomyValueEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of TaxonomyValueEdge. */
  node: ShopifyTaxonomyValue
}

/**
 * A TenderTransaction represents a transaction with financial impact on a shop's balance sheet. A tender transaction always
 * represents actual money movement between a buyer and a shop. TenderTransactions can be used instead of OrderTransactions
 * for reconciling a shop's cash flow. A TenderTransaction is immutable once created.
 */
export interface ShopifyTenderTransaction extends ShopifyNode {
  __typename?: "TenderTransaction"
  /** The amount and currency of the tender transaction. */
  amount: ShopifyMoneyV2
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The order that's related to the tender transaction. This value is null if the order has been deleted. */
  order?: Maybe<ShopifyOrder>
  /** Information about the payment method used for the transaction. */
  paymentMethod?: Maybe<Scalars["String"]["output"]>
  /** Date and time when the transaction was processed. */
  processedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The remote gateway reference associated with the tender transaction. */
  remoteReference?: Maybe<Scalars["String"]["output"]>
  /** Whether the transaction is a test transaction. */
  test: Scalars["Boolean"]["output"]
  /** Information about the payment instrument used for the transaction. */
  transactionDetails?: Maybe<ShopifyTenderTransactionDetails>
  /** The staff member who performed the transaction. */
  user?: Maybe<ShopifyStaffMember>
}

/** An auto-generated type for paginating through multiple TenderTransactions. */
export interface ShopifyTenderTransactionConnection {
  __typename?: "TenderTransactionConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyTenderTransactionEdge>
  /** A list of nodes that are contained in TenderTransactionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyTenderTransaction>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Information about the credit card used for this transaction. */
export interface ShopifyTenderTransactionCreditCardDetails {
  __typename?: "TenderTransactionCreditCardDetails"
  /** The name of the company that issued the customer's credit card. Example: `Visa`. */
  creditCardCompany?: Maybe<Scalars["String"]["output"]>
  /** The customer's credit card number, with all digits except the last 4 redacted. Example: `•••• •••• •••• 1234` */
  creditCardNumber?: Maybe<Scalars["String"]["output"]>
}

/** Information about the payment instrument used for this transaction. */
export type ShopifyTenderTransactionDetails =
  ShopifyTenderTransactionCreditCardDetails

/** An auto-generated type which holds one TenderTransaction and a cursor during pagination. */
export interface ShopifyTenderTransactionEdge {
  __typename?: "TenderTransactionEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of TenderTransactionEdge. */
  node: ShopifyTenderTransaction
}

/** Return type for `themeCreate` mutation. */
export interface ShopifyThemeCreatePayload {
  __typename?: "ThemeCreatePayload"
  /** The theme that was created. */
  theme?: Maybe<ShopifyOnlineStoreTheme>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyThemeCreateUserError>
}

/** An error that occurs during the execution of `ThemeCreate`. */
export interface ShopifyThemeCreateUserError extends ShopifyDisplayableError {
  __typename?: "ThemeCreateUserError"
  /** The error code. */
  code?: Maybe<ShopifyThemeCreateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ThemeCreateUserError`. */
export type ShopifyThemeCreateUserErrorCode =
  /** Invalid theme role for theme creation. */
  | "INVALID_THEME_ROLE_FOR_THEME_CREATION"
  /** Must be a zip file. */
  | "INVALID_ZIP"
  /** Theme creation is not allowed for your shop's plan. */
  | "THEME_CREATION_NOT_ALLOWED_FOR_THEME_LIMITED_PLAN"
  /** Zip is empty. */
  | "ZIP_IS_EMPTY"
  /**
   * May not be used to fetch a file bigger
   *             than 50MB.
   */
  | "ZIP_TOO_LARGE"
  | "%future added value"

/** Return type for `themeDelete` mutation. */
export interface ShopifyThemeDeletePayload {
  __typename?: "ThemeDeletePayload"
  /** The ID of the deleted theme. */
  deletedThemeId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyThemeDeleteUserError>
}

/** An error that occurs during the execution of `ThemeDelete`. */
export interface ShopifyThemeDeleteUserError extends ShopifyDisplayableError {
  __typename?: "ThemeDeleteUserError"
  /** The error code. */
  code?: Maybe<ShopifyThemeDeleteUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ThemeDeleteUserError`. */
export type ShopifyThemeDeleteUserErrorCode =
  /** The record with the ID used as the input value couldn't be found. */
  "NOT_FOUND" | "%future added value"

/** The input fields for the file copy. */
export interface ShopifyThemeFilesCopyFileInput {
  /** The new file where the content is copied to. */
  dstFilename: Scalars["String"]["input"]
  /** The source file to copy from. */
  srcFilename: Scalars["String"]["input"]
}

/** Return type for `themeFilesCopy` mutation. */
export interface ShopifyThemeFilesCopyPayload {
  __typename?: "ThemeFilesCopyPayload"
  /** The resulting theme files. */
  copiedThemeFiles?: Maybe<Array<ShopifyOnlineStoreThemeFileOperationResult>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOnlineStoreThemeFilesUserErrors>
}

/** Return type for `themeFilesDelete` mutation. */
export interface ShopifyThemeFilesDeletePayload {
  __typename?: "ThemeFilesDeletePayload"
  /** The resulting theme files. */
  deletedThemeFiles?: Maybe<Array<ShopifyOnlineStoreThemeFileOperationResult>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOnlineStoreThemeFilesUserErrors>
}

/** Return type for `themeFilesUpsert` mutation. */
export interface ShopifyThemeFilesUpsertPayload {
  __typename?: "ThemeFilesUpsertPayload"
  /** The theme files write job triggered by the mutation. */
  job?: Maybe<ShopifyJob>
  /** The resulting theme files. */
  upsertedThemeFiles?: Maybe<Array<ShopifyOnlineStoreThemeFileOperationResult>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyOnlineStoreThemeFilesUserErrors>
}

/** Return type for `themePublish` mutation. */
export interface ShopifyThemePublishPayload {
  __typename?: "ThemePublishPayload"
  /** The theme that was published. */
  theme?: Maybe<ShopifyOnlineStoreTheme>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyThemePublishUserError>
}

/** An error that occurs during the execution of `ThemePublish`. */
export interface ShopifyThemePublishUserError extends ShopifyDisplayableError {
  __typename?: "ThemePublishUserError"
  /** The error code. */
  code?: Maybe<ShopifyThemePublishUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ThemePublishUserError`. */
export type ShopifyThemePublishUserErrorCode =
  /** Theme publishing is not available during install. */
  | "CANNOT_PUBLISH_THEME_DURING_INSTALL"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** Theme publishing is not allowed on this plan. */
  | "THEME_PUBLISH_NOT_AVAILABLE_FOR_THEME_LIMITED_PLAN"
  | "%future added value"

/** The role of the theme. */
export type ShopifyThemeRole =
  /** The theme is archived if a merchant changes their plan and exceeds the maximum number of themes allowed. Archived themes can be downloaded by merchant, but can not be customized or published until the plan is upgraded. */
  | "ARCHIVED"
  /** The theme is installed as a trial from the Shopify Theme Store. It can be customized using the theme editor, but access to the code editor and the ability to publish the theme are restricted until it is purchased. */
  | "DEMO"
  /** The theme is automatically created by the CLI for previewing purposes when in a development session. */
  | "DEVELOPMENT"
  /** The theme is locked if it is identified as unlicensed. Customization and publishing are restricted until the merchant resolves the licensing issue. */
  | "LOCKED"
  /** The currently published theme. There can only be one main theme at any time. */
  | "MAIN"
  /** The currently published theme that is only accessible to a mobile client. */
  | "MOBILE"
  /** The theme is currently not published. It can be transitioned to the main role if it is published by the merchant. */
  | "UNPUBLISHED"
  | "%future added value"

/** Return type for `themeUpdate` mutation. */
export interface ShopifyThemeUpdatePayload {
  __typename?: "ThemeUpdatePayload"
  /** The theme that was updated. */
  theme?: Maybe<ShopifyOnlineStoreTheme>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyThemeUpdateUserError>
}

/** An error that occurs during the execution of `ThemeUpdate`. */
export interface ShopifyThemeUpdateUserError extends ShopifyDisplayableError {
  __typename?: "ThemeUpdateUserError"
  /** The error code. */
  code?: Maybe<ShopifyThemeUpdateUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ThemeUpdateUserError`. */
export type ShopifyThemeUpdateUserErrorCode =
  /** The input value is invalid. */
  | "INVALID"
  /** The record with the ID used as the input value couldn't be found. */
  | "NOT_FOUND"
  /** The input value is too long. */
  | "TOO_LONG"
  | "%future added value"

/** A sale associated with a tip. */
export interface ShopifyTipSale extends ShopifySale {
  __typename?: "TipSale"
  /** The type of order action that the sale represents. */
  actionType: ShopifySaleActionType
  /** The unique ID for the sale. */
  id: Scalars["ID"]["output"]
  /** The line item for the associated sale. */
  lineItem: ShopifyLineItem
  /** The line type assocated with the sale. */
  lineType: ShopifySaleLineType
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars["Int"]["output"]>
  /** All individual taxes associated with the sale. */
  taxes: Array<ShopifySaleTax>
  /** The total sale amount after taxes and discounts. */
  totalAmount: ShopifyMoneyBag
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: ShopifyMoneyBag
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: ShopifyMoneyBag
  /** The total amount of taxes for the sale. */
  totalTaxAmount: ShopifyMoneyBag
}

/** Transaction fee related to an order transaction. */
export interface ShopifyTransactionFee extends ShopifyNode {
  __typename?: "TransactionFee"
  /** Amount of the fee. */
  amount: ShopifyMoneyV2
  /** Flat rate charge for a transaction. */
  flatFee: ShopifyMoneyV2
  /** Name of the credit card flat fee. */
  flatFeeName?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** Percentage charge. */
  rate: Scalars["Decimal"]["output"]
  /** Name of the credit card rate. */
  rateName?: Maybe<Scalars["String"]["output"]>
  /** Tax amount charged on the fee. */
  taxAmount: ShopifyMoneyV2
  /** Name of the type of fee. */
  type: Scalars["String"]["output"]
}

/** The set of valid sort keys for the Transaction query. */
export type ShopifyTransactionSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `expires_at` value. */
  | "EXPIRES_AT"
  | "%future added value"

/** Return type for `transactionVoid` mutation. */
export interface ShopifyTransactionVoidPayload {
  __typename?: "TransactionVoidPayload"
  /** The created void transaction. */
  transaction?: Maybe<ShopifyOrderTransaction>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyTransactionVoidUserError>
}

/** An error that occurs during the execution of `TransactionVoid`. */
export interface ShopifyTransactionVoidUserError
  extends ShopifyDisplayableError {
  __typename?: "TransactionVoidUserError"
  /** The error code. */
  code?: Maybe<ShopifyTransactionVoidUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `TransactionVoidUserError`. */
export type ShopifyTransactionVoidUserErrorCode =
  /** Transaction must be a successful authorization. */
  | "AUTH_NOT_SUCCESSFUL"
  /** Transaction must be voidable. */
  | "AUTH_NOT_VOIDABLE"
  /** A generic error occurred while attempting to void the transaction. */
  | "GENERIC_ERROR"
  /** Transaction does not exist. */
  | "TRANSACTION_NOT_FOUND"
  | "%future added value"

/** The set of valid sort keys for the Transfer query. */
export type ShopifyTransferSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `destination_name` value. */
  | "DESTINATION_NAME"
  /** Sort by the `expected_shipment_arrival` value. */
  | "EXPECTED_SHIPMENT_ARRIVAL"
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `name` value. */
  | "NAME"
  /** Sort by the `origin_name` value. */
  | "ORIGIN_NAME"
  /** Sort by the `source_name` value. */
  | "SOURCE_NAME"
  /** Sort by the `status` value. */
  | "STATUS"
  | "%future added value"

/** Translatable content of a resource's field. */
export interface ShopifyTranslatableContent {
  __typename?: "TranslatableContent"
  /** Hash digest representation of the content value. */
  digest?: Maybe<Scalars["String"]["output"]>
  /** The resource field that's being translated. */
  key: Scalars["String"]["output"]
  /** Locale of the content. */
  locale: Scalars["String"]["output"]
  /** Type of the translatable content. */
  type: ShopifyLocalizableContentType
  /** Content value. */
  value?: Maybe<Scalars["String"]["output"]>
}

/** A resource that has translatable fields. */
export interface ShopifyTranslatableResource {
  __typename?: "TranslatableResource"
  /** Nested translatable resources under the current resource. */
  nestedTranslatableResources: ShopifyTranslatableResourceConnection
  /** GID of the resource. */
  resourceId: Scalars["ID"]["output"]
  /** Translatable content. */
  translatableContent: Array<ShopifyTranslatableContent>
  /** Translatable content translations (includes unpublished locales). */
  translations: Array<ShopifyTranslation>
}

/** A resource that has translatable fields. */
export interface ShopifyTranslatableResourceNestedTranslatableResourcesArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  resourceType?: InputMaybe<ShopifyTranslatableResourceType>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** A resource that has translatable fields. */
export interface ShopifyTranslatableResourceTranslatableContentArgs {
  marketId?: InputMaybe<Scalars["ID"]["input"]>
}

/** A resource that has translatable fields. */
export interface ShopifyTranslatableResourceTranslationsArgs {
  locale: Scalars["String"]["input"]
  marketId?: InputMaybe<Scalars["ID"]["input"]>
  outdated?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple TranslatableResources. */
export interface ShopifyTranslatableResourceConnection {
  __typename?: "TranslatableResourceConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyTranslatableResourceEdge>
  /** A list of nodes that are contained in TranslatableResourceEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyTranslatableResource>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** An auto-generated type which holds one TranslatableResource and a cursor during pagination. */
export interface ShopifyTranslatableResourceEdge {
  __typename?: "TranslatableResourceEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of TranslatableResourceEdge. */
  node: ShopifyTranslatableResource
}

/** Specifies the type of resources that are translatable. */
export type ShopifyTranslatableResourceType =
  /** A blog post. Translatable fields: `title`, `body_html`, `summary_html`, `handle`, `meta_title`, `meta_description`. */
  | "ARTICLE"
  /** A blog. Translatable fields: `title`, `handle`, `meta_title`, `meta_description`. */
  | "BLOG"
  /** A product collection. Translatable fields: `title`, `body_html`, `handle`, `meta_title`, `meta_description`. */
  | "COLLECTION"
  /** The delivery method definition. For example, "Standard", or "Expedited". Translatable fields: `name`. */
  | "DELIVERY_METHOD_DEFINITION"
  /** An email template. Translatable fields: `title`, `body_html`. */
  | "EMAIL_TEMPLATE"
  /** A filter. Translatable fields: `label`. */
  | "FILTER"
  /** A link to direct users. Translatable fields: `title`. */
  | "LINK"
  /** A category of links. Translatable fields: `title`. */
  | "MENU"
  /** A Metafield. Translatable fields: `value`. */
  | "METAFIELD"
  /** A Metaobject. Translatable fields are determined by the Metaobject type. */
  | "METAOBJECT"
  /** An online store theme. Translatable fields: `dynamic keys based on theme data`. */
  | "ONLINE_STORE_THEME"
  /** A theme app embed. Translatable fields: `dynamic keys based on theme data`. */
  | "ONLINE_STORE_THEME_APP_EMBED"
  /** A theme json template. Translatable fields: `dynamic keys based on theme data`. */
  | "ONLINE_STORE_THEME_JSON_TEMPLATE"
  /** Locale file content of an online store theme. Translatable fields: `dynamic keys based on theme data`. */
  | "ONLINE_STORE_THEME_LOCALE_CONTENT"
  /** A theme json section group. Translatable fields: `dynamic keys based on theme data`. */
  | "ONLINE_STORE_THEME_SECTION_GROUP"
  /** A theme setting category. Translatable fields: `dynamic keys based on theme data`. */
  | "ONLINE_STORE_THEME_SETTINGS_CATEGORY"
  /** Shared static sections of an online store theme. Translatable fields: `dynamic keys based on theme data`. */
  | "ONLINE_STORE_THEME_SETTINGS_DATA_SECTIONS"
  /** A packing slip template. Translatable fields: `body`. */
  | "PACKING_SLIP_TEMPLATE"
  /** A page. Translatable fields: `title`, `body_html`, `handle`, `meta_title`, `meta_description`. */
  | "PAGE"
  /** A payment gateway. Translatable fields: `name`, `message`, `before_payment_instructions`. */
  | "PAYMENT_GATEWAY"
  /** An online store product. Translatable fields: `title`, `body_html`, `handle`, `product_type`, `meta_title`, `meta_description`. */
  | "PRODUCT"
  /**
   * An online store custom product property name. For example, "Size", "Color", or "Material".
   *         Translatable fields: `name`.
   */
  | "PRODUCT_OPTION"
  /** The product option value names. For example, "Red", "Blue", and "Green" for a "Color" option. Translatable fields: `name`. */
  | "PRODUCT_OPTION_VALUE"
  /** A selling plan. Translatable fields:`name`, `option1`, `option2`, `option3`, `description`. */
  | "SELLING_PLAN"
  /** A selling plan group. Translatable fields: `name`, `option1`, `option2`, `option3`. */
  | "SELLING_PLAN_GROUP"
  /** A shop. Translatable fields: `meta_title`, `meta_description`. */
  | "SHOP"
  /** A shop policy. Translatable fields: `body`. */
  | "SHOP_POLICY"
  | "%future added value"

/** Translation of a field of a resource. */
export interface ShopifyTranslation {
  __typename?: "Translation"
  /** On the resource that this translation belongs to, the reference to the value being translated. */
  key: Scalars["String"]["output"]
  /** ISO code of the translation locale. */
  locale: Scalars["String"]["output"]
  /** The market that the translation is specific to. Null value means the translation is available in all markets. */
  market?: Maybe<ShopifyMarket>
  /** Whether the original content has changed since this translation was updated. */
  outdated: Scalars["Boolean"]["output"]
  /** The date and time when the translation was updated. */
  updatedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** Translation value. */
  value?: Maybe<Scalars["String"]["output"]>
}

/** Possible error codes that can be returned by `TranslationUserError`. */
export type ShopifyTranslationErrorCode =
  /** The input value is blank. */
  | "BLANK"
  /** Translation value is invalid. */
  | "FAILS_RESOURCE_VALIDATION"
  /** The input value is invalid. */
  | "INVALID"
  /** Locale language code is invalid. */
  | "INVALID_CODE"
  /** Locale code format is invalid. */
  | "INVALID_FORMAT"
  /** Translation key is invalid. */
  | "INVALID_KEY_FOR_MODEL"
  /** The locale is missing on the market corresponding to the `marketId` argument. */
  | "INVALID_LOCALE_FOR_MARKET"
  /** Locale is invalid for the shop. */
  | "INVALID_LOCALE_FOR_SHOP"
  /** Market localizable content is invalid. */
  | "INVALID_MARKET_LOCALIZABLE_CONTENT"
  /** Translatable content is invalid. */
  | "INVALID_TRANSLATABLE_CONTENT"
  /** The handle is already taken for this resource. */
  | "INVALID_VALUE_FOR_HANDLE_TRANSLATION"
  /** The shop isn't allowed to operate on market custom content. */
  | "MARKET_CUSTOM_CONTENT_NOT_ALLOWED"
  /** The market corresponding to the `marketId` argument doesn't exist. */
  | "MARKET_DOES_NOT_EXIST"
  /** The market override locale creation failed. */
  | "MARKET_LOCALE_CREATION_FAILED"
  /** Resource does not exist. */
  | "RESOURCE_NOT_FOUND"
  /** The specified resource can't be customized for a market. */
  | "RESOURCE_NOT_MARKET_CUSTOMIZABLE"
  /** Resource is not translatable. */
  | "RESOURCE_NOT_TRANSLATABLE"
  /** Too many translation keys for the resource. */
  | "TOO_MANY_KEYS_FOR_RESOURCE"
  | "%future added value"

/** The input fields and values for creating or updating a translation. */
export interface ShopifyTranslationInput {
  /** On the resource that this translation belongs to, the reference to the value being translated. */
  key: Scalars["String"]["input"]
  /** ISO code of the locale being translated into. Only locales returned in `shopLocales` are valid. */
  locale: Scalars["String"]["input"]
  /** The ID of the market that the translation is specific to. Not specifying this field means that the translation will be available in all markets. */
  marketId?: InputMaybe<Scalars["ID"]["input"]>
  /** Hash digest representation of the content being translated. */
  translatableContentDigest: Scalars["String"]["input"]
  /** The value of the translation. */
  value: Scalars["String"]["input"]
}

/** Represents an error that happens during the execution of a translation mutation. */
export interface ShopifyTranslationUserError extends ShopifyDisplayableError {
  __typename?: "TranslationUserError"
  /** The error code. */
  code?: Maybe<ShopifyTranslationErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Return type for `translationsRegister` mutation. */
export interface ShopifyTranslationsRegisterPayload {
  __typename?: "TranslationsRegisterPayload"
  /** The translations that were created or updated. */
  translations?: Maybe<Array<ShopifyTranslation>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyTranslationUserError>
}

/** Return type for `translationsRemove` mutation. */
export interface ShopifyTranslationsRemovePayload {
  __typename?: "TranslationsRemovePayload"
  /** The translations that were deleted. */
  translations?: Maybe<Array<ShopifyTranslation>>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyTranslationUserError>
}

/** Represents a typed custom attribute. */
export interface ShopifyTypedAttribute {
  __typename?: "TypedAttribute"
  /** Key or name of the attribute. */
  key: Scalars["String"]["output"]
  /** Value of the attribute. */
  value: Scalars["String"]["output"]
}

/**
 * Specifies the
 * [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
 * that are associated with a related marketing campaign.
 */
export interface ShopifyUtmInput {
  /** The name of the UTM campaign. */
  campaign: Scalars["String"]["input"]
  /** The UTM campaign medium. */
  medium: Scalars["String"]["input"]
  /** The name of the website or application where the referral link exists. */
  source: Scalars["String"]["input"]
}

/** Represents a set of UTM parameters. */
export interface ShopifyUtmParameters {
  __typename?: "UTMParameters"
  /** The name of a marketing campaign. */
  campaign?: Maybe<Scalars["String"]["output"]>
  /** Identifies specific content in a marketing campaign. Used to differentiate between similar content or links in a marketing campaign to determine which is the most effective. */
  content?: Maybe<Scalars["String"]["output"]>
  /** The medium of a marketing campaign, such as a banner or email newsletter. */
  medium?: Maybe<Scalars["String"]["output"]>
  /** The source of traffic to the merchant's store, such as Google or an email newsletter. */
  source?: Maybe<Scalars["String"]["output"]>
  /** Paid search terms used by a marketing campaign. */
  term?: Maybe<Scalars["String"]["output"]>
}

/** The input fields that identify a unique valued metafield. */
export interface ShopifyUniqueMetafieldValueInput {
  /** The key for the metafield. */
  key: Scalars["String"]["input"]
  /** The container the metafield belongs to. If omitted, the app-reserved namespace will be used. */
  namespace?: InputMaybe<Scalars["String"]["input"]>
  /** The value of the metafield. */
  value: Scalars["String"]["input"]
}

/** The measurement used to calculate a unit price for a product variant (e.g. $9.99 / 100ml). */
export interface ShopifyUnitPriceMeasurement {
  __typename?: "UnitPriceMeasurement"
  /** The type of unit of measurement for the unit price measurement. */
  measuredType?: Maybe<ShopifyUnitPriceMeasurementMeasuredType>
  /** The quantity unit for the unit price measurement. */
  quantityUnit?: Maybe<ShopifyUnitPriceMeasurementMeasuredUnit>
  /** The quantity value for the unit price measurement. */
  quantityValue: Scalars["Float"]["output"]
  /** The reference unit for the unit price measurement. */
  referenceUnit?: Maybe<ShopifyUnitPriceMeasurementMeasuredUnit>
  /** The reference value for the unit price measurement. */
  referenceValue: Scalars["Int"]["output"]
}

/** The input fields for the measurement used to calculate a unit price for a product variant (e.g. $9.99 / 100ml). */
export interface ShopifyUnitPriceMeasurementInput {
  /** The quantity unit for the unit price measurement. */
  quantityUnit?: InputMaybe<ShopifyUnitPriceMeasurementMeasuredUnit>
  /** The quantity value for the unit price measurement. */
  quantityValue?: InputMaybe<Scalars["Float"]["input"]>
  /** The reference unit for the unit price measurement. */
  referenceUnit?: InputMaybe<ShopifyUnitPriceMeasurementMeasuredUnit>
  /** The reference value for the unit price measurement. */
  referenceValue?: InputMaybe<Scalars["Int"]["input"]>
}

/** The accepted types of unit of measurement. */
export type ShopifyUnitPriceMeasurementMeasuredType =
  /** Unit of measurements representing areas. */
  | "AREA"
  /** Unit of measurements representing counts. */
  | "COUNT"
  /** Unit of measurements representing lengths. */
  | "LENGTH"
  /** The type of measurement is unknown. Upgrade to the latest version of the API to resolve this type. */
  | "UNKNOWN"
  /** Unit of measurements representing volumes. */
  | "VOLUME"
  /** Unit of measurements representing weights. */
  | "WEIGHT"
  | "%future added value"

/** The valid units of measurement for a unit price measurement. */
export type ShopifyUnitPriceMeasurementMeasuredUnit =
  /** 100 centiliters equals 1 liter. */
  | "CL"
  /** 100 centimeters equals 1 meter. */
  | "CM"
  /** Imperial system unit of volume (U.S. customary unit). */
  | "FLOZ"
  /** 1 foot equals 12 inches. */
  | "FT"
  /** Imperial system unit of area. */
  | "FT2"
  /** Metric system unit of weight. */
  | "G"
  /** 1 gallon equals 128 fluid ounces (U.S. customary unit). */
  | "GAL"
  /** Imperial system unit of length. */
  | "IN"
  /** 1 item, a unit of count. */
  | "ITEM"
  /** 1 kilogram equals 1000 grams. */
  | "KG"
  /** Metric system unit of volume. */
  | "L"
  /** Imperial system unit of weight. */
  | "LB"
  /** Metric system unit of length. */
  | "M"
  /** Metric system unit of area. */
  | "M2"
  /** 1 cubic meter equals 1000 liters. */
  | "M3"
  /** 1000 milligrams equals 1 gram. */
  | "MG"
  /** 1000 milliliters equals 1 liter. */
  | "ML"
  /** 1000 millimeters equals 1 meter. */
  | "MM"
  /** 16 ounces equals 1 pound. */
  | "OZ"
  /** 1 pint equals 16 fluid ounces (U.S. customary unit). */
  | "PT"
  /** 1 quart equals 32 fluid ounces (U.S. customary unit). */
  | "QT"
  /** The unit of measurement is unknown. Upgrade to the latest version of the API to resolve this unit. */
  | "UNKNOWN"
  /** 1 yard equals 36 inches. */
  | "YD"
  | "%future added value"

/** Systems of weights and measures. */
export type ShopifyUnitSystem =
  /** Imperial system of weights and measures. */
  | "IMPERIAL_SYSTEM"
  /** Metric system of weights and measures. */
  | "METRIC_SYSTEM"
  | "%future added value"

/** This is represents new sale types that have been added in future API versions. You may update to a more recent API version to receive additional details about this sale. */
export interface ShopifyUnknownSale extends ShopifySale {
  __typename?: "UnknownSale"
  /** The type of order action that the sale represents. */
  actionType: ShopifySaleActionType
  /** The unique ID for the sale. */
  id: Scalars["ID"]["output"]
  /** The line type assocated with the sale. */
  lineType: ShopifySaleLineType
  /** The number of units either ordered or intended to be returned. */
  quantity?: Maybe<Scalars["Int"]["output"]>
  /** All individual taxes associated with the sale. */
  taxes: Array<ShopifySaleTax>
  /** The total sale amount after taxes and discounts. */
  totalAmount: ShopifyMoneyBag
  /** The total discounts allocated to the sale after taxes. */
  totalDiscountAmountAfterTaxes: ShopifyMoneyBag
  /** The total discounts allocated to the sale before taxes. */
  totalDiscountAmountBeforeTaxes: ShopifyMoneyBag
  /** The total amount of taxes for the sale. */
  totalTaxAmount: ShopifyMoneyBag
}

/** An unverified return line item. */
export interface ShopifyUnverifiedReturnLineItem
  extends ShopifyNode,
    ShopifyReturnLineItemType {
  __typename?: "UnverifiedReturnLineItem"
  /** A note from the customer that describes the item to be returned. Maximum length: 300 characters. */
  customerNote?: Maybe<Scalars["String"]["output"]>
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The quantity that can be processed. */
  processableQuantity: Scalars["Int"]["output"]
  /** The quantity that has been processed. */
  processedQuantity: Scalars["Int"]["output"]
  /** The quantity being returned. */
  quantity: Scalars["Int"]["output"]
  /** The quantity that can be refunded. */
  refundableQuantity: Scalars["Int"]["output"]
  /** The quantity that was refunded. */
  refundedQuantity: Scalars["Int"]["output"]
  /** The reason for returning the item. */
  returnReason: ShopifyReturnReason
  /** Additional information about the reason for the return. Maximum length: 255 characters. */
  returnReasonNote: Scalars["String"]["output"]
  /** The unit price of the unverified return line item. */
  unitPrice: ShopifyMoneyV2
  /** The quantity that has't been processed. */
  unprocessedQuantity: Scalars["Int"]["output"]
}

/** The input fields required to update a media object. */
export interface ShopifyUpdateMediaInput {
  /** The alt text associated to the media. */
  alt?: InputMaybe<Scalars["String"]["input"]>
  /** Specifies the media to update. */
  id: Scalars["ID"]["input"]
  /** The source from which to update the media preview image. May be an external URL or staged upload URL. */
  previewImageSource?: InputMaybe<Scalars["String"]["input"]>
}

/** The URL redirect for the online store. */
export interface ShopifyUrlRedirect extends ShopifyNode {
  __typename?: "UrlRedirect"
  /** The ID of the URL redirect. */
  id: Scalars["ID"]["output"]
  /** The old path to be redirected from. When the user visits this path, they will be redirected to the target location. */
  path: Scalars["String"]["output"]
  /** The target location where the user will be redirected to. */
  target: Scalars["String"]["output"]
}

/** Return type for `urlRedirectBulkDeleteAll` mutation. */
export interface ShopifyUrlRedirectBulkDeleteAllPayload {
  __typename?: "UrlRedirectBulkDeleteAllPayload"
  /** The asynchronous job removing the redirects. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** Return type for `urlRedirectBulkDeleteByIds` mutation. */
export interface ShopifyUrlRedirectBulkDeleteByIdsPayload {
  __typename?: "UrlRedirectBulkDeleteByIdsPayload"
  /** The asynchronous job removing the redirects. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUrlRedirectBulkDeleteByIdsUserError>
}

/** An error that occurs during the execution of `UrlRedirectBulkDeleteByIds`. */
export interface ShopifyUrlRedirectBulkDeleteByIdsUserError
  extends ShopifyDisplayableError {
  __typename?: "UrlRedirectBulkDeleteByIdsUserError"
  /** The error code. */
  code?: Maybe<ShopifyUrlRedirectBulkDeleteByIdsUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `UrlRedirectBulkDeleteByIdsUserError`. */
export type ShopifyUrlRedirectBulkDeleteByIdsUserErrorCode =
  /**
   * You must pass one or more [`URLRedirect`](
   *             https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect
   *           ) object IDs.
   */
  "IDS_EMPTY" | "%future added value"

/** Return type for `urlRedirectBulkDeleteBySavedSearch` mutation. */
export interface ShopifyUrlRedirectBulkDeleteBySavedSearchPayload {
  __typename?: "UrlRedirectBulkDeleteBySavedSearchPayload"
  /** The asynchronous job removing the redirects. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUrlRedirectBulkDeleteBySavedSearchUserError>
}

/** An error that occurs during the execution of `UrlRedirectBulkDeleteBySavedSearch`. */
export interface ShopifyUrlRedirectBulkDeleteBySavedSearchUserError
  extends ShopifyDisplayableError {
  __typename?: "UrlRedirectBulkDeleteBySavedSearchUserError"
  /** The error code. */
  code?: Maybe<ShopifyUrlRedirectBulkDeleteBySavedSearchUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `UrlRedirectBulkDeleteBySavedSearchUserError`. */
export type ShopifyUrlRedirectBulkDeleteBySavedSearchUserErrorCode =
  /** The saved search's query cannot match all entries or be empty. */
  | "INVALID_SAVED_SEARCH_QUERY"
  /** Saved search not found. */
  | "SAVED_SEARCH_NOT_FOUND"
  | "%future added value"

/** Return type for `urlRedirectBulkDeleteBySearch` mutation. */
export interface ShopifyUrlRedirectBulkDeleteBySearchPayload {
  __typename?: "UrlRedirectBulkDeleteBySearchPayload"
  /** The asynchronous job removing the redirects. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUrlRedirectBulkDeleteBySearchUserError>
}

/** An error that occurs during the execution of `UrlRedirectBulkDeleteBySearch`. */
export interface ShopifyUrlRedirectBulkDeleteBySearchUserError
  extends ShopifyDisplayableError {
  __typename?: "UrlRedirectBulkDeleteBySearchUserError"
  /** The error code. */
  code?: Maybe<ShopifyUrlRedirectBulkDeleteBySearchUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `UrlRedirectBulkDeleteBySearchUserError`. */
export type ShopifyUrlRedirectBulkDeleteBySearchUserErrorCode =
  /** Invalid search string. */
  "INVALID_SEARCH_ARGUMENT" | "%future added value"

/** An auto-generated type for paginating through multiple UrlRedirects. */
export interface ShopifyUrlRedirectConnection {
  __typename?: "UrlRedirectConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyUrlRedirectEdge>
  /** A list of nodes that are contained in UrlRedirectEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyUrlRedirect>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `urlRedirectCreate` mutation. */
export interface ShopifyUrlRedirectCreatePayload {
  __typename?: "UrlRedirectCreatePayload"
  /** The created redirect. */
  urlRedirect?: Maybe<ShopifyUrlRedirect>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUrlRedirectUserError>
}

/** Return type for `urlRedirectDelete` mutation. */
export interface ShopifyUrlRedirectDeletePayload {
  __typename?: "UrlRedirectDeletePayload"
  /** The ID of the deleted redirect. */
  deletedUrlRedirectId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUrlRedirectUserError>
}

/** An auto-generated type which holds one UrlRedirect and a cursor during pagination. */
export interface ShopifyUrlRedirectEdge {
  __typename?: "UrlRedirectEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of UrlRedirectEdge. */
  node: ShopifyUrlRedirect
}

/** Possible error codes that can be returned by `UrlRedirectUserError`. */
export type ShopifyUrlRedirectErrorCode =
  /** Redirect could not be created. */
  | "CREATE_FAILED"
  /** Redirect could not be deleted. */
  | "DELETE_FAILED"
  /** Redirect does not exist. */
  | "DOES_NOT_EXIST"
  /** Redirect could not be updated. */
  | "UPDATE_FAILED"
  | "%future added value"

/**
 * A request to import a [`URLRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object
 * into the Online Store channel. Apps can use this to query the state of an `UrlRedirectImport` request.
 *
 * For more information, see [`url-redirect`](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect)s.
 */
export interface ShopifyUrlRedirectImport extends ShopifyNode {
  __typename?: "UrlRedirectImport"
  /** The number of rows in the file. */
  count?: Maybe<Scalars["Int"]["output"]>
  /** The number of redirects created from the import. */
  createdCount?: Maybe<Scalars["Int"]["output"]>
  /** The number of redirects that failed to be imported. */
  failedCount?: Maybe<Scalars["Int"]["output"]>
  /** Whether the import is finished. */
  finished: Scalars["Boolean"]["output"]
  /** The date and time when the import finished. */
  finishedAt?: Maybe<Scalars["DateTime"]["output"]>
  /** The ID of the `UrlRedirectImport` object. */
  id: Scalars["ID"]["output"]
  /** A list of up to three previews of the URL redirects to be imported. */
  previewRedirects: Array<ShopifyUrlRedirectImportPreview>
  /** The number of redirects updated during the import. */
  updatedCount?: Maybe<Scalars["Int"]["output"]>
}

/** Return type for `urlRedirectImportCreate` mutation. */
export interface ShopifyUrlRedirectImportCreatePayload {
  __typename?: "UrlRedirectImportCreatePayload"
  /** The created `URLRedirectImport` object. */
  urlRedirectImport?: Maybe<ShopifyUrlRedirectImport>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUrlRedirectImportUserError>
}

/** Possible error codes that can be returned by `UrlRedirectImportUserError`. */
export type ShopifyUrlRedirectImportErrorCode =
  /** The import has already completed. */
  | "ALREADY_IMPORTED"
  /** CSV file does not exist at given URL. */
  | "FILE_DOES_NOT_EXIST"
  /** The import is already in progress. */
  | "IN_PROGRESS"
  /** URL redirect import not found. */
  | "NOT_FOUND"
  | "%future added value"

/** A preview of a URL redirect import row. */
export interface ShopifyUrlRedirectImportPreview {
  __typename?: "UrlRedirectImportPreview"
  /** The old path to be redirected from. When the user visits this path, they will be redirected to the target location. */
  path: Scalars["String"]["output"]
  /** The target location where the user will be redirected to. */
  target: Scalars["String"]["output"]
}

/** Return type for `urlRedirectImportSubmit` mutation. */
export interface ShopifyUrlRedirectImportSubmitPayload {
  __typename?: "UrlRedirectImportSubmitPayload"
  /** The asynchronous job importing the redirects. */
  job?: Maybe<ShopifyJob>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUrlRedirectImportUserError>
}

/** Represents an error that happens during execution of a redirect import mutation. */
export interface ShopifyUrlRedirectImportUserError
  extends ShopifyDisplayableError {
  __typename?: "UrlRedirectImportUserError"
  /** The error code. */
  code?: Maybe<ShopifyUrlRedirectImportErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** The input fields to create or update a URL redirect. */
export interface ShopifyUrlRedirectInput {
  /** The old path to be redirected from. When the user visits this path, they will be redirected to the target location. */
  path?: InputMaybe<Scalars["String"]["input"]>
  /** The target location where the user will be redirected to. */
  target?: InputMaybe<Scalars["String"]["input"]>
}

/** The set of valid sort keys for the UrlRedirect query. */
export type ShopifyUrlRedirectSortKeys =
  /** Sort by the `id` value. */
  | "ID"
  /** Sort by the `path` value. */
  | "PATH"
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  | "RELEVANCE"
  | "%future added value"

/** Return type for `urlRedirectUpdate` mutation. */
export interface ShopifyUrlRedirectUpdatePayload {
  __typename?: "UrlRedirectUpdatePayload"
  /** Returns the updated URL redirect. */
  urlRedirect?: Maybe<ShopifyUrlRedirect>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUrlRedirectUserError>
}

/** Represents an error that happens during execution of a redirect mutation. */
export interface ShopifyUrlRedirectUserError extends ShopifyDisplayableError {
  __typename?: "UrlRedirectUserError"
  /** The error code. */
  code?: Maybe<ShopifyUrlRedirectErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Represents an error in the input of a mutation. */
export interface ShopifyUserError extends ShopifyDisplayableError {
  __typename?: "UserError"
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** A checkout server side validation installed on the shop. */
export interface ShopifyValidation
  extends ShopifyHasMetafieldDefinitions,
    ShopifyHasMetafields,
    ShopifyNode {
  __typename?: "Validation"
  /** Whether the validation should block on failures other than expected violations. */
  blockOnFailure: Scalars["Boolean"]["output"]
  /** Whether the validation is enabled on the merchant checkout. */
  enabled: Scalars["Boolean"]["output"]
  /** The error history on the most recent version of the validation function. */
  errorHistory?: Maybe<ShopifyFunctionsErrorHistory>
  /** Global ID for the validation. */
  id: Scalars["ID"]["output"]
  /**
   * A [custom field](https://shopify.dev/docs/apps/build/custom-data),
   * including its `namespace` and `key`, that's associated with a Shopify resource
   * for the purposes of adding and storing additional information.
   */
  metafield?: Maybe<ShopifyMetafield>
  /**
   * List of metafield definitions.
   * @deprecated This field will be removed in a future version. Use `QueryRoot.metafieldDefinitions` instead.
   */
  metafieldDefinitions: ShopifyMetafieldDefinitionConnection
  /**
   * A list of [custom fields](https://shopify.dev/docs/apps/build/custom-data)
   * that a merchant associates with a Shopify resource.
   */
  metafields: ShopifyMetafieldConnection
  /** The Shopify Function implementing the validation. */
  shopifyFunction: ShopifyShopifyFunction
  /** The merchant-facing validation name. */
  title: Scalars["String"]["output"]
}

/** A checkout server side validation installed on the shop. */
export interface ShopifyValidationMetafieldArgs {
  key: Scalars["String"]["input"]
  namespace?: InputMaybe<Scalars["String"]["input"]>
}

/** A checkout server side validation installed on the shop. */
export interface ShopifyValidationMetafieldDefinitionsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  pinnedStatus?: InputMaybe<ShopifyMetafieldDefinitionPinnedStatus>
  query?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
  sortKey?: InputMaybe<ShopifyMetafieldDefinitionSortKeys>
}

/** A checkout server side validation installed on the shop. */
export interface ShopifyValidationMetafieldsArgs {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  keys?: InputMaybe<Array<Scalars["String"]["input"]>>
  last?: InputMaybe<Scalars["Int"]["input"]>
  namespace?: InputMaybe<Scalars["String"]["input"]>
  reverse?: InputMaybe<Scalars["Boolean"]["input"]>
}

/** An auto-generated type for paginating through multiple Validations. */
export interface ShopifyValidationConnection {
  __typename?: "ValidationConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyValidationEdge>
  /** A list of nodes that are contained in ValidationEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyValidation>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** The input fields required to install a validation. */
export interface ShopifyValidationCreateInput {
  /** Whether the validation should block on failures other than expected violations. */
  blockOnFailure?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether the validation should be live on the merchant checkout. */
  enable?: InputMaybe<Scalars["Boolean"]["input"]>
  /** The function ID representing the extension to install. */
  functionId: Scalars["String"]["input"]
  /** Additional metafields to associate to the validation. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The title of the validation. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `validationCreate` mutation. */
export interface ShopifyValidationCreatePayload {
  __typename?: "ValidationCreatePayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyValidationUserError>
  /** The created validation. */
  validation?: Maybe<ShopifyValidation>
}

/** Return type for `validationDelete` mutation. */
export interface ShopifyValidationDeletePayload {
  __typename?: "ValidationDeletePayload"
  /** Returns the deleted validation ID. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyValidationUserError>
}

/** An auto-generated type which holds one Validation and a cursor during pagination. */
export interface ShopifyValidationEdge {
  __typename?: "ValidationEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of ValidationEdge. */
  node: ShopifyValidation
}

/** The set of valid sort keys for the Validation query. */
export type ShopifyValidationSortKeys =
  /** Sort by the `id` value. */
  "ID" | "%future added value"

/** The input fields required to update a validation. */
export interface ShopifyValidationUpdateInput {
  /** Whether the validation should block on failures other than expected violations. */
  blockOnFailure?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Whether the validation should be live on the merchant checkout. */
  enable?: InputMaybe<Scalars["Boolean"]["input"]>
  /** Additional metafields to associate to the validation. */
  metafields?: InputMaybe<Array<ShopifyMetafieldInput>>
  /** The title of the validation. */
  title?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `validationUpdate` mutation. */
export interface ShopifyValidationUpdatePayload {
  __typename?: "ValidationUpdatePayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyValidationUserError>
  /** The updated validation. */
  validation?: Maybe<ShopifyValidation>
}

/** An error that occurs during the execution of a validation mutation. */
export interface ShopifyValidationUserError extends ShopifyDisplayableError {
  __typename?: "ValidationUserError"
  /** The error code. */
  code?: Maybe<ShopifyValidationUserErrorCode>
  /** The path to the input field that caused the error. */
  field?: Maybe<Array<Scalars["String"]["output"]>>
  /** The error message. */
  message: Scalars["String"]["output"]
}

/** Possible error codes that can be returned by `ValidationUserError`. */
export type ShopifyValidationUserErrorCode =
  /** ApiPermission metafields can only be created or updated by the app owner. */
  | "APP_NOT_AUTHORIZED"
  /** The input value is blank. */
  | "BLANK"
  /** The metafield violates a capability restriction. */
  | "CAPABILITY_VIOLATION"
  /** Shop must be on a Shopify Plus plan to activate functions from a custom app. */
  | "CUSTOM_APP_FUNCTION_NOT_ELIGIBLE"
  /** Owner type can't be used in this mutation. */
  | "DISALLOWED_OWNER_TYPE"
  /** Function does not implement the required interface for this cart & checkout validation. */
  | "FUNCTION_DOES_NOT_IMPLEMENT"
  /** Function not found. */
  | "FUNCTION_NOT_FOUND"
  /** Function is pending deletion. */
  | "FUNCTION_PENDING_DELETION"
  /** The input value isn't included in the list. */
  | "INCLUSION"
  /** An internal error occurred. */
  | "INTERNAL_ERROR"
  /** The input value is invalid. */
  | "INVALID"
  /** The type is invalid. */
  | "INVALID_TYPE"
  /** The value is invalid for the metafield type or for the definition options. */
  | "INVALID_VALUE"
  /** Cannot have more than 25 active validation functions. */
  | "MAX_VALIDATIONS_ACTIVATED"
  /** Validation not found. */
  | "NOT_FOUND"
  /** The input value needs to be blank. */
  | "PRESENT"
  /** Only unlisted apps can be used for this cart & checkout validation. */
  | "PUBLIC_APP_NOT_ALLOWED"
  /** The input value is already taken. */
  | "TAKEN"
  /** The input value is too long. */
  | "TOO_LONG"
  /** The input value is too short. */
  | "TOO_SHORT"
  /** Unstructured reserved namespace. */
  | "UNSTRUCTURED_RESERVED_NAMESPACE"
  | "%future added value"

/** The input fields required to create or modify a product variant's option value. */
export interface ShopifyVariantOptionValueInput {
  /** Specifies the product option value by ID. */
  id?: InputMaybe<Scalars["ID"]["input"]>
  /** Metafield value associated with an option. */
  linkedMetafieldValue?: InputMaybe<Scalars["String"]["input"]>
  /** Specifies the product option value by name. */
  name?: InputMaybe<Scalars["String"]["input"]>
  /** Specifies the product option by ID. */
  optionId?: InputMaybe<Scalars["ID"]["input"]>
  /** Specifies the product option by name. */
  optionName?: InputMaybe<Scalars["String"]["input"]>
}

/** Represents a credit card payment instrument. */
export interface ShopifyVaultCreditCard {
  __typename?: "VaultCreditCard"
  /** The billing address of the card. */
  billingAddress?: Maybe<ShopifyCustomerCreditCardBillingAddress>
  /** The brand for the card. */
  brand: Scalars["String"]["output"]
  /** Whether the card has been expired. */
  expired: Scalars["Boolean"]["output"]
  /** The expiry month of the card. */
  expiryMonth: Scalars["Int"]["output"]
  /** The expiry year of the card. */
  expiryYear: Scalars["Int"]["output"]
  /** The last four digits for the card. */
  lastDigits: Scalars["String"]["output"]
  /** The name of the card holder. */
  name: Scalars["String"]["output"]
}

/** Represents a paypal billing agreement payment instrument. */
export interface ShopifyVaultPaypalBillingAgreement {
  __typename?: "VaultPaypalBillingAgreement"
  /** Whether the paypal billing agreement is inactive. */
  inactive: Scalars["Boolean"]["output"]
  /** The paypal account name. */
  name: Scalars["String"]["output"]
  /** The paypal account email address. */
  paypalAccountEmail: Scalars["String"]["output"]
}

/**
 * Representation of 3d vectors and points. It can represent
 * either the coordinates of a point in space, a direction, or
 * size. Presented as an object with three floating-point values.
 */
export interface ShopifyVector3 {
  __typename?: "Vector3"
  /** The x coordinate of Vector3. */
  x: Scalars["Float"]["output"]
  /** The y coordinate of Vector3. */
  y: Scalars["Float"]["output"]
  /** The z coordinate of Vector3. */
  z: Scalars["Float"]["output"]
}

/** Represents a Shopify hosted video. */
export interface ShopifyVideo extends ShopifyFile, ShopifyMedia, ShopifyNode {
  __typename?: "Video"
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars["String"]["output"]>
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created. */
  createdAt: Scalars["DateTime"]["output"]
  /**
   * The video's duration in milliseconds. This value is `null` unless the video's status field is
   * [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
   */
  duration?: Maybe<Scalars["Int"]["output"]>
  /** Any errors that have occurred on the file. */
  fileErrors: Array<ShopifyFileError>
  /** The status of the file. */
  fileStatus: ShopifyFileStatus
  /** The video's filename. */
  filename: Scalars["String"]["output"]
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The media content type. */
  mediaContentType: ShopifyMediaContentType
  /** Any errors which have occurred on the media. */
  mediaErrors: Array<ShopifyMediaError>
  /** The warnings attached to the media. */
  mediaWarnings: Array<ShopifyMediaWarning>
  /**
   * The video's original source. This value is `null` unless the video's status field is
   * [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
   */
  originalSource?: Maybe<ShopifyVideoSource>
  /** The preview image for the media. */
  preview?: Maybe<ShopifyMediaPreviewImage>
  /**
   * The video's sources. This value is empty unless the video's status field is
   * [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
   */
  sources: Array<ShopifyVideoSource>
  /** Current status of the media. */
  status: ShopifyMediaStatus
  /** The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/**
 * Represents a source for a Shopify hosted video.
 *
 * Types of sources include the original video, lower resolution versions of the original video,
 * and an m3u8 playlist file.
 *
 * Only [videos](https://shopify.dev/api/admin-graphql/latest/objects/video) with a status field
 * of [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready) have sources.
 */
export interface ShopifyVideoSource {
  __typename?: "VideoSource"
  /** The video source's file size in bytes. */
  fileSize?: Maybe<Scalars["Int"]["output"]>
  /** The video source's file format extension. */
  format: Scalars["String"]["output"]
  /** The video source's height. */
  height: Scalars["Int"]["output"]
  /** The video source's MIME type. */
  mimeType: Scalars["String"]["output"]
  /** The video source's URL. */
  url: Scalars["String"]["output"]
  /** The video source's width. */
  width: Scalars["Int"]["output"]
}

/**
 * The `WebPixel` object enables you to manage JavaScript code snippets
 * that run on an online store and collect
 * [behavioral data](https://shopify.dev/docs/api/web-pixels-api/standard-events)
 * for marketing campaign optimization and analytics.
 *
 * Learn how to create a
 * [web pixel extension](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels)
 * to subscribe your app to events that are emitted by Shopify.
 */
export interface ShopifyWebPixel extends ShopifyNode {
  __typename?: "WebPixel"
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /**
   * The
   * [settings object](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels#step-2-define-your-web-pixel-settings)
   * for the web pixel. This object specifies configuration options that control the web pixel's functionality and behavior. You can find the settings for a web pixel in
   * `extensions/<your_extension_name>/shopify.extension.toml`.
   */
  settings: Scalars["JSON"]["output"]
}

/** Return type for `webPixelCreate` mutation. */
export interface ShopifyWebPixelCreatePayload {
  __typename?: "WebPixelCreatePayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyErrorsWebPixelUserError>
  /** The created web pixel settings. */
  webPixel?: Maybe<ShopifyWebPixel>
}

/** Return type for `webPixelDelete` mutation. */
export interface ShopifyWebPixelDeletePayload {
  __typename?: "WebPixelDeletePayload"
  /** The ID of the web pixel settings that was deleted. */
  deletedWebPixelId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyErrorsWebPixelUserError>
}

/** The input fields for creating or updating a web pixel. */
export interface ShopifyWebPixelInput {
  /**
   * The
   * [settings object](https://shopify.dev/docs/apps/build/marketing-analytics/build-web-pixels#step-2-define-your-web-pixel-settings)
   * for the web pixel. This object specifies configuration options that control the web pixel's functionality and behavior.
   * You can find the settings for a web pixel in `extensions/<your_extension_name>/shopify.extension.toml`.
   */
  settings: Scalars["JSON"]["input"]
}

/** Return type for `webPixelUpdate` mutation. */
export interface ShopifyWebPixelUpdatePayload {
  __typename?: "WebPixelUpdatePayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyErrorsWebPixelUserError>
  /** The updated web pixel settings. */
  webPixel?: Maybe<ShopifyWebPixel>
}

/** The input fields used to create a web presence. */
export interface ShopifyWebPresenceCreateInput {
  /** The alternate locales for the web presence. */
  alternateLocales?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The default locale for the web presence. */
  defaultLocale: Scalars["String"]["input"]
  /** The web presence's domain ID. This field must be `null` if the `subfolderSuffix` isn't `null`. */
  domainId?: InputMaybe<Scalars["ID"]["input"]>
  /**
   * The market-specific suffix of the subfolders defined by the web presence.
   * For example: in `/en-us`, the subfolder suffix is `us`.
   * Only ASCII characters are allowed. This field must be `null` if the `domainId` isn't `null`.
   */
  subfolderSuffix?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `webPresenceCreate` mutation. */
export interface ShopifyWebPresenceCreatePayload {
  __typename?: "WebPresenceCreatePayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketUserError>
  /** The created web presence object. */
  webPresence?: Maybe<ShopifyMarketWebPresence>
}

/** Return type for `webPresenceDelete` mutation. */
export interface ShopifyWebPresenceDeletePayload {
  __typename?: "WebPresenceDeletePayload"
  /** The ID of the deleted web presence. */
  deletedId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketUserError>
}

/** The input fields used to update a web presence. */
export interface ShopifyWebPresenceUpdateInput {
  /** The alternate locales for the web presence. */
  alternateLocales?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The default locale for the web presence. */
  defaultLocale?: InputMaybe<Scalars["String"]["input"]>
  /**
   * The market-specific suffix of the subfolders defined by the web presence.
   * Example: in `/en-us` the subfolder suffix is `us`.
   * Only ASCII characters are allowed.
   * This field must be null if subfolder suffix is not already defined for the web presence.
   */
  subfolderSuffix?: InputMaybe<Scalars["String"]["input"]>
}

/** Return type for `webPresenceUpdate` mutation. */
export interface ShopifyWebPresenceUpdatePayload {
  __typename?: "WebPresenceUpdatePayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyMarketUserError>
  /** The web presence object. */
  webPresence?: Maybe<ShopifyMarketWebPresence>
}

/** An Amazon EventBridge partner event source to which webhook subscriptions publish events. */
export interface ShopifyWebhookEventBridgeEndpoint {
  __typename?: "WebhookEventBridgeEndpoint"
  /** The ARN of this EventBridge partner event source. */
  arn: Scalars["ARN"]["output"]
}

/** An HTTPS endpoint to which webhook subscriptions send POST requests. */
export interface ShopifyWebhookHttpEndpoint {
  __typename?: "WebhookHttpEndpoint"
  /** The URL to which the webhooks events are sent. */
  callbackUrl: Scalars["URL"]["output"]
}

/** A Google Cloud Pub/Sub topic to which webhook subscriptions publish events. */
export interface ShopifyWebhookPubSubEndpoint {
  __typename?: "WebhookPubSubEndpoint"
  /** The Google Cloud Pub/Sub project ID. */
  pubSubProject: Scalars["String"]["output"]
  /** The Google Cloud Pub/Sub topic ID. */
  pubSubTopic: Scalars["String"]["output"]
}

/**
 * A webhook subscription is a persisted data object created by an app using the REST Admin API or GraphQL Admin API.
 * It describes the topic that the app wants to receive, and a destination where Shopify should send webhooks of the specified topic.
 * When an event for a given topic occurs, the webhook subscription sends a relevant payload to the destination.
 * Learn more about the [webhooks system](https://shopify.dev/apps/webhooks).
 */
export interface ShopifyWebhookSubscription
  extends ShopifyLegacyInteroperability,
    ShopifyNode {
  __typename?: "WebhookSubscription"
  /** The Admin API version that Shopify uses to serialize webhook events. This value is inherited from the app that created the webhook subscription. */
  apiVersion: ShopifyApiVersion
  /**
   * The destination URI to which the webhook subscription will send a message when an event occurs.
   * @deprecated Use `uri` instead.
   */
  callbackUrl: Scalars["URL"]["output"]
  /** The date and time when the webhook subscription was created. */
  createdAt: Scalars["DateTime"]["output"]
  /**
   * The endpoint to which the webhook subscription will send events.
   * @deprecated Use `uri` instead.
   */
  endpoint: ShopifyWebhookSubscriptionEndpoint
  /** A constraint specified using search syntax that ensures only webhooks that match the specified filter are emitted. See our [guide on filters](https://shopify.dev/docs/apps/build/webhooks/customize/filters) for more details. */
  filter?: Maybe<Scalars["String"]["output"]>
  /** The format in which the webhook subscription should send the data. */
  format: ShopifyWebhookSubscriptionFormat
  /** A globally-unique ID. */
  id: Scalars["ID"]["output"]
  /** The list of fields to be included in the webhook subscription. Only the fields specified will be included in the webhook payload. If null, then all fields will be included. Learn more about [modifying webhook payloads](https://shopify.dev/docs/apps/build/webhooks/customize/modify_payloads). */
  includeFields: Array<Scalars["String"]["output"]>
  /** The ID of the corresponding resource in the REST Admin API. */
  legacyResourceId: Scalars["UnsignedInt64"]["output"]
  /** The list of namespaces for any metafields that should be included in the webhook subscription. */
  metafieldNamespaces: Array<Scalars["String"]["output"]>
  /** The list of identifiers specifying metafields to include in the webhook subscription. */
  metafields: Array<ShopifyWebhookSubscriptionMetafieldIdentifier>
  /** The type of event that triggers the webhook. The topic determines when the webhook subscription sends a webhook, as well as what class of data object that webhook contains. */
  topic: ShopifyWebhookSubscriptionTopic
  /** The date and time when the webhook subscription was updated. */
  updatedAt: Scalars["DateTime"]["output"]
}

/** An auto-generated type for paginating through multiple WebhookSubscriptions. */
export interface ShopifyWebhookSubscriptionConnection {
  __typename?: "WebhookSubscriptionConnection"
  /** The connection between the node and its parent. Each edge contains a minimum of the edge's cursor and the node. */
  edges: Array<ShopifyWebhookSubscriptionEdge>
  /** A list of nodes that are contained in WebhookSubscriptionEdge. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes. At each node, you specify the fields that you want to retrieve. */
  nodes: Array<ShopifyWebhookSubscription>
  /** An object that’s used to retrieve [cursor information](https://shopify.dev/api/usage/pagination-graphql) about the current page. */
  pageInfo: ShopifyPageInfo
}

/** Return type for `webhookSubscriptionCreate` mutation. */
export interface ShopifyWebhookSubscriptionCreatePayload {
  __typename?: "WebhookSubscriptionCreatePayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
  /** The webhook subscription that was created. */
  webhookSubscription?: Maybe<ShopifyWebhookSubscription>
}

/** Return type for `webhookSubscriptionDelete` mutation. */
export interface ShopifyWebhookSubscriptionDeletePayload {
  __typename?: "WebhookSubscriptionDeletePayload"
  /** The ID of the deleted webhook subscription. */
  deletedWebhookSubscriptionId?: Maybe<Scalars["ID"]["output"]>
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
}

/** An auto-generated type which holds one WebhookSubscription and a cursor during pagination. */
export interface ShopifyWebhookSubscriptionEdge {
  __typename?: "WebhookSubscriptionEdge"
  /** The position of each node in an array, used in [pagination](https://shopify.dev/api/usage/pagination-graphql). */
  cursor: Scalars["String"]["output"]
  /** The item at the end of WebhookSubscriptionEdge. */
  node: ShopifyWebhookSubscription
}

/** An endpoint to which webhook subscriptions send webhooks events. */
export type ShopifyWebhookSubscriptionEndpoint =
  | ShopifyWebhookEventBridgeEndpoint
  | ShopifyWebhookHttpEndpoint
  | ShopifyWebhookPubSubEndpoint

/** The supported formats for webhook subscriptions. */
export type ShopifyWebhookSubscriptionFormat =
  | "JSON"
  | "XML"
  | "%future added value"

/** The input fields for a webhook subscription. */
export interface ShopifyWebhookSubscriptionInput {
  /** A constraint specified using search syntax that ensures only webhooks that match the specified filter are emitted. See our [guide on filters](https://shopify.dev/docs/apps/build/webhooks/customize/filters) for more details. */
  filter?: InputMaybe<Scalars["String"]["input"]>
  /** The format in which the webhook subscription should send the data. */
  format?: InputMaybe<ShopifyWebhookSubscriptionFormat>
  /** The list of fields to be included in the webhook subscription. Only the fields specified will be included in the webhook payload. If null, then all fields will be included. Learn more about [modifying webhook payloads](https://shopify.dev/docs/apps/build/webhooks/customize/modify_payloads). */
  includeFields?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** The list of namespaces for any metafields that should be included in the webhook subscription. */
  metafieldNamespaces?: InputMaybe<Array<Scalars["String"]["input"]>>
  /** A list of identifiers specifying metafields to include in the webhook payload. */
  metafields?: InputMaybe<Array<ShopifyHasMetafieldsMetafieldIdentifierInput>>
}

/** Identifies metafields by their namespace, and key. */
export interface ShopifyWebhookSubscriptionMetafieldIdentifier {
  __typename?: "WebhookSubscriptionMetafieldIdentifier"
  /** The unique identifier for the metafield definition within its namespace. */
  key: Scalars["String"]["output"]
  /** The container for a group of metafields that the metafield definition is associated with. */
  namespace: Scalars["String"]["output"]
}

/** The set of valid sort keys for the WebhookSubscription query. */
export type ShopifyWebhookSubscriptionSortKeys =
  /** Sort by the `created_at` value. */
  | "CREATED_AT"
  /** Sort by the `id` value. */
  | "ID"
  | "%future added value"

/**
 * The supported topics for webhook subscriptions. You can use webhook subscriptions to receive
 * notifications about particular events in a shop.
 *
 * You create [mandatory webhooks](https://shopify.dev/apps/webhooks/configuration/mandatory-webhooks#mandatory-compliance-webhooks) either via the
 * [Partner Dashboard](https://shopify.dev/apps/webhooks/configuration/mandatory-webhooks#subscribe-to-privacy-webhooks)
 * or by updating the [app configuration file](https://shopify.dev/apps/tools/cli/configuration#app-configuration-file-example).
 *
 * > Tip:
 * >To configure your subscription using the app configuration file, refer to the [full list of topic names](https://shopify.dev/docs/api/webhooks?reference=graphql).
 */
export type ShopifyWebhookSubscriptionTopic =
  /** The webhook topic for `app_purchases_one_time/update` events. Occurs whenever a one-time app charge is updated. */
  | "APP_PURCHASES_ONE_TIME_UPDATE"
  /** The webhook topic for `app/scopes_update` events. Occurs whenever the access scopes of any installation are modified. Allows apps to keep track of the granted access scopes of their installations. */
  | "APP_SCOPES_UPDATE"
  /** The webhook topic for `app_subscriptions/approaching_capped_amount` events. Occurs when the balance used on an app subscription crosses 90% of the capped amount. */
  | "APP_SUBSCRIPTIONS_APPROACHING_CAPPED_AMOUNT"
  /** The webhook topic for `app_subscriptions/update` events. Occurs whenever an app subscription is updated. */
  | "APP_SUBSCRIPTIONS_UPDATE"
  /** The webhook topic for `app/uninstalled` events. Occurs whenever a shop has uninstalled the app. */
  | "APP_UNINSTALLED"
  /** The webhook topic for `attributed_sessions/first` events. Occurs whenever an order with a "first" attributed session is attributed. Requires the `read_marketing_events` scope. */
  | "ATTRIBUTED_SESSIONS_FIRST"
  /** The webhook topic for `attributed_sessions/last` events. Occurs whenever an order with a "last" attributed session is attributed. Requires the `read_marketing_events` scope. */
  | "ATTRIBUTED_SESSIONS_LAST"
  /** The webhook topic for `audit_events/admin_api_activity` events. Triggers for each auditable Admin API request. This topic is limited to one active subscription per Plus store and requires the use of Google Cloud Pub/Sub or AWS EventBridge. Requires the `read_audit_events` scope. */
  | "AUDIT_EVENTS_ADMIN_API_ACTIVITY"
  /** The webhook topic for `bulk_operations/finish` events. Notifies when a Bulk Operation finishes. */
  | "BULK_OPERATIONS_FINISH"
  /** The webhook topic for `carts/create` events. Occurs when a cart is created in the online store. Other types of carts aren't supported. For example, the webhook doesn't support carts that are created in a custom storefront. Requires the `read_orders` scope. */
  | "CARTS_CREATE"
  /** The webhook topic for `carts/update` events. Occurs when a cart is updated in the online store. Other types of carts aren't supported. For example, the webhook doesn't support carts that are updated in a custom storefront. Requires the `read_orders` scope. */
  | "CARTS_UPDATE"
  /** The webhook topic for `channels/delete` events. Occurs whenever a channel is deleted. Requires the `read_publications` scope. */
  | "CHANNELS_DELETE"
  /** The webhook topic for `checkouts/create` events. Occurs whenever a checkout is created. Requires the `read_orders` scope. */
  | "CHECKOUTS_CREATE"
  /** The webhook topic for `checkouts/delete` events. Occurs whenever a checkout is deleted. Requires the `read_orders` scope. */
  | "CHECKOUTS_DELETE"
  /** The webhook topic for `checkouts/update` events. Occurs whenever a checkout is updated. Requires the `read_orders` scope. */
  | "CHECKOUTS_UPDATE"
  /** The webhook topic for `checkout_and_accounts_configurations/update` events. The event occurs whenever a published checkout and account configuration is updated. */
  | "CHECKOUT_AND_ACCOUNTS_CONFIGURATIONS_UPDATE"
  /** The webhook topic for `collections/create` events. Occurs whenever a collection is created. Requires the `read_products` scope. */
  | "COLLECTIONS_CREATE"
  /** The webhook topic for `collections/delete` events. Occurs whenever a collection is deleted. Requires the `read_products` scope. */
  | "COLLECTIONS_DELETE"
  /** The webhook topic for `collections/update` events. Occurs whenever a collection is updated, including whenever products are added or removed from the collection. Occurs once if multiple products are added or removed from a collection at the same time. Requires the `read_products` scope. */
  | "COLLECTIONS_UPDATE"
  /** The webhook topic for `collection_listings/add` events. Occurs whenever a collection listing is added. Requires the `read_product_listings` scope. */
  | "COLLECTION_LISTINGS_ADD"
  /** The webhook topic for `collection_listings/remove` events. Occurs whenever a collection listing is removed. Requires the `read_product_listings` scope. */
  | "COLLECTION_LISTINGS_REMOVE"
  /** The webhook topic for `collection_listings/update` events. Occurs whenever a collection listing is updated. Requires the `read_product_listings` scope. */
  | "COLLECTION_LISTINGS_UPDATE"
  /** The webhook topic for `collection_publications/create` events. Occurs whenever a collection publication listing is created. Requires the `read_publications` scope. */
  | "COLLECTION_PUBLICATIONS_CREATE"
  /** The webhook topic for `collection_publications/delete` events. Occurs whenever a collection publication listing is deleted. Requires the `read_publications` scope. */
  | "COLLECTION_PUBLICATIONS_DELETE"
  /** The webhook topic for `collection_publications/update` events. Occurs whenever a collection publication listing is updated. Requires the `read_publications` scope. */
  | "COLLECTION_PUBLICATIONS_UPDATE"
  /** The webhook topic for `companies/create` events. Occurs whenever a company is created. Requires at least one of the following scopes: read_customers, read_companies. */
  | "COMPANIES_CREATE"
  /** The webhook topic for `companies/delete` events. Occurs whenever a company is deleted. Requires at least one of the following scopes: read_customers, read_companies. */
  | "COMPANIES_DELETE"
  /** The webhook topic for `companies/update` events. Occurs whenever a company is updated. Requires at least one of the following scopes: read_customers, read_companies. */
  | "COMPANIES_UPDATE"
  /** The webhook topic for `company_contacts/create` events. Occurs whenever a company contact is created. Requires at least one of the following scopes: read_customers, read_companies. */
  | "COMPANY_CONTACTS_CREATE"
  /** The webhook topic for `company_contacts/delete` events. Occurs whenever a company contact is deleted. Requires at least one of the following scopes: read_customers, read_companies. */
  | "COMPANY_CONTACTS_DELETE"
  /** The webhook topic for `company_contacts/update` events. Occurs whenever a company contact is updated. Requires at least one of the following scopes: read_customers, read_companies. */
  | "COMPANY_CONTACTS_UPDATE"
  /** The webhook topic for `company_contact_roles/assign` events. Occurs whenever a role is assigned to a contact at a location. Requires at least one of the following scopes: read_customers, read_companies. */
  | "COMPANY_CONTACT_ROLES_ASSIGN"
  /** The webhook topic for `company_contact_roles/revoke` events. Occurs whenever a role is revoked from a contact at a location. Requires at least one of the following scopes: read_customers, read_companies. */
  | "COMPANY_CONTACT_ROLES_REVOKE"
  /** The webhook topic for `company_locations/create` events. Occurs whenever a company location is created. Requires at least one of the following scopes: read_customers, read_companies. */
  | "COMPANY_LOCATIONS_CREATE"
  /** The webhook topic for `company_locations/delete` events. Occurs whenever a company location is deleted. Requires at least one of the following scopes: read_customers, read_companies. */
  | "COMPANY_LOCATIONS_DELETE"
  /** The webhook topic for `company_locations/update` events. Occurs whenever a company location is updated. Requires at least one of the following scopes: read_customers, read_companies. */
  | "COMPANY_LOCATIONS_UPDATE"
  /** The webhook topic for `customers/create` events. Occurs whenever a customer is created. Requires the `read_customers` scope. */
  | "CUSTOMERS_CREATE"
  /** The webhook topic for `customers/delete` events. Occurs whenever a customer is deleted. Requires the `read_customers` scope. */
  | "CUSTOMERS_DELETE"
  /** The webhook topic for `customers/disable` events. Occurs whenever a customer account is disabled. Requires the `read_customers` scope. */
  | "CUSTOMERS_DISABLE"
  /** The webhook topic for `customers_email_marketing_consent/update` events. Occurs whenever a customer's email marketing consent is updated. Requires the `read_customers` scope. */
  | "CUSTOMERS_EMAIL_MARKETING_CONSENT_UPDATE"
  /** The webhook topic for `customers/enable` events. Occurs whenever a customer account is enabled. Requires the `read_customers` scope. */
  | "CUSTOMERS_ENABLE"
  /** The webhook topic for `customers_marketing_consent/update` events. Occurs whenever a customer's SMS marketing consent is updated. Requires the `read_customers` scope. */
  | "CUSTOMERS_MARKETING_CONSENT_UPDATE"
  /** The webhook topic for `customers/merge` events. Triggers when two customers are merged Requires the `read_customer_merge` scope. */
  | "CUSTOMERS_MERGE"
  /** The webhook topic for `customers/purchasing_summary` events. Occurs when a customer sales history change. Requires the `read_customers` scope. */
  | "CUSTOMERS_PURCHASING_SUMMARY"
  /** The webhook topic for `customers/update` events. Occurs whenever a customer is updated. Requires the `read_customers` scope. */
  | "CUSTOMERS_UPDATE"
  /** The webhook topic for `customer_account_settings/update` events. Triggers when merchants change customer account setting. */
  | "CUSTOMER_ACCOUNT_SETTINGS_UPDATE"
  /** The webhook topic for `customer_groups/create` events. Occurs whenever a customer saved search is created. Requires the `read_customers` scope. */
  | "CUSTOMER_GROUPS_CREATE"
  /** The webhook topic for `customer_groups/delete` events. Occurs whenever a customer saved search is deleted. Requires the `read_customers` scope. */
  | "CUSTOMER_GROUPS_DELETE"
  /** The webhook topic for `customer_groups/update` events. Occurs whenever a customer saved search is updated. Requires the `read_customers` scope. */
  | "CUSTOMER_GROUPS_UPDATE"
  /** The webhook topic for `customer.joined_segment` events. Triggers when a customer joins a segment. Requires the `read_customers` scope. */
  | "CUSTOMER_JOINED_SEGMENT"
  /** The webhook topic for `customer.left_segment` events. Triggers when a customer leaves a segment. Requires the `read_customers` scope. */
  | "CUSTOMER_LEFT_SEGMENT"
  /** The webhook topic for `customer_payment_methods/create` events. Occurs whenever a customer payment method is created. Requires the `read_customer_payment_methods` scope. */
  | "CUSTOMER_PAYMENT_METHODS_CREATE"
  /** The webhook topic for `customer_payment_methods/revoke` events. Occurs whenever a customer payment method is revoked. Requires the `read_customer_payment_methods` scope. */
  | "CUSTOMER_PAYMENT_METHODS_REVOKE"
  /** The webhook topic for `customer_payment_methods/update` events. Occurs whenever a customer payment method is updated. Requires the `read_customer_payment_methods` scope. */
  | "CUSTOMER_PAYMENT_METHODS_UPDATE"
  /** The webhook topic for `customer.tags_added` events. Triggers when tags are added to a customer. Requires the `read_customers` scope. */
  | "CUSTOMER_TAGS_ADDED"
  /** The webhook topic for `customer.tags_removed` events. Triggers when tags are removed from a customer. Requires the `read_customers` scope. */
  | "CUSTOMER_TAGS_REMOVED"
  /** The webhook topic for `delivery_promise_settings/update` events. Occurs when a promise setting is updated. Requires the `read_shipping` scope. */
  | "DELIVERY_PROMISE_SETTINGS_UPDATE"
  /** The webhook topic for `discounts/create` events. Occurs whenever a discount is created. Requires the `read_discounts` scope. */
  | "DISCOUNTS_CREATE"
  /** The webhook topic for `discounts/delete` events. Occurs whenever a discount is deleted. Requires the `read_discounts` scope. */
  | "DISCOUNTS_DELETE"
  /** The webhook topic for `discounts/redeemcode_added` events. Occurs whenever a redeem code is added to a code discount. Requires the `read_discounts` scope. */
  | "DISCOUNTS_REDEEMCODE_ADDED"
  /** The webhook topic for `discounts/redeemcode_removed` events. Occurs whenever a redeem code on a code discount is deleted. Requires the `read_discounts` scope. */
  | "DISCOUNTS_REDEEMCODE_REMOVED"
  /** The webhook topic for `discounts/update` events. Occurs whenever a discount is updated. Requires the `read_discounts` scope. */
  | "DISCOUNTS_UPDATE"
  /** The webhook topic for `disputes/create` events. Occurs whenever a dispute is created. Requires the `read_shopify_payments_disputes` scope. */
  | "DISPUTES_CREATE"
  /** The webhook topic for `disputes/update` events. Occurs whenever a dispute is updated. Requires the `read_shopify_payments_disputes` scope. */
  | "DISPUTES_UPDATE"
  /** The webhook topic for `domains/create` events. Occurs whenever a domain is created. */
  | "DOMAINS_CREATE"
  /** The webhook topic for `domains/destroy` events. Occurs whenever a domain is destroyed. */
  | "DOMAINS_DESTROY"
  /** The webhook topic for `domains/update` events. Occurs whenever a domain is updated. */
  | "DOMAINS_UPDATE"
  /** The webhook topic for `draft_orders/create` events. Occurs whenever a draft order is created. Requires the `read_draft_orders` scope. */
  | "DRAFT_ORDERS_CREATE"
  /** The webhook topic for `draft_orders/delete` events. Occurs whenever a draft order is deleted. Requires the `read_draft_orders` scope. */
  | "DRAFT_ORDERS_DELETE"
  /** The webhook topic for `draft_orders/update` events. Occurs whenever a draft order is updated. Requires the `read_draft_orders` scope. */
  | "DRAFT_ORDERS_UPDATE"
  /** The webhook topic for `finance_app_staff_member/delete` events. Triggers when a staff with access to all or some finance app has been removed. Requires the `read_financial_kyc_information` scope. */
  | "FINANCE_APP_STAFF_MEMBER_DELETE"
  /** The webhook topic for `finance_app_staff_member/grant` events. Triggers when a staff is granted access to all or some finance app. Requires the `read_financial_kyc_information` scope. */
  | "FINANCE_APP_STAFF_MEMBER_GRANT"
  /** The webhook topic for `finance_app_staff_member/revoke` events. Triggers when a staff's access to all or some finance app has been revoked. Requires the `read_financial_kyc_information` scope. */
  | "FINANCE_APP_STAFF_MEMBER_REVOKE"
  /** The webhook topic for `finance_app_staff_member/update` events. Triggers when a staff's information has been updated. Requires the `read_financial_kyc_information` scope. */
  | "FINANCE_APP_STAFF_MEMBER_UPDATE"
  /** The webhook topic for `finance_kyc_information/update` events. Occurs whenever shop's finance KYC information was updated Requires the `read_financial_kyc_information` scope. */
  | "FINANCE_KYC_INFORMATION_UPDATE"
  /** The webhook topic for `fulfillments/create` events. Occurs whenever a fulfillment is created. Requires at least one of the following scopes: read_fulfillments, read_marketplace_orders. */
  | "FULFILLMENTS_CREATE"
  /** The webhook topic for `fulfillments/update` events. Occurs whenever a fulfillment is updated. Requires at least one of the following scopes: read_fulfillments, read_marketplace_orders. */
  | "FULFILLMENTS_UPDATE"
  /** The webhook topic for `fulfillment_events/create` events. Occurs whenever a fulfillment event is created. Requires the `read_fulfillments` scope. */
  | "FULFILLMENT_EVENTS_CREATE"
  /** The webhook topic for `fulfillment_events/delete` events. Occurs whenever a fulfillment event is deleted. Requires the `read_fulfillments` scope. */
  | "FULFILLMENT_EVENTS_DELETE"
  /**
   * The webhook topic for `fulfillment_holds/added` events. Occurs each time that a hold is added to a fulfillment order.
   *
   * For cases where multiple holds are applied to a fulfillment order, this webhook will trigger after each hold is applied.
   *  Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
   */
  | "FULFILLMENT_HOLDS_ADDED"
  /**
   * The webhook topic for `fulfillment_holds/released` events. Occurs each time that a hold is released from a fulfillment order.
   * For cases where multiple holds are released from a fulfillment order a the same time, this webhook will trigger for each released hold.
   *  Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
   */
  | "FULFILLMENT_HOLDS_RELEASED"
  /** The webhook topic for `fulfillment_orders/cancellation_request_accepted` events. Occurs when a 3PL accepts a fulfillment cancellation request, received from a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  | "FULFILLMENT_ORDERS_CANCELLATION_REQUEST_ACCEPTED"
  /** The webhook topic for `fulfillment_orders/cancellation_request_rejected` events. Occurs when a 3PL rejects a fulfillment cancellation request, received from a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  | "FULFILLMENT_ORDERS_CANCELLATION_REQUEST_REJECTED"
  /** The webhook topic for `fulfillment_orders/cancellation_request_submitted` events. Occurs when a merchant requests a fulfillment request to be cancelled after that request was approved by a 3PL. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  | "FULFILLMENT_ORDERS_CANCELLATION_REQUEST_SUBMITTED"
  /** The webhook topic for `fulfillment_orders/cancelled` events. Occurs when a fulfillment order is cancelled. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  | "FULFILLMENT_ORDERS_CANCELLED"
  /** The webhook topic for `fulfillment_orders/fulfillment_request_accepted` events. Occurs when a fulfillment service accepts a request to fulfill a fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  | "FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_ACCEPTED"
  /** The webhook topic for `fulfillment_orders/fulfillment_request_rejected` events. Occurs when a 3PL rejects a fulfillment request that was sent by a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  | "FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_REJECTED"
  /** The webhook topic for `fulfillment_orders/fulfillment_request_submitted` events. Occurs when a merchant submits a fulfillment request to a 3PL. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  | "FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_SUBMITTED"
  /** The webhook topic for `fulfillment_orders/fulfillment_service_failed_to_complete` events. Occurs when a fulfillment service intends to close an in_progress fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  | "FULFILLMENT_ORDERS_FULFILLMENT_SERVICE_FAILED_TO_COMPLETE"
  /**
   * The webhook topic for `fulfillment_orders/hold_released` events. Occurs when a fulfillment order is released and is no longer on hold.
   *
   * If a fulfillment order has multiple holds then this webhook will only be triggered once when the last hold is released and the status of the fulfillment order is no longer `ON_HOLD`.
   *  Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
   */
  | "FULFILLMENT_ORDERS_HOLD_RELEASED"
  /** The webhook topic for `fulfillment_orders/line_items_prepared_for_local_delivery` events. Occurs whenever a fulfillment order's line items are prepared for local delivery. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  | "FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_LOCAL_DELIVERY"
  /** The webhook topic for `fulfillment_orders/line_items_prepared_for_pickup` events. Triggers when one or more of the line items for a fulfillment order are prepared for pickup Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  | "FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_PICKUP"
  /** The webhook topic for `fulfillment_orders/merged` events. Occurs when multiple fulfillment orders are merged into a single fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders. */
  | "FULFILLMENT_ORDERS_MERGED"
  /**
   * The webhook topic for `fulfillment_orders/moved` events. Occurs whenever the location which is assigned to fulfill one or more fulfillment order line items is changed.
   *
   * * `original_fulfillment_order` - The final state of the original fulfillment order.
   * * `moved_fulfillment_order` - The fulfillment order which now contains the re-assigned line items.
   * * `source_location` - The original location which was assigned to fulfill the line items (available as of the `2023-04` API version).
   * * `destination_location_id` - The ID of the location which is now responsible for fulfilling the line items.
   *
   * **Note:** The [assignedLocation](https://shopify.dev/docs/api/admin-graphql/latest/objects/fulfillmentorder#field-fulfillmentorder-assignedlocation)
   * of the `original_fulfillment_order` might be changed by the move operation.
   * If you need to determine the originally assigned location, then you should refer to the `source_location`.
   *
   * [Learn more about moving line items](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fulfillmentOrderMove).
   *  Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
   */
  | "FULFILLMENT_ORDERS_MOVED"
  /** The webhook topic for `fulfillment_orders/order_routing_complete` events. Occurs when an order has finished being routed and it's fulfillment orders assigned to a fulfillment service's location. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_buyer_membership_orders, read_marketplace_fulfillment_orders. */
  | "FULFILLMENT_ORDERS_ORDER_ROUTING_COMPLETE"
  /**
   * The webhook topic for `fulfillment_orders/placed_on_hold` events. Occurs when a fulfillment order transitions to the `ON_HOLD` status
   *
   * For cases where multiple holds are applied to a fulfillment order, this webhook will only trigger once when the first hold is applied and the fulfillment order status changes to `ON_HOLD`.
   *  Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
   */
  | "FULFILLMENT_ORDERS_PLACED_ON_HOLD"
  /**
   * The webhook topic for `fulfillment_orders/rescheduled` events. Triggers when a fulfillment order is rescheduled.
   *
   * Fulfillment orders may be merged if they have the same `fulfillAt` datetime.
   * If the fulfillment order is merged then the resulting fulfillment order will be indicated in the webhook body.
   * Otherwise it will be the original fulfillment order with an updated `fulfill_at` datetime.
   *  Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
   */
  | "FULFILLMENT_ORDERS_RESCHEDULED"
  /** The webhook topic for `fulfillment_orders/scheduled_fulfillment_order_ready` events. Occurs whenever a fulfillment order which was scheduled becomes due. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders. */
  | "FULFILLMENT_ORDERS_SCHEDULED_FULFILLMENT_ORDER_READY"
  /** The webhook topic for `fulfillment_orders/split` events. Occurs when a fulfillment order is split into multiple fulfillment orders. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders. */
  | "FULFILLMENT_ORDERS_SPLIT"
  /** The webhook topic for `inventory_items/create` events. Occurs whenever an inventory item is created. Requires at least one of the following scopes: read_inventory, read_products. */
  | "INVENTORY_ITEMS_CREATE"
  /** The webhook topic for `inventory_items/delete` events. Occurs whenever an inventory item is deleted. Requires at least one of the following scopes: read_inventory, read_products. */
  | "INVENTORY_ITEMS_DELETE"
  /** The webhook topic for `inventory_items/update` events. Occurs whenever an inventory item is updated. Requires at least one of the following scopes: read_inventory, read_products. */
  | "INVENTORY_ITEMS_UPDATE"
  /** The webhook topic for `inventory_levels/connect` events. Occurs whenever an inventory level is connected. Requires the `read_inventory` scope. */
  | "INVENTORY_LEVELS_CONNECT"
  /** The webhook topic for `inventory_levels/disconnect` events. Occurs whenever an inventory level is disconnected. Requires the `read_inventory` scope. */
  | "INVENTORY_LEVELS_DISCONNECT"
  /** The webhook topic for `inventory_levels/update` events. Occurs whenever an inventory level is updated. Requires the `read_inventory` scope. */
  | "INVENTORY_LEVELS_UPDATE"
  /** The webhook topic for `inventory_shipments/add_items` events. Occurs whenever items are added to a shipment. Requires the `read_inventory_shipments` scope. */
  | "INVENTORY_SHIPMENTS_ADD_ITEMS"
  /** The webhook topic for `inventory_shipments/create` events. Triggers when a shipment is created. Requires the `read_inventory_shipments` scope. */
  | "INVENTORY_SHIPMENTS_CREATE"
  /** The webhook topic for `inventory_shipments/delete` events. Triggers when a shipment is deleted. Requires the `read_inventory_shipments` scope. */
  | "INVENTORY_SHIPMENTS_DELETE"
  /** The webhook topic for `inventory_shipments/mark_in_transit` events. Triggers when a shipment is marked as in transit. Requires the `read_inventory_shipments` scope. */
  | "INVENTORY_SHIPMENTS_MARK_IN_TRANSIT"
  /** The webhook topic for `inventory_shipments/receive_items` events. Triggers when items on a shipment are received. Requires the `read_inventory_shipments_received_items` scope. */
  | "INVENTORY_SHIPMENTS_RECEIVE_ITEMS"
  /** The webhook topic for `inventory_shipments/remove_items` events. Occurs whenever items are removed from a shipment. Requires the `read_inventory_shipments` scope. */
  | "INVENTORY_SHIPMENTS_REMOVE_ITEMS"
  /** The webhook topic for `inventory_shipments/update_item_quantities` events. Occurs whenever quantities change on a shipment. Requires the `read_inventory_shipments` scope. */
  | "INVENTORY_SHIPMENTS_UPDATE_ITEM_QUANTITIES"
  /** The webhook topic for `inventory_shipments/update_tracking` events. Triggers when tracking info on a shipment is updated. Requires the `read_inventory_shipments` scope. */
  | "INVENTORY_SHIPMENTS_UPDATE_TRACKING"
  /** The webhook topic for `inventory_transfers/add_items` events. Occurs any time items are added to a transfer. Requires the `read_inventory_transfers` scope. */
  | "INVENTORY_TRANSFERS_ADD_ITEMS"
  /** The webhook topic for `inventory_transfers/cancel` events. Triggers when a transfer is canceled. Requires the `read_inventory_transfers` scope. */
  | "INVENTORY_TRANSFERS_CANCEL"
  /** The webhook topic for `inventory_transfers/complete` events. Triggers when a transfer is completed. Requires the `read_inventory_transfers` scope. */
  | "INVENTORY_TRANSFERS_COMPLETE"
  /** The webhook topic for `inventory_transfers/ready_to_ship` events. Triggers when a transfer is marked as ready to ship. Requires the `read_inventory_transfers` scope. */
  | "INVENTORY_TRANSFERS_READY_TO_SHIP"
  /** The webhook topic for `inventory_transfers/remove_items` events. Occurs any time items are removed from a transfer. Requires the `read_inventory_transfers` scope. */
  | "INVENTORY_TRANSFERS_REMOVE_ITEMS"
  /** The webhook topic for `inventory_transfers/update_item_quantities` events. Occurs whenever the quantity of transfer line items changes. Requires the `read_inventory_transfers` scope. */
  | "INVENTORY_TRANSFERS_UPDATE_ITEM_QUANTITIES"
  /** The webhook topic for `locales/create` events. Occurs whenever a shop locale is created Requires the `read_locales` scope. */
  | "LOCALES_CREATE"
  /** The webhook topic for `locales/update` events. Occurs whenever a shop locale is updated, such as published or unpublished Requires the `read_locales` scope. */
  | "LOCALES_UPDATE"
  /** The webhook topic for `locations/activate` events. Occurs whenever a deactivated location is re-activated. Requires the `read_locations` scope. */
  | "LOCATIONS_ACTIVATE"
  /** The webhook topic for `locations/create` events. Occurs whenever a location is created. Requires the `read_locations` scope. */
  | "LOCATIONS_CREATE"
  /** The webhook topic for `locations/deactivate` events. Occurs whenever a location is deactivated. Requires the `read_locations` scope. */
  | "LOCATIONS_DEACTIVATE"
  /** The webhook topic for `locations/delete` events. Occurs whenever a location is deleted. Requires the `read_locations` scope. */
  | "LOCATIONS_DELETE"
  /** The webhook topic for `locations/update` events. Occurs whenever a location is updated. Requires the `read_locations` scope. */
  | "LOCATIONS_UPDATE"
  /** The webhook topic for `markets_backup_region/update` events. Occurs when a backup region is updated. Requires the `read_markets` scope. */
  | "MARKETS_BACKUP_REGION_UPDATE"
  /** The webhook topic for `markets/create` events. Occurs when a new market is created. Requires the `read_markets` scope. */
  | "MARKETS_CREATE"
  /** The webhook topic for `markets/delete` events. Occurs when a market is deleted. Requires the `read_markets` scope. */
  | "MARKETS_DELETE"
  /** The webhook topic for `markets/update` events. Occurs when a market is updated. Requires the `read_markets` scope. */
  | "MARKETS_UPDATE"
  /** The webhook topic for `metafield_definitions/create` events. Occurs when a metafield definition is created. Requires the `read_content` scope. */
  | "METAFIELD_DEFINITIONS_CREATE"
  /** The webhook topic for `metafield_definitions/delete` events. Occurs when a metafield definition is deleted. Requires the `read_content` scope. */
  | "METAFIELD_DEFINITIONS_DELETE"
  /** The webhook topic for `metafield_definitions/update` events. Occurs when a metafield definition is updated. Requires the `read_content` scope. */
  | "METAFIELD_DEFINITIONS_UPDATE"
  /** The webhook topic for `metaobjects/create` events. Occurs when a metaobject is created. Requires the `read_metaobjects` scope. */
  | "METAOBJECTS_CREATE"
  /** The webhook topic for `metaobjects/delete` events. Occurs when a metaobject is deleted. Requires the `read_metaobjects` scope. */
  | "METAOBJECTS_DELETE"
  /** The webhook topic for `metaobjects/update` events. Occurs when a metaobject is updated. Requires the `read_metaobjects` scope. */
  | "METAOBJECTS_UPDATE"
  /** The webhook topic for `orders/cancelled` events. Occurs whenever an order is cancelled. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders. */
  | "ORDERS_CANCELLED"
  /** The webhook topic for `orders/create` events. Occurs whenever an order is created. Requires at least one of the following scopes: read_orders, read_marketplace_orders. */
  | "ORDERS_CREATE"
  /** The webhook topic for `orders/delete` events. Occurs whenever an order is deleted. Requires the `read_orders` scope. */
  | "ORDERS_DELETE"
  /** The webhook topic for `orders/edited` events. Occurs whenever an order is edited. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders. */
  | "ORDERS_EDITED"
  /** The webhook topic for `orders/fulfilled` events. Occurs whenever an order is fulfilled. Requires at least one of the following scopes: read_orders, read_marketplace_orders. */
  | "ORDERS_FULFILLED"
  /** The webhook topic for `orders/paid` events. Occurs whenever an order is paid. Requires at least one of the following scopes: read_orders, read_marketplace_orders. */
  | "ORDERS_PAID"
  /** The webhook topic for `orders/partially_fulfilled` events. Occurs whenever an order is partially fulfilled. Requires at least one of the following scopes: read_orders, read_marketplace_orders. */
  | "ORDERS_PARTIALLY_FULFILLED"
  /**
   * The webhook topic for `orders/risk_assessment_changed` events. Triggers when a new risk assessment is available on the order.
   * This can be the first or a subsequent risk assessment.
   * New risk assessments can be provided until the order is marked as fulfilled.
   * Includes the risk level, risk facts, the provider and the order ID.
   * When the provider is Shopify, that field is null.
   * Does not include the risk recommendation for the order.
   * The Shop ID is available in the headers.
   *  Requires the `read_orders` scope.
   */
  | "ORDERS_RISK_ASSESSMENT_CHANGED"
  /** The webhook topic for `orders/shopify_protect_eligibility_changed` events. Occurs whenever Shopify Protect's eligibility for an order is changed. Requires the `read_orders` scope. */
  | "ORDERS_SHOPIFY_PROTECT_ELIGIBILITY_CHANGED"
  /** The webhook topic for `orders/updated` events. Occurs whenever an order is updated. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders. */
  | "ORDERS_UPDATED"
  /** The webhook topic for `order_transactions/create` events. Occurs when a order transaction is created or when it's status is updated. Only occurs for transactions with a status of success, failure or error. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders. */
  | "ORDER_TRANSACTIONS_CREATE"
  /** The webhook topic for `payment_schedules/due` events. Occurs whenever payment schedules are due. Requires the `read_payment_terms` scope. */
  | "PAYMENT_SCHEDULES_DUE"
  /** The webhook topic for `payment_terms/create` events. Occurs whenever payment terms are created. Requires the `read_payment_terms` scope. */
  | "PAYMENT_TERMS_CREATE"
  /** The webhook topic for `payment_terms/delete` events. Occurs whenever payment terms are deleted. Requires the `read_payment_terms` scope. */
  | "PAYMENT_TERMS_DELETE"
  /** The webhook topic for `payment_terms/update` events. Occurs whenever payment terms are updated. Requires the `read_payment_terms` scope. */
  | "PAYMENT_TERMS_UPDATE"
  /** The webhook topic for `products/create` events. Occurs whenever a product is created. Requires the `read_products` scope. */
  | "PRODUCTS_CREATE"
  /** The webhook topic for `products/delete` events. Occurs whenever a product is deleted. Requires the `read_products` scope. */
  | "PRODUCTS_DELETE"
  /** The webhook topic for `products/update` events. Occurs whenever a product is updated, ordered, or variants are added, removed or updated. Requires the `read_products` scope. */
  | "PRODUCTS_UPDATE"
  /** The webhook topic for `product_feeds/create` events. Triggers when product feed is created Requires the `read_product_listings` scope. */
  | "PRODUCT_FEEDS_CREATE"
  /** The webhook topic for `product_feeds/full_sync` events. Triggers when a full sync for a product feed is performed Requires the `read_product_listings` scope. */
  | "PRODUCT_FEEDS_FULL_SYNC"
  /** The webhook topic for `product_feeds/full_sync_finish` events. Triggers when a full sync finishes Requires the `read_product_listings` scope. */
  | "PRODUCT_FEEDS_FULL_SYNC_FINISH"
  /** The webhook topic for `product_feeds/incremental_sync` events. Occurs whenever a product publication is created, updated or removed for a product feed Requires the `read_product_listings` scope. */
  | "PRODUCT_FEEDS_INCREMENTAL_SYNC"
  /** The webhook topic for `product_feeds/update` events. Triggers when product feed is updated Requires the `read_product_listings` scope. */
  | "PRODUCT_FEEDS_UPDATE"
  /** The webhook topic for `product_listings/add` events. Occurs whenever an active product is listed on a channel. Requires the `read_product_listings` scope. */
  | "PRODUCT_LISTINGS_ADD"
  /** The webhook topic for `product_listings/remove` events. Occurs whenever a product listing is removed from the channel. Requires the `read_product_listings` scope. */
  | "PRODUCT_LISTINGS_REMOVE"
  /** The webhook topic for `product_listings/update` events. Occurs whenever a product publication is updated. Requires the `read_product_listings` scope. */
  | "PRODUCT_LISTINGS_UPDATE"
  /** The webhook topic for `product_publications/create` events. Occurs whenever a product publication for an active product is created, or whenever an existing product publication is published on the app that is subscribed to this webhook topic. Note that a webhook is only emitted when there are publishing changes to the app that is subscribed to the topic (ie. no webhook will be emitted if there is a publishing change to the online store and the webhook subscriber of the topic is a third-party app). Requires the `read_publications` scope. */
  | "PRODUCT_PUBLICATIONS_CREATE"
  /** The webhook topic for `product_publications/delete` events. Occurs whenever a product publication for an active product is removed, or whenever an existing product publication is unpublished from the app that is subscribed to this webhook topic. Note that a webhook is only emitted when there are publishing changes to the app that is subscribed to the topic (ie. no webhook will be emitted if there is a publishing change to the online store and the webhook subscriber of the topic is a third-party app). Requires the `read_publications` scope. */
  | "PRODUCT_PUBLICATIONS_DELETE"
  /** The webhook topic for `product_publications/update` events. Occurs whenever a product publication is updated from the app that is subscribed to this webhook topic. Note that a webhook is only emitted when there are publishing changes to the app that is subscribed to the topic (ie. no webhook will be emitted if there is a publishing change to the online store and the webhook subscriber of the topic is a third-party app). Requires the `read_publications` scope. */
  | "PRODUCT_PUBLICATIONS_UPDATE"
  /** The webhook topic for `profiles/create` events. Occurs whenever a delivery profile is created Requires at least one of the following scopes: read_shipping, read_assigned_shipping. */
  | "PROFILES_CREATE"
  /** The webhook topic for `profiles/delete` events. Occurs whenever a delivery profile is deleted Requires at least one of the following scopes: read_shipping, read_assigned_shipping. */
  | "PROFILES_DELETE"
  /** The webhook topic for `profiles/update` events. Occurs whenever a delivery profile is updated Requires at least one of the following scopes: read_shipping, read_assigned_shipping. */
  | "PROFILES_UPDATE"
  /** The webhook topic for `publications/delete` events. Occurs whenever a publication is deleted. Requires the `read_publications` scope. */
  | "PUBLICATIONS_DELETE"
  /** The webhook topic for `refunds/create` events. Occurs whenever a new refund is created without errors on an order, independent from the movement of money. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders. */
  | "REFUNDS_CREATE"
  /** The webhook topic for `returns/approve` events. Occurs whenever a return is approved. This means `Return.status` is `OPEN`. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders. */
  | "RETURNS_APPROVE"
  /** The webhook topic for `returns/cancel` events. Occurs whenever a return is canceled. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_returns, read_marketplace_returns, read_buyer_membership_orders. */
  | "RETURNS_CANCEL"
  /** The webhook topic for `returns/close` events. Occurs whenever a return is closed. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_returns, read_marketplace_returns, read_buyer_membership_orders. */
  | "RETURNS_CLOSE"
  /** The webhook topic for `returns/decline` events. Occurs whenever a return is declined. This means `Return.status` is `DECLINED`. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders. */
  | "RETURNS_DECLINE"
  /** The webhook topic for `returns/process` events. Occurs whenever a return is processed. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders. */
  | "RETURNS_PROCESS"
  /** The webhook topic for `returns/reopen` events. Occurs whenever a closed return is reopened. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_returns, read_marketplace_returns, read_buyer_membership_orders. */
  | "RETURNS_REOPEN"
  /** The webhook topic for `returns/request` events. Occurs whenever a return is requested. This means `Return.status` is `REQUESTED`. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders. */
  | "RETURNS_REQUEST"
  /** The webhook topic for `returns/update` events. Occurs whenever a return is updated. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders. */
  | "RETURNS_UPDATE"
  /**
   * The webhook topic for `reverse_deliveries/attach_deliverable` events. Occurs whenever a deliverable is attached to a reverse delivery.
   * This occurs when a reverse delivery is created or updated with delivery metadata.
   * Metadata includes the delivery method, label, and tracking information associated with a reverse delivery.
   *  Requires at least one of the following scopes: read_returns, read_marketplace_returns.
   */
  | "REVERSE_DELIVERIES_ATTACH_DELIVERABLE"
  /**
   * The webhook topic for `reverse_fulfillment_orders/dispose` events. Occurs whenever a disposition is made on a reverse fulfillment order.
   * This includes dispositions made on reverse deliveries that are associated with the reverse fulfillment order.
   *  Requires at least one of the following scopes: read_returns, read_marketplace_returns.
   */
  | "REVERSE_FULFILLMENT_ORDERS_DISPOSE"
  /** The webhook topic for `scheduled_product_listings/add` events. Occurs whenever a product is scheduled to be published. Requires the `read_product_listings` scope. */
  | "SCHEDULED_PRODUCT_LISTINGS_ADD"
  /** The webhook topic for `scheduled_product_listings/remove` events. Occurs whenever a product is no longer scheduled to be published. Requires the `read_product_listings` scope. */
  | "SCHEDULED_PRODUCT_LISTINGS_REMOVE"
  /** The webhook topic for `scheduled_product_listings/update` events. Occurs whenever a product's scheduled availability date changes. Requires the `read_product_listings` scope. */
  | "SCHEDULED_PRODUCT_LISTINGS_UPDATE"
  /** The webhook topic for `segments/create` events. Occurs whenever a segment is created. Requires the `read_customers` scope. */
  | "SEGMENTS_CREATE"
  /** The webhook topic for `segments/delete` events. Occurs whenever a segment is deleted. Requires the `read_customers` scope. */
  | "SEGMENTS_DELETE"
  /** The webhook topic for `segments/update` events. Occurs whenever a segment is updated. Requires the `read_customers` scope. */
  | "SEGMENTS_UPDATE"
  /** The webhook topic for `selling_plan_groups/create` events. Notifies when a SellingPlanGroup is created. Requires the `read_products` scope. */
  | "SELLING_PLAN_GROUPS_CREATE"
  /** The webhook topic for `selling_plan_groups/delete` events. Notifies when a SellingPlanGroup is deleted. Requires the `read_products` scope. */
  | "SELLING_PLAN_GROUPS_DELETE"
  /** The webhook topic for `selling_plan_groups/update` events. Notifies when a SellingPlanGroup is updated. Requires the `read_products` scope. */
  | "SELLING_PLAN_GROUPS_UPDATE"
  /** The webhook topic for `shipping_addresses/create` events. Occurs whenever a shipping address is created. Requires the `read_shipping` scope. */
  | "SHIPPING_ADDRESSES_CREATE"
  /** The webhook topic for `shipping_addresses/update` events. Occurs whenever a shipping address is updated. Requires the `read_shipping` scope. */
  | "SHIPPING_ADDRESSES_UPDATE"
  /** The webhook topic for `shop/update` events. Occurs whenever a shop is updated. */
  | "SHOP_UPDATE"
  /** The webhook topic for `subscription_billing_attempts/challenged` events. Occurs when the financial instutition challenges the subscripttion billing attempt charge as per 3D Secure. Requires the `read_own_subscription_contracts` scope. */
  | "SUBSCRIPTION_BILLING_ATTEMPTS_CHALLENGED"
  /** The webhook topic for `subscription_billing_attempts/failure` events. Occurs whenever a subscription billing attempt fails. Requires the `read_own_subscription_contracts` scope. */
  | "SUBSCRIPTION_BILLING_ATTEMPTS_FAILURE"
  /** The webhook topic for `subscription_billing_attempts/success` events. Occurs whenever a subscription billing attempt succeeds. Requires the `read_own_subscription_contracts` scope. */
  | "SUBSCRIPTION_BILLING_ATTEMPTS_SUCCESS"
  /** The webhook topic for `subscription_billing_cycles/skip` events. Occurs whenever a subscription contract billing cycle is skipped. Requires the `read_own_subscription_contracts` scope. */
  | "SUBSCRIPTION_BILLING_CYCLES_SKIP"
  /** The webhook topic for `subscription_billing_cycles/unskip` events. Occurs whenever a subscription contract billing cycle is unskipped. Requires the `read_own_subscription_contracts` scope. */
  | "SUBSCRIPTION_BILLING_CYCLES_UNSKIP"
  /** The webhook topic for `subscription_billing_cycle_edits/create` events. Occurs whenever a subscription contract billing cycle is edited. Requires the `read_own_subscription_contracts` scope. */
  | "SUBSCRIPTION_BILLING_CYCLE_EDITS_CREATE"
  /** The webhook topic for `subscription_billing_cycle_edits/delete` events. Occurs whenever a subscription contract billing cycle edit is deleted. Requires the `read_own_subscription_contracts` scope. */
  | "SUBSCRIPTION_BILLING_CYCLE_EDITS_DELETE"
  /** The webhook topic for `subscription_billing_cycle_edits/update` events. Occurs whenever a subscription contract billing cycle edit is updated. Requires the `read_own_subscription_contracts` scope. */
  | "SUBSCRIPTION_BILLING_CYCLE_EDITS_UPDATE"
  /** The webhook topic for `subscription_contracts/activate` events. Occurs when a subscription contract is activated. Requires the `read_own_subscription_contracts` scope. */
  | "SUBSCRIPTION_CONTRACTS_ACTIVATE"
  /** The webhook topic for `subscription_contracts/cancel` events. Occurs when a subscription contract is canceled. Requires the `read_own_subscription_contracts` scope. */
  | "SUBSCRIPTION_CONTRACTS_CANCEL"
  /** The webhook topic for `subscription_contracts/create` events. Occurs whenever a subscription contract is created. Requires the `read_own_subscription_contracts` scope. */
  | "SUBSCRIPTION_CONTRACTS_CREATE"
  /** The webhook topic for `subscription_contracts/expire` events. Occurs when a subscription contract expires. Requires the `read_own_subscription_contracts` scope. */
  | "SUBSCRIPTION_CONTRACTS_EXPIRE"
  /** The webhook topic for `subscription_contracts/fail` events. Occurs when a subscription contract is failed. Requires the `read_own_subscription_contracts` scope. */
  | "SUBSCRIPTION_CONTRACTS_FAIL"
  /** The webhook topic for `subscription_contracts/pause` events. Occurs when a subscription contract is paused. Requires the `read_own_subscription_contracts` scope. */
  | "SUBSCRIPTION_CONTRACTS_PAUSE"
  /** The webhook topic for `subscription_contracts/update` events. Occurs whenever a subscription contract is updated. Requires the `read_own_subscription_contracts` scope. */
  | "SUBSCRIPTION_CONTRACTS_UPDATE"
  /** The webhook topic for `tax_partners/update` events. Occurs whenever a tax partner is created or updated. Requires the `read_taxes` scope. */
  | "TAX_PARTNERS_UPDATE"
  /** The webhook topic for `tax_services/create` events. Occurs whenever a tax service is created. Requires the `read_taxes` scope. */
  | "TAX_SERVICES_CREATE"
  /** The webhook topic for `tax_services/update` events. Occurs whenver a tax service is updated. Requires the `read_taxes` scope. */
  | "TAX_SERVICES_UPDATE"
  /** The webhook topic for `tender_transactions/create` events. Occurs when a tender transaction is created. Requires the `read_orders` scope. */
  | "TENDER_TRANSACTIONS_CREATE"
  /** The webhook topic for `themes/create` events. Occurs whenever a theme is created. Does not occur when theme files are created. Requires the `read_themes` scope. */
  | "THEMES_CREATE"
  /** The webhook topic for `themes/delete` events. Occurs whenever a theme is deleted. Does not occur when theme files are deleted. Requires the `read_themes` scope. */
  | "THEMES_DELETE"
  /** The webhook topic for `themes/publish` events. Occurs whenever a theme with the main or mobile (deprecated) role is published. Requires the `read_themes` scope. */
  | "THEMES_PUBLISH"
  /** The webhook topic for `themes/update` events. Occurs whenever a theme is updated. Does not occur when theme files are updated. Requires the `read_themes` scope. */
  | "THEMES_UPDATE"
  /** The webhook topic for `variants/in_stock` events. Occurs whenever a variant becomes in stock. Online channels receive this webhook only when the variant becomes in stock online. Requires the `read_products` scope. */
  | "VARIANTS_IN_STOCK"
  /** The webhook topic for `variants/out_of_stock` events. Occurs whenever a variant becomes out of stock. Online channels receive this webhook only when the variant becomes out of stock online. Requires the `read_products` scope. */
  | "VARIANTS_OUT_OF_STOCK"
  | "%future added value"

/** Return type for `webhookSubscriptionUpdate` mutation. */
export interface ShopifyWebhookSubscriptionUpdatePayload {
  __typename?: "WebhookSubscriptionUpdatePayload"
  /** The list of errors that occurred from executing the mutation. */
  userErrors: Array<ShopifyUserError>
  /** The webhook subscription that was updated. */
  webhookSubscription?: Maybe<ShopifyWebhookSubscription>
}

/** A weight, which includes a numeric value and a unit of measurement. */
export interface ShopifyWeight {
  __typename?: "Weight"
  /** The unit of measurement for `value`. */
  unit: ShopifyWeightUnit
  /** The weight value using the unit system specified with `unit`. */
  value: Scalars["Float"]["output"]
}

/** The input fields for the weight unit and value inputs. */
export interface ShopifyWeightInput {
  /** Unit of measurement for `value`. */
  unit: ShopifyWeightUnit
  /** The weight value using the unit system specified with `weight_unit`. */
  value: Scalars["Float"]["input"]
}

/** Units of measurement for weight. */
export type ShopifyWeightUnit =
  /** Metric system unit of mass. */
  | "GRAMS"
  /** 1 kilogram equals 1000 grams. */
  | "KILOGRAMS"
  /** Imperial system unit of mass. */
  | "OUNCES"
  /** 1 pound equals 16 ounces. */
  | "POUNDS"
  | "%future added value"

export type ShopifySyncOrdersQueryVariables = Exact<{
  first: Scalars["Int"]["input"]
  after?: InputMaybe<Scalars["String"]["input"]>
  query?: InputMaybe<Scalars["String"]["input"]>
}>

export type ShopifySyncOrdersQuery = {
  __typename?: "QueryRoot"
  orders: {
    __typename?: "OrderConnection"
    edges: Array<{
      __typename?: "OrderEdge"
      node: {
        __typename?: "Order"
        id: string
        legacyResourceId: string
        name: string
        createdAt: string
        processedAt: string
        updatedAt: string
        displayFinancialStatus?: ShopifyOrderDisplayFinancialStatus | null
        sourceName?: string | null
        test: boolean
        subtotalPriceSet?: {
          __typename?: "MoneyBag"
          presentmentMoney: {
            __typename?: "MoneyV2"
            amount: number
            currencyCode: ShopifyCurrencyCode
          }
        } | null
        totalPriceSet: {
          __typename?: "MoneyBag"
          presentmentMoney: {
            __typename?: "MoneyV2"
            amount: number
            currencyCode: ShopifyCurrencyCode
          }
        }
        totalTaxSet?: {
          __typename?: "MoneyBag"
          presentmentMoney: {
            __typename?: "MoneyV2"
            amount: number
            currencyCode: ShopifyCurrencyCode
          }
        } | null
        totalDiscountsSet?: {
          __typename?: "MoneyBag"
          presentmentMoney: {
            __typename?: "MoneyV2"
            amount: number
            currencyCode: ShopifyCurrencyCode
          }
        } | null
        totalShippingPriceSet: {
          __typename?: "MoneyBag"
          presentmentMoney: {
            __typename?: "MoneyV2"
            amount: number
            currencyCode: ShopifyCurrencyCode
          }
        }
        channelInformation?: {
          __typename?: "ChannelInformation"
          channelId: string
          displayName?: string | null
        } | null
        transactions: Array<{
          __typename?: "OrderTransaction"
          id: string
          kind: ShopifyOrderTransactionKind
          status: ShopifyOrderTransactionStatus
          processedAt?: string | null
          createdAt: string
          gateway?: string | null
          amountSet: {
            __typename?: "MoneyBag"
            presentmentMoney: {
              __typename?: "MoneyV2"
              amount: number
              currencyCode: ShopifyCurrencyCode
            }
          }
        }>
      }
    }>
    pageInfo: {
      __typename?: "PageInfo"
      hasNextPage: boolean
      endCursor?: string | null
    }
  }
}

export const SyncOrdersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "SyncOrders" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "first" },
          },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "after" },
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "query" },
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "orders" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "first" },
                },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "after" },
                },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "query" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "query" },
                },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "sortKey" },
                value: { kind: "EnumValue", value: "UPDATED_AT" },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "reverse" },
                value: { kind: "BooleanValue", value: false },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "edges" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "node" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "id" },
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "legacyResourceId" },
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "name" },
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "createdAt" },
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "processedAt" },
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "updatedAt" },
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "subtotalPriceSet" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: {
                                      kind: "Name",
                                      value: "presentmentMoney",
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "amount",
                                          },
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "currencyCode",
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "totalPriceSet" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: {
                                      kind: "Name",
                                      value: "presentmentMoney",
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "amount",
                                          },
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "currencyCode",
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "totalTaxSet" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: {
                                      kind: "Name",
                                      value: "presentmentMoney",
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "amount",
                                          },
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "currencyCode",
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: "Field",
                              name: {
                                kind: "Name",
                                value: "totalDiscountsSet",
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: {
                                      kind: "Name",
                                      value: "presentmentMoney",
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "amount",
                                          },
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "currencyCode",
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: "Field",
                              name: {
                                kind: "Name",
                                value: "totalShippingPriceSet",
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: {
                                      kind: "Name",
                                      value: "presentmentMoney",
                                    },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "amount",
                                          },
                                        },
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "currencyCode",
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: "Field",
                              name: {
                                kind: "Name",
                                value: "displayFinancialStatus",
                              },
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "sourceName" },
                            },
                            {
                              kind: "Field",
                              name: {
                                kind: "Name",
                                value: "channelInformation",
                              },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "channelId" },
                                  },
                                  {
                                    kind: "Field",
                                    name: {
                                      kind: "Name",
                                      value: "displayName",
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "test" },
                            },
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "transactions" },
                              arguments: [
                                {
                                  kind: "Argument",
                                  name: { kind: "Name", value: "first" },
                                  value: { kind: "IntValue", value: "50" },
                                },
                              ],
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "id" },
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "kind" },
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "status" },
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "amountSet" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "Field",
                                          name: {
                                            kind: "Name",
                                            value: "presentmentMoney",
                                          },
                                          selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "amount",
                                                },
                                              },
                                              {
                                                kind: "Field",
                                                name: {
                                                  kind: "Name",
                                                  value: "currencyCode",
                                                },
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                  {
                                    kind: "Field",
                                    name: {
                                      kind: "Name",
                                      value: "processedAt",
                                    },
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "createdAt" },
                                  },
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "gateway" },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "pageInfo" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "hasNextPage" },
                      },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "endCursor" },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  ShopifySyncOrdersQuery,
  ShopifySyncOrdersQueryVariables
>
